{"version":3,"sources":["webpack://JitsiMeetJS/webpack/universalModuleDefinition","webpack://JitsiMeetJS/webpack/bootstrap","webpack://JitsiMeetJS/./service/xmpp/XMPPEvents.js","webpack://JitsiMeetJS/./node_modules/strophe.js/strophe.js","webpack://JitsiMeetJS/./JitsiConferenceEvents.js","webpack://JitsiMeetJS/./modules/browser/index.js","webpack://JitsiMeetJS/./node_modules/jitsi-meet-logger/lib/index.js","webpack://JitsiMeetJS/./modules/statistics/statistics.js","webpack://JitsiMeetJS/./modules/xmpp/SDPUtil.js","webpack://JitsiMeetJS/./service/RTC/RTCEvents.js","webpack://JitsiMeetJS/./service/statistics/AnalyticsEvents.js","webpack://JitsiMeetJS/./service/RTC/MediaType.js","webpack://JitsiMeetJS/./modules/RTC/RTCUtils.js","webpack://JitsiMeetJS/./modules/util/GlobalOnErrorHandler.js","webpack://JitsiMeetJS/./JitsiTrackErrors.js","webpack://JitsiMeetJS/./modules/RTC/RTC.js","webpack://JitsiMeetJS/./service/RTC/VideoType.js","webpack://JitsiMeetJS/./JitsiTrackError.js","webpack://JitsiMeetJS/./JitsiTrackEvents.js","webpack://JitsiMeetJS/./JitsiConferenceErrors.js","webpack://JitsiMeetJS/./modules/xmpp/SDP.js","webpack://JitsiMeetJS/./node_modules/js-utils/browser-detection/browsers.js","webpack://JitsiMeetJS/./node_modules/js-utils/browser-detection/BrowserDetection.js","webpack://JitsiMeetJS/./node_modules/js-utils/index.js","webpack://JitsiMeetJS/./modules/videosipgw/VideoSIPGWConstants.js","webpack://JitsiMeetJS/./JitsiConnectionEvents.js","webpack://JitsiMeetJS/./node_modules/sdp-transform/lib/index.js","webpack://JitsiMeetJS/./service/statistics/Events.js","webpack://JitsiMeetJS/./modules/util/Listenable.js","webpack://JitsiMeetJS/./modules/settings/Settings.js","webpack://JitsiMeetJS/./service/connectivity/ConnectionQualityEvents.js","webpack://JitsiMeetJS/./modules/xmpp/SdpTransformUtil.js","webpack://JitsiMeetJS/./modules/proxyconnection/constants.js","webpack://JitsiMeetJS/./node_modules/events/events.js","webpack://JitsiMeetJS/./service/RTC/Resolutions.js","webpack://JitsiMeetJS/./modules/xmpp/JingleSessionState.js","webpack://JitsiMeetJS/./modules/statistics/CallStats.js","webpack://JitsiMeetJS/./modules/util/RandomUtil.js","webpack://JitsiMeetJS/./modules/xmpp/ConnectionPlugin.js","webpack://JitsiMeetJS/./modules/xmpp/xmpp.js","webpack://JitsiMeetJS/./JitsiConnectionErrors.js","webpack://JitsiMeetJS/./service/RTC/SignalingEvents.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/utils.js","webpack://JitsiMeetJS/./service/RTC/CameraFacingMode.js","webpack://JitsiMeetJS/./modules/RTC/ScreenObtainer.js","webpack://JitsiMeetJS/./modules/connectivity/ParticipantConnectionStatus.js","webpack://JitsiMeetJS/./modules/recording/recordingXMLUtils.js","webpack://JitsiMeetJS/(webpack)/buildin/global.js","webpack://JitsiMeetJS/./modules/xmpp/JingleSessionPC.js","webpack://JitsiMeetJS/./JitsiMediaDevicesEvents.js","webpack://JitsiMeetJS/./node_modules/bowser/src/bowser.js","webpack://JitsiMeetJS/./modules/xmpp/SDPDiffer.js","webpack://JitsiMeetJS/./node_modules/process/browser.js","webpack://JitsiMeetJS/./service/e2eping/E2ePingEvents.js","webpack://JitsiMeetJS/./modules/statistics/LocalStatsCollector.js","webpack://JitsiMeetJS/./modules/util/ScriptUtil.js","webpack://JitsiMeetJS/./JitsiTranscriptionStatus.js","webpack://JitsiMeetJS/./modules/RTC/JitsiTrack.js","webpack://JitsiMeetJS/./modules/util/MathUtil.js","webpack://JitsiMeetJS/./modules/statistics/SpeakerStats.js","webpack://JitsiMeetJS/./service/authentication/AuthenticationEvents.js","webpack://JitsiMeetJS/./modules/RTC/JitsiLocalTrack.js","webpack://JitsiMeetJS/./modules/recording/JibriSession.js","webpack://JitsiMeetJS/./JitsiMediaDevices.js","webpack://JitsiMeetJS/./node_modules/jitsi-meet-logger/lib/Logger.js","webpack://JitsiMeetJS/./node_modules/sdp/sdp.js","webpack://JitsiMeetJS/./node_modules/sdp-transform/lib/grammar.js","webpack://JitsiMeetJS/./modules/transcription/audioRecorder.js","webpack://JitsiMeetJS/./modules/util/AuthUtil.js","webpack://JitsiMeetJS/./JitsiConnection.js","webpack://JitsiMeetJS/./JitsiConference.js","webpack://JitsiMeetJS/./node_modules/lodash.isequal/index.js","webpack://JitsiMeetJS/./JitsiConferenceEventManager.js","webpack://JitsiMeetJS/./modules/util/EventEmitterForwarder.js","webpack://JitsiMeetJS/./modules/statistics/AnalyticsAdapter.js","webpack://JitsiMeetJS/./modules/browser/BrowserCapabilities.js","webpack://JitsiMeetJS/./node_modules/js-md5/src/md5.js","webpack://JitsiMeetJS/./modules/util/UsernameGenerator.js","webpack://JitsiMeetJS/./modules/statistics/RTPStatsCollector.js","webpack://JitsiMeetJS/./JitsiParticipant.js","webpack://JitsiMeetJS/./authenticateAndUpgradeRole.js","webpack://JitsiMeetJS/./modules/xmpp/strophe.emuc.js","webpack://JitsiMeetJS/./modules/xmpp/ChatRoom.js","webpack://JitsiMeetJS/./modules/xmpp/moderator.js","webpack://JitsiMeetJS/./modules/xmpp/strophe.jingle.js","webpack://JitsiMeetJS/./modules/util/StringUtils.js","webpack://JitsiMeetJS/./modules/xmpp/JingleSession.js","webpack://JitsiMeetJS/./modules/xmpp/SignalingLayerImpl.js","webpack://JitsiMeetJS/./service/RTC/SignalingLayer.js","webpack://JitsiMeetJS/./modules/util/AsyncQueue.js","webpack://JitsiMeetJS/./node_modules/async/lib/async.js","webpack://JitsiMeetJS/./modules/xmpp/strophe.util.js","webpack://JitsiMeetJS/./modules/xmpp/strophe.ping.js","webpack://JitsiMeetJS/./modules/xmpp/strophe.rayo.js","webpack://JitsiMeetJS/./modules/xmpp/strophe.logger.js","webpack://JitsiMeetJS/./modules/xmpp/StropheBoshLastSuccess.js","webpack://JitsiMeetJS/./modules/xmpp/Caps.js","webpack://JitsiMeetJS/./modules/DTMF/JitsiDTMFManager.js","webpack://JitsiMeetJS/./modules/P2PDominantSpeakerDetection.js","webpack://JitsiMeetJS/./modules/RTC/BridgeChannel.js","webpack://JitsiMeetJS/./modules/RTC/TraceablePeerConnection.js","webpack://JitsiMeetJS/./modules/RTC/JitsiRemoteTrack.js","webpack://JitsiMeetJS/./modules/RTC/LocalSdpMunger.js","webpack://JitsiMeetJS/./modules/xmpp/RtxModifier.js","webpack://JitsiMeetJS/./modules/xmpp/SdpConsistency.js","webpack://JitsiMeetJS/./modules/TalkMutedDetection.js","webpack://JitsiMeetJS/./modules/connectivity/ConnectionQuality.js","webpack://JitsiMeetJS/./modules/connectivity/IceFailedNotification.js","webpack://JitsiMeetJS/./modules/e2eping/e2eping.js","webpack://JitsiMeetJS/./modules/event/Jvb121EventGenerator.js","webpack://JitsiMeetJS/./modules/recording/RecordingManager.js","webpack://JitsiMeetJS/./modules/rttmonitor/rttmonitor.js","webpack://JitsiMeetJS/./modules/statistics/AvgRTPStatsReporter.js","webpack://JitsiMeetJS/./modules/statistics/AudioOutputProblemDetector.js","webpack://JitsiMeetJS/./modules/statistics/SpeakerStatsCollector.js","webpack://JitsiMeetJS/./modules/transcription/transcriber.js","webpack://JitsiMeetJS/./modules/version/ComponentsVersions.js","webpack://JitsiMeetJS/./modules/videosipgw/VideoSIPGW.js","webpack://JitsiMeetJS/./modules/videosipgw/JitsiVideoSIPGWSession.js","webpack://JitsiMeetJS/./modules/recording/recordingConstants.js","webpack://JitsiMeetJS/./modules/proxyconnection/ProxyConnectionService.js","webpack://JitsiMeetJS/./modules/proxyconnection/ProxyConnectionPC.js","webpack://JitsiMeetJS/./index.js","webpack://JitsiMeetJS/./JitsiMeetJS.js","webpack://JitsiMeetJS/./node_modules/jitsi-meet-logger/lib/LogCollector.js","webpack://JitsiMeetJS/(webpack)/buildin/module.js","webpack://JitsiMeetJS/(webpack)/buildin/amd-define.js","webpack://JitsiMeetJS/(webpack)/buildin/amd-options.js","webpack://JitsiMeetJS/./node_modules/current-executing-script/dist/currentExecutingScript.js","webpack://JitsiMeetJS/./service/statistics/constants.js","webpack://JitsiMeetJS/./node_modules/strophejs-plugin-disco/lib/strophe.disco.js","webpack://JitsiMeetJS/./node_modules/timers-browserify/main.js","webpack://JitsiMeetJS/./node_modules/setimmediate/setImmediate.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/adapter_core.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/adapter_factory.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/chrome/chrome_shim.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/chrome/getusermedia.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/edge/edge_shim.js","webpack://JitsiMeetJS/./node_modules/rtcpeerconnection-shim/rtcpeerconnection.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/edge/getusermedia.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/firefox/firefox_shim.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/firefox/getusermedia.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/safari/safari_shim.js","webpack://JitsiMeetJS/./node_modules/webrtc-adapter/src/js/common_shim.js","webpack://JitsiMeetJS/./node_modules/sdp-transform/lib/parser.js","webpack://JitsiMeetJS/./node_modules/sdp-transform/lib/writer.js","webpack://JitsiMeetJS/./node_modules/@jitsi/sdp-interop/lib/index.js","webpack://JitsiMeetJS/./node_modules/@jitsi/sdp-interop/lib/interop.js","webpack://JitsiMeetJS/./node_modules/@jitsi/sdp-interop/lib/transform.js","webpack://JitsiMeetJS/./node_modules/@jitsi/sdp-interop/lib/array-equals.js","webpack://JitsiMeetJS/./node_modules/@jitsi/sdp-simulcast/lib/index.js","webpack://JitsiMeetJS/./node_modules/@jitsi/sdp-simulcast/lib/transform-utils.js","webpack://JitsiMeetJS/./modules/transcription/recordingResult.js","webpack://JitsiMeetJS/./modules/transcription/transcriptionServices/SphinxTranscriptionService.js","webpack://JitsiMeetJS/./modules/transcription/transcriptionServices/AbstractTranscriptionService.js","webpack://JitsiMeetJS/./modules/transcription/word.js"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","ADD_ICE_CANDIDATE_FAILED","AUDIO_MUTED_BY_FOCUS","AUTHENTICATION_REQUIRED","BRIDGE_DOWN","CALL_ACCEPTED","CALL_INCOMING","CALL_ENDED","CHAT_ERROR_RECEIVED","CONFERENCE_PROPERTIES_CHANGED","CONNECTION_ESTABLISHED","CONNECTION_FAILED","CONNECTION_INTERRUPTED","CONNECTION_RESTORED","CONNECTION_ICE_FAILED","CONNECTION_STATUS_CHANGED","DISPLAY_NAME_CHANGED","EMUC_ROOM_ADDED","EMUC_ROOM_REMOVED","ETHERPAD","FOCUS_DISCONNECTED","FOCUS_LEFT","GRACEFUL_SHUTDOWN","ICE_RESTARTING","ICE_RESTART_SUCCESS","KICKED","LOCAL_ROLE_CHANGED","MESSAGE_RECEIVED","PRIVATE_MESSAGE_RECEIVED","MUC_MEMBER_BOT_TYPE_CHANGED","MUC_DESTROYED","MUC_JOINED","MUC_MEMBER_JOINED","MUC_MEMBER_LEFT","MUC_LEFT","MUC_ROLE_CHANGED","MUC_LOCK_CHANGED","PARTICIPANT_AUDIO_MUTED","PARTICIPANT_VIDEO_MUTED","PARTICIPANT_VIDEO_TYPE_CHANGED","PARTCIPANT_FEATURES_CHANGED","PASSWORD_REQUIRED","PEERCONNECTION_READY","PHONE_NUMBER_CHANGED","PRESENCE_RECEIVED","PRESENCE_STATUS","PROMPT_FOR_LOGIN","READY_TO_JOIN","RECORDER_STATE_CHANGED","REMOTE_STATS","RENEGOTIATION_FAILED","RESERVATION_ERROR","ROOM_CONNECT_ERROR","ROOM_CONNECT_NOT_ALLOWED_ERROR","ROOM_JOIN_ERROR","ROOM_MAX_USERS_ERROR","SENDING_CHAT_MESSAGE","SENDING_PRIVATE_CHAT_MESSAGE","SESSION_ACCEPT_TIMEOUT","SPEAKER_STATS_RECEIVED","START_MUTED_FROM_FOCUS","SUBJECT_CHANGED","SUSPEND_DETECTED","TRANSCRIPTION_STATUS_CHANGED","TRANSPORT_INFO","VIDEO_SIP_GW_AVAILABILITY_CHANGED","VIDEO_SIP_GW_SESSION_STATE_CHANGED","ICE_CONNECTION_STATE_CHANGED","JSON_MESSAGE_RECEIVED","__WEBPACK_AMD_DEFINE_FACTORY__","__WEBPACK_AMD_DEFINE_ARRAY__","__WEBPACK_AMD_DEFINE_RESULT__","undefined","requirejs","require","undef","main","req","makeMap","handlers","defined","waiting","config","defining","hasOwn","aps","slice","jsSuffixRegExp","hasProp","obj","prop","normalize","baseName","nameParts","nameSegment","mapValue","foundMap","lastIndex","foundI","foundStarMap","starI","j","part","baseParts","split","map","starMap","length","nodeIdCompat","test","replace","charAt","concat","splice","join","makeRequire","relName","forceSync","args","arguments","push","apply","makeLoad","depName","callDep","Error","splitPrefix","prefix","index","indexOf","substring","makeRelParts","makeConfig","relParts","plugin","parts","relResourceName","f","pr","e","id","uri","deps","callback","cjsModule","ret","usingExports","callbackType","load","alt","setTimeout","cfg","_defined","jQuery","this","Function","func","_slice","Array","_concat","_args","isArray","arg","toString","elt","len","from","Number","Math","ceil","floor","forEach","thisArg","T","k","TypeError","O","kValue","keyStr","btoa","input","chr1","chr2","chr3","enc1","enc2","enc3","enc4","output","charCodeAt","isNaN","atob","String","fromCharCode","core_sha1","x","olda","oldb","oldc","oldd","olde","w","a","b","rol","safe_add","sha1_ft","sha1_kt","core_hmac_sha1","data","bkey","str2binb","ipad","opad","hash","y","lsw","num","cnt","str","bin","binb2str","binb2b64","binarray","triplet","b64_hmac_sha1","b64_sha1","str_hmac_sha1","str_sha1","str2binl","md5_cmn","q","md5_ff","md5_gg","md5_hh","md5_ii","core_md5","hexdigest","binl2hex","binl2str","utf16to8","out","addCookies","cookies","cookieName","cookieObj","isObj","cookieValue","expires","domain","path","escape","unescape","document","cookie","SHA1","MD5","utils","Strophe","$build","attrs","Builder","$iq","$pres","VERSION","NS","HTTPBIND","BOSH","CLIENT","AUTH","ROSTER","PROFILE","DISCO_INFO","DISCO_ITEMS","MUC","SASL","STREAM","FRAMING","BIND","SESSION","STANZAS","XHTML_IM","XHTML","tags","attributes","blockquote","br","cite","em","img","li","ol","span","strong","ul","body","css","validTag","tag","validAttribute","attribute","validCSS","style","Status","ERROR","CONNECTING","CONNFAIL","AUTHENTICATING","AUTHFAIL","CONNECTED","DISCONNECTED","DISCONNECTING","ATTACHED","REDIRECT","CONNTIMEOUT","ErrorCondition","BAD_FORMAT","CONFLICT","MISSING_JID_NODE","NO_AUTH_MECH","UNKNOWN_REASON","LogLevel","DEBUG","INFO","WARN","FATAL","ElementType","NORMAL","TEXT","CDATA","FRAGMENT","TIMEOUT","SECONDARY_TIMEOUT","addNamespace","forEachChild","elem","elemName","childNode","childNodes","nodeType","isTagEqual","el","tagName","_xmlGenerator","_makeGenerator","doc","implementation","createDocument","documentMode","_getIEXmlDom","appendChild","createElement","xmlGenerator","docStrings","ActiveXObject","xmlElement","node","xmlTextNode","attr","setAttribute","xmlescape","text","xmlunescape","createTextNode","xmlHtmlNode","html","DOMParser","parseFromString","async","loadXML","getText","nodeValue","copyElement","nodeName","createHtml","cssAttrs","cssName","cssValue","toLowerCase","getAttribute","cssText","createDocumentFragment","escapeNode","unescapeNode","getNodeFromJid","jid","getDomainFromJid","bare","getBareJidFromJid","getResourceFromJid","_handleError","stack","fatal","sourceURL","handler","line","message","fileName","lineNumber","log","level","msg","console","error","debug","info","warn","serialize","result","tree","child","_requestId","_connectionPlugins","addConnectionPlugin","ptype","xmlns","nodeTree","up","parentNode","moreattrs","removeAttribute","cnode","impNode","xmlGen","importNode","newElem","h","fragment","innerHTML","xhtml","Handler","type","options","matchBareFromJid","ignoreNamespaceFragment","matchBare","user","getNamespace","elNamespace","namespaceMatch","nsMatch","that","isMatch","elem_type","run","TimedHandler","period","lastCalled","Date","getTime","reset","Connection","service","proto","protocol","_proto","Websocket","Bosh","features","_sasl_data","do_session","do_bind","timedHandlers","removeTimeds","removeHandlers","addTimeds","addHandlers","protocolErrorHandlers","HTTP","websocket","_idleTimeout","_disconnectTimeout","authenticated","connected","disconnecting","do_authentication","paused","restored","_data","_uniqueId","_sasl_success_handler","_sasl_failure_handler","_sasl_challenge_handler","maxRetries","_onIdle","registerSASLMechanisms","mechanisms","F","init","_reset","_requests","pause","resume","getUniqueId","suffix","uuid","random","addProtocolErrorHandler","status_code","connect","pass","wait","hold","route","authcid","authzid","servtype","connect_callback","_changeConnectStatus","_connect","attach","sid","rid","wind","_attach","restore","_sessionCachingSupported","_restore","JSON","sessionStorage","setItem","removeItem","xmlInput","xmlOutput","rawInput","rawOutput","nextValidRid","send","_queueData","_send","flush","clearTimeout","sendPresence","errback","timeout","timeoutHandler","addHandler","stanza","deleteTimedHandler","addTimedHandler","deleteHandler","sendIQ","iqtype","element","_sendRestart","thand","handRef","hand","SASLAnonymous","SASLExternal","SASLMD5","SASLOAuthBearer","SASLXOAuth2","SASLPlain","SASLSHA1","registerSASLMechanism","mechanism","disconnect","reason","pres","_addSysTimedHandler","_onDisconnectTimeout","_disconnect","_abortAllRequests","_doDisconnect","status","condition","statusChanged","err","_dataRecv","raw","_reqToData","strip","pop","_emptyQueue","cond","conflict","getElementsByTagName","UNKOWN_REASON","newList","_connect_cb","_callback","bodyWrap","getElementsByTagNameNS","mech","matched","authenticate","_no_auth_received","sortMechanismsByPriority","higher","swap","priority","_attemptSASLAuth","mechanism_found","_addSysHandler","_sasl_success_cb","_sasl_failure_cb","_sasl_challenge_cb","_sasl_mechanism","onStart","request_auth_exchange","isClientFirst","response","onChallenge","_attemptLegacyAuth","_auth1_cb","to","challenge","iq","_auth2_cb","serverSignature","matches","match","onSuccess","streamfeature_handlers","wrapper","_sasl_auth1_cb","_sasl_bind_cb","resource","jidNode","_sasl_session_cb","onFailure","now","SASLMechanism","connection","_connection","auth_str","test_cnonce","cnonce","nonce","salt","iter","Hi","U","U_old","clientKey","serverKey","clientSignature","responseText","authMessage","attribMatch","substr","_quote","realm","host","digest_uri","cred","A1","A2","$msg","core","Request","sends","xmlData","origFunc","date","NaN","abort","dead","age","timeDead","xhr","_newXHR","getResponse","responseXML","documentElement","querySelector","textContent","XMLHttpRequest","overrideMimeType","onreadystatechange","_conn","errors","inactivity","lastResponseHeaders","_buildBody","keepalive","_cacheSession","xml:lang","content","ver","xmpp:version","xmlns:xmpp","_onRequestStateChange","_throttledRequestHandler","session","parse","getItem","stringify","typ","parseInt","_sendTerminate","_callProtocolErrorHandlers","err_callback","reqStatus","_getRequestStatus","_hitError","xmpp:restart","time_elapsed","def","readyState","getAllResponseHeaders","valid_request","too_many_retries","_removeRequest","reqIs0","_restartRequest","_processRequest","self","primaryTimeout","secondaryTimeout","requestCompletedWithServerError","contentType","open","sync","setRequestHeader","withCredentials","e2","sendFunc","customHeaders","headers","header","backoff","min","pow","abs","new_service","location","pathname","_buildStream","version","_check_streamerror","connectstatus","errorString","_closeSocket","socket","WebSocket","onopen","_onOpen","onerror","_onError","onclose","_onClose","onmessage","_connect_cb_wrapper","_handleStreamStart","streamStart","parsedMessage","see_uri","string","_streamWrap","_onMessage","CLOSED","close","closeString","code","rawStanza","search","firstChild","start","startString","__webpack_exports__","AUTH_STATUS_CHANGED","AVATAR_CHANGED","BEFORE_STATISTICS_DISPOSED","CONFERENCE_ERROR","CONFERENCE_FAILED","CONFERENCE_JOINED","CONFERENCE_LEFT","DATA_CHANNEL_OPENED","DOMINANT_SPEAKER_CHANGED","DTMF_SUPPORT_CHANGED","ENDPOINT_MESSAGE_RECEIVED","JVB121_STATUS","PARTICIPANT_KICKED","LAST_N_ENDPOINTS_CHANGED","LOCK_STATE_CHANGED","SERVER_REGION_CHANGED","PARTICIPANT_CONN_STATUS_CHANGED","PARTICIPANT_PROPERTY_CHANGED","P2P_STATUS","PROPERTIES_CHANGED","START_MUTED_POLICY_CHANGED","STARTED_MUTED","TALK_WHILE_MUTED","TRACK_ADDED","TRACK_AUDIO_LEVEL_CHANGED","TRACK_MUTE_CHANGED","TRACK_REMOVED","USER_JOINED","USER_LEFT","USER_ROLE_CHANGED","USER_STATUS_CHANGED","BOT_TYPE_CHANGED","_BrowserCapabilities__WEBPACK_IMPORTED_MODULE_0__","BrowserCapabilities","Logger","LogCollector","idLoggers","loggers","curLevel","levels","TRACE","addGlobalTransport","transport","removeGlobalTransport","setGlobalOptions","getLogger","transports","logger","setLogLevelById","setLevel","setLogLevel","_instances","__filename","isCallstatsLoaded","_initCallStatsBackend","CallStats","isBackendInitialized","userName","Settings","callStatsUserName","initBackend","callStatsID","callStatsSecret","swapUserNameAndAlias","callStatsAliasName","aliasName","applicationName","getWiFiStatsMethod","confID","Statistics","xmpp","rtpStatsMap","Map","eventEmitter","EventEmitter","callStatsIntegrationEnabled","disableThirdPartyRequests","browser","isReactNative","ScriptUtil","loadScript","customScriptUrl","loadCallStatsAPI","callStatsConfIDNamespace","callsStatsInstances","instances","add","audioLevelsEnabled","disableAudioLevels","audioLevelsInterval","analytics","Set","startRemoteStats","peerconnection","stopRemoteStats","rtpStats","RTPStats","set","localStats","startLocalStats","stream","LocalStats","addAudioLevelListener","listener","on","StatisticsEvents","removeAudioLevelListener","removeListener","addBeforeDisposedListener","removeBeforeDisposedListener","addConnectionStatsListener","removeConnectionStatsListener","addByteSentStatsListener","removeByteSentStatsListener","dispose","size","emit","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","values","iterator","next","done","callStats","stopCallStats","tpc","return","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","keys","tpcId","_stopRemoteStats","removeAllListeners","delete","stopLocalStats","stop","startCallStats","remoteUserID","has","newInstance","_getCallStatsConfID","_getAllCallStatsInstances","csInstances","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","statistics","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","cs","roomName","callStatsInstance","sendTerminateEvent","isCallstatsEnabled","sendConnectionResumeOrHoldEvent","isResume","instance","sendResumeOrHoldEvent","sendIceConnectionFailedEvent","sendMuteEvent","muted","sendScreenSharingEvent","ssrc","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_iterator5","sendDominantSpeakerEvent","roomJid","_iteratorNormalCompletion6","_didIteratorError6","_iteratorError6","_step6","_iterator6","sendActiveDeviceListEvent","devicesData","globalSet","_iteratorNormalCompletion7","_didIteratorError7","_iteratorError7","_step7","_iterator7","associateStreamWithVideoTag","isLocal","userId","usageLabel","containerId","sendGetUserMediaFailed","JitsiTrackError","gum","constraintName","constraints","formatJitsiTrackErrorForCallStats","_iteratorNormalCompletion8","_didIteratorError8","_iteratorError8","_step8","_iterator8","sendCreateOfferFailed","sendCreateAnswerFailed","sendSetLocalDescFailed","sendSetRemoteDescFailed","sendAddIceCandidateFailed","sendLog","globalSubSet","_iteratorNormalCompletion9","_didIteratorError9","_iteratorError9","_step9","_iterator9","stats","_iteratorNormalCompletion10","_didIteratorError10","_iteratorError10","_step10","_iterator10","csPerStats","sendApplicationLog","sendFeedback","overall","comment","sendEvent","FEEDBACK","rating","LOCAL_JID","reportGlobalError","sendAnalyticsAndLog","event","eventToLog","properties","_typeof","sendAnalytics","eventName","SDPUtil","filterSpecialChars","iceparams","mediadesc","sessiondesc","pwd","ufrag","findLine","parseICEUfrag","parseICEPwd","buildICEUfrag","frag","buildICEPwd","parseMID","parseMLine","media","shift","port","fmt","buildMLine","mline","parseRTPMap","clockrate","channels","parseSCTPMap","buildRTPMap","parseCrypto","parseFingerprint","fingerprint","parseFmtp","parseICECandidate","candidate","elems","foundation","component","ip","generation","tcptype","network","buildICECandidate","cand","hasOwnAttribute","parseSSRC","desc","lines","parseRTCPFB","pt","params","parseExtmap","direction","haystack","needle","sessionpart","findLines","needles","candidateToJingle","candidateFromJingle","isFirefox","parsePrimaryVideoSsrc","videoMLine","numSsrcs","ssrcs","ssrcInfo","filter","array","numGroups","ssrcGroups","primarySsrc","fidGroup","find","group","semantics","simGroup","generateSsrc","RandomUtil","randomInt","getSsrcAttribute","mLine","attributeName","ssrcLine","parseGroupSsrcs","ssrcGroup","ssrcStr","getMedia","sdp","getUfrag","ufragLines","startsWith","preferVideoCodec","codecName","payloadType","rtp","codec","payload","payloadTypes","payloads","payloadIndex","unshift","stripVideoCodec","removePts","rtxApts","item","rtxPts","fmtp","_toConsumableArray","keepPts","rtcpFb","CREATE_ANSWER_FAILED","CREATE_OFFER_FAILED","DATA_CHANNEL_OPEN","ENDPOINT_CONN_STATUS_CHANGED","LASTN_ENDPOINT_CHANGED","GRANTED_PERMISSIONS","IS_SELECTED_CHANGED","LASTN_VALUE_CHANGED","LOCAL_TRACK_SSRC_UPDATED","TRACK_ATTACHED","REMOTE_TRACK_ADDED","REMOTE_TRACK_MUTE","REMOTE_TRACK_REMOVED","REMOTE_TRACK_UNMUTE","SET_LOCAL_DESCRIPTION_FAILED","SET_REMOTE_DESCRIPTION_FAILED","AUDIO_OUTPUT_DEVICE_CHANGED","DEVICE_LIST_CHANGED","DEVICE_LIST_WILL_CHANGE","DEVICE_LIST_AVAILABLE","LOCAL_UFRAG_CHANGED","REMOTE_UFRAG_CHANGED","TYPE_OPERATIONAL","TYPE_PAGE","TYPE_TRACK","TYPE_UI","ACTION_JINGLE_RESTART","ACTION_JINGLE_SA_TIMEOUT","ACTION_JINGLE_SI_RECEIVED","ACTION_JINGLE_SI_TIMEOUT","ACTION_JINGLE_TERMINATE","ACTION_JINGLE_TR_RECEIVED","ACTION_JINGLE_TR_SUCCESS","ACTION_P2P_ESTABLISHED","ACTION_P2P_FAILED","ACTION_P2P_SWITCH_TO_JVB","AVAILABLE_DEVICE","CONNECTION_DISCONNECTED","ICE_DURATION","ICE_ESTABLISHMENT_DURATION_DIFF","ICE_STATE_CHANGED","NO_BYTES_SENT","TRACK_UNMUTED","createBridgeDownEvent","action","actionSubject","createConnectionFailedEvent","errorType","errorMessage","details","_objectSpread","error_type","error_message","createConnectionStageReachedEvent","stage","source","createE2eRttEvent","participantId","region","rtt","participant_id","createFocusLeftEvent","createGetUserMediaEvent","createParticipantConnectionStatusEvent","createJingleEvent","createNoDataFromSourceEvent","mediaType","media_type","createP2PEvent","createRemotelyMutedEvent","createRtpStatsEvent","createRttByRegionEvent","createAudioOutputProblemEvent","userID","localAudioLevels","remoteAudioLevels","createBridgeChannelClosedEvent","createTtfmEvent","AUDIO","VIDEO","usesAdapter","availableDevices","availableDevicesPollTimer","OLD_GUM_DEFAULT_DEVICES","DEFAULT_CONSTRAINTS","video","aspectRatio","height","ideal","max","SS_DEFAULT_FRAME_RATE","audioOutputDeviceId","audioOutputChanged","disableAP","disableAEC","disableNS","disableAGC","disableHPF","featureDetectionAudioEl","isAudioOutputDeviceChangeAvailable","setSinkId","getConstraints","um","audio","isNewStyleConstraintsSupported","isSafariWithVP8","isEdge","mandatory","optional","cameraDeviceId","deviceId","sourceId","facingMode","CameraFacingMode","USER","minFps","maxFps","fps","minFrameRate","maxFrameRate","resolution","Resolutions","width","minWidth","minHeight","maxWidth","maxHeight","setResolutionConstraints","micDeviceId","echoCancellation","googEchoCancellation","googAutoGainControl","googNoiseSuppression","googHighpassFilter","googNoiseSuppression2","googEchoCancellation2","googAutoGainControl2","isChrome","getSSConstraints","mozMediaSource","mediaSource","frameRate","errmsg","GlobalOnErrorHandler","callErrorHandler","bandwidth","firefox_fake_device","fake","desktopStream","_options$frameRate","chromeMediaSource","screen","chromeMediaSourceId","getTrackSSConstraints","desktopSharingFrameRate","updateGrantedPermissions","audioTracksReceived","Boolean","getAudioTracks","videoTracksReceived","getVideoTracks","grantedPermissions","RTCEvents","sendDeviceListToAnalytics","deviceList","audioInputDeviceCount","kind","audioOutputDeviceCount","videoInputDeviceCount","videoOutputDeviceCount","device","audio_input_device_count","audio_output_device_count","video_input_device_count","video_output_device_count","device_id","device_group_id","groupId","device_kind","device_label","label","rtcUtils","RTCUtils","_classCallCheck","_possibleConstructorReturn","_getPrototypeOf","Listenable","_this","clearInterval","enumerateDevices","navigator","mediaDevices","then","initEnumerateDevicesWithCallback","usesNewGumFlow","RTCPeerConnectionType","RTCPeerConnection","attachMediaStream","wrapAttachMediaStream","srcObject","getStreamID","_ref","getTrackID","_ref2","isChromiumBased","src","srcObjectPropertyName","jitsiObjectURL","URL","createObjectURL","defaultSetVideoSrc","_ref3","_ref4","MediaStream","videoTracks","audioTracks","_initPCConstraints","screenObtainer","getUserMediaWithConstraints","isDeviceListAvailable","ds","updateKnownDevices","pds","devicesReceived","newDevices","mediaDeviceInfoToJSON","sort","facing","compareAvailableMediaDevices","supportsDeviceChangeEvent","addEventListener","setInterval","pcConstraints","googHighStartBitrate","googPayloadPadding","googScreencastMinBitrate","googCpuOveruseDetection","googCpuOveruseEncodeUsage","googCpuUnderuseThreshold","googCpuOveruseThreshold","useIPv6","googIPv6","p2pPcConstraints","Promise","resolve","reject","getUserMedia","catch","umDevices","_this2","isSupported","supportsVideo","obtainStream","_parseDesktopSharingOptions","devices","includes","_getAudioAndVideoStreams","streams","audioStream","videoStream","res","audioVideo","addTrack","desktop","_desktopStream","sourceType","track","MediaType","videoType","VideoType","DESKTOP","CAMERA","handleLocalStream","_this3","requestingDesktop","avStream","missingTracks","_getMissingTracks","stopMediaStream","desktopSharingSourceDevice","requestedDevices","missingDevices","audioDeviceRequested","videoDeviceRequested","desktopSharingExtensionExternalInstallation","desktopSharingSources","gumOptions","trackOptions","_this4","mediaStreamsMetaData","maybeRequestDesktopDevice","matchingDevice","_this$_parseDesktopSh","exact","_newGetUserMediaWithConstraints","getTracks","applyConstraints","_newGetDesktopMedia","maybeRequestCaptureDevices","requestedCaptureDevices","newGetConstraints","effects","_ref5","deviceType","mediaStream","release","url","revokeObjectURL","isDeviceChangeAvailable","deviceData","enable","googSuspendBelowMinBitrate","origAttachMediaStream","getAudioOutputDevice","ex","callUnhandledRejectionHandler","promise","oldOnErrorHandler","oldOnUnhandledRejection","onunhandledrejection","_len","_key","errHandler","CHROME_EXTENSION_GENERIC_ERROR","CHROME_EXTENSION_INSTALLATION_ERROR","CHROME_EXTENSION_USER_GESTURE_REQUIRED","CHROME_EXTENSION_USER_CANCELED","CONSTRAINT_FAILED","ELECTRON_DESKTOP_PICKER_ERROR","ELECTRON_DESKTOP_PICKER_NOT_FOUND","FIREFOX_EXTENSION_NEEDED","GENERAL","NOT_FOUND","PERMISSION_DENIED","TRACK_IS_DISPOSED","TRACK_NO_STREAM_FOUND","UNSUPPORTED_RESOLUTION","peerConnectionIdCounter","rtcTrackIdCounter","createLocalTracks","tracksInfo","newTracks","trackInfo","safeCounterIncrement","localTrack","JitsiLocalTrack","rtcId","_newCreateLocalTracks","metaData","_track$getSettings","getSettings","RTC","conference","peerConnections","localTracks","_channel","_channelOpen","_lastN","_lastNEndpoints","_maxFrameHeight","_pinnedEndpoint","_selectedEndpoints","_lastNChangeListener","_onLastNChanged","_assertThisInitialized","_onDeviceListChanged","_updateAudioOutputForAudioTracks","addListener","newObtainAudioAndVideoPermissions","obtainAudioAndVideoPermissions","eventType","isP2P","elSelector","getCurrentlyAvailableMediaDevices","getEventDataForActiveDevice","setAudioOutputDevice","isUserStreamById","streamId","isDesktopSharingEnabled","_channelOpenListener","wsUrl","BridgeChannel","sendPinnedEndpointMessage","sendSelectedEndpointsMessage","sendReceiverVideoConstraintMessage","_selectedEndpoint","sendSetLastNMessage","leavingLastNEndpoints","enteringLastNEndpoints","lastNEndpoints","oldLastNEndpoints","isInLastN","JitsiConferenceEvents","maxFrameHeight","ids","signaling","iceConfig","getPCConstraints","abtestSuspendVideo","setSuspendVideo","addPermanentProperties","supportsSdpSemantics","sdpSemantics","newConnection","TraceablePeerConnection","traceablePeerConnection","localVideo","getLocalTracks","localAudio","tracks","getType","remoteTracks","pcRemoteTracks","getRemoteTracks","mutePromises","audioTrack","mute","unmute","all","pos","owner","removedTracks","pcRemovedTracks","removeRemoteTracks","audioLevel","getTrackBySSRC","isAudioTrack","setAudioLevel","sendMessage","remoteAudioTracks","setAudioOutput","TRACK_ERROR_TO_MESSAGE_MAP","JitsiTrackErrors","constraint","failedConstraintName","getResolutionFromFailedConstraint","constructor","LOCAL_TRACK_STOPPED","TRACK_AUDIO_OUTPUT_CHANGED","TRACK_VIDEOTYPE_CHANGED","NO_DATA_FROM_SOURCE","CHAT_ERROR","CONFERENCE_DESTROYED","CONFERENCE_MAX_USERS","CONNECTION_ERROR","NOT_ALLOWED_ERROR","INCOMPATIBLE_SERVER_VERSIONS","OFFER_ANSWER_FAILED","PASSWORD_NOT_SUPPORTED","SETUP_FAILED","VIDEOBRIDGE_NOT_AVAILABLE","SDP","mediaI","failICE","removeTcpCandidates","removeUdpCandidates","getMediaSsrcMap","tmp","mediaSSRCs","_loop","mediaindex","mid","linessrc","idx","containsSSRC","medias","mangle","newdesc","rtpmap","removeSessionLines","removeMediaLines","toJingle","thecreator","assrcline","creator","amidline","afmtpline","rtcpFbToJingle","crypto","required","ssrcMap","_step$value","_slicedToArray","availableSsrc","ssrcParameters","ssrcSdpLine","kv","v","ridLines","rids","ridLine","ridInfo","senders","transportToJingle","sctpmap","sctpAttrs","number","setup","payloadtype","subtype","rtcpFbFromJingle","each","$","fromJingle","jingle","groups","contents","_","jingle2media","sctp","streamCount","CHROME","OPERA","FIREFOX","INTERNET_EXPLORER","EDGE","SAFARI","NWJS","ELECTRON","REACT_NATIVE","UNKNOWN","bowserNameToJitsiName","Chrome","Chromium","Opera","Firefox","Internet Explorer","Microsoft Edge","Safari","_detectElectron","userAgent","_detectNWJS","_detectReactNative","product","_detect","browserInfo","detectors","bowser","chrome","_detectChromiumBased","BrowserDetection","detectedBrowserInfo","_name","_version","compareVersions","compareVersion","BrowserDetection_BrowserDetection","browsers_namespaceObject","STATUS_AVAILABLE","STATUS_UNDEFINED","STATUS_BUSY","STATE_ON","STATE_OFF","STATE_PENDING","STATE_RETRYING","STATE_FAILED","ERROR_NO_CONNECTION","ERROR_SESSION_EXISTS","WRONG_STATE","parser","writer","write","parseFmtpConfig","parseParams","parsePayloads","parseRemoteCandidates","parseImageAttributes","parseSimulcastStreamList","AUDIO_LEVEL","BEFORE_DISPOSED","BYTE_SENT_STATS","CONNECTION_STATS","removeEventListener","off","_callStatsUserName","_machineId","jitsi_meet_logger__WEBPACK_IMPORTED_MODULE_0__","_util_UsernameGenerator__WEBPACK_IMPORTED_MODULE_1__","_util_UsernameGenerator__WEBPACK_IMPORTED_MODULE_1___default","getLocalStorage","storage","localStorage","_p8","username","UsernameGenerator","generateUsername","machineId","jitsiMeetId","sessionId","LOCAL_STATS_UPDATED","REMOTE_STATS_UPDATED","parsePrimarySSRC","parseSecondarySSRC","_getSSRCCount","MLineWrap","ssrcNumber","attrName","ssrcObj","ssrcNum","primarySSRC","msid","findGroup","fecGroup","findGroupByPrimarySSRC","videoSSRCs","getSSRCs","ssrcGroupInfo","secondarySsrc","groupInfo","oldSSRC","newSSRC","SdpTransformWrap","rawSDP","parsedSDP","transform","_createClass","selectedMLine","ACTIONS","ACCEPT","INITIATE","TERMINATE","UNAVAILABLE","_events","_maxListeners","isFunction","isObject","isUndefined","defaultMaxListeners","setMaxListeners","er","listeners","context","newListener","warned","trace","once","fired","g","list","position","listenerCount","evlistener","emitter","1080","order","fullhd","720","hd","960","540","qhd","360","640","vga","180","320","PENDING","ACTIVE","ENDED","_fabrics","wrtcFuncNames","fabricEvent","DEFAULT_REMOTE_USER","reportType","hasFabric","fabrics","backendInitialized","_addNewFabric","_emptyReportQueue","backend","atLeastOneFabric","defaultInstance","csInstance","defaultConfID","defaultPC","reportsQueue","report","errorData","_reportError","pc","eventData","sendFabricEvent","associateMstWithUserID","callStatsId","_error","reportError","theBackend","tryCatchMethods","methodName","_i","originalMethod","_len2","theArguments","_key2","debugMethods","_loop2","_i2","_len3","_key3","originalReportError","exception","configParams","CallStatsBackend","callstats","_traceAndCatchBackendCalls","applicationVersion","getName","siteID","initialize","_initCallback","attachWifiStatsHandler","addresses","_reportEvent","conferenceID","sendUserFeedback","fabricAttributes","remoteEndpointType","endpointType","peer","server","addNewFabric","fabricUsage","multiplex","_addNewFabricCallback","success","streamEndpointId","fabricTerminated","ALPHANUM","randomElement","arr","randomHexDigit","randomHexString","randomAlphanumStr","getConnectionPluginDefinition","base","_class","_base","_class2","_getPrototypeOf2","_inherits","ConnectionPluginListenable","DEFAULT_STUN_SERVERS","urls","JITSI_MEET_MUC_TYPE","XMPP","token","disconnectInProgress","connectionTimes","authenticatedUser","_initStrophePlugins","bosh","conn","createConnection","_lastSuccessTracker","LastSuccessTracker","startTracking","caps","Caps","clientNode","initFeaturesList","ev","addFeature","disableRtx","supportsRtx","enableLipSync","rayo","_pingSupported","credentials","performance","statusStr","getStatusString","XMPPEvents","useStunTurn","p2p","getStunAndTurnCredentials","pingJid","getFeaturesAndIdentities","identities","PING","ping","startInterval","identity","speakerStatsComponentAddress","_onPrivateMessage","password","JitsiConnectionEvents","anonymousConnectionFailed","connectionFailed","lastErrorMsg","JitsiConnectionErrors","stopInterval","wasIntentionalDisconnect","errMsg","_getConnectionFailedReasonDetails","lastErrorStatus","getLastErrorStatus","connectionHandler","attaching","_this$options$hosts","hosts","anonymousdomain","configDomain","hostname","onCreateResource","roomjid","muc","mucNickname","emuc","createRoom","getLog","_this$connection$rayo","dial","isPingSupported","sessions","disconnectListener","evType","jvb","iceServers","p2pStunServers","stunServers","iceTransportPolicy","initEmuc","initJingle","initStropheUtil","initPing","initRayo","initStropheLogger","deploymentInfo","shard","headersArr","trim","shard_changed","suspend_time","getPingSuspendTime","time_since_last_success","getTimeSinceLastSuccess","room","jsonString","json","jsonMessage","parsedJson","tryParseJSONAndVerify","users","CONNECTION_DROPPED_ERROR","OTHER_ERROR","SERVER_ERROR","PEER_MUTED_CHANGED","PEER_VIDEO_TYPE_CHANGED","logDisabled_","deprecationWarnings_","disableLog","bool","disableWarnings","deprecated","oldMethod","newMethod","extractVersion","uastring","expr","detectBrowser","mozGetUserMedia","webkitGetUserMedia","webkitRTCPeerConnection","shimCreateObjectURL","ENVIRONMENT","chromeExtInstalled","chromeExtUpdateRequired","gumFunction","ScreenObtainer","intChromeExtPromise","desktopSharingChromeDisabled","desktopSharingChromeExtId","desktopSharingFirefoxDisabled","_createObtainStreamMethod","isNWJS","JitsiMeetNW","obtainDesktopStream","jitsiError","isElectron","obtainScreenOnElectron","isOpera","supportsGetDisplayMedia","obtainScreenFromGetDisplayMedia","append","getWebStoreInstallUrl","initInlineInstalls","checkChromeExtInstalled","installed","updateRequired","initChromeExtension","obtainScreenFromExtension","obtainScreenOnFirefox","errorCallback","streamCallback","failCallback","obtainWebRTCScreen","JitsiMeetScreenObtainer","openDesktopPicker","desktopSharingChromeSources","streamType","onGetStreamResponse","_this$options","doGetStreamFromExtensionOptions","runtime","getStream","sources","lastError","doGetStreamFromExtension","alert","handleExternalInstall","webStoreInstallUrl","checkForChromeExtensionOnInterval","checkAgain","waitInterval","retries","currentRetries","interval","waitForExtensionAfterInstall","getDisplayMedia","getVersion","extVersion","minVersion","s1","s2","n1","n2","isUpdateRequired","desktopSharingChromeMinExtVersion","DEFAULT_NOT_IN_LAST_N_TIMEOUT","DEFAULT_RTC_MUTE_TIMEOUT","ParticipantConnectionStatus","INACTIVE","INTERRUPTED","RESTORING","ParticipantConnectionStatusHandler","rtc","trackTimers","connStatusFromJvb","outOfLastNTimeout","rtcMuteTimeout","rtcMutedTimestamp","enteredLastNTimestamp","restoringTimers","connectionStatusMap","isConnectionActiveByJvb","isRestoringTimedout","isVideoMuted","isVideoTrackFrozen","supportsVideoMuteOnConnInterrupted","_onEndpointConnStatusChanged","onEndpointConnStatusChanged","_onP2PStatus","refreshConnectionStatusForAll","_onUserLeft","onUserLeft","_onTrackRtcMuted","onTrackRtcMuted","_onTrackRtcUnmuted","onTrackRtcUnmuted","_onRemoteTrackAdded","onRemoteTrackAdded","_onRemoteTrackRemoved","onRemoteTrackRemoved","_onSignallingMuteChanged","onSignallingMuteChanged","_onTrackVideoTypeChanged","onTrackVideoTypeChanged","_onLastNValueChanged","participantIds","clearRtcMutedTimestamp","endpointId","isActive","myUserId","figureOutConnectionStatus","participant","newStatus","getConnectionStatus","getId","_setConnectionStatus","remoteTrack","getParticipantId","JitsiTrackEvents","hasAnyVideoRTCMuted","hasAnyVideoTrackWebRTCMuted","_getVideoFrozenTimeout","participants","getParticipants","getParticipantById","inP2PMode","isP2PActive","isRestoringTimedOut","_isRestoringTimedout","audioOnlyMode","getLastN","isConnActiveByJvb","newState","_getNewStateForP2PMode","_getNewStateForJvbMode","_clearRestoringTimer","oldConnectionStatus","connectionStatus","nowMs","maybeSendParticipantConnectionStatusEvent","startedMs","getTracksByMediaType","_changeConnectionStatus","participantConnectionStatus","leavingLastN","enteringLastN","rTimer","isMuted","getFocusRecordingUpdate","presence","jibriStatus","recordingMode","sessionID","getHiddenDomainUpdate","liveStreamViewURLContainer","liveStreamViewURL","modeContainer","sessionIDContainer","getSessionIdFromIq","jibri","getSessionId","sessionIdContainer","isFromFocus","JingleSessionPC","localJid","remoteJid","mediaConstraints","isInitiator","_bridgeSessionId","_iceCheckingStartedTimestamp","_gatheringStartedTimestamp","_localVideoActive","_remoteVideoActive","_gatheringReported","lasticecandidate","closed","signalingLayer","SignalingLayerImpl","modificationQueue","AsyncQueue","wasConnected","establishmentDuration","JingleSession","jingleContents","videoContents","state","JingleSessionState","isReconnect","wasstable","webrtcIceUdpDisable","webrtcIceTcpDisable","pcOptions","gatherStats","maxstats","disableSimulcast","disableH264","preferH264","_abtestSuspendVideoEnabled","enableFirefoxSimulcast","testing","enableLayerSuspension","startSilent","createPeerConnection","onicecandidate","phase","initiator","sendIceCandidate","onsignalingstatechange","signalingState","connectionState","oniceconnectionstatechange","iceConnectionState","signaling_state","reconnect","iceStarted","onnegotiationneeded","setChatRoom","isSelected","setIsSelected","finishedCallback","_renegotiate","localSDP","localDescription","ice","sdpMLineIndex","jcand","usedrip","dripContainer","sendIceCandidates","candidates","_assertNotEnded","initiatorJid","cands","sdpMid","fingerprintLine","newJingleErrorHandler","sessionInfo","_this5","iceCandidates","rtcCandidate","RTCIceCandidate","iceCandidate","addIceCandidate","outerHTML","_this6","ssrcElement","setSSRCOwner","i3","ssrcInfoElement","generateRecvonlySsrc","jingleOffer","failure","_this7","setOfferAnswerCycle","sendSessionAccept","_this8","createOffer","offerSdp","setLocalDescription","sendSessionInitiate","jingleAnswer","jingleOfferAnswerIq","_this9","newRemoteSdp","_processNewJingleOfferIq","oldLocalSdp","bridgeSessionId","sendContentModify","newLocalSdp","notifyMySSRCUpdate","jingleOfferElem","_this10","originalOffer","clone","remove","newFingerprint","sendTransportAccept","_this11","accept","responder","responderJid","videoTransferActive","newSendersValue","sessionModify","_this12","transportAccept","medialines","transportReject","sendSessionTerminate","sessionTerminate","reasonDescription","terminate","reasonCondition","reasonText","sourceAddElem","currentRemoteSdp","addSsrcInfo","i1","i2","_addOrRemoveRemoteStream","isAdd","_this13","logPrefix","readSsrcInfo","remoteDescription","addOrRemoveSsrcInfo","_parseSsrcInfoFromSourceAdd","_parseSsrcInfoFromSourceRemove","_processRemoteAddSource","_processRemoteRemoveSource","offerIq","remoteSdp","removeSsrcInfo","optionalRemoteSdp","RTCSessionDescription","_initiatorRenegotiate","_responderRenegotiate","_this14","setRemoteDescription","createAnswer","answer","_this15","offer","oldTrack","newTrack","_this16","workFunction","isVideoTrack","clearRecvonlySsrc","replaceTrack","shouldRenegotiate","newLocalSDP","sourceRemoveElem","ssrcLines","operationName","oldSDP","currentLocalSDP","sdpDiff","SDPDiffer","addedMedia","getNewMedia","removedMedia","_addRemoveTrackAsMuteUnmute","isMute","_this17","oldLocalSDP","removeTrackMute","addTrackUnmute","_verifyNoSSRCChanged","audioActive","videoActive","_this18","logAudioStr","logVideoStr","isSessionActive","audioActiveChanged","setAudioTransferActive","pcVideoActiveChanged","setVideoTransferActive","_this19","newVideoSenders","parseVideoSenders","_modifyRemoteVideoActive","remoteVideoSenders","isRemoteVideoActive","newSDP","sdpDiffer","request","failureCb","_this20","errResponse","errorElSel","errorReasonSel","errorMsgSel","_this21","clear","finishCallback","shutdown","abTesting","enableSuspendVideoTest","_getInitiatorJid","integerHash","PERMISSION_PROMPT_IS_SHOWN","definition","detect","ua","getFirstMatch","regex","getSecondMatch","iosdevice","android","nexusMobile","nexusTablet","chromeos","silk","sailfish","tizen","webos","windowsphone","windows","mac","linux","edgeVersion","versionIdentifier","tablet","mobile","xbox","opera","samsungBrowser","coast","yandexbrowser","ucbrowser","maxthon","epiphany","puffin","sleipnir","kMeleon","osname","msedge","msie","chromeBook","vivaldi","seamonkey","firefox","firefoxos","phantom","slimer","blackberry","touchpad","bada","qupzilla","chromium","safari","googlebot","blink","webkit","gecko","ios","osVersion","getWindowsVersion","osversion","osMajorVersion","getVersionPrecision","versions","precision","chunks","delta","chunk","reverse","isUnsupportedBrowser","minVersions","strictMode","_bowser","browserList","browserItem","check","_SDPUtil__WEBPACK_IMPORTED_MODULE_0__","arrayEquals","array1","array2","equals","mySDP","otherSDP","myMedias","othersMedias","newMedia","othersMediaIdx","myMedia","othersMedia","otherSsrcGroup","mySsrcGroup","modify","sdpMediaSsrcs","modified","mediaSsrc","nv","cachedSetTimeout","cachedClearTimeout","process","defaultSetTimout","defaultClearTimeout","runTimeout","fun","currentQueue","queue","draining","queueIndex","cleanUpNextTick","drainQueue","marker","runClearTimeout","Item","noop","nextTick","title","env","argv","prependListener","prependOnceListener","binding","cwd","chdir","dir","umask","E2E_RTT_CHANGED","LocalStatsCollector","AudioContext","webkitAudioContext","intervalId","intervalMilis","suspend","isLocalStatsSupported","analyser","createAnalyser","smoothingTimeConstant","fftSize","createMediaStreamSource","Uint8Array","frequencyBinCount","getByteTimeDomainData","newLevel","lastLevel","diff","samples","maxVolume","parseFloat","toFixed","timeDomainDataToAudioLevel","currentExecutingScript","prepend","relativeURL","loadCallback","script","referenceNode","scriptEl","scriptSrc","baseScriptSrc","lastIndexOf","onload","insertBefore","ON","OFF","trackHandler2Prop","track_mute","track_unmute","track_ended","addMediaStreamInactiveHandler","oninactive","JitsiTrack","streamInactiveHandler","trackMediaType","containers","disposed","_streamInactiveHandler","_setStream","_setHandler","container","_onTrackAttach","_maybeFireTrackAttached","_attachTTFMTracker","_onTrackDetach","active","getStreamId","trackId","getTrackId","nextValue","MAX_SAFE_INTEGER","SpeakerStats","displayName","isLocalStats","_userId","setDisplayName","_isLocalStats","setDominantSpeaker","totalDominantSpeakerTime","_dominantSpeakerStart","_hasLeft","newName","isNowDominantSpeaker","isDominantSpeaker","timeElapsed","total","IDENTITY_UPDATED","_ref$effects","_setEffectInProgress","effect","isEnabled","_startStreamEffect","_constraints","_prevSetMuted","_facingMode","_trackEnded","_hasSentData","_testDataSent","_realDeviceId","_trackMutedTS","_onDeviceListWillChange","oldRealDeviceId","_setRealDeviceIdFromDeviceList","getTrack","_onAudioOutputDeviceChanged","_initNoDataFromSourceHandlers","_isNoDataFromSourceEventsEnabled","_fireNoDataFromSourceEvent","track_type","isReceivingData","_get","storedMSID","getMSID","_streamEffect","_originalStream","startEffect","stopEffect","_stopStreamEffect","removeTrack","_switchStreamEffect","cont","_queueSetMuted","setMuted","_setMuted","logMuteInfo","doesVideoMuteByStreamRemove","enabled","_removeStreamFromConferenceAsMute","_unregisterHandlers","stopStream","streamOptions","getDeviceId","getCameraFacingMode","assign","streamsInfo","streamInfo","_addStreamToConferenceAsUnmute","_sendMuteStatus","_addLocalTrackAsUnmute","successCallback","_removeLocalTrackAsMute","detach","bytesSent","getConnectionState","trackSettings","_stopStreamInProgress","_switchCamera","_effectEnabled","some","JibriSession","_mode","_setSessionID","setStatus","_sessionID","_liveStreamViewURL","_status","appData","broadcastId","focusMucJid","_createIQ","recordingXMLUtils","_setErrorFromIq","app_data","recording_mode","streamid","you_tube_broadcast_id","errorIq","setError","children","VIDEO_PERMISSION_NAME","JitsiMediaDevices","_eventEmitter","_grantedPermissions","JitsiMediaDevicesEvents","_logOutputDevice","_handleGrantedPermissions","_permissionsApiSupported","permissions","query","deviceID","supported","promises","results","every","permissionStatus","_this$_eventEmitter","consoleTransport","globalTransports","transportIdx","globalOptions","callerInfo","disableCallerInfo","fileLocation","column","getCallerInfo","logPrefixes","fullLogParts","methods","LOG","SDPUtils","generateIdentifier","localCName","splitLines","blob","splitSections","getDescription","sections","getMediaSections","matchPrefix","parseCandidate","relatedAddress","relatedPort","tcpType","usernameFragment","writeCandidate","toUpperCase","parseIceOptions","parseRtpMap","parsed","clockRate","numChannels","writeRtpMap","preferredPayloadType","writeExtmap","headerExtension","preferredId","writeFmtp","parameters","param","parseRtcpFb","parameter","writeRtcpFb","rtcpFeedback","fb","parseSsrcMedia","sp","colon","getMid","mediaSection","algorithm","getDtlsParameters","role","fingerprints","writeDtlsParameters","setupType","fp","getIceParameters","writeIceParameters","parseRtpParameters","description","codecs","headerExtensions","fecMechanisms","rtcp","rtpmapline","fmtps","writeRtpDescription","maxptime","extension","parseRtpEncodingParameters","encodingParameters","hasRed","hasUlpfec","flows","apt","encParam","codecPayloadType","rtx","fec","maxBitrate","parseRtcpParameters","rtcpParameters","remoteSsrc","cname","rsize","reducedSize","compound","mux","parseMsid","spec","planB","generateSessionId","writeSessionBoilerplate","sessId","sessVer","writeMediaSection","transceiver","iceGatherer","getLocalParameters","dtlsTransport","rtpSender","rtpReceiver","sendEncodingParameters","getDirection","getKind","isRejected","parseOLine","sessionVersion","netType","addressType","address","grammar","reg","names","format","u","z","rate","sessionConfig","raddr","maxMessageSize","RegExp","dir2","RecordingResult","AUDIO_WEBM","AUDIO_OGG","TrackRecorder","recorder","startTime","startRecorder","trackRecorder","stopRecorder","determineCorrectFileType","MediaRecorder","isTypeSupported","AudioRecorder","jitsiConference","recorders","fileType","isRecording","instantiateTrackRecorder","updateNames","originalStream","getOriginalStream","createEmptyStream","mimeType","ondataavailable","dataEvent","recorderToRemove","getDisplayName","download","Blob","href","click","getRecordingResults","getFileType","getTokenAuthUrl","urlPattern","roleUpgrade","JitsiConnection","_service_statistics_AnalyticsEvents__WEBPACK_IMPORTED_MODULE_0__","_JitsiConference__WEBPACK_IMPORTED_MODULE_1__","_JitsiConnectionEvents__WEBPACK_IMPORTED_MODULE_2__","_modules_statistics_statistics__WEBPACK_IMPORTED_MODULE_3__","_modules_xmpp_xmpp__WEBPACK_IMPORTED_MODULE_4__","appID","errType","ANALYTICS_CONNECTION_DISCONNECTED","_this$xmpp","getJid","setToken","initJitsiConference","JitsiConference","getConnectionTimes","feature","submit","removeFeature","eventManager","JitsiConferenceEventManager","_init","componentsVersions","ComponentsVersions","jvbJingleSession","lastDominantSpeaker","dtmfManager","somebodySupportsDTMF","authEnabled","startAudioMuted","startVideoMuted","startMutedPolicy","isMutedByFocus","mutedByFocusActor","wasStopped","connectionQuality","ConnectionQuality","avgRtpStatsReporter","AvgRTPStatsReporter","avgRtpStatsN","_audioOutputProblemDetector","AudioOutputProblemDetector","isJvbConnectionInterrupted","speakerStatsCollector","SpeakerStatsCollector","deferredStartP2PTask","delay","backToP2PDelay","isP2PConnectionInterrupted","p2pJingleSession","videoSIPGWHandler","VideoSIPGW","recordingManager","RecordingManager","resourceCreator","isAuthenticatedUser","setupXMPPListeners","_onIceConnectionInterrupted","_onIceConnectionRestored","_onIceConnectionEstablished","_updateProperties","rttMonitor","RttMonitor","e2eping","E2ePing","setupRTCListeners","_peerConnStatusRtcMuteTimeout","_peerConnStatusOutOfLastNTimeout","enableDisplayNameInStats","callStatsCustomScriptUrl","enableStatsID","setupChatRoomListeners","setupStatisticsListeners","enableTalkWhileMuted","TalkMutedDetection","setLastN","channelLastN","jvb121Status","Jvb121EventGenerator","p2pDominantSpeakerDetection","P2PDominantSpeakerDetection","userRegion","setLocalParticipantProperty","_maybeSetSITimeout","authenticateAndUpgradeRole","isJoined","joined","isP2PEnabled","isP2PTestModeEnabled","p2pTestMode","leave","onLocalTrackRemoved","closeBridgeChannel","_delayedIceFailed","cancel","removeXMPPListeners","destroy","onMemberLeft","getConnection","isAuthEnabled","isLoggedIn","authIdentity","getAuthLogin","isExternalAuthEnabled","moderator","getExternalAuthUrl","urlForPopup","getPopupLoginUrl","getLoginUrl","getLocalAudioTrack","getLocalVideoTrack","eventId","addCommandListener","command","addPresenceListener","removeCommandListener","removePresenceListener","sendTextMessage","elementName","getFromPresence","sendPrivateTextMessage","sendPrivateMessage","sendCommand","addToPresence","sendCommandOnce","removeCommand","removeFromPresence","setSubject","subject","isModerator","getTranscriber","transcriber","Transcriber","localAudioTracks","getTranscriptionStatus","transcriptionStatus","localVideoTrack","_fireAudioLevelChangeEvent","activeTpc","getActivePeerConnection","_fireMuteChangeEvent","actorParticipant","muteParticipant","myroomjid","actorId","_setConference","removeLocalTrack","muteHandler","audioLevelHandler","_doReplaceTrack","_setupNewTrack","replaceTrackPromises","addLocalTrack","setAudioMute","setVideoMute","addAsUnmutePromises","addTrackAsUnmute","removeAsMutePromises","removeTrackAsMute","getRole","isHidden","hiddenDomain","lock","lockRoom","JitsiConferenceErrors","unlock","selectParticipant","selectParticipants","selectEndpoints","pinParticipant","pinEndpoint","lastN","isInteger","RangeError","isVideoActive","setMediaTransferActive","getParticipantCount","countHidden","kickParticipant","kick","_maybeClearSITimeout","_sessionInitiateTimeout","onMemberJoined","nick","statsID","botType","JitsiParticipant","_role","_botType","_updateFeatures","_maybeStartOrStopP2P","getFeatures","_supportsDTMF","updateDTMFSupport","setProperty","_onMemberBotTypeChanged","botParticipant","onMemberKicked","isSelfPresence","kickedParticipantId","kickedParticipant","onLocalRoleChanged","onUserRoleChanged","onDisplayNameChanged","_displayName","_tracks","onCallAccepted","setAnswer","onTransportInfo","transportInfo","addIceCandidates","removedTrack","_onIncomingCallP2P","jingleSession","rejectReason","supportsP2P","errorMsg","_rejectIncomingCall","_acceptP2PIncomingCall","onIncomingCall","isFocus","_acceptJvbIncomingCall","serverRegion","_setBridgeChannel","acceptOffer","_suspendMediaTransferForJvbConnection","bridgeChannelType","webSocket","first","openBridgeChannel","supportsDataChannels","initializeBridgeChannel","onCallEnded","forceJvb121","p2pFailed","_stopP2PSession","onSuspendDetected","supportsDTMF","isDTMFSupported","sendTones","tones","duration","peerConnection","JitsiDTMFManager","startRecording","stopRecording","isSIPCallingSupported","hangup","startTranscriber","stopTranscriber","getPhoneNumber","getPhonePin","setStartMutedPolicy","policy","getStartMutedPolicy","isStartAudioMuted","isStartVideoMuted","getLogs","getJingleLog","metadata","time","getXmppLog","removeLocalParticipantProperty","getLocalParticipantProperty","presMap","nodes","overallFeedback","detailedFeedback","remoteUserId","getLocalSSRC","getSSRC","getUsageLabel","_isFocus","mucJid","_fireIncompatibleVersionsEvent","sendEndpointMessage","sendChannelMessage","broadcastEndpointMessage","sendThroughVideobridge","messageType","messageToSend","isConnectionInterrupted","_onIceConnectionFailed","IceFailedNotification","sendIceFailedNotification","remoteID","getStatsID","_addRemoteJVBTracks","_addRemoteTracks","_addRemoteP2PTracks","logName","p2pEstablishmentDuration","jvbEstablishmentDuration","forceJVB121Ratio","establishmentDurationDiff","_setP2PStatus","_removeRemoteJVBTracks","changed","isEqual","_defineProperty","getProperty","_maybeClearDeferredStartP2P","_removeRemoteTracks","_removeRemoteP2PTracks","sessionNickname","_resumeMediaTransferForJvbConnection","_startP2PSession","newP2PJingleSession","invite","userLeftEvent","peers","peerCount","hasBotPeer","shouldBeInP2P","myId","peersId","wasP2PEstablished","getP2PConnectionState","startP2PSession","peerJid","stopP2PSession","getSpeakerStats","getStats","setReceiverVideoConstraint","createVideoSIPGWSession","sipAddress","VideoSIPGWConstants","global","LARGE_ARRAY_SIZE","HASH_UNDEFINED","COMPARE_PARTIAL_FLAG","COMPARE_UNORDERED_FLAG","argsTag","arrayTag","asyncTag","boolTag","dateTag","errorTag","funcTag","genTag","mapTag","numberTag","nullTag","objectTag","proxyTag","regexpTag","setTag","stringTag","symbolTag","undefinedTag","arrayBufferTag","dataViewTag","reIsHostCtor","reIsUint","typedArrayTags","freeGlobal","freeSelf","freeExports","freeModule","moduleExports","freeProcess","nodeUtil","nodeIsTypedArray","isTypedArray","arraySome","predicate","mapToArray","setToArray","uid","arrayProto","funcProto","objectProto","coreJsData","funcToString","maskSrcKey","exec","IE_PROTO","nativeObjectToString","reIsNative","Buffer","propertyIsEnumerable","symToStringTag","nativeGetSymbols","getOwnPropertySymbols","nativeIsBuffer","isBuffer","nativeKeys","DataView","getNative","WeakMap","nativeCreate","dataViewCtorString","toSource","mapCtorString","promiseCtorString","setCtorString","weakMapCtorString","symbolProto","symbolValueOf","valueOf","Hash","entries","entry","ListCache","MapCache","SetCache","__data__","Stack","arrayLikeKeys","inherited","isArr","isArg","isArguments","isBuff","isType","skipIndexes","iteratee","baseTimes","isIndex","assocIndexOf","eq","baseGetTag","isOwn","unmasked","getRawTag","objectToString","baseIsArguments","isObjectLike","baseIsEqual","other","bitmask","customizer","equalFunc","objIsArr","othIsArr","objTag","getTag","othTag","objIsObj","othIsObj","isSameTag","equalArrays","byteLength","byteOffset","buffer","convert","isPartial","stacked","equalByTag","objIsWrapped","othIsWrapped","objUnwrapped","othUnwrapped","objProps","getAllKeys","objLength","othLength","skipCtor","objValue","othValue","compared","objCtor","othCtor","equalObjects","baseIsEqualDeep","baseIsNative","baseKeys","Ctor","arrLength","seen","arrValue","othIndex","keysFunc","symbolsFunc","offset","arrayPush","baseGetAllKeys","getSymbols","getMapData","getValue","pairs","resIndex","arrayFilter","symbol","ArrayBuffer","ctorString","isLength","baseUnary","strophe_js__WEBPACK_IMPORTED_MODULE_0__","_service_statistics_AnalyticsEvents__WEBPACK_IMPORTED_MODULE_1__","_service_authentication_AuthenticationEvents__WEBPACK_IMPORTED_MODULE_2__","_service_authentication_AuthenticationEvents__WEBPACK_IMPORTED_MODULE_2___default","_modules_util_EventEmitterForwarder__WEBPACK_IMPORTED_MODULE_3__","_modules_util_EventEmitterForwarder__WEBPACK_IMPORTED_MODULE_3___default","jitsi_meet_logger__WEBPACK_IMPORTED_MODULE_4__","_JitsiConferenceErrors__WEBPACK_IMPORTED_MODULE_5__","_JitsiConferenceEvents__WEBPACK_IMPORTED_MODULE_6__","_service_RTC_MediaType__WEBPACK_IMPORTED_MODULE_7__","_service_RTC_RTCEvents__WEBPACK_IMPORTED_MODULE_8__","_service_RTC_RTCEvents__WEBPACK_IMPORTED_MODULE_8___default","_service_RTC_VideoType__WEBPACK_IMPORTED_MODULE_9__","_service_RTC_VideoType__WEBPACK_IMPORTED_MODULE_9___default","_modules_statistics_statistics__WEBPACK_IMPORTED_MODULE_10__","_service_xmpp_XMPPEvents__WEBPACK_IMPORTED_MODULE_11__","_service_xmpp_XMPPEvents__WEBPACK_IMPORTED_MODULE_11___default","xmppListeners","chatRoom","chatRoomForwarder","EventEmitterForwarder","actor","forward","setParticipantPropertyListener","recorderSession","logObject","getError","getStatus","AuthenticationEvents","txt","myJid","ts","updated","featuresChangedListener","_addConferenceXMPPListener","audioMuted","videoMuted","ignoreStartMuted","_onByteSentStatsReceived","dest","srcEvent","AnalyticsAdapter","analyticsHandlers","cache","permanentProperties","conferenceName","callstats_name","user_agent","browser_name","setAnalyticsHandlers","_setUserProperties","_sendEvent","setUserProperties","conference_name","_verifyRequiredFields","objectType","containerType","objectId","_maybeCacheEvent","isSafariWithWebrtc","isSafari","isVersionLessThan","ondevicechange","usesUnifiedPlan","usesPlanB","RTCRtpTransceiver","_getChromiumBasedVersion","WINDOW","JS_MD5_NO_WINDOW","WEB_WORKER","NODE_JS","JS_MD5_NO_NODE_JS","COMMON_JS","JS_MD5_NO_COMMON_JS","AMD","ARRAY_BUFFER","JS_MD5_NO_ARRAY_BUFFER","HEX_CHARS","EXTRA","SHIFT","OUTPUT_TYPES","BASE64_ENCODE_CHAR","blocks","buffer8","Uint32Array","JS_MD5_NO_ARRAY_BUFFER_IS_VIEW","isView","createOutputMethod","outputType","Md5","update","createMethod","method","nodeWrap","eval","nodeMethod","createHash","digest","sharedMemory","h0","h1","h2","h3","bytes","hBytes","finalized","hashed","notString","lastByteIndex","finalize","bc","da","hex","arrayBuffer","base64","v1","v2","v3","base64Str","md5","KEYS_BY_BROWSER_TYPE","calculatePacketLoss","lostPackets","totalPackets","round","SsrcStats","loss","bitrate","upload","framerate","ConferenceStats","packetLoss","StatsCollector","statsInterval","_browserType","_usesPromiseGetStats","_getStatValue","_defineNewGetStatValueMethod","_defineGetStatValueMethod","baselineAudioLevelsReport","currentAudioLevelsReport","currentStatsReport","previousStatsReport","audioLevelReportHistory","audioLevelsIntervalId","conferenceStats","audioLevelsIntervalMilis","statsIntervalId","statsIntervalMilis","ssrc2stats","browsers","packetsReceived","packetsLost","packetsSent","bytesReceived","framerateMean","receiveBandwidth","sendBandwidth","remoteAddress","transportType","localAddress","activeConnection","googFrameHeightReceived","googFrameWidthReceived","googFrameHeightSent","googFrameWidthSent","googFrameRateReceived","googFrameRateSent","audioInputLevel","audioOutputLevel","currentRoundTripTime","remoteCandidateType","localCandidateType","setLoss","setResolution","addBitrate","resetBitrate","setFramerate","startAudioLevelStats","processNewAudioLevelReport","processAudioLevelReport","supportsRtpStatistics","processNewStatsReport","processStatsReport","itemStatByKey","stat","pair","keyFromName","getNonNegativeStat","getStatValue","byteSentStats","localip","conferenceStatsTransport","selected","local","localCandidateId","remote","remoteCandidateId","ipAddress","portNumber","candidateType","msType","before","ssrcIds","isRemote","remoteSource","ssrcStats","isDownloadStream","packetsNow","packetsBefore","packetsDiff","packetsLostNow","packetsLostBefore","packetsLostDiff","packetsTotal","bytesReceivedNow","bytesReceivedBefore","nowBytesTransmitted","timeMs","timestamp","bitrateReceivedKbps","bitrateSentKbps","_processAndEmitReport","bitrateDownload","bitrateUpload","resolutions","framerates","audioBitrateDownload","audioBitrateUpload","videoBitrateDownload","videoBitrateUpload","userResolutions","userFramerates","localAvgAudioLevels","avgAudioLevels","_this3$audioLevelRepo","avgAudioLevel","reduce","sum","currentValue","getNonNegativeValue","_calculateBitrate","fieldName","bytesNow","bytesBefore","bytesProcessed","bitrateKbps","nominated","availableIncomingBitrate","availableOutgoingBitrate","remoteUsedCandidate","localUsedCandidate","remoteIpAddress","remotePort","localIpAddress","localPort","localIp","networkType","frameHeight","frameWidth","framesPerSecond","framesSent","trackIdentifier","getSsrcByTrackId","hidden","_jid","_id","_conference","_hidden","_statsID","_connectionStatus","_properties","_identity","jitsiTrack","isWebRTCTrackMuted","oldValue","_isMediaTypeMuted","_JitsiConnectionEvents__WEBPACK_IMPORTED_MODULE_0__","_modules_xmpp_xmpp__WEBPACK_IMPORTED_MODULE_1__","rejectPromise","onLoginSuccessful","roomPassword","canceled","authenticationError","connectionError","MucConnectionPlugin","rooms","onPresence","onPresenceUnavailable","onPresenceError","onMessage","onMute","ChatRoom","createNonAnonymousRoom","packet2JSON","_arr","_arr2","json2packet","packet","filterNodeFromPresenceJSON","members","presHandlers","noBridgeAvailable","Moderator","initPresenceMap","lastPresences","phoneNumber","phonePin","participantPropertyListener","locked","JitsiTranscriptionStatus","xns","addVideoInfoToPresence","disableFocus","allocateConferenceFocus","fromJoin","getInfo","getForm","form","formSubmit","var","member","statusEl","hasStatusUpdate","hasVersionUpdate","xElement","mucUserItem","affiliation","getFocusUserJid","isHiddenDomain","fromHiddenDomain","xEl","extractIdentityInformation","userInfo","_arr3","_i3","newRole","_initFocus","memberOfThis","displayJids","att","phone","pin","processNode","tagHandlers","nickname","skipEvents","onMucMemberLeft","reasonSelect","doLeave","isKick","membersKeys","actorNick","actorSelect","onParticipantLeft","subjectText","stamp","dateParts","discoRoomInfo","kickIQ","onError","onNotSupported","formsubmit","handlerIdx","sendVideoInfoPresence","sendAudioInfoPresence","addAudioInfoToPresence","mutedNode","videoTypeNode","isSipGatewayEnabled","iqToFocus","onMucLeft","doReject","_browser__WEBPACK_IMPORTED_MODULE_1__","_settings_Settings__WEBPACK_IMPORTED_MODULE_2__","createExpBackoffTimer","step","count","origin","xmppService","getNextTimeout","getNextErrorTimeout","externalAuthEnabled","sipGatewayEnabled","call_control","attachEvent","setFocusUserJid","focusJid","focusUserJid","getFocusComponent","focusComponent","focus","createConferenceIq","openSctp","machineUID","machine-uid","session-id","enforcedBridge","enableTcc","enableRemb","minParticipants","audioPacketDelay","startBitrate","minBitrate","octo","probability","stereo","useRoomAsSharedDocumentName","parseSessionId","resultIq","parseConfigOptions","authenticationEnabled","_allocateConferenceFocusSuccess","_allocateConferenceFocusError","invalidSession","reservationErr","errorCode","errorTextNode","waitMs","retrySec","urlCallback","failureCallback","_getLoginUrl","popup","urlCb","decodeURIComponent","logout","logoutUrl","JingleConnectionPlugin","jvbIceConfig","p2pIceConfig","offerToReceiveAudio","offerToReceiveVideo","ConnectionPlugin","onJingle","fromJid","ack","sess","startMuted","modifyContents","replaceTransport","successTime","sendTransportReject","addRemoteStream","removeRemoteStream","me","onTerminated","iceservers","dict","credential","updateLog","doInitialize","ssrcOwners","SignalingLayer","oldChatRoom","_audioMuteHandler","_videoMuteHandler","_videoTypeHandler","SignalingEvents","getMediaPresenceInfo","_queue","_processQueueTasks","_stopped","kill","task","setImmediate","previous_async","only_once","fn","called","noConflict","_toString","_isArray","_each","_map","_keys","completed","eachSeries","iterate","forEachSeries","eachLimit","limit","_eachLimit","forEachLimit","started","running","replenish","doParallel","doSeries","_asyncMap","eachfn","mapSeries","mapLimit","_mapLimit","doParallelLimit","memo","inject","foldl","reduceRight","reversed","foldr","_filter","filterSeries","select","selectSeries","_reject","rejectSeries","main_callback","detectSeries","any","sortBy","criteria","left","right","auto","tasks","remainingTasks","taskComplete","theCallback","taskCallback","safeResults","rkey","requires","ready","retry","times","attempts","wrappedTask","wrappedCallback","wrappedResults","retryAttempt","finalAttempt","seriesCallback","series","waterfall","wrapIterator","_parallel","parallel","parallelLimit","makeCallback","cb","concatSeries","whilst","doWhilst","until","doUntil","worker","concurrency","_insert","drain","saturated","workers","empty","idle","priorityQueue","_compareTasks","sequence","compare","beg","end","_binarySearch","cargo","working","drained","_console_fn","memoize","hasher","queues","memoized","unmemoized","unmemoize","counter","timesSeries","seq","fns","newargs","nextargs","compose","_applyEach","go","applyEach","applyEachSeries","forever","strophe_js__WEBPACK_IMPORTED_MODULE_1__","_util_GlobalOnErrorHandler__WEBPACK_IMPORTED_MODULE_2__","_util_GlobalOnErrorHandler__WEBPACK_IMPORTED_MODULE_2___default","resetLastErrorStatusRegExpr","lastErrorStatusRegExpr","errStatusCapture","PING_TIMESTAMPS_TO_KEEP","PingConnectionPlugin","failedPings","pingExecIntervals","_addPingExecutionTimestamp","pingIntervals","maxInterval","previousTS","currentInterval","RayoConnectionPlugin","onRayo","roomPass","callResource","StropheLogger","logIncoming","logOutgoing","LastRequestTracker","_nextValidRid","_lastSuccess","stropheConnection","IDENTITY_PROPERTIES","IDENTITY_PROPERTIES_FOR_COMPARE","compareIdentities","generateSha","sortedIdentities","accumulatedValue","sortedFeatures","disco","versionToCapabilities","jidToVersion","_addChatRoom","_removeChatRoom","CAPS","_handleCaps","_onMucMemberLeft","_removeJidToVersionEntry","_generateVersion","_getDiscoInfo","sha","receivedNode","category","_fixChatRoomPresenceMap","_identities","_features","_notifyVersionChanged","oldVersion","dtmfSender","createDTMFSender","insertDTMF","_audioLevel","myUserID","_areRetriesEnabled","_closedFromClient","datachannel","createDataChannel","_handleChannel","_wsUrl","_initWebSocket","ws","timeoutS","_retryTimeout","reload","isOpen","closeEvent","_stopConnectionRetries","_startConnectionRetries","OPEN","colibriClass","msgPayload","jsonObject","pinnedEndpoint","endpointIds","selectedEndpoints","maxFrameHeightPixels","channel","dominantSpeakerEndpoint","endpoint","_retryWebSocketConnection","SIMULCAST_LAYERS","SIM_LAYER_RIDS","audioTransferActive","_addedStreams","localSSRCs","localUfrag","remoteUfrag","_peerVideoTypeChanged","_peerMutedChanged","statsinterval","Interop","interop","Simulcast","simulcast","numOfLayers","explodeRemoteSimulcast","sdpConsistency","SdpConsistency","localSdpMunger","LocalSdpMunger","rtxModifier","RtxModifier","what","onaddstream","_remoteStreamAdded","onremovestream","_remoteStreamRemoved","ondatachannel","_processStat","statValue","endTime","dumpSDP","_getDesiredMediaDirection","mediaTransferActive","hasAnyTracksOfType","isSimulcastOn","supportsSimulcast","videoTrack","_setVideoType","setMute","endpoints","endpointTrackMap","mediaTrack","findTrackById","onaddtrack","_remoteTrackAdded","onremovetrack","_remoteTrackRemoved","streamAudioTracks","streamVideoTracks","mediaLines","mls","trackSsrc","ownerEndpointId","getSSRCOwner","peerMediaInfo","getPeerMediaInfo","_createRemoteTrack","remoteTracksMap","existingTrack","JitsiRemoteTrack","isUserStream","_removeRemoteTrackById","_getRemoteTrackById","removedAudioTrack","removedVideoTrack","_removeRemoteTrack","toBeRemoved","normalizePlanB","firstSsrcs","newSsrcLines","isVersionGreaterThan","filteredLines","ssrcId","cnameLine","replaceDefaultUnifiedPlanMsid","resStr","_getSSRC","_injectSsrcGroupForUnifiedSimulcast","simulcast_03","getters","toPlanB","maybeAddMutedLocalVideoTracksToSDP","transformer","audioMedia","selectMedia","videoMedia","toRawSDP","enforceSendRecv","transformStreamIdentifiers","webrtcStream","_addStream","generateNewStreamSSRCInfo","setPrimarySsrc","setSsrcCache","fidGroups","rtxSsrcMapping","rtxSsrc","_assertTrackBelongs","webRtcStream","addStream","_removeStream","supportsRtpSender","_handleSenderRemoveStream","removeStream","doesBelong","isMediaStreamInPc","findSenderByStream","getSenders","sender","extractPrimarySSRC","opts","_ensureSimulcastGroupIsLast","localSdp","sdpStr","videoStartIndex","simStartIndex","otherStartIndex","simEndIndex","simStr","otherEndIndex","sdpHead","simStrTrimmed","sdpTail","_adjustLocalMediaDirection","modifiedDirection","desiredAudioDirection","desiredVideoDirection","parsedSdp","toUnifiedPlan","_insertUnifiedPlanSimulcastReceive","mungeRemoteDescription","stripRtx","_injectH264IfNotPresent","dummyPayloadType","payloadsArray","clearVideoSsrcCache","_iteratorNormalCompletion15","_didIteratorError15","_iteratorError15","_step15","_iterator15","peerTracks","_iteratorNormalCompletion16","_didIteratorError16","_iteratorError16","_step16","_iterator16","_removePeerConnection","simParams","encodings","scaleResolutionDownBy","setParameters","_createOfferOrAnswer","isOffer","handleSuccess","resultSdp","resolveFn","rejectFn","hasPrimarySsrcCached","makeVideoPrimarySsrcsConsistent","mungeLocalDescription","modifyRtxSsrcs","groupsMap","_iteratorNormalCompletion11","_didIteratorError11","_iteratorError11","_step11","_iterator11","_iteratorNormalCompletion12","_didIteratorError12","_iteratorError12","_step12","_iterator12","groupSSRCs","_iteratorNormalCompletion13","_didIteratorError13","_iteratorError13","_step13","_iterator13","_iteratorNormalCompletion14","_didIteratorError14","_iteratorError14","_step14","_iterator14","extractSSRCMap","_processLocalSSRCsMap","handleFailure","_iteratorNormalCompletion17","_didIteratorError17","_iteratorError17","_step17","_iterator17","trackMSID","newSSRCNum","oldSSRCNum","currNumSsrcs","videoSender","getParameters","simIndex","handleLayerSuspension","ttfmTrackerAudioAttached","ttfmTrackerVideoAttached","containerEvents","hasBeenMuted","_bindTrackHandlers","_containerHandlers","_containerEventHandler","_onTrackMute","_onTrackUnmute","gumStart","gumEnd","gumDuration","ttfm","_playCallback","_this$track","_getStatus","localVideos","isInPeerConnection","shouldFakeSdp","requiredSSRCs","ssrcCache","cachedPrimarySsrc","primaryCname","removeSSRC","addSSRCAttribute","addSSRCGroup","modifyRtxSsrcs2","pcId","streamAndTrackIDs","_addMutedLocalVideoTracksToSDP","sessionDesc","audioMLine","_transformMediaIdentifiers","updateAssociatedRtxStream","primarySsrcInfo","primarySsrcMsid","primarySsrcCname","previousRtxSSRC","getRtxSSRC","dumpSSRCGroups","removeGroupsWithSSRC","correspondingRtxSsrcs","ssrcMapping","sdpTransformer","getSSRCCount","primaryVideoSsrcs","getPrimaryVideoSSRCs","getSSRCAttrValue","correspondingRtxSsrc","previousAssociatedRtxStream","containsAnySSRCGroups","findGroups","removeGroupsBySemantics","injectRecvOnly","newPrimarySsrc","getPrimaryVideoSsrc","replaceSSRC","_eventFired","_trackMuteChanged","_trackAdded","_isLocalAudioTrack","STATS_MESSAGE_TYPE","kSimulcastFormats","layers","target","videoBitrateCap","getTarget","millisSinceStart","simulcastFormat","targetHeight","pixels","rampUp","_localStats","jvbRTT","_lastConnectionQualityUpdate","_remoteStats","_timeIceConnected","_timeVideoUnmuted","_timeLastBwCapRemoved","ConferenceEvents","_updateLocalConnectionQuality","ConnectionQualityEvents","_broadcastLocalStats","_updateRemoteStats","_updateLocalStats","_maybeUpdateUnmuteTime","bridgeCount","resolutionName","quality","activeTPC","newVideoBitrateCap","bandwidthLimiter","getBandwidthLimit","prevConnectionQuality","diffSeconds","updateLocalConnectionQuality","_calculateConnectionQuality","_canceled","_iceFailedTimeout","ParticipantWrapper","requests","lastRequestId","clearIntervals","sendRequest","handleResponse","maybeSendAnalytics","isDataChannelOpen","pingInterval","pingIntervalMs","analyticsInterval","analyticsIntervalMs","requestId","requestMessage","timeSent","E2ePingEvents","Infinity","participantJoined","participantLeft","messageReceived","dataChannelOpened","participantWrapper","handleRequest","_jvb121","evaluateStatus","oldStatus","_sessions","_chatRoom","_handleFocusPresence","_handleJibriPresence","getSession","getID","_addSession","_emitSessionUpdate","_createSession","_recordingXMLUtils$ge","setLiveStreamViewURL","offerOptions","PCMonitor","getStatsIntervalMs","getStatsInterval","rtts","stopped","startStatsInterval","handleCandidateRtt","rttTotal","candidateKey","responsesReceived","requestsSent","rttTotalDiff","responsesReceivedDiff","requestsResponsesDiff","supportsLocalCandidateRttStatistics","pcMonitors","startPCMonitors","initialDelay","AverageStatReport","calculate","ConnectionAvgStats","_n","_sampleIdx","_avgRTT","_avgRemoteRTTMap","_avgRtpStatsReporter","_avgEnd2EndRTT","_onConnectionStats","_calculateAvgStats","_onRemoteStatsUpdated","_processRemoteStats","supportsRTTStatistics","addNext","batchReport","conference_size","local_candidate_type","remote_candidate_type","transport_type","appendReport","jvbEnd2EndRTT","jvbStatsMonitor","avgRemoteRTT","_calculateAvgRemoteRTT","avgLocalRTT","_resetAvgStats","remoteAvg","avg","validData","rttAvg","_avgAudioBitrateUp","_avgAudioBitrateDown","_avgVideoBitrateUp","_avgVideoBitrateDown","_avgBandwidthUp","_avgBandwidthDown","_avgPacketLossTotal","_avgPacketLossUp","_avgPacketLossDown","_avgRemoteFPS","_avgRemoteScreenFPS","_avgLocalFPS","_avgLocalScreenFPS","_avgRemoteCameraPixels","_avgRemoteScreenPixels","_avgLocalCameraPixels","_avgLocalScreenPixels","_avgCQ","_onLocalStatsUpdated","_onP2PStatusChanged","p2pStatsMonitor","_onJvb121StatusChanged","_resetAvgJvbStats","confSize","supportsBandwidthStatistics","_calculateAvgVideoFps","_calculateAvgVideoPixels","peerResolutions","peerPixelsSum","myID","peerID","videosResolution","peerAvgPixels","_calculatePeerAvgVideoPixels","videos","peerSsrcCount","peerSsrcPixels","peerFpsSum","videosFps","peerAvgFPS","_calculatePeerAvgVideoFps","peerSsrcFps","_localAudioLevelCache","_reportedParticipants","_audioProblemCandidates","_numberOfRemoteAudioLevelsReceived","_onLocalAudioLevelsReport","_onRemoteAudioLevelReceived","_clearUserData","numberOfReports","isAudioMuted","_this$_audioProblemCa","localAudioLevelsString","dominantSpeakerId","_onDominantSpeaker","_onUserJoin","_onUserLeave","_onDisplayNameChange","_updateStats","oldDominantSpeaker","newDominantSpeaker","savedUser","markAsHasLeft","newStats","speakerStatsToUpdate","SphinxService","BEFORE_STATE","audioRecorder","transcriptionService","transcription","lineLength","hasPopulatedArrays","twoDimensionalArray","callBack","wordArray","getUTCMilliseconds","wordObject","begin","word","maybeMerge","recordingResult","merge","arrays","potentialWords","pushWordToSortedArray","lowestWordArray","wordToAdd","updateTranscription","foundSmaller","wordToCompare","getTranscription","getState","_statistics_statistics__WEBPACK_IMPORTED_MODULE_0__","processVersions","mucResource","getComponentVersion","componentName","sessionStateChangeListener","sessionStateChanged","handleJibriSIPState","Constants","sipaddress","setState","failure_reason","JitsiVideoSIPGWSession","addStateListener","removeStateListener","_sendJibriIQ","failureReason","oldState","displayname","BUSY","RESOURCE_CONSTRAINT","SERVICE_UNAVAILABLE","FILE","ProxyConnectionService","jitsiConnection","otherOptions","_objectWithoutProperties","_options","_peerConnection","_onFatalError","_onSendMessage","_onRemoteStream","getPeerJid","_convertStringToXML","$jingle","_createPeerConnection","receiveVideo","processMessage","_selfCloseConnection","xml","xmlDom","onRemoteStream","onSendMessage","ProxyConnectionPC","jitsiRemoteTrack","isVideo","convertVideoToDesktop","jitsiLocalTracks","newCreateLocalTracks","stringifiedIq","XMLSerializer","serializeToString","onConnectionClosed","receiveAudio","_onSessionAccept","_onSessionInitiate","_onSessionTerminate","_onTransportInfo","connectionStub","iceConfigStub","roomStub","_rtc","default","getAnalyticsAttributesFromOptions","audio_requested","video_requested","screen_sharing_requested","_mergeNamespaceAndModule","constants","recording","recordingConstants","sipVideoGW","events","errorTypes","logLevels","enableAnalyticsLogging","enableWindowOnErrorHandler","getGlobalOnErrorHandler","aprops","isWebRtcSupported","addGlobalLogTransport","globalTransport","removeGlobalLogTransport","setGlobalLogOptions","firePermissionPromptIsShownEvent","originalOptions","promiseFulfilled","emitEvent","mStream","currentlyAvailableMediaDevices","oldResolution","newResolution","resName","getLowerResolution","old_resolution","new_resolution","isMultipleAudioInputSupported","isCollectingLocalStats","lineno","colno","util","AuthUtil","JitsiMeetJS","logStorage","stringifyObjects","storeInterval","maxEntryLength","logLevel","_log","storeLogsIntervalID","totalLen","outputCache","someObject","formatLogMessage","prevMessage","_flush","_reschedulePublishInterval","force","reschedule","isReady","cachedQueue","storeLogs","webpackPolyfill","deprecate","paths","__webpack_amd_options__","scriptReadyRegex","fullPageUrl","pageUrl","scripts","supportsScriptReadyState","isNotOpera","hasNativeCurrentScriptAccessor","stackTraceLimit","hasStackBeforeThrowing","hasStackAfterThrowing","_nearestExecutingScript","eligibleScripts","skipStackDepth","getScriptUrlFromStack","remainingStack","ignoreMessage","getScriptFromUrl","hasAttribute","getSoleInlineScript","currentScript","thrownErr","near","far","strophe_js","_items","_onDiscoInfo","_onDiscoItems","addIdentity","lang","var_name","addItem","call_back","items","_buildIQResult","query_attrs","iqresult","scope","Timeout","clearFn","_clearFn","unref","ref","enroll","msecs","_idleTimeoutId","unenroll","_unrefActive","_onTimeout","clearImmediate","registerImmediate","messagePrefix","onGlobalMessage","nextHandle","tasksByHandle","currentlyRunningATask","attachTo","getPrototypeOf","handle","runIfPresent","postMessage","importScripts","postMessageIsAsynchronous","oldOnMessage","canUsePostMessage","MessageChannel","port1","port2","removeChild","adapterFactory","dependencies","shimChrome","shimFirefox","shimEdge","shimSafari","logging","browserDetails","adapter","chromeShim","edgeShim","firefoxShim","safariShim","commonShim","shimPeerConnection","browserShim","shimGetUserMedia","shimMediaStream","shimSourceObject","shimOnTrack","shimAddTrackRemoveTrack","shimGetSendersWithDtmf","shimRTCIceCandidate","shimReplaceTrack","shimRTCIceServerUrls","shimCallbacksAPI","shimLocalStreamsAPI","shimRemoteStreamsAPI","shimTrackEventTransceiver","shimCreateOfferLegacy","webkitMediaStream","_ontrack","origSetRemoteDescription","_ontrackpoly","te","receiver","getReceivers","Event","dispatchEvent","shimSenderWithDtmf","dtmf","_dtmf","_pc","_senders","origAddTrack","origRemoveTrack","origAddStream","origRemoveStream","RTCRtpSender","origGetSenders","HTMLMediaElement","_srcObject","origGetLocalStreams","getLocalStreams","nativeStreams","_reverseStreams","_streams","DOMException","newStream","oldStream","nativeMethod","replaceInternalStreamId","origSetLocalDescription","internalId","externalStream","internalStream","replaceExternalStreamId","origLocalDescription","getOwnPropertyDescriptor","OrigPeerConnection","pcConfig","newIceServers","generateCertificate","iceTransports","origGetStats","selector","fixChromeStats_","standardReport","standardStats","localcandidate","remotecandidate","makeMapStats","nativeAddIceCandidate","constraintsToChrome_","cc","oldname_","oc","mix","advanced","shimConstraints_","remap","face","getSupportedFacingModeLies","getSupportedConstraints","dev","shimError_","PermissionDeniedError","InvalidStateError","DevicesNotFoundError","ConstraintNotSatisfiedError","TrackStartError","MediaDeviceFailedDueToShutdown","MediaDeviceKillSwitchOn","getUserMediaPromise_","kinds","MediaStreamTrack","getSources","origGetUserMedia","shimRTCPeerConnection","RTCIceGatherer","origMSTEnabled","RTCDtmfSender","setTrack","dtlsRole","getCommonCapabilities","localCapabilities","remoteCapabilities","commonCapabilities","findCodecByPayloadType","rtxCapabilityMatches","lRtx","rRtx","lCodecs","rCodecs","lCodec","rCodec","lHeaderExtension","rHeaderExtension","isActionAllowedInSignalingState","maybeAddCandidate","iceTransport","alreadyAdded","getRemoteCandidates","remoteCandidate","addRemoteCandidate","makeError","addTrackToStreamAndFireEvent","MediaStreamTrackEvent","fireAddTrack","trackEvent","_dispatchEvent","_eventTarget","canTrickleIceCandidates","needNegotiation","localStreams","remoteStreams","iceGatheringState","usingBundle","bundlePolicy","rtcpMuxPolicy","hasTurn","isString","filterIceServers","_iceGatherers","iceCandidatePoolSize","gatherPolicy","_config","transceivers","_sdpSessionId","_sdpSessionVersion","_dtlsRole","_isClosed","ontrack","onicegatheringstatechange","_emitGatheringStateChange","getConfiguration","getRemoteStreams","_createTransceiver","hasBundleTransport","recvEncodingParameters","associatedRemoteMediaStreams","wantReceive","_createIceAndDtlsTransports","_maybeFireNegotiationNeeded","clonedStream","clonedTrack","_createIceGatherer","writable","bufferedCandidateEvents","bufferCandidates","_gather","onlocalcandidate","evt","serializedCandidate","complete","RTCIceTransport","onicestatechange","_updateConnectionState","RTCDtlsTransport","ondtlsstatechange","_disposeIceAndDtlsTransports","_transceive","recv","receive","isIceLite","isDatachannel","remoteIceParameters","remoteDtlsParameters","_updateSignalingState","receiverList","iceOptions","rejected","remoteMsid","isComplete","setTransport","setRemoteCandidates","RTCRtpReceiver","getCapabilities","isNewTrack","nativeTrack","states","new","connecting","checking","disconnected","failed","numAudioTracks","numVideoTracks","getLocalCandidates","mediaSectionsInOffer","candidateString","inboundrtp","outboundrtp","candidatepair","RTCTrackEvent","mozSrcObject","mozRTCPeerConnection","newServer","mozRTCSessionDescription","mozRTCIceCandidate","modernStatsTypes","nativeGetStats","onSucc","onErr","InternalError","NotSupportedError","SecurityError","The operation is insecure.","getUserMedia_","constraintsToFF37_","orgEnumerateDevices","nativeGetUserMedia","nativeGetSettings","nativeApplyConstraints","_localStreams","getStreamById","_remoteStreams","_addTrack","_onaddstream","_onaddstreampoly","withCallback","errcb","RTCTransceiver","origCreateOffer","audioTransceiver","getTransceivers","setDirection","addTransceiver","videoTransceiver","NativeRTCIceCandidate","nativeCandidate","parsedCandidate","augmentedCandidate","toJSON","eventNameToWrap","nativeAddEventListener","nativeEventName","_eventMap","nativeRemoveEventListener","unwrappedCb","wrapPeerConnectionEvent","nativeCreateObjectURL","nativeRevokeObjectURL","newId","dsc","nativeSetAttribute","toIntIfInt","parseReg","needsBlank","keyLocation","rawName","attachProperties","validLine","paramReducer","acc","scid","formatRegExp","makeLine","formatStr","defaultOuterOrder","defaultInnerOrder","outerOrder","innerOrder","midToString","mlB2UMap","mlU2BMap","candidateToUnifiedPlan","candidateToPlanB","getFirstSendingIndexFromAnswer","rewrite","type2bl","types","directionResult","uLine","rtcpMux","directionMasks","bundleOnly","mids","msidSemantic","semantic","cached","hasBundle","recvonlySsrcs","mid2ul","bIdx","uIdx","bLine","uLineData","iceUfrag","icePwd","ssrc2group","ssrc2ml","related","inactive","recvonly","sendonly","sendrecv","transformUtils","parseSsrcs","writeSsrcs","DEFAULT_NUM_OF_LAYERS","processVideo","validateDescription","clearSsrcCache","_parseSimLayers","_buildNewToOldSsrcMap","newSsrcList","oldSsrcList","newSsrc","oldSsrc","_fillInSourceDataFromCache","newSimSsrcs","newMsid","newCname","ssrcsToReplace","ssrcsToAdd","_generateSourceData","addAssociatedStream","simSsrcs","simSsrc","_restoreSimulcast","simulcastSsrcs","relatedGroup","relatedSsrcs","relatedSSRC","simulcastGroup","nuke","implodeRemoteSimulcast","invalid","assertGoogConference","TranscriptionService","Word","sphinxURL","toReturn","getURL","audioFileBlob","DONE","formatResponse","objects","filler","verify","audioBlob","getWord","getBeginTime","getEndTime"],"mappings":"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","file":"lib-jitsi-meet.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"JitsiMeetJS\"] = factory();\n\telse\n\t\troot[\"JitsiMeetJS\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 118);\n","const XMPPEvents = {\n    /**\n     * Indicates error while adding ice candidate.\n     */\n    ADD_ICE_CANDIDATE_FAILED: 'xmpp.add_ice_candidate_failed',\n\n    // Designates an event indicating that the focus has asked us to mute our\n    // audio.\n    AUDIO_MUTED_BY_FOCUS: 'xmpp.audio_muted_by_focus',\n    AUTHENTICATION_REQUIRED: 'xmpp.authentication_required',\n    BRIDGE_DOWN: 'xmpp.bridge_down',\n\n    /**\n     * Triggered when 'session-accept' is received from the responder.\n     */\n    CALL_ACCEPTED: 'xmpp.callaccepted.jingle',\n\n    // Designates an event indicating that an offer (e.g. Jingle\n    // session-initiate) was received.\n    CALL_INCOMING: 'xmpp.callincoming.jingle',\n\n    // Triggered when Jicofo kills our media session, this can happen while\n    // we're still in the MUC, when it decides to terminate the media session.\n    // For example when the session is idle for too long, because we're the only\n    // person in the conference room.\n    CALL_ENDED: 'xmpp.callended.jingle',\n    CHAT_ERROR_RECEIVED: 'xmpp.chat_error_received',\n\n    // The conference properties (as advertised by jicofo) have changed\n    CONFERENCE_PROPERTIES_CHANGED: 'xmpp.conference_properties_changed',\n\n    /**\n     * This event is triggered when the ICE connects for the first time.\n     */\n    CONNECTION_ESTABLISHED: 'xmpp.connection.connected',\n\n    // Designates an event indicating that the connection to the XMPP server\n    // failed.\n    CONNECTION_FAILED: 'xmpp.connection.failed',\n\n    // Designates an event indicating that the media (ICE) connection was\n    // interrupted. This should go to the RTC module.\n    CONNECTION_INTERRUPTED: 'xmpp.connection.interrupted',\n\n    // Designates an event indicating that the media (ICE) connection was\n    // restored. This should go to the RTC module.\n    CONNECTION_RESTORED: 'xmpp.connection.restored',\n\n    // Designates an event indicating that the media (ICE) connection failed.\n    // This should go to the RTC module.\n    CONNECTION_ICE_FAILED: 'xmpp.connection.ice.failed',\n\n    /**\n     * Designates an event indicating connection status changes.\n     */\n    CONNECTION_STATUS_CHANGED: 'xmpp.connection.status.changed',\n\n    // Designates an event indicating that the display name of a participant\n    // has changed.\n    DISPLAY_NAME_CHANGED: 'xmpp.display_name_changed',\n\n    /**\n     * Chat room instance have been added to Strophe.emuc plugin.\n     */\n    EMUC_ROOM_ADDED: 'xmpp.emuc_room_added',\n\n    /**\n     * Chat room instance have been removed from Strophe.emuc plugin.\n     */\n    EMUC_ROOM_REMOVED: 'xmpp.emuc_room_removed',\n    ETHERPAD: 'xmpp.etherpad',\n    FOCUS_DISCONNECTED: 'xmpp.focus_disconnected',\n    FOCUS_LEFT: 'xmpp.focus_left',\n    GRACEFUL_SHUTDOWN: 'xmpp.graceful_shutdown',\n\n    /**\n     * Event fired when 'transport-replace' Jingle message has been received,\n     * before the new offer is set on the PeerConnection.\n     */\n    ICE_RESTARTING: 'rtc.ice_restarting',\n\n    /**\n     * Event fired after the 'transport-replace' message has been processed\n     * and the new offer has been set successfully.\n     */\n    ICE_RESTART_SUCCESS: 'rtc.ice_restart_success',\n\n    /**\n     * Designates an event indicating that we were kicked from the XMPP MUC.\n     * @param {boolean} isSelfPresence - whether it is for local participant\n     * or another participant.\n     * @param {string} actorJid - the jid of the participant who was initator\n     * of the kick.\n     * @param {?string} participantJid - when it is not a kick for local participant,\n     * this is the jid of the participant which was kicked.\n     */\n    KICKED: 'xmpp.kicked',\n\n    // Designates an event indicating that our role in the XMPP MUC has changed.\n    LOCAL_ROLE_CHANGED: 'xmpp.localrole_changed',\n\n    // Designates an event indicating that an XMPP message in the MUC was\n    // received.\n    MESSAGE_RECEIVED: 'xmpp.message_received',\n\n    // Designates an event indicating that a private XMPP message in the MUC was\n    // received.\n    PRIVATE_MESSAGE_RECEIVED: 'xmpp.private_message_received',\n\n    // Designates an event indicating that a bot participant type had changed\n    MUC_MEMBER_BOT_TYPE_CHANGED: 'xmpp.muc_member_bot_type_changed',\n\n    // Designates an event indicating that the XMPP MUC was destroyed.\n    MUC_DESTROYED: 'xmpp.muc_destroyed',\n\n    // Designates an event indicating that we have joined the XMPP MUC.\n    MUC_JOINED: 'xmpp.muc_joined',\n\n    // Designates an event indicating that a participant joined the XMPP MUC.\n    MUC_MEMBER_JOINED: 'xmpp.muc_member_joined',\n\n    // Designates an event indicating that a participant left the XMPP MUC.\n    MUC_MEMBER_LEFT: 'xmpp.muc_member_left',\n\n    // Designates an event indicating that local participant left the muc\n    MUC_LEFT: 'xmpp.muc_left',\n\n    // Designates an event indicating that the MUC role of a participant has\n    // changed.\n    MUC_ROLE_CHANGED: 'xmpp.muc_role_changed',\n\n    // Designates an event indicating that the MUC has been locked or unlocked.\n    MUC_LOCK_CHANGED: 'xmpp.muc_lock_changed',\n\n    // Designates an event indicating that a participant in the XMPP MUC has\n    // advertised that they have audio muted (or unmuted).\n    PARTICIPANT_AUDIO_MUTED: 'xmpp.audio_muted',\n\n    // Designates an event indicating that a participant in the XMPP MUC has\n    // advertised that they have video muted (or unmuted).\n    PARTICIPANT_VIDEO_MUTED: 'xmpp.video_muted',\n\n    // Designates an event indicating that the video type (e.g. 'camera' or\n    // 'screen') for a participant has changed.\n    // Note: currently this event fires every time we receive presence from\n    // someone (regardless of whether or not the \"video type\" changed).\n    PARTICIPANT_VIDEO_TYPE_CHANGED: 'xmpp.video_type',\n\n    /**\n     * Indicates that the features of the participant has been changed.\n     */\n    PARTCIPANT_FEATURES_CHANGED: 'xmpp.partcipant_features_changed',\n    PASSWORD_REQUIRED: 'xmpp.password_required',\n    PEERCONNECTION_READY: 'xmpp.peerconnection_ready',\n\n    /**\n     * Indicates that phone number changed.\n     */\n    PHONE_NUMBER_CHANGED: 'conference.phoneNumberChanged',\n    PRESENCE_RECEIVED: 'xmpp.presence_received',\n    PRESENCE_STATUS: 'xmpp.presence_status',\n    PROMPT_FOR_LOGIN: 'xmpp.prompt_for_login',\n\n    // xmpp is connected and obtained user media\n    READY_TO_JOIN: 'xmpp.ready_to_join',\n\n    /**\n     * Indicates that recording state changed.\n     */\n    RECORDER_STATE_CHANGED: 'xmpp.recorderStateChanged',\n\n    // Designates an event indicating that we received statistics from a\n    // participant in the MUC.\n    REMOTE_STATS: 'xmpp.remote_stats',\n\n    /**\n     * Indicates that the offer / answer renegotiation has failed.\n     */\n    RENEGOTIATION_FAILED: 'xmpp.renegotiation_failed',\n    RESERVATION_ERROR: 'xmpp.room_reservation_error',\n    ROOM_CONNECT_ERROR: 'xmpp.room_connect_error',\n    ROOM_CONNECT_NOT_ALLOWED_ERROR: 'xmpp.room_connect_error.not_allowed',\n    ROOM_JOIN_ERROR: 'xmpp.room_join_error',\n\n    /**\n     * Indicates that max users limit has been reached.\n     */\n    ROOM_MAX_USERS_ERROR: 'xmpp.room_max_users_error',\n\n    // Designates an event indicating that we sent an XMPP message to the MUC.\n    SENDING_CHAT_MESSAGE: 'xmpp.sending_chat_message',\n\n    // Designates an event indicating that we sent a private XMPP message to\n    // a specific user of the muc.\n    SENDING_PRIVATE_CHAT_MESSAGE: 'xmpp.sending_private_chat_message',\n\n    /**\n     * Event fired when we do not get our 'session-accept' acknowledged by\n     * Jicofo. It most likely means that there is serious problem with our\n     * connection or XMPP server and we should reload the conference.\n     *\n     * We have seen that to happen in BOSH requests race condition when the BOSH\n     * request table containing the 'session-accept' was discarded by Prosody.\n     * Jicofo does send the RESULT immediately without any condition, so missing\n     * packets means that most likely it has never seen our IQ.\n     */\n    SESSION_ACCEPT_TIMEOUT: 'xmpp.session_accept_timeout',\n\n    /**\n     * Event fired when speaker stats update message is received.\n     */\n    SPEAKER_STATS_RECEIVED: 'xmpp.speaker_stats_received',\n\n    // Designates an event indicating that we should join the conference with\n    // audio and/or video muted.\n    START_MUTED_FROM_FOCUS: 'xmpp.start_muted_from_focus',\n\n    // Designates an event indicating that the subject of the XMPP MUC has\n    // changed.\n    SUBJECT_CHANGED: 'xmpp.subject_changed',\n\n    // FIXME: how does it belong to XMPP ? - it's detected by the PeerConnection\n    // suspending detected\n    SUSPEND_DETECTED: 'xmpp.suspend_detected',\n\n    /**\n     * Notifies for transcription status changes. The event provides the\n     * following parameters to its listeners:\n     *\n     * @param {String} status - The new status.\n     */\n    TRANSCRIPTION_STATUS_CHANGED: 'xmpp.transcription_status_changed',\n\n    /**\n     * Event fired when 'transport-info' with new ICE candidates is received.\n     */\n    TRANSPORT_INFO: 'xmpp.transportinfo.jingle',\n\n    /**\n     * Indicates that video SIP GW state changed.\n     *\n     * @param {VideoSIPGWConstants} status - Any of the following statuses:\n     * STATUS_BUSY, STATUS_AVAILABLE or STATUS_UNDEFINED.\n     */\n    VIDEO_SIP_GW_AVAILABILITY_CHANGED: 'xmpp.videoSIPGWAvailabilityChanged',\n\n    /**\n     * Indicates that video SIP GW Session state changed.\n     * The statuses are any of the following statuses:\n     * STATE_ON, STATE_OFF, STATE_PENDING, STATE_RETRYING, STATE_FAILED.\n     * {@see VideoSIPGWConstants}\n     *\n     * @param {options} event - {address, oldState, newState, displayName}.\n     */\n    VIDEO_SIP_GW_SESSION_STATE_CHANGED:\n        'xmpp.videoSIPGWSessionStateChanged',\n\n    // Designates an event indicating that the local ICE connection state has\n    // changed.\n    ICE_CONNECTION_STATE_CHANGED: 'xmpp.ice_connection_state_changed',\n\n    /**\n     * Event which is emitted when the body in an XMPP message in the MUC\n     * contains JSON\n     */\n    JSON_MESSAGE_RECEIVED: 'xmmp.json_message_received'\n};\n\nmodule.exports = XMPPEvents;\n","/** File: strophe.js\n *  A JavaScript library for writing XMPP clients.\n *\n *  This library uses either Bidirectional-streams Over Synchronous HTTP (BOSH)\n *  to emulate a persistent, stateful, two-way connection to an XMPP server or\n *  alternatively WebSockets.\n *\n *  More information on BOSH can be found in XEP 124.\n *  For more information on XMPP-over WebSocket see this RFC:\n *  http://tools.ietf.org/html/rfc7395\n */\n\n/* All of the Strophe globals are defined in this special function below so\n * that references to the globals become closures.  This will ensure that\n * on page reload, these references will still be available to callbacks\n * that are still executing.\n */\n\n/* jshint ignore:start */\n(function (root, factory) {\n    if (typeof define === 'function' && define.amd) {\n        //Allow using this built library as an AMD module\n        //in another project. That other project will only\n        //see this AMD call, not the internal modules in\n        //the closure below.\n        define([], factory);\n    } else {\n        //Browser globals case.\n        var wrapper = factory();\n        root.Strophe        = wrapper.Strophe;\n        root.$build         = wrapper.$build;\n        root.$iq            = wrapper.$iq;\n        root.$msg           = wrapper.$msg;\n        root.$pres          = wrapper.$pres;\n        root.SHA1           = wrapper.SHA1;\n        root.MD5            = wrapper.MD5;\n        root.b64_hmac_sha1  = wrapper.b64_hmac_sha1;\n        root.b64_sha1       = wrapper.b64_sha1;\n        root.str_hmac_sha1  = wrapper.str_hmac_sha1;\n        root.str_sha1       = wrapper.str_sha1;\n    }\n}(this, function () {\n    //almond, and your modules will be inlined here\n/* jshint ignore:end */\n/**\n * @license almond 0.3.3 Copyright jQuery Foundation and other contributors.\n * Released under MIT license, http://github.com/requirejs/almond/LICENSE\n */\n//Going sloppy to avoid 'use strict' string cost, but strict practices should\n//be followed.\n/*global setTimeout: false */\n\nvar requirejs, require, define;\n(function (undef) {\n    var main, req, makeMap, handlers,\n        defined = {},\n        waiting = {},\n        config = {},\n        defining = {},\n        hasOwn = Object.prototype.hasOwnProperty,\n        aps = [].slice,\n        jsSuffixRegExp = /\\.js$/;\n\n    function hasProp(obj, prop) {\n        return hasOwn.call(obj, prop);\n    }\n\n    /**\n     * Given a relative module name, like ./something, normalize it to\n     * a real name that can be mapped to a path.\n     * @param {String} name the relative name\n     * @param {String} baseName a real name that the name arg is relative\n     * to.\n     * @returns {String} normalized name\n     */\n    function normalize(name, baseName) {\n        var nameParts, nameSegment, mapValue, foundMap, lastIndex,\n            foundI, foundStarMap, starI, i, j, part, normalizedBaseParts,\n            baseParts = baseName && baseName.split(\"/\"),\n            map = config.map,\n            starMap = (map && map['*']) || {};\n\n        //Adjust any relative paths.\n        if (name) {\n            name = name.split('/');\n            lastIndex = name.length - 1;\n\n            // If wanting node ID compatibility, strip .js from end\n            // of IDs. Have to do this here, and not in nameToUrl\n            // because node allows either .js or non .js to map\n            // to same file.\n            if (config.nodeIdCompat && jsSuffixRegExp.test(name[lastIndex])) {\n                name[lastIndex] = name[lastIndex].replace(jsSuffixRegExp, '');\n            }\n\n            // Starts with a '.' so need the baseName\n            if (name[0].charAt(0) === '.' && baseParts) {\n                //Convert baseName to array, and lop off the last part,\n                //so that . matches that 'directory' and not name of the baseName's\n                //module. For instance, baseName of 'one/two/three', maps to\n                //'one/two/three.js', but we want the directory, 'one/two' for\n                //this normalization.\n                normalizedBaseParts = baseParts.slice(0, baseParts.length - 1);\n                name = normalizedBaseParts.concat(name);\n            }\n\n            //start trimDots\n            for (i = 0; i < name.length; i++) {\n                part = name[i];\n                if (part === '.') {\n                    name.splice(i, 1);\n                    i -= 1;\n                } else if (part === '..') {\n                    // If at the start, or previous value is still ..,\n                    // keep them so that when converted to a path it may\n                    // still work when converted to a path, even though\n                    // as an ID it is less than ideal. In larger point\n                    // releases, may be better to just kick out an error.\n                    if (i === 0 || (i === 1 && name[2] === '..') || name[i - 1] === '..') {\n                        continue;\n                    } else if (i > 0) {\n                        name.splice(i - 1, 2);\n                        i -= 2;\n                    }\n                }\n            }\n            //end trimDots\n\n            name = name.join('/');\n        }\n\n        //Apply map config if available.\n        if ((baseParts || starMap) && map) {\n            nameParts = name.split('/');\n\n            for (i = nameParts.length; i > 0; i -= 1) {\n                nameSegment = nameParts.slice(0, i).join(\"/\");\n\n                if (baseParts) {\n                    //Find the longest baseName segment match in the config.\n                    //So, do joins on the biggest to smallest lengths of baseParts.\n                    for (j = baseParts.length; j > 0; j -= 1) {\n                        mapValue = map[baseParts.slice(0, j).join('/')];\n\n                        //baseName segment has  config, find if it has one for\n                        //this name.\n                        if (mapValue) {\n                            mapValue = mapValue[nameSegment];\n                            if (mapValue) {\n                                //Match, update name to the new value.\n                                foundMap = mapValue;\n                                foundI = i;\n                                break;\n                            }\n                        }\n                    }\n                }\n\n                if (foundMap) {\n                    break;\n                }\n\n                //Check for a star map match, but just hold on to it,\n                //if there is a shorter segment match later in a matching\n                //config, then favor over this star map.\n                if (!foundStarMap && starMap && starMap[nameSegment]) {\n                    foundStarMap = starMap[nameSegment];\n                    starI = i;\n                }\n            }\n\n            if (!foundMap && foundStarMap) {\n                foundMap = foundStarMap;\n                foundI = starI;\n            }\n\n            if (foundMap) {\n                nameParts.splice(0, foundI, foundMap);\n                name = nameParts.join('/');\n            }\n        }\n\n        return name;\n    }\n\n    function makeRequire(relName, forceSync) {\n        return function () {\n            //A version of a require function that passes a moduleName\n            //value for items that may need to\n            //look up paths relative to the moduleName\n            var args = aps.call(arguments, 0);\n\n            //If first arg is not require('string'), and there is only\n            //one arg, it is the array form without a callback. Insert\n            //a null so that the following concat is correct.\n            if (typeof args[0] !== 'string' && args.length === 1) {\n                args.push(null);\n            }\n            return req.apply(undef, args.concat([relName, forceSync]));\n        };\n    }\n\n    function makeNormalize(relName) {\n        return function (name) {\n            return normalize(name, relName);\n        };\n    }\n\n    function makeLoad(depName) {\n        return function (value) {\n            defined[depName] = value;\n        };\n    }\n\n    function callDep(name) {\n        if (hasProp(waiting, name)) {\n            var args = waiting[name];\n            delete waiting[name];\n            defining[name] = true;\n            main.apply(undef, args);\n        }\n\n        if (!hasProp(defined, name) && !hasProp(defining, name)) {\n            throw new Error('No ' + name);\n        }\n        return defined[name];\n    }\n\n    //Turns a plugin!resource to [plugin, resource]\n    //with the plugin being undefined if the name\n    //did not have a plugin prefix.\n    function splitPrefix(name) {\n        var prefix,\n            index = name ? name.indexOf('!') : -1;\n        if (index > -1) {\n            prefix = name.substring(0, index);\n            name = name.substring(index + 1, name.length);\n        }\n        return [prefix, name];\n    }\n\n    //Creates a parts array for a relName where first part is plugin ID,\n    //second part is resource ID. Assumes relName has already been normalized.\n    function makeRelParts(relName) {\n        return relName ? splitPrefix(relName) : [];\n    }\n\n    /**\n     * Makes a name map, normalizing the name, and using a plugin\n     * for normalization if necessary. Grabs a ref to plugin\n     * too, as an optimization.\n     */\n    makeMap = function (name, relParts) {\n        var plugin,\n            parts = splitPrefix(name),\n            prefix = parts[0],\n            relResourceName = relParts[1];\n\n        name = parts[1];\n\n        if (prefix) {\n            prefix = normalize(prefix, relResourceName);\n            plugin = callDep(prefix);\n        }\n\n        //Normalize according\n        if (prefix) {\n            if (plugin && plugin.normalize) {\n                name = plugin.normalize(name, makeNormalize(relResourceName));\n            } else {\n                name = normalize(name, relResourceName);\n            }\n        } else {\n            name = normalize(name, relResourceName);\n            parts = splitPrefix(name);\n            prefix = parts[0];\n            name = parts[1];\n            if (prefix) {\n                plugin = callDep(prefix);\n            }\n        }\n\n        //Using ridiculous property names for space reasons\n        return {\n            f: prefix ? prefix + '!' + name : name, //fullName\n            n: name,\n            pr: prefix,\n            p: plugin\n        };\n    };\n\n    function makeConfig(name) {\n        return function () {\n            return (config && config.config && config.config[name]) || {};\n        };\n    }\n\n    handlers = {\n        require: function (name) {\n            return makeRequire(name);\n        },\n        exports: function (name) {\n            var e = defined[name];\n            if (typeof e !== 'undefined') {\n                return e;\n            } else {\n                return (defined[name] = {});\n            }\n        },\n        module: function (name) {\n            return {\n                id: name,\n                uri: '',\n                exports: defined[name],\n                config: makeConfig(name)\n            };\n        }\n    };\n\n    main = function (name, deps, callback, relName) {\n        var cjsModule, depName, ret, map, i, relParts,\n            args = [],\n            callbackType = typeof callback,\n            usingExports;\n\n        //Use name if no relName\n        relName = relName || name;\n        relParts = makeRelParts(relName);\n\n        //Call the callback to define the module, if necessary.\n        if (callbackType === 'undefined' || callbackType === 'function') {\n            //Pull out the defined dependencies and pass the ordered\n            //values to the callback.\n            //Default to [require, exports, module] if no deps\n            deps = !deps.length && callback.length ? ['require', 'exports', 'module'] : deps;\n            for (i = 0; i < deps.length; i += 1) {\n                map = makeMap(deps[i], relParts);\n                depName = map.f;\n\n                //Fast path CommonJS standard dependencies.\n                if (depName === \"require\") {\n                    args[i] = handlers.require(name);\n                } else if (depName === \"exports\") {\n                    //CommonJS module spec 1.1\n                    args[i] = handlers.exports(name);\n                    usingExports = true;\n                } else if (depName === \"module\") {\n                    //CommonJS module spec 1.1\n                    cjsModule = args[i] = handlers.module(name);\n                } else if (hasProp(defined, depName) ||\n                           hasProp(waiting, depName) ||\n                           hasProp(defining, depName)) {\n                    args[i] = callDep(depName);\n                } else if (map.p) {\n                    map.p.load(map.n, makeRequire(relName, true), makeLoad(depName), {});\n                    args[i] = defined[depName];\n                } else {\n                    throw new Error(name + ' missing ' + depName);\n                }\n            }\n\n            ret = callback ? callback.apply(defined[name], args) : undefined;\n\n            if (name) {\n                //If setting exports via \"module\" is in play,\n                //favor that over return value and exports. After that,\n                //favor a non-undefined return value over exports use.\n                if (cjsModule && cjsModule.exports !== undef &&\n                        cjsModule.exports !== defined[name]) {\n                    defined[name] = cjsModule.exports;\n                } else if (ret !== undef || !usingExports) {\n                    //Use the return value from the function.\n                    defined[name] = ret;\n                }\n            }\n        } else if (name) {\n            //May just be an object definition for the module. Only\n            //worry about defining if have a module name.\n            defined[name] = callback;\n        }\n    };\n\n    requirejs = require = req = function (deps, callback, relName, forceSync, alt) {\n        if (typeof deps === \"string\") {\n            if (handlers[deps]) {\n                //callback in this case is really relName\n                return handlers[deps](callback);\n            }\n            //Just return the module wanted. In this scenario, the\n            //deps arg is the module name, and second arg (if passed)\n            //is just the relName.\n            //Normalize module name, if it contains . or ..\n            return callDep(makeMap(deps, makeRelParts(callback)).f);\n        } else if (!deps.splice) {\n            //deps is a config object, not an array.\n            config = deps;\n            if (config.deps) {\n                req(config.deps, config.callback);\n            }\n            if (!callback) {\n                return;\n            }\n\n            if (callback.splice) {\n                //callback is an array, which means it is a dependency list.\n                //Adjust args if there are dependencies\n                deps = callback;\n                callback = relName;\n                relName = null;\n            } else {\n                deps = undef;\n            }\n        }\n\n        //Support require(['a'])\n        callback = callback || function () {};\n\n        //If relName is a function, it is an errback handler,\n        //so remove it.\n        if (typeof relName === 'function') {\n            relName = forceSync;\n            forceSync = alt;\n        }\n\n        //Simulate async callback;\n        if (forceSync) {\n            main(undef, deps, callback, relName);\n        } else {\n            //Using a non-zero value because of concern for what old browsers\n            //do, and latest browsers \"upgrade\" to 4 if lower value is used:\n            //http://www.whatwg.org/specs/web-apps/current-work/multipage/timers.html#dom-windowtimers-settimeout:\n            //If want a value immediately, use require('id') instead -- something\n            //that works in almond on the global level, but not guaranteed and\n            //unlikely to work in other AMD implementations.\n            setTimeout(function () {\n                main(undef, deps, callback, relName);\n            }, 4);\n        }\n\n        return req;\n    };\n\n    /**\n     * Just drops the config on the floor, but returns req in case\n     * the config return value is used.\n     */\n    req.config = function (cfg) {\n        return req(cfg);\n    };\n\n    /**\n     * Expose module registry for debugging and tooling\n     */\n    requirejs._defined = defined;\n\n    define = function (name, deps, callback) {\n        if (typeof name !== 'string') {\n            throw new Error('See almond README: incorrect module build, no module name');\n        }\n\n        //This module may not have dependencies\n        if (!deps.splice) {\n            //deps is not an array, so probably means\n            //an object literal or factory function for\n            //the value. Adjust args.\n            callback = deps;\n            deps = [];\n        }\n\n        if (!hasProp(defined, name) && !hasProp(waiting, name)) {\n            waiting[name] = [name, deps, callback];\n        }\n    };\n\n    define.amd = {\n        jQuery: true\n    };\n}());\n\ndefine(\"node_modules/almond/almond.js\", function(){});\n\n/*\n    This program is distributed under the terms of the MIT license.\n    Please see the LICENSE file for details.\n\n    Copyright 2006-2008, OGG, LLC\n*/\n/* jshint undef: true, unused: true:, noarg: true, latedef: true */\n/* global define */\n\n(function (root, factory) {\n    if (typeof define === 'function' && define.amd) {\n        define('strophe-polyfill',[], function () {\n            return factory(root);\n        });\n    } else {\n        // Browser globals\n        return factory(root);\n    }\n}(this, function (root) {\n\n/** Function: Function.prototype.bind\n *  Bind a function to an instance.\n *\n *  This Function object extension method creates a bound method similar\n *  to those in Python.  This means that the 'this' object will point\n *  to the instance you want.  See <MDC's bind() documentation at https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function/bind>\n *  and <Bound Functions and Function Imports in JavaScript at http://benjamin.smedbergs.us/blog/2007-01-03/bound-functions-and-function-imports-in-javascript/>\n *  for a complete explanation.\n *\n *  This extension already exists in some browsers (namely, Firefox 3), but\n *  we provide it to support those that don't.\n *\n *  Parameters:\n *    (Object) obj - The object that will become 'this' in the bound function.\n *    (Object) argN - An option argument that will be prepended to the\n *      arguments given for the function call\n *\n *  Returns:\n *    The bound function.\n */\nif (!Function.prototype.bind) {\n    Function.prototype.bind = function (obj /*, arg1, arg2, ... */) {\n        var func = this;\n        var _slice = Array.prototype.slice;\n        var _concat = Array.prototype.concat;\n        var _args = _slice.call(arguments, 1);\n        return function () {\n            return func.apply(obj ? obj : this, _concat.call(_args, _slice.call(arguments, 0)));\n        };\n    };\n}\n\n/** Function: Array.isArray\n *  This is a polyfill for the ES5 Array.isArray method.\n */\nif (!Array.isArray) {\n    Array.isArray = function(arg) {\n        return Object.prototype.toString.call(arg) === '[object Array]';\n    };\n}\n\n/** Function: Array.prototype.indexOf\n *  Return the index of an object in an array.\n *\n *  This function is not supplied by some JavaScript implementations, so\n *  we provide it if it is missing.  This code is from:\n *  http://developer.mozilla.org/En/Core_JavaScript_1.5_Reference:Objects:Array:indexOf\n *\n *  Parameters:\n *    (Object) elt - The object to look for.\n *    (Integer) from - The index from which to start looking. (optional).\n *\n *  Returns:\n *    The index of elt in the array or -1 if not found.\n */\nif (!Array.prototype.indexOf) {\n    Array.prototype.indexOf = function(elt /*, from*/) {\n        var len = this.length;\n        var from = Number(arguments[1]) || 0;\n        from = (from < 0) ? Math.ceil(from) : Math.floor(from);\n        if (from < 0) {\n            from += len;\n        }\n\n        for (; from < len; from++) {\n            if (from in this && this[from] === elt) {\n                return from;\n            }\n        }\n        return -1;\n    };\n}\n\n/** Function: Array.prototype.forEach\n *\n *  This function is not available in IE < 9\n *\n *  See <forEach on developer.mozilla.org at https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach>\n */\nif (!Array.prototype.forEach) {\n    Array.prototype.forEach = function(callback, thisArg) {\n        var T, k;\n        if (this === null) {\n            throw new TypeError(' this is null or not defined');\n        }\n        // 1. Let O be the result of calling toObject() passing the\n        // |this| value as the argument.\n        var O = Object(this);\n        // 2. Let lenValue be the result of calling the Get() internal\n        // method of O with the argument \"length\".\n        // 3. Let len be toUint32(lenValue).\n        var len = O.length >>> 0;\n        // 4. If isCallable(callback) is false, throw a TypeError exception.\n        // See: http://es5.github.com/#x9.11\n        if (typeof callback !== \"function\") {\n            throw new TypeError(callback + ' is not a function');\n        }\n        // 5. If thisArg was supplied, let T be thisArg; else let\n        // T be undefined.\n        if (arguments.length > 1) {\n            T = thisArg;\n        }\n        // 6. Let k be 0\n        k = 0;\n        // 7. Repeat, while k < len\n        while (k < len) {\n            var kValue;\n            // a. Let Pk be ToString(k).\n            //        This is implicit for LHS operands of the in operator\n            // b. Let kPresent be the result of calling the HasProperty\n            //        internal method of O with argument Pk.\n            //        This step can be combined with c\n            // c. If kPresent is true, then\n            if (k in O) {\n                // i. Let kValue be the result of calling the Get internal\n                // method of O with argument Pk.\n                kValue = O[k];\n                // ii. Call the Call internal method of callback with T as\n                // the this value and argument list containing kValue, k, and O.\n                callback.call(T, kValue, k, O);\n            }\n            // d. Increase k by 1.\n            k++;\n        }\n        // 8. return undefined\n    };\n}\n\n// This code was written by Tyler Akins and has been placed in the\n// public domain.  It would be nice if you left this header intact.\n// Base64 code from Tyler Akins -- http://rumkin.com\nvar keyStr = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\nif (!root.btoa) {\n    root.btoa = function (input) {\n        /**\n         * Encodes a string in base64\n         * @param {String} input The string to encode in base64.\n         */\n        var output = \"\";\n        var chr1, chr2, chr3;\n        var enc1, enc2, enc3, enc4;\n        var i = 0;\n        do {\n            chr1 = input.charCodeAt(i++);\n            chr2 = input.charCodeAt(i++);\n            chr3 = input.charCodeAt(i++);\n\n            enc1 = chr1 >> 2;\n            enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\n            enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\n            enc4 = chr3 & 63;\n\n            if (isNaN(chr2)) {\n                enc2 = ((chr1 & 3) << 4);\n                enc3 = enc4 = 64;\n            } else if (isNaN(chr3)) {\n                enc4 = 64;\n            }\n            output = output + keyStr.charAt(enc1) + keyStr.charAt(enc2) +\n                keyStr.charAt(enc3) + keyStr.charAt(enc4);\n        } while (i < input.length);\n        return output;\n    };\n}\n\nif (!root.atob) {\n    root.atob = function (input) {\n        /**\n         * Decodes a base64 string.\n         * @param {String} input The string to decode.\n         */\n        var output = \"\";\n        var chr1, chr2, chr3;\n        var enc1, enc2, enc3, enc4;\n        var i = 0;\n        // remove all characters that are not A-Z, a-z, 0-9, +, /, or =\n        input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, \"\");\n        do {\n            enc1 = keyStr.indexOf(input.charAt(i++));\n            enc2 = keyStr.indexOf(input.charAt(i++));\n            enc3 = keyStr.indexOf(input.charAt(i++));\n            enc4 = keyStr.indexOf(input.charAt(i++));\n\n            chr1 = (enc1 << 2) | (enc2 >> 4);\n            chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\n            chr3 = ((enc3 & 3) << 6) | enc4;\n\n            output = output + String.fromCharCode(chr1);\n\n            if (enc3 !== 64) {\n                output = output + String.fromCharCode(chr2);\n            }\n            if (enc4 !== 64) {\n                output = output + String.fromCharCode(chr3);\n            }\n        } while (i < input.length);\n        return output;\n    };\n}\n}));\n\n/*\n * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined\n * in FIPS PUB 180-1\n * Version 2.1a Copyright Paul Johnston 2000 - 2002.\n * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n * Distributed under the BSD License\n * See http://pajhome.org.uk/crypt/md5 for details.\n */\n\n/* jshint undef: true, unused: true:, noarg: true, latedef: false */\n/* global define */\n\n/* Some functions and variables have been stripped for use with Strophe */\n\n(function (root, factory) {\n    if (typeof define === 'function' && define.amd) {\n        define('strophe-sha1', [],function () {\n            return factory();\n        });\n    } else if (typeof exports === 'object') {\n        module.exports = factory();\n    } else {\n        // Browser globals\n        root.SHA1 = factory();\n    }\n}(this, function () {\n\n/*\n * Calculate the SHA-1 of an array of big-endian words, and a bit length\n */\nfunction core_sha1(x, len)\n{\n  /* append padding */\n  x[len >> 5] |= 0x80 << (24 - len % 32);\n  x[((len + 64 >> 9) << 4) + 15] = len;\n\n  var w = new Array(80);\n  var a =  1732584193;\n  var b = -271733879;\n  var c = -1732584194;\n  var d =  271733878;\n  var e = -1009589776;\n\n  var i, j, t, olda, oldb, oldc, oldd, olde;\n  for (i = 0; i < x.length; i += 16)\n  {\n    olda = a;\n    oldb = b;\n    oldc = c;\n    oldd = d;\n    olde = e;\n\n    for (j = 0; j < 80; j++)\n    {\n      if (j < 16) { w[j] = x[i + j]; }\n      else { w[j] = rol(w[j-3] ^ w[j-8] ^ w[j-14] ^ w[j-16], 1); }\n      t = safe_add(safe_add(rol(a, 5), sha1_ft(j, b, c, d)),\n                       safe_add(safe_add(e, w[j]), sha1_kt(j)));\n      e = d;\n      d = c;\n      c = rol(b, 30);\n      b = a;\n      a = t;\n    }\n\n    a = safe_add(a, olda);\n    b = safe_add(b, oldb);\n    c = safe_add(c, oldc);\n    d = safe_add(d, oldd);\n    e = safe_add(e, olde);\n  }\n  return [a, b, c, d, e];\n}\n\n/*\n * Perform the appropriate triplet combination function for the current\n * iteration\n */\nfunction sha1_ft(t, b, c, d)\n{\n  if (t < 20) { return (b & c) | ((~b) & d); }\n  if (t < 40) { return b ^ c ^ d; }\n  if (t < 60) { return (b & c) | (b & d) | (c & d); }\n  return b ^ c ^ d;\n}\n\n/*\n * Determine the appropriate additive constant for the current iteration\n */\nfunction sha1_kt(t)\n{\n  return (t < 20) ?  1518500249 : (t < 40) ?  1859775393 :\n         (t < 60) ? -1894007588 : -899497514;\n}\n\n/*\n * Calculate the HMAC-SHA1 of a key and some data\n */\nfunction core_hmac_sha1(key, data)\n{\n  var bkey = str2binb(key);\n  if (bkey.length > 16) { bkey = core_sha1(bkey, key.length * 8); }\n\n  var ipad = new Array(16), opad = new Array(16);\n  for (var i = 0; i < 16; i++)\n  {\n    ipad[i] = bkey[i] ^ 0x36363636;\n    opad[i] = bkey[i] ^ 0x5C5C5C5C;\n  }\n\n  var hash = core_sha1(ipad.concat(str2binb(data)), 512 + data.length * 8);\n  return core_sha1(opad.concat(hash), 512 + 160);\n}\n\n/*\n * Add integers, wrapping at 2^32. This uses 16-bit operations internally\n * to work around bugs in some JS interpreters.\n */\nfunction safe_add(x, y)\n{\n  var lsw = (x & 0xFFFF) + (y & 0xFFFF);\n  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n  return (msw << 16) | (lsw & 0xFFFF);\n}\n\n/*\n * Bitwise rotate a 32-bit number to the left.\n */\nfunction rol(num, cnt)\n{\n  return (num << cnt) | (num >>> (32 - cnt));\n}\n\n/*\n * Convert an 8-bit or 16-bit string to an array of big-endian words\n * In 8-bit function, characters >255 have their hi-byte silently ignored.\n */\nfunction str2binb(str)\n{\n  var bin = [];\n  var mask = 255;\n  for (var i = 0; i < str.length * 8; i += 8)\n  {\n    bin[i>>5] |= (str.charCodeAt(i / 8) & mask) << (24 - i%32);\n  }\n  return bin;\n}\n\n/*\n * Convert an array of big-endian words to a string\n */\nfunction binb2str(bin)\n{\n  var str = \"\";\n  var mask = 255;\n  for (var i = 0; i < bin.length * 32; i += 8)\n  {\n    str += String.fromCharCode((bin[i>>5] >>> (24 - i%32)) & mask);\n  }\n  return str;\n}\n\n/*\n * Convert an array of big-endian words to a base-64 string\n */\nfunction binb2b64(binarray)\n{\n  var tab = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n  var str = \"\";\n  var triplet, j;\n  for (var i = 0; i < binarray.length * 4; i += 3)\n  {\n    triplet = (((binarray[i   >> 2] >> 8 * (3 -  i   %4)) & 0xFF) << 16) |\n              (((binarray[i+1 >> 2] >> 8 * (3 - (i+1)%4)) & 0xFF) << 8 ) |\n               ((binarray[i+2 >> 2] >> 8 * (3 - (i+2)%4)) & 0xFF);\n    for (j = 0; j < 4; j++)\n    {\n      if (i * 8 + j * 6 > binarray.length * 32) { str += \"=\"; }\n      else { str += tab.charAt((triplet >> 6*(3-j)) & 0x3F); }\n    }\n  }\n  return str;\n}\n\n/*\n * These are the functions you'll usually want to call\n * They take string arguments and return either hex or base-64 encoded strings\n */\nreturn {\n    b64_hmac_sha1:  function (key, data){ return binb2b64(core_hmac_sha1(key, data)); },\n    b64_sha1:       function (s) { return binb2b64(core_sha1(str2binb(s),s.length * 8)); },\n    binb2str:       binb2str,\n    core_hmac_sha1: core_hmac_sha1,\n    str_hmac_sha1:  function (key, data){ return binb2str(core_hmac_sha1(key, data)); },\n    str_sha1:       function (s) { return binb2str(core_sha1(str2binb(s),s.length * 8)); },\n};\n}));\n\n/*\n * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message\n * Digest Algorithm, as defined in RFC 1321.\n * Version 2.1 Copyright (C) Paul Johnston 1999 - 2002.\n * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet\n * Distributed under the BSD License\n * See http://pajhome.org.uk/crypt/md5 for more info.\n */\n/*\n * Everything that isn't used by Strophe has been stripped here!\n */\n\n(function (root, factory) {\n    if (typeof define === 'function' && define.amd) {\n        define('strophe-md5',[], function () {\n            return factory();\n        });\n    } else if (typeof exports === 'object') {\n        module.exports = factory();\n    } else {\n        // Browser globals\n        root.MD5 = factory();\n    }\n}(this, function () {\n    /*\n     * Add integers, wrapping at 2^32. This uses 16-bit operations internally\n     * to work around bugs in some JS interpreters.\n     */\n    var safe_add = function (x, y) {\n        var lsw = (x & 0xFFFF) + (y & 0xFFFF);\n        var msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n        return (msw << 16) | (lsw & 0xFFFF);\n    };\n\n    /*\n     * Bitwise rotate a 32-bit number to the left.\n     */\n    var bit_rol = function (num, cnt) {\n        return (num << cnt) | (num >>> (32 - cnt));\n    };\n\n    /*\n     * Convert a string to an array of little-endian words\n     */\n    var str2binl = function (str) {\n        var bin = [];\n        for(var i = 0; i < str.length * 8; i += 8)\n        {\n            bin[i>>5] |= (str.charCodeAt(i / 8) & 255) << (i%32);\n        }\n        return bin;\n    };\n\n    /*\n     * Convert an array of little-endian words to a string\n     */\n    var binl2str = function (bin) {\n        var str = \"\";\n        for(var i = 0; i < bin.length * 32; i += 8)\n        {\n            str += String.fromCharCode((bin[i>>5] >>> (i % 32)) & 255);\n        }\n        return str;\n    };\n\n    /*\n     * Convert an array of little-endian words to a hex string.\n     */\n    var binl2hex = function (binarray) {\n        var hex_tab = \"0123456789abcdef\";\n        var str = \"\";\n        for(var i = 0; i < binarray.length * 4; i++)\n        {\n            str += hex_tab.charAt((binarray[i>>2] >> ((i%4)*8+4)) & 0xF) +\n                hex_tab.charAt((binarray[i>>2] >> ((i%4)*8  )) & 0xF);\n        }\n        return str;\n    };\n\n    /*\n     * These functions implement the four basic operations the algorithm uses.\n     */\n    var md5_cmn = function (q, a, b, x, s, t) {\n        return safe_add(bit_rol(safe_add(safe_add(a, q),safe_add(x, t)), s),b);\n    };\n\n    var md5_ff = function (a, b, c, d, x, s, t) {\n        return md5_cmn((b & c) | ((~b) & d), a, b, x, s, t);\n    };\n\n    var md5_gg = function (a, b, c, d, x, s, t) {\n        return md5_cmn((b & d) | (c & (~d)), a, b, x, s, t);\n    };\n\n    var md5_hh = function (a, b, c, d, x, s, t) {\n        return md5_cmn(b ^ c ^ d, a, b, x, s, t);\n    };\n\n    var md5_ii = function (a, b, c, d, x, s, t) {\n        return md5_cmn(c ^ (b | (~d)), a, b, x, s, t);\n    };\n\n    /*\n     * Calculate the MD5 of an array of little-endian words, and a bit length\n     */\n    var core_md5 = function (x, len) {\n        /* append padding */\n        x[len >> 5] |= 0x80 << ((len) % 32);\n        x[(((len + 64) >>> 9) << 4) + 14] = len;\n\n        var a =  1732584193;\n        var b = -271733879;\n        var c = -1732584194;\n        var d =  271733878;\n\n        var olda, oldb, oldc, oldd;\n        for (var i = 0; i < x.length; i += 16)\n        {\n            olda = a;\n            oldb = b;\n            oldc = c;\n            oldd = d;\n\n            a = md5_ff(a, b, c, d, x[i+ 0], 7 , -680876936);\n            d = md5_ff(d, a, b, c, x[i+ 1], 12, -389564586);\n            c = md5_ff(c, d, a, b, x[i+ 2], 17,  606105819);\n            b = md5_ff(b, c, d, a, x[i+ 3], 22, -1044525330);\n            a = md5_ff(a, b, c, d, x[i+ 4], 7 , -176418897);\n            d = md5_ff(d, a, b, c, x[i+ 5], 12,  1200080426);\n            c = md5_ff(c, d, a, b, x[i+ 6], 17, -1473231341);\n            b = md5_ff(b, c, d, a, x[i+ 7], 22, -45705983);\n            a = md5_ff(a, b, c, d, x[i+ 8], 7 ,  1770035416);\n            d = md5_ff(d, a, b, c, x[i+ 9], 12, -1958414417);\n            c = md5_ff(c, d, a, b, x[i+10], 17, -42063);\n            b = md5_ff(b, c, d, a, x[i+11], 22, -1990404162);\n            a = md5_ff(a, b, c, d, x[i+12], 7 ,  1804603682);\n            d = md5_ff(d, a, b, c, x[i+13], 12, -40341101);\n            c = md5_ff(c, d, a, b, x[i+14], 17, -1502002290);\n            b = md5_ff(b, c, d, a, x[i+15], 22,  1236535329);\n\n            a = md5_gg(a, b, c, d, x[i+ 1], 5 , -165796510);\n            d = md5_gg(d, a, b, c, x[i+ 6], 9 , -1069501632);\n            c = md5_gg(c, d, a, b, x[i+11], 14,  643717713);\n            b = md5_gg(b, c, d, a, x[i+ 0], 20, -373897302);\n            a = md5_gg(a, b, c, d, x[i+ 5], 5 , -701558691);\n            d = md5_gg(d, a, b, c, x[i+10], 9 ,  38016083);\n            c = md5_gg(c, d, a, b, x[i+15], 14, -660478335);\n            b = md5_gg(b, c, d, a, x[i+ 4], 20, -405537848);\n            a = md5_gg(a, b, c, d, x[i+ 9], 5 ,  568446438);\n            d = md5_gg(d, a, b, c, x[i+14], 9 , -1019803690);\n            c = md5_gg(c, d, a, b, x[i+ 3], 14, -187363961);\n            b = md5_gg(b, c, d, a, x[i+ 8], 20,  1163531501);\n            a = md5_gg(a, b, c, d, x[i+13], 5 , -1444681467);\n            d = md5_gg(d, a, b, c, x[i+ 2], 9 , -51403784);\n            c = md5_gg(c, d, a, b, x[i+ 7], 14,  1735328473);\n            b = md5_gg(b, c, d, a, x[i+12], 20, -1926607734);\n\n            a = md5_hh(a, b, c, d, x[i+ 5], 4 , -378558);\n            d = md5_hh(d, a, b, c, x[i+ 8], 11, -2022574463);\n            c = md5_hh(c, d, a, b, x[i+11], 16,  1839030562);\n            b = md5_hh(b, c, d, a, x[i+14], 23, -35309556);\n            a = md5_hh(a, b, c, d, x[i+ 1], 4 , -1530992060);\n            d = md5_hh(d, a, b, c, x[i+ 4], 11,  1272893353);\n            c = md5_hh(c, d, a, b, x[i+ 7], 16, -155497632);\n            b = md5_hh(b, c, d, a, x[i+10], 23, -1094730640);\n            a = md5_hh(a, b, c, d, x[i+13], 4 ,  681279174);\n            d = md5_hh(d, a, b, c, x[i+ 0], 11, -358537222);\n            c = md5_hh(c, d, a, b, x[i+ 3], 16, -722521979);\n            b = md5_hh(b, c, d, a, x[i+ 6], 23,  76029189);\n            a = md5_hh(a, b, c, d, x[i+ 9], 4 , -640364487);\n            d = md5_hh(d, a, b, c, x[i+12], 11, -421815835);\n            c = md5_hh(c, d, a, b, x[i+15], 16,  530742520);\n            b = md5_hh(b, c, d, a, x[i+ 2], 23, -995338651);\n\n            a = md5_ii(a, b, c, d, x[i+ 0], 6 , -198630844);\n            d = md5_ii(d, a, b, c, x[i+ 7], 10,  1126891415);\n            c = md5_ii(c, d, a, b, x[i+14], 15, -1416354905);\n            b = md5_ii(b, c, d, a, x[i+ 5], 21, -57434055);\n            a = md5_ii(a, b, c, d, x[i+12], 6 ,  1700485571);\n            d = md5_ii(d, a, b, c, x[i+ 3], 10, -1894986606);\n            c = md5_ii(c, d, a, b, x[i+10], 15, -1051523);\n            b = md5_ii(b, c, d, a, x[i+ 1], 21, -2054922799);\n            a = md5_ii(a, b, c, d, x[i+ 8], 6 ,  1873313359);\n            d = md5_ii(d, a, b, c, x[i+15], 10, -30611744);\n            c = md5_ii(c, d, a, b, x[i+ 6], 15, -1560198380);\n            b = md5_ii(b, c, d, a, x[i+13], 21,  1309151649);\n            a = md5_ii(a, b, c, d, x[i+ 4], 6 , -145523070);\n            d = md5_ii(d, a, b, c, x[i+11], 10, -1120210379);\n            c = md5_ii(c, d, a, b, x[i+ 2], 15,  718787259);\n            b = md5_ii(b, c, d, a, x[i+ 9], 21, -343485551);\n\n            a = safe_add(a, olda);\n            b = safe_add(b, oldb);\n            c = safe_add(c, oldc);\n            d = safe_add(d, oldd);\n        }\n        return [a, b, c, d];\n    };\n\n    var obj = {\n        /*\n         * These are the functions you'll usually want to call.\n         * They take string arguments and return either hex or base-64 encoded\n         * strings.\n         */\n        hexdigest: function (s) {\n            return binl2hex(core_md5(str2binl(s), s.length * 8));\n        },\n\n        hash: function (s) {\n            return binl2str(core_md5(str2binl(s), s.length * 8));\n        }\n    };\n    return obj;\n}));\n\n(function (root, factory) {\n    if (typeof define === 'function' && define.amd) {\n        define('strophe-utils',[], function () {\n            return factory();\n        });\n    } else if (typeof exports === 'object') {\n        module.exports = factory();\n    } else {\n        // Browser globals\n        root.stropheUtils = factory();\n    }\n}(this, function () {\n\n    var utils = {\n\n        utf16to8: function (str) {\n            var i, c;\n            var out = \"\";\n            var len = str.length;\n            for (i = 0; i < len; i++) {\n                c = str.charCodeAt(i);\n                if ((c >= 0x0000) && (c <= 0x007F)) {\n                    out += str.charAt(i);\n                } else if (c > 0x07FF) {\n                    out += String.fromCharCode(0xE0 | ((c >> 12) & 0x0F));\n                    out += String.fromCharCode(0x80 | ((c >>  6) & 0x3F));\n                    out += String.fromCharCode(0x80 | ((c >>  0) & 0x3F));\n                } else {\n                    out += String.fromCharCode(0xC0 | ((c >>  6) & 0x1F));\n                    out += String.fromCharCode(0x80 | ((c >>  0) & 0x3F));\n                }\n            }\n            return out;\n        },\n\n        addCookies: function (cookies) {\n            /* Parameters:\n             *  (Object) cookies - either a map of cookie names\n             *    to string values or to maps of cookie values.\n             *\n             * For example:\n             * { \"myCookie\": \"1234\" }\n             *\n             * or:\n             * { \"myCookie\": {\n             *      \"value\": \"1234\",\n             *      \"domain\": \".example.org\",\n             *      \"path\": \"/\",\n             *      \"expires\": expirationDate\n             *      }\n             *  }\n             *\n             *  These values get passed to Strophe.Connection via\n             *   options.cookies\n             */\n            var cookieName, cookieObj, isObj, cookieValue, expires, domain, path;\n            for (cookieName in (cookies || {})) {\n                expires = '';\n                domain = '';\n                path = '';\n                cookieObj = cookies[cookieName];\n                isObj = typeof cookieObj === \"object\";\n                cookieValue = escape(unescape(isObj ? cookieObj.value : cookieObj));\n                if (isObj) {\n                    expires = cookieObj.expires ? \";expires=\"+cookieObj.expires : '';\n                    domain = cookieObj.domain ? \";domain=\"+cookieObj.domain : '';\n                    path = cookieObj.path ? \";path=\"+cookieObj.path : '';\n                }\n                document.cookie =\n                    cookieName+'='+cookieValue + expires + domain + path;\n            }\n        }\n    };\n    return utils;\n}));\n\n/*\n    This program is distributed under the terms of the MIT license.\n    Please see the LICENSE file for details.\n\n    Copyright 2006-2008, OGG, LLC\n*/\n\n/* jshint undef: true, unused: true:, noarg: true, latedef: true */\n/*global define, document, sessionStorage, setTimeout, clearTimeout, ActiveXObject, DOMParser, btoa, atob */\n\n(function (root, factory) {\n    if (typeof define === 'function' && define.amd) {\n        define('strophe-core',[\n            'strophe-sha1',\n            'strophe-md5',\n            'strophe-utils'\n        ], function () {\n            return factory.apply(this, arguments);\n        });\n    }  else if (typeof exports === 'object') {\n        module.exports = factory(\n            require('./sha1'),\n            require('./md5'),\n            require('./utils')\n        );\n    } else {\n        // Browser globals\n        var o = factory(root.SHA1, root.MD5, root.stropheUtils);\n        root.Strophe =        o.Strophe;\n        root.$build =         o.$build;\n        root.$iq =            o.$iq;\n        root.$msg =           o.$msg;\n        root.$pres =          o.$pres;\n        root.SHA1 =           o.SHA1;\n        root.MD5 =            o.MD5;\n        root.b64_hmac_sha1 =  o.SHA1.b64_hmac_sha1;\n        root.b64_sha1 =       o.SHA1.b64_sha1;\n        root.str_hmac_sha1 =  o.SHA1.str_hmac_sha1;\n        root.str_sha1 =       o.SHA1.str_sha1;\n    }\n}(this, function (SHA1, MD5, utils) {\n\nvar Strophe;\n\n/** Function: $build\n *  Create a Strophe.Builder.\n *  This is an alias for 'new Strophe.Builder(name, attrs)'.\n *\n *  Parameters:\n *    (String) name - The root element name.\n *    (Object) attrs - The attributes for the root element in object notation.\n *\n *  Returns:\n *    A new Strophe.Builder object.\n */\nfunction $build(name, attrs) { return new Strophe.Builder(name, attrs); }\n\n/** Function: $msg\n *  Create a Strophe.Builder with a <message/> element as the root.\n *\n *  Parameters:\n *    (Object) attrs - The <message/> element attributes in object notation.\n *\n *  Returns:\n *    A new Strophe.Builder object.\n */\nfunction $msg(attrs) { return new Strophe.Builder(\"message\", attrs); }\n\n/** Function: $iq\n *  Create a Strophe.Builder with an <iq/> element as the root.\n *\n *  Parameters:\n *    (Object) attrs - The <iq/> element attributes in object notation.\n *\n *  Returns:\n *    A new Strophe.Builder object.\n */\nfunction $iq(attrs) { return new Strophe.Builder(\"iq\", attrs); }\n\n/** Function: $pres\n *  Create a Strophe.Builder with a <presence/> element as the root.\n *\n *  Parameters:\n *    (Object) attrs - The <presence/> element attributes in object notation.\n *\n *  Returns:\n *    A new Strophe.Builder object.\n */\nfunction $pres(attrs) { return new Strophe.Builder(\"presence\", attrs); }\n\n/** Class: Strophe\n *  An object container for all Strophe library functions.\n *\n *  This class is just a container for all the objects and constants\n *  used in the library.  It is not meant to be instantiated, but to\n *  provide a namespace for library objects, constants, and functions.\n */\nStrophe = {\n    /** Constant: VERSION */\n    VERSION: \"1.2.16\",\n\n    /** Constants: XMPP Namespace Constants\n     *  Common namespace constants from the XMPP RFCs and XEPs.\n     *\n     *  NS.HTTPBIND - HTTP BIND namespace from XEP 124.\n     *  NS.BOSH - BOSH namespace from XEP 206.\n     *  NS.CLIENT - Main XMPP client namespace.\n     *  NS.AUTH - Legacy authentication namespace.\n     *  NS.ROSTER - Roster operations namespace.\n     *  NS.PROFILE - Profile namespace.\n     *  NS.DISCO_INFO - Service discovery info namespace from XEP 30.\n     *  NS.DISCO_ITEMS - Service discovery items namespace from XEP 30.\n     *  NS.MUC - Multi-User Chat namespace from XEP 45.\n     *  NS.SASL - XMPP SASL namespace from RFC 3920.\n     *  NS.STREAM - XMPP Streams namespace from RFC 3920.\n     *  NS.BIND - XMPP Binding namespace from RFC 3920.\n     *  NS.SESSION - XMPP Session namespace from RFC 3920.\n     *  NS.XHTML_IM - XHTML-IM namespace from XEP 71.\n     *  NS.XHTML - XHTML body namespace from XEP 71.\n     */\n    NS: {\n        HTTPBIND: \"http://jabber.org/protocol/httpbind\",\n        BOSH: \"urn:xmpp:xbosh\",\n        CLIENT: \"jabber:client\",\n        AUTH: \"jabber:iq:auth\",\n        ROSTER: \"jabber:iq:roster\",\n        PROFILE: \"jabber:iq:profile\",\n        DISCO_INFO: \"http://jabber.org/protocol/disco#info\",\n        DISCO_ITEMS: \"http://jabber.org/protocol/disco#items\",\n        MUC: \"http://jabber.org/protocol/muc\",\n        SASL: \"urn:ietf:params:xml:ns:xmpp-sasl\",\n        STREAM: \"http://etherx.jabber.org/streams\",\n        FRAMING: \"urn:ietf:params:xml:ns:xmpp-framing\",\n        BIND: \"urn:ietf:params:xml:ns:xmpp-bind\",\n        SESSION: \"urn:ietf:params:xml:ns:xmpp-session\",\n        VERSION: \"jabber:iq:version\",\n        STANZAS: \"urn:ietf:params:xml:ns:xmpp-stanzas\",\n        XHTML_IM: \"http://jabber.org/protocol/xhtml-im\",\n        XHTML: \"http://www.w3.org/1999/xhtml\"\n    },\n\n    /** Constants: XHTML_IM Namespace\n     *  contains allowed tags, tag attributes, and css properties.\n     *  Used in the createHtml function to filter incoming html into the allowed XHTML-IM subset.\n     *  See http://xmpp.org/extensions/xep-0071.html#profile-summary for the list of recommended\n     *  allowed tags and their attributes.\n     */\n    XHTML: {\n        tags: ['a','blockquote','br','cite','em','img','li','ol','p','span','strong','ul','body'],\n        attributes: {\n            'a':          ['href'],\n            'blockquote': ['style'],\n            'br':         [],\n            'cite':       ['style'],\n            'em':         [],\n            'img':        ['src', 'alt', 'style', 'height', 'width'],\n            'li':         ['style'],\n            'ol':         ['style'],\n            'p':          ['style'],\n            'span':       ['style'],\n            'strong':     [],\n            'ul':         ['style'],\n            'body':       []\n        },\n        css: ['background-color','color','font-family','font-size','font-style','font-weight','margin-left','margin-right','text-align','text-decoration'],\n        /** Function: XHTML.validTag\n         *\n         * Utility method to determine whether a tag is allowed\n         * in the XHTML_IM namespace.\n         *\n         * XHTML tag names are case sensitive and must be lower case.\n         */\n        validTag: function(tag) {\n            for (var i = 0; i < Strophe.XHTML.tags.length; i++) {\n                if (tag === Strophe.XHTML.tags[i]) {\n                    return true;\n                }\n            }\n            return false;\n        },\n        /** Function: XHTML.validAttribute\n         *\n         * Utility method to determine whether an attribute is allowed\n         * as recommended per XEP-0071\n         *\n         * XHTML attribute names are case sensitive and must be lower case.\n         */\n        validAttribute: function(tag, attribute) {\n            if (typeof Strophe.XHTML.attributes[tag] !== 'undefined' && Strophe.XHTML.attributes[tag].length > 0) {\n                for (var i = 0; i < Strophe.XHTML.attributes[tag].length; i++) {\n                    if (attribute === Strophe.XHTML.attributes[tag][i]) {\n                        return true;\n                    }\n                }\n            }\n        return false;\n        },\n        validCSS: function(style) {\n            for (var i = 0; i < Strophe.XHTML.css.length; i++) {\n                if (style === Strophe.XHTML.css[i]) {\n                    return true;\n                }\n            }\n            return false;\n        }\n    },\n\n    /** Constants: Connection Status Constants\n     *  Connection status constants for use by the connection handler\n     *  callback.\n     *\n     *  Status.ERROR - An error has occurred\n     *  Status.CONNECTING - The connection is currently being made\n     *  Status.CONNFAIL - The connection attempt failed\n     *  Status.AUTHENTICATING - The connection is authenticating\n     *  Status.AUTHFAIL - The authentication attempt failed\n     *  Status.CONNECTED - The connection has succeeded\n     *  Status.DISCONNECTED - The connection has been terminated\n     *  Status.DISCONNECTING - The connection is currently being terminated\n     *  Status.ATTACHED - The connection has been attached\n     *  Status.REDIRECT - The connection has been redirected\n     *  Status.CONNTIMEOUT - The connection has timed out\n     */\n    Status: {\n        ERROR: 0,\n        CONNECTING: 1,\n        CONNFAIL: 2,\n        AUTHENTICATING: 3,\n        AUTHFAIL: 4,\n        CONNECTED: 5,\n        DISCONNECTED: 6,\n        DISCONNECTING: 7,\n        ATTACHED: 8,\n        REDIRECT: 9,\n        CONNTIMEOUT: 10\n    },\n\n    ErrorCondition: {\n        BAD_FORMAT: \"bad-format\",\n        CONFLICT: \"conflict\",\n        MISSING_JID_NODE: \"x-strophe-bad-non-anon-jid\",\n        NO_AUTH_MECH: \"no-auth-mech\",\n        UNKNOWN_REASON: \"unknown\",\n    },\n\n    /** Constants: Log Level Constants\n     *  Logging level indicators.\n     *\n     *  LogLevel.DEBUG - Debug output\n     *  LogLevel.INFO - Informational output\n     *  LogLevel.WARN - Warnings\n     *  LogLevel.ERROR - Errors\n     *  LogLevel.FATAL - Fatal errors\n     */\n    LogLevel: {\n        DEBUG: 0,\n        INFO: 1,\n        WARN: 2,\n        ERROR: 3,\n        FATAL: 4\n    },\n\n    /** PrivateConstants: DOM Element Type Constants\n     *  DOM element types.\n     *\n     *  ElementType.NORMAL - Normal element.\n     *  ElementType.TEXT - Text data element.\n     *  ElementType.FRAGMENT - XHTML fragment element.\n     */\n    ElementType: {\n        NORMAL: 1,\n        TEXT: 3,\n        CDATA: 4,\n        FRAGMENT: 11\n    },\n\n    /** PrivateConstants: Timeout Values\n     *  Timeout values for error states.  These values are in seconds.\n     *  These should not be changed unless you know exactly what you are\n     *  doing.\n     *\n     *  TIMEOUT - Timeout multiplier. A waiting request will be considered\n     *      failed after Math.floor(TIMEOUT * wait) seconds have elapsed.\n     *      This defaults to 1.1, and with default wait, 66 seconds.\n     *  SECONDARY_TIMEOUT - Secondary timeout multiplier. In cases where\n     *      Strophe can detect early failure, it will consider the request\n     *      failed if it doesn't return after\n     *      Math.floor(SECONDARY_TIMEOUT * wait) seconds have elapsed.\n     *      This defaults to 0.1, and with default wait, 6 seconds.\n     */\n    TIMEOUT: 1.1,\n    SECONDARY_TIMEOUT: 0.1,\n\n    /** Function: addNamespace\n     *  This function is used to extend the current namespaces in\n     *  Strophe.NS.  It takes a key and a value with the key being the\n     *  name of the new namespace, with its actual value.\n     *  For example:\n     *  Strophe.addNamespace('PUBSUB', \"http://jabber.org/protocol/pubsub\");\n     *\n     *  Parameters:\n     *    (String) name - The name under which the namespace will be\n     *      referenced under Strophe.NS\n     *    (String) value - The actual namespace.\n     */\n    addNamespace: function (name, value) {\n        Strophe.NS[name] = value;\n    },\n\n    /** Function: forEachChild\n     *  Map a function over some or all child elements of a given element.\n     *\n     *  This is a small convenience function for mapping a function over\n     *  some or all of the children of an element.  If elemName is null, all\n     *  children will be passed to the function, otherwise only children\n     *  whose tag names match elemName will be passed.\n     *\n     *  Parameters:\n     *    (XMLElement) elem - The element to operate on.\n     *    (String) elemName - The child element tag name filter.\n     *    (Function) func - The function to apply to each child.  This\n     *      function should take a single argument, a DOM element.\n     */\n    forEachChild: function (elem, elemName, func) {\n        var i, childNode;\n        for (i = 0; i < elem.childNodes.length; i++) {\n            childNode = elem.childNodes[i];\n            if (childNode.nodeType === Strophe.ElementType.NORMAL &&\n                (!elemName || this.isTagEqual(childNode, elemName))) {\n                func(childNode);\n            }\n        }\n    },\n\n    /** Function: isTagEqual\n     *  Compare an element's tag name with a string.\n     *\n     *  This function is case sensitive.\n     *\n     *  Parameters:\n     *    (XMLElement) el - A DOM element.\n     *    (String) name - The element name.\n     *\n     *  Returns:\n     *    true if the element's tag name matches _el_, and false\n     *    otherwise.\n     */\n    isTagEqual: function (el, name) {\n        return el.tagName === name;\n    },\n\n    /** PrivateVariable: _xmlGenerator\n     *  _Private_ variable that caches a DOM document to\n     *  generate elements.\n     */\n    _xmlGenerator: null,\n\n    /** PrivateFunction: _makeGenerator\n     *  _Private_ function that creates a dummy XML DOM document to serve as\n     *  an element and text node generator.\n     */\n    _makeGenerator: function () {\n        var doc;\n        // IE9 does implement createDocument(); however, using it will cause the browser to leak memory on page unload.\n        // Here, we test for presence of createDocument() plus IE's proprietary documentMode attribute, which would be\n                // less than 10 in the case of IE9 and below.\n        if (document.implementation.createDocument === undefined ||\n                        document.implementation.createDocument && document.documentMode && document.documentMode < 10) {\n            doc = this._getIEXmlDom();\n            doc.appendChild(doc.createElement('strophe'));\n        } else {\n            doc = document.implementation\n                .createDocument('jabber:client', 'strophe', null);\n        }\n        return doc;\n    },\n\n    /** Function: xmlGenerator\n     *  Get the DOM document to generate elements.\n     *\n     *  Returns:\n     *    The currently used DOM document.\n     */\n    xmlGenerator: function () {\n        if (!Strophe._xmlGenerator) {\n            Strophe._xmlGenerator = Strophe._makeGenerator();\n        }\n        return Strophe._xmlGenerator;\n    },\n\n    /** PrivateFunction: _getIEXmlDom\n     *  Gets IE xml doc object\n     *\n     *  Returns:\n     *    A Microsoft XML DOM Object\n     *  See Also:\n     *    http://msdn.microsoft.com/en-us/library/ms757837%28VS.85%29.aspx\n     */\n    _getIEXmlDom : function() {\n        var doc = null;\n        var docStrings = [\n            \"Msxml2.DOMDocument.6.0\",\n            \"Msxml2.DOMDocument.5.0\",\n            \"Msxml2.DOMDocument.4.0\",\n            \"MSXML2.DOMDocument.3.0\",\n            \"MSXML2.DOMDocument\",\n            \"MSXML.DOMDocument\",\n            \"Microsoft.XMLDOM\"\n        ];\n\n        for (var d = 0; d < docStrings.length; d++) {\n            if (doc === null) {\n                try {\n                    doc = new ActiveXObject(docStrings[d]);\n                } catch (e) {\n                    doc = null;\n                }\n            } else {\n                break;\n            }\n        }\n        return doc;\n    },\n\n    /** Function: xmlElement\n     *  Create an XML DOM element.\n     *\n     *  This function creates an XML DOM element correctly across all\n     *  implementations. Note that these are not HTML DOM elements, which\n     *  aren't appropriate for XMPP stanzas.\n     *\n     *  Parameters:\n     *    (String) name - The name for the element.\n     *    (Array|Object) attrs - An optional array or object containing\n     *      key/value pairs to use as element attributes. The object should\n     *      be in the format {'key': 'value'} or {key: 'value'}. The array\n     *      should have the format [['key1', 'value1'], ['key2', 'value2']].\n     *    (String) text - The text child data for the element.\n     *\n     *  Returns:\n     *    A new XML DOM element.\n     */\n    xmlElement: function (name) {\n        if (!name) { return null; }\n\n        var node = Strophe.xmlGenerator().createElement(name);\n        // FIXME: this should throw errors if args are the wrong type or\n        // there are more than two optional args\n        var a, i, k;\n        for (a = 1; a < arguments.length; a++) {\n            var arg = arguments[a];\n            if (!arg) { continue; }\n            if (typeof(arg) === \"string\" ||\n                typeof(arg) === \"number\") {\n                node.appendChild(Strophe.xmlTextNode(arg));\n            } else if (typeof(arg) === \"object\" &&\n                       typeof(arg.sort) === \"function\") {\n                for (i = 0; i < arg.length; i++) {\n                    var attr = arg[i];\n                    if (typeof(attr) === \"object\" &&\n                        typeof(attr.sort) === \"function\" &&\n                        attr[1] !== undefined &&\n                        attr[1] !== null) {\n                        node.setAttribute(attr[0], attr[1]);\n                    }\n                }\n            } else if (typeof(arg) === \"object\") {\n                for (k in arg) {\n                    if (arg.hasOwnProperty(k)) {\n                        if (arg[k] !== undefined &&\n                            arg[k] !== null) {\n                            node.setAttribute(k, arg[k]);\n                        }\n                    }\n                }\n            }\n        }\n\n        return node;\n    },\n\n    /*  Function: xmlescape\n     *  Excapes invalid xml characters.\n     *\n     *  Parameters:\n     *     (String) text - text to escape.\n     *\n     *  Returns:\n     *      Escaped text.\n     */\n    xmlescape: function(text) {\n        text = text.replace(/\\&/g, \"&amp;\");\n        text = text.replace(/</g,  \"&lt;\");\n        text = text.replace(/>/g,  \"&gt;\");\n        text = text.replace(/'/g,  \"&apos;\");\n        text = text.replace(/\"/g,  \"&quot;\");\n        return text;\n    },\n\n    /*  Function: xmlunescape\n    *  Unexcapes invalid xml characters.\n    *\n    *  Parameters:\n    *     (String) text - text to unescape.\n    *\n    *  Returns:\n    *      Unescaped text.\n    */\n    xmlunescape: function(text) {\n        text = text.replace(/\\&amp;/g, \"&\");\n        text = text.replace(/&lt;/g,  \"<\");\n        text = text.replace(/&gt;/g,  \">\");\n        text = text.replace(/&apos;/g,  \"'\");\n        text = text.replace(/&quot;/g,  \"\\\"\");\n        return text;\n    },\n\n    /** Function: xmlTextNode\n     *  Creates an XML DOM text node.\n     *\n     *  Provides a cross implementation version of document.createTextNode.\n     *\n     *  Parameters:\n     *    (String) text - The content of the text node.\n     *\n     *  Returns:\n     *    A new XML DOM text node.\n     */\n    xmlTextNode: function (text) {\n        return Strophe.xmlGenerator().createTextNode(text);\n    },\n\n    /** Function: xmlHtmlNode\n     *  Creates an XML DOM html node.\n     *\n     *  Parameters:\n     *    (String) html - The content of the html node.\n     *\n     *  Returns:\n     *    A new XML DOM text node.\n     */\n    xmlHtmlNode: function (html) {\n        var node;\n        //ensure text is escaped\n        if (DOMParser) {\n            var parser = new DOMParser();\n            node = parser.parseFromString(html, \"text/xml\");\n        } else {\n            node = new ActiveXObject(\"Microsoft.XMLDOM\");\n            node.async=\"false\";\n            node.loadXML(html);\n        }\n        return node;\n    },\n\n    /** Function: getText\n     *  Get the concatenation of all text children of an element.\n     *\n     *  Parameters:\n     *    (XMLElement) elem - A DOM element.\n     *\n     *  Returns:\n     *    A String with the concatenated text of all text element children.\n     */\n    getText: function (elem) {\n        if (!elem) { return null; }\n\n        var str = \"\";\n        if (elem.childNodes.length === 0 && elem.nodeType === Strophe.ElementType.TEXT) {\n            str += elem.nodeValue;\n        }\n\n        for (var i = 0; i < elem.childNodes.length; i++) {\n            if (elem.childNodes[i].nodeType === Strophe.ElementType.TEXT) {\n                str += elem.childNodes[i].nodeValue;\n            }\n        }\n\n        return Strophe.xmlescape(str);\n    },\n\n    /** Function: copyElement\n     *  Copy an XML DOM element.\n     *\n     *  This function copies a DOM element and all its descendants and returns\n     *  the new copy.\n     *\n     *  Parameters:\n     *    (XMLElement) elem - A DOM element.\n     *\n     *  Returns:\n     *    A new, copied DOM element tree.\n     */\n    copyElement: function (elem) {\n        var i, el;\n        if (elem.nodeType === Strophe.ElementType.NORMAL) {\n            el = Strophe.xmlElement(elem.tagName);\n\n            for (i = 0; i < elem.attributes.length; i++) {\n                el.setAttribute(elem.attributes[i].nodeName,\n                                elem.attributes[i].value);\n            }\n\n            for (i = 0; i < elem.childNodes.length; i++) {\n                el.appendChild(Strophe.copyElement(elem.childNodes[i]));\n            }\n        } else if (elem.nodeType === Strophe.ElementType.TEXT) {\n            el = Strophe.xmlGenerator().createTextNode(elem.nodeValue);\n        }\n        return el;\n    },\n\n\n    /** Function: createHtml\n     *  Copy an HTML DOM element into an XML DOM.\n     *\n     *  This function copies a DOM element and all its descendants and returns\n     *  the new copy.\n     *\n     *  Parameters:\n     *    (HTMLElement) elem - A DOM element.\n     *\n     *  Returns:\n     *    A new, copied DOM element tree.\n     */\n    createHtml: function (elem) {\n        var i, el, j, tag, attribute, value, css, cssAttrs, attr, cssName, cssValue;\n        if (elem.nodeType === Strophe.ElementType.NORMAL) {\n            tag = elem.nodeName.toLowerCase(); // XHTML tags must be lower case.\n            if(Strophe.XHTML.validTag(tag)) {\n                try {\n                    el = Strophe.xmlElement(tag);\n                    for(i = 0; i < Strophe.XHTML.attributes[tag].length; i++) {\n                        attribute = Strophe.XHTML.attributes[tag][i];\n                        value = elem.getAttribute(attribute);\n                        if(typeof value === 'undefined' || value === null || value === '' || value === false || value === 0) {\n                            continue;\n                        }\n                        if(attribute === 'style' && typeof value === 'object') {\n                            if(typeof value.cssText !== 'undefined') {\n                                value = value.cssText; // we're dealing with IE, need to get CSS out\n                            }\n                        }\n                        // filter out invalid css styles\n                        if(attribute === 'style') {\n                            css = [];\n                            cssAttrs = value.split(';');\n                            for(j = 0; j < cssAttrs.length; j++) {\n                                attr = cssAttrs[j].split(':');\n                                cssName = attr[0].replace(/^\\s*/, \"\").replace(/\\s*$/, \"\").toLowerCase();\n                                if(Strophe.XHTML.validCSS(cssName)) {\n                                    cssValue = attr[1].replace(/^\\s*/, \"\").replace(/\\s*$/, \"\");\n                                    css.push(cssName + ': ' + cssValue);\n                                }\n                            }\n                            if(css.length > 0) {\n                                value = css.join('; ');\n                                el.setAttribute(attribute, value);\n                            }\n                        } else {\n                            el.setAttribute(attribute, value);\n                        }\n                    }\n\n                    for (i = 0; i < elem.childNodes.length; i++) {\n                        el.appendChild(Strophe.createHtml(elem.childNodes[i]));\n                    }\n                } catch(e) { // invalid elements\n                  el = Strophe.xmlTextNode('');\n                }\n            } else {\n                el = Strophe.xmlGenerator().createDocumentFragment();\n                for (i = 0; i < elem.childNodes.length; i++) {\n                    el.appendChild(Strophe.createHtml(elem.childNodes[i]));\n                }\n            }\n        } else if (elem.nodeType === Strophe.ElementType.FRAGMENT) {\n            el = Strophe.xmlGenerator().createDocumentFragment();\n            for (i = 0; i < elem.childNodes.length; i++) {\n                el.appendChild(Strophe.createHtml(elem.childNodes[i]));\n            }\n        } else if (elem.nodeType === Strophe.ElementType.TEXT) {\n            el = Strophe.xmlTextNode(elem.nodeValue);\n        }\n        return el;\n    },\n\n    /** Function: escapeNode\n     *  Escape the node part (also called local part) of a JID.\n     *\n     *  Parameters:\n     *    (String) node - A node (or local part).\n     *\n     *  Returns:\n     *    An escaped node (or local part).\n     */\n    escapeNode: function (node) {\n        if (typeof node !== \"string\") { return node; }\n        return node.replace(/^\\s+|\\s+$/g, '')\n            .replace(/\\\\/g,  \"\\\\5c\")\n            .replace(/ /g,   \"\\\\20\")\n            .replace(/\\\"/g,  \"\\\\22\")\n            .replace(/\\&/g,  \"\\\\26\")\n            .replace(/\\'/g,  \"\\\\27\")\n            .replace(/\\//g,  \"\\\\2f\")\n            .replace(/:/g,   \"\\\\3a\")\n            .replace(/</g,   \"\\\\3c\")\n            .replace(/>/g,   \"\\\\3e\")\n            .replace(/@/g,   \"\\\\40\");\n    },\n\n    /** Function: unescapeNode\n     *  Unescape a node part (also called local part) of a JID.\n     *\n     *  Parameters:\n     *    (String) node - A node (or local part).\n     *\n     *  Returns:\n     *    An unescaped node (or local part).\n     */\n    unescapeNode: function (node) {\n        if (typeof node !== \"string\") { return node; }\n        return node.replace(/\\\\20/g, \" \")\n            .replace(/\\\\22/g, '\"')\n            .replace(/\\\\26/g, \"&\")\n            .replace(/\\\\27/g, \"'\")\n            .replace(/\\\\2f/g, \"/\")\n            .replace(/\\\\3a/g, \":\")\n            .replace(/\\\\3c/g, \"<\")\n            .replace(/\\\\3e/g, \">\")\n            .replace(/\\\\40/g, \"@\")\n            .replace(/\\\\5c/g, \"\\\\\");\n    },\n\n    /** Function: getNodeFromJid\n     *  Get the node portion of a JID String.\n     *\n     *  Parameters:\n     *    (String) jid - A JID.\n     *\n     *  Returns:\n     *    A String containing the node.\n     */\n    getNodeFromJid: function (jid) {\n        if (jid.indexOf(\"@\") < 0) { return null; }\n        return jid.split(\"@\")[0];\n    },\n\n    /** Function: getDomainFromJid\n     *  Get the domain portion of a JID String.\n     *\n     *  Parameters:\n     *    (String) jid - A JID.\n     *\n     *  Returns:\n     *    A String containing the domain.\n     */\n    getDomainFromJid: function (jid) {\n        var bare = Strophe.getBareJidFromJid(jid);\n        if (bare.indexOf(\"@\") < 0) {\n            return bare;\n        } else {\n            var parts = bare.split(\"@\");\n            parts.splice(0, 1);\n            return parts.join('@');\n        }\n    },\n\n    /** Function: getResourceFromJid\n     *  Get the resource portion of a JID String.\n     *\n     *  Parameters:\n     *    (String) jid - A JID.\n     *\n     *  Returns:\n     *    A String containing the resource.\n     */\n    getResourceFromJid: function (jid) {\n        var s = jid.split(\"/\");\n        if (s.length < 2) { return null; }\n        s.splice(0, 1);\n        return s.join('/');\n    },\n\n    /** Function: getBareJidFromJid\n     *  Get the bare JID from a JID String.\n     *\n     *  Parameters:\n     *    (String) jid - A JID.\n     *\n     *  Returns:\n     *    A String containing the bare JID.\n     */\n    getBareJidFromJid: function (jid) {\n        return jid ? jid.split(\"/\")[0] : null;\n    },\n\n    /** PrivateFunction: _handleError\n     *  _Private_ function that properly logs an error to the console\n     */\n    _handleError: function (e) {\n        if (typeof e.stack !== \"undefined\") {\n            Strophe.fatal(e.stack);\n        }\n        if (e.sourceURL) {\n            Strophe.fatal(\"error: \" + this.handler + \" \" + e.sourceURL + \":\" +\n                          e.line + \" - \" + e.name + \": \" + e.message);\n        } else if (e.fileName) {\n            Strophe.fatal(\"error: \" + this.handler + \" \" +\n                          e.fileName + \":\" + e.lineNumber + \" - \" +\n                          e.name + \": \" + e.message);\n        } else {\n            Strophe.fatal(\"error: \" + e.message);\n        }\n    },\n\n    /** Function: log\n     *  User overrideable logging function.\n     *\n     *  This function is called whenever the Strophe library calls any\n     *  of the logging functions.  The default implementation of this\n     *  function logs only fatal errors.  If client code wishes to handle the logging\n     *  messages, it should override this with\n     *  > Strophe.log = function (level, msg) {\n     *  >   (user code here)\n     *  > };\n     *\n     *  Please note that data sent and received over the wire is logged\n     *  via Strophe.Connection.rawInput() and Strophe.Connection.rawOutput().\n     *\n     *  The different levels and their meanings are\n     *\n     *    DEBUG - Messages useful for debugging purposes.\n     *    INFO - Informational messages.  This is mostly information like\n     *      'disconnect was called' or 'SASL auth succeeded'.\n     *    WARN - Warnings about potential problems.  This is mostly used\n     *      to report transient connection errors like request timeouts.\n     *    ERROR - Some error occurred.\n     *    FATAL - A non-recoverable fatal error occurred.\n     *\n     *  Parameters:\n     *    (Integer) level - The log level of the log message.  This will\n     *      be one of the values in Strophe.LogLevel.\n     *    (String) msg - The log message.\n     */\n    log: function (level, msg) {\n        if (level === this.LogLevel.FATAL &&\n            typeof window.console === 'object' &&\n            typeof window.console.error === 'function') {\n            window.console.error(msg);\n        }\n    },\n\n    /** Function: debug\n     *  Log a message at the Strophe.LogLevel.DEBUG level.\n     *\n     *  Parameters:\n     *    (String) msg - The log message.\n     */\n    debug: function(msg) {\n        this.log(this.LogLevel.DEBUG, msg);\n    },\n\n    /** Function: info\n     *  Log a message at the Strophe.LogLevel.INFO level.\n     *\n     *  Parameters:\n     *    (String) msg - The log message.\n     */\n    info: function (msg) {\n        this.log(this.LogLevel.INFO, msg);\n    },\n\n    /** Function: warn\n     *  Log a message at the Strophe.LogLevel.WARN level.\n     *\n     *  Parameters:\n     *    (String) msg - The log message.\n     */\n    warn: function (msg) {\n        this.log(this.LogLevel.WARN, msg);\n    },\n\n    /** Function: error\n     *  Log a message at the Strophe.LogLevel.ERROR level.\n     *\n     *  Parameters:\n     *    (String) msg - The log message.\n     */\n    error: function (msg) {\n        this.log(this.LogLevel.ERROR, msg);\n    },\n\n    /** Function: fatal\n     *  Log a message at the Strophe.LogLevel.FATAL level.\n     *\n     *  Parameters:\n     *    (String) msg - The log message.\n     */\n    fatal: function (msg) {\n        this.log(this.LogLevel.FATAL, msg);\n    },\n\n    /** Function: serialize\n     *  Render a DOM element and all descendants to a String.\n     *\n     *  Parameters:\n     *    (XMLElement) elem - A DOM element.\n     *\n     *  Returns:\n     *    The serialized element tree as a String.\n     */\n    serialize: function (elem) {\n        var result;\n\n        if (!elem) { return null; }\n\n        if (typeof(elem.tree) === \"function\") {\n            elem = elem.tree();\n        }\n\n        var nodeName = elem.nodeName;\n        var i, child;\n\n        if (elem.getAttribute(\"_realname\")) {\n            nodeName = elem.getAttribute(\"_realname\");\n        }\n\n        result = \"<\" + nodeName;\n        for (i = 0; i < elem.attributes.length; i++) {\n             if(elem.attributes[i].nodeName !== \"_realname\") {\n               result += \" \" + elem.attributes[i].nodeName +\n                   \"='\" + Strophe.xmlescape(elem.attributes[i].value) + \"'\";\n             }\n        }\n\n        if (elem.childNodes.length > 0) {\n            result += \">\";\n            for (i = 0; i < elem.childNodes.length; i++) {\n                child = elem.childNodes[i];\n                switch( child.nodeType ){\n                  case Strophe.ElementType.NORMAL:\n                    // normal element, so recurse\n                    result += Strophe.serialize(child);\n                    break;\n                  case Strophe.ElementType.TEXT:\n                    // text element to escape values\n                    result += Strophe.xmlescape(child.nodeValue);\n                    break;\n                  case Strophe.ElementType.CDATA:\n                    // cdata section so don't escape values\n                    result += \"<![CDATA[\"+child.nodeValue+\"]]>\";\n                }\n            }\n            result += \"</\" + nodeName + \">\";\n        } else {\n            result += \"/>\";\n        }\n\n        return result;\n    },\n\n    /** PrivateVariable: _requestId\n     *  _Private_ variable that keeps track of the request ids for\n     *  connections.\n     */\n    _requestId: 0,\n\n    /** PrivateVariable: Strophe.connectionPlugins\n     *  _Private_ variable Used to store plugin names that need\n     *  initialization on Strophe.Connection construction.\n     */\n    _connectionPlugins: {},\n\n    /** Function: addConnectionPlugin\n     *  Extends the Strophe.Connection object with the given plugin.\n     *\n     *  Parameters:\n     *    (String) name - The name of the extension.\n     *    (Object) ptype - The plugin's prototype.\n     */\n    addConnectionPlugin: function (name, ptype) {\n        Strophe._connectionPlugins[name] = ptype;\n    }\n};\n\n/** Class: Strophe.Builder\n *  XML DOM builder.\n *\n *  This object provides an interface similar to JQuery but for building\n *  DOM elements easily and rapidly.  All the functions except for toString()\n *  and tree() return the object, so calls can be chained.  Here's an\n *  example using the $iq() builder helper.\n *  > $iq({to: 'you', from: 'me', type: 'get', id: '1'})\n *  >     .c('query', {xmlns: 'strophe:example'})\n *  >     .c('example')\n *  >     .toString()\n *\n *  The above generates this XML fragment\n *  > <iq to='you' from='me' type='get' id='1'>\n *  >   <query xmlns='strophe:example'>\n *  >     <example/>\n *  >   </query>\n *  > </iq>\n *  The corresponding DOM manipulations to get a similar fragment would be\n *  a lot more tedious and probably involve several helper variables.\n *\n *  Since adding children makes new operations operate on the child, up()\n *  is provided to traverse up the tree.  To add two children, do\n *  > builder.c('child1', ...).up().c('child2', ...)\n *  The next operation on the Builder will be relative to the second child.\n */\n\n/** Constructor: Strophe.Builder\n *  Create a Strophe.Builder object.\n *\n *  The attributes should be passed in object notation.  For example\n *  > var b = new Builder('message', {to: 'you', from: 'me'});\n *  or\n *  > var b = new Builder('messsage', {'xml:lang': 'en'});\n *\n *  Parameters:\n *    (String) name - The name of the root element.\n *    (Object) attrs - The attributes for the root element in object notation.\n *\n *  Returns:\n *    A new Strophe.Builder.\n */\nStrophe.Builder = function (name, attrs) {\n    // Set correct namespace for jabber:client elements\n    if (name === \"presence\" || name === \"message\" || name === \"iq\") {\n        if (attrs && !attrs.xmlns) {\n            attrs.xmlns = Strophe.NS.CLIENT;\n        } else if (!attrs) {\n            attrs = {xmlns: Strophe.NS.CLIENT};\n        }\n    }\n\n    // Holds the tree being built.\n    this.nodeTree = Strophe.xmlElement(name, attrs);\n\n    // Points to the current operation node.\n    this.node = this.nodeTree;\n};\n\nStrophe.Builder.prototype = {\n    /** Function: tree\n     *  Return the DOM tree.\n     *\n     *  This function returns the current DOM tree as an element object.  This\n     *  is suitable for passing to functions like Strophe.Connection.send().\n     *\n     *  Returns:\n     *    The DOM tree as a element object.\n     */\n    tree: function () {\n        return this.nodeTree;\n    },\n\n    /** Function: toString\n     *  Serialize the DOM tree to a String.\n     *\n     *  This function returns a string serialization of the current DOM\n     *  tree.  It is often used internally to pass data to a\n     *  Strophe.Request object.\n     *\n     *  Returns:\n     *    The serialized DOM tree in a String.\n     */\n    toString: function () {\n        return Strophe.serialize(this.nodeTree);\n    },\n\n    /** Function: up\n     *  Make the current parent element the new current element.\n     *\n     *  This function is often used after c() to traverse back up the tree.\n     *  For example, to add two children to the same element\n     *  > builder.c('child1', {}).up().c('child2', {});\n     *\n     *  Returns:\n     *    The Stophe.Builder object.\n     */\n    up: function () {\n        this.node = this.node.parentNode;\n        return this;\n    },\n\n    /** Function: root\n     *  Make the root element the new current element.\n     *\n     *  When at a deeply nested element in the tree, this function can be used\n     *  to jump back to the root of the tree, instead of having to repeatedly\n     *  call up().\n     *\n     *  Returns:\n     *    The Stophe.Builder object.\n     */\n    root: function () {\n        this.node = this.nodeTree;\n        return this;\n    },\n\n    /** Function: attrs\n     *  Add or modify attributes of the current element.\n     *\n     *  The attributes should be passed in object notation.  This function\n     *  does not move the current element pointer.\n     *\n     *  Parameters:\n     *    (Object) moreattrs - The attributes to add/modify in object notation.\n     *\n     *  Returns:\n     *    The Strophe.Builder object.\n     */\n    attrs: function (moreattrs) {\n        for (var k in moreattrs) {\n            if (moreattrs.hasOwnProperty(k)) {\n                if (moreattrs[k] === undefined) {\n                    this.node.removeAttribute(k);\n                } else {\n                    this.node.setAttribute(k, moreattrs[k]);\n                }\n            }\n        }\n        return this;\n    },\n\n    /** Function: c\n     *  Add a child to the current element and make it the new current\n     *  element.\n     *\n     *  This function moves the current element pointer to the child,\n     *  unless text is provided.  If you need to add another child, it\n     *  is necessary to use up() to go back to the parent in the tree.\n     *\n     *  Parameters:\n     *    (String) name - The name of the child.\n     *    (Object) attrs - The attributes of the child in object notation.\n     *    (String) text - The text to add to the child.\n     *\n     *  Returns:\n     *    The Strophe.Builder object.\n     */\n    c: function (name, attrs, text) {\n        var child = Strophe.xmlElement(name, attrs, text);\n        this.node.appendChild(child);\n        if (typeof text !== \"string\" && typeof text !==\"number\") {\n            this.node = child;\n        }\n        return this;\n    },\n\n    /** Function: cnode\n     *  Add a child to the current element and make it the new current\n     *  element.\n     *\n     *  This function is the same as c() except that instead of using a\n     *  name and an attributes object to create the child it uses an\n     *  existing DOM element object.\n     *\n     *  Parameters:\n     *    (XMLElement) elem - A DOM element.\n     *\n     *  Returns:\n     *    The Strophe.Builder object.\n     */\n    cnode: function (elem) {\n        var impNode;\n        var xmlGen = Strophe.xmlGenerator();\n        try {\n            impNode = (xmlGen.importNode !== undefined);\n        } catch (e) {\n            impNode = false;\n        }\n        var newElem = impNode ?\n                      xmlGen.importNode(elem, true) :\n                      Strophe.copyElement(elem);\n        this.node.appendChild(newElem);\n        this.node = newElem;\n        return this;\n    },\n\n    /** Function: t\n     *  Add a child text element.\n     *\n     *  This *does not* make the child the new current element since there\n     *  are no children of text elements.\n     *\n     *  Parameters:\n     *    (String) text - The text data to append to the current element.\n     *\n     *  Returns:\n     *    The Strophe.Builder object.\n     */\n    t: function (text) {\n        var child = Strophe.xmlTextNode(text);\n        this.node.appendChild(child);\n        return this;\n    },\n\n    /** Function: h\n     *  Replace current element contents with the HTML passed in.\n     *\n     *  This *does not* make the child the new current element\n     *\n     *  Parameters:\n     *    (String) html - The html to insert as contents of current element.\n     *\n     *  Returns:\n     *    The Strophe.Builder object.\n     */\n    h: function (html) {\n        var fragment = document.createElement('body');\n\n        // force the browser to try and fix any invalid HTML tags\n        fragment.innerHTML = html;\n\n        // copy cleaned html into an xml dom\n        var xhtml = Strophe.createHtml(fragment);\n\n        while(xhtml.childNodes.length > 0) {\n            this.node.appendChild(xhtml.childNodes[0]);\n        }\n        return this;\n    }\n};\n\n/** PrivateClass: Strophe.Handler\n *  _Private_ helper class for managing stanza handlers.\n *\n *  A Strophe.Handler encapsulates a user provided callback function to be\n *  executed when matching stanzas are received by the connection.\n *  Handlers can be either one-off or persistant depending on their\n *  return value. Returning true will cause a Handler to remain active, and\n *  returning false will remove the Handler.\n *\n *  Users will not use Strophe.Handler objects directly, but instead they\n *  will use Strophe.Connection.addHandler() and\n *  Strophe.Connection.deleteHandler().\n */\n\n/** PrivateConstructor: Strophe.Handler\n *  Create and initialize a new Strophe.Handler.\n *\n *  Parameters:\n *    (Function) handler - A function to be executed when the handler is run.\n *    (String) ns - The namespace to match.\n *    (String) name - The element name to match.\n *    (String) type - The element type to match.\n *    (String) id - The element id attribute to match.\n *    (String) from - The element from attribute to match.\n *    (Object) options - Handler options\n *\n *  Returns:\n *    A new Strophe.Handler object.\n */\nStrophe.Handler = function (handler, ns, name, type, id, from, options) {\n    this.handler = handler;\n    this.ns = ns;\n    this.name = name;\n    this.type = type;\n    this.id = id;\n    this.options = options || {'matchBareFromJid': false, 'ignoreNamespaceFragment': false};\n    // BBB: Maintain backward compatibility with old `matchBare` option\n    if (this.options.matchBare) {\n        Strophe.warn('The \"matchBare\" option is deprecated, use \"matchBareFromJid\" instead.');\n        this.options.matchBareFromJid = this.options.matchBare;\n        delete this.options.matchBare;\n    }\n\n    if (this.options.matchBareFromJid) {\n        this.from = from ? Strophe.getBareJidFromJid(from) : null;\n    } else {\n        this.from = from;\n    }\n    // whether the handler is a user handler or a system handler\n    this.user = true;\n};\n\nStrophe.Handler.prototype = {\n    /** PrivateFunction: getNamespace\n     *  Returns the XML namespace attribute on an element.\n     *  If `ignoreNamespaceFragment` was passed in for this handler, then the\n     *  URL fragment will be stripped.\n     *\n     *  Parameters:\n     *    (XMLElement) elem - The XML element with the namespace.\n     *\n     *  Returns:\n     *    The namespace, with optionally the fragment stripped.\n     */\n    getNamespace: function (elem) {\n        var elNamespace = elem.getAttribute(\"xmlns\");\n        if (elNamespace && this.options.ignoreNamespaceFragment) {\n            elNamespace = elNamespace.split('#')[0];\n        }\n        return elNamespace;\n    },\n\n    /** PrivateFunction: namespaceMatch\n     *  Tests if a stanza matches the namespace set for this Strophe.Handler.\n     *\n     *  Parameters:\n     *    (XMLElement) elem - The XML element to test.\n     *\n     *  Returns:\n     *    true if the stanza matches and false otherwise.\n     */\n    namespaceMatch: function (elem) {\n        var nsMatch = false;\n        if (!this.ns) {\n            return true;\n        } else {\n            var that = this;\n            Strophe.forEachChild(elem, null, function (elem) {\n                if (that.getNamespace(elem) === that.ns) {\n                    nsMatch = true;\n                }\n            });\n            nsMatch = nsMatch || this.getNamespace(elem) === this.ns;\n        }\n        return nsMatch;\n    },\n\n    /** PrivateFunction: isMatch\n     *  Tests if a stanza matches the Strophe.Handler.\n     *\n     *  Parameters:\n     *    (XMLElement) elem - The XML element to test.\n     *\n     *  Returns:\n     *    true if the stanza matches and false otherwise.\n     */\n    isMatch: function (elem) {\n        var from = elem.getAttribute('from');\n        if (this.options.matchBareFromJid) {\n            from = Strophe.getBareJidFromJid(from);\n        }\n        var elem_type = elem.getAttribute(\"type\");\n        if (this.namespaceMatch(elem) &&\n            (!this.name || Strophe.isTagEqual(elem, this.name)) &&\n            (!this.type || (Array.isArray(this.type) ? this.type.indexOf(elem_type) !== -1 : elem_type === this.type)) &&\n            (!this.id || elem.getAttribute(\"id\") === this.id) &&\n            (!this.from || from === this.from)) {\n                return true;\n        }\n        return false;\n    },\n\n    /** PrivateFunction: run\n     *  Run the callback on a matching stanza.\n     *\n     *  Parameters:\n     *    (XMLElement) elem - The DOM element that triggered the\n     *      Strophe.Handler.\n     *\n     *  Returns:\n     *    A boolean indicating if the handler should remain active.\n     */\n    run: function (elem) {\n        var result = null;\n        try {\n            result = this.handler(elem);\n        } catch (e) {\n            Strophe._handleError(e);\n            throw e;\n        }\n        return result;\n    },\n\n    /** PrivateFunction: toString\n     *  Get a String representation of the Strophe.Handler object.\n     *\n     *  Returns:\n     *    A String.\n     */\n    toString: function () {\n        return \"{Handler: \" + this.handler + \"(\" + this.name + \",\" +\n            this.id + \",\" + this.ns + \")}\";\n    }\n};\n\n/** PrivateClass: Strophe.TimedHandler\n *  _Private_ helper class for managing timed handlers.\n *\n *  A Strophe.TimedHandler encapsulates a user provided callback that\n *  should be called after a certain period of time or at regular\n *  intervals.  The return value of the callback determines whether the\n *  Strophe.TimedHandler will continue to fire.\n *\n *  Users will not use Strophe.TimedHandler objects directly, but instead\n *  they will use Strophe.Connection.addTimedHandler() and\n *  Strophe.Connection.deleteTimedHandler().\n */\n\n/** PrivateConstructor: Strophe.TimedHandler\n *  Create and initialize a new Strophe.TimedHandler object.\n *\n *  Parameters:\n *    (Integer) period - The number of milliseconds to wait before the\n *      handler is called.\n *    (Function) handler - The callback to run when the handler fires.  This\n *      function should take no arguments.\n *\n *  Returns:\n *    A new Strophe.TimedHandler object.\n */\nStrophe.TimedHandler = function (period, handler) {\n    this.period = period;\n    this.handler = handler;\n    this.lastCalled = new Date().getTime();\n    this.user = true;\n};\n\nStrophe.TimedHandler.prototype = {\n    /** PrivateFunction: run\n     *  Run the callback for the Strophe.TimedHandler.\n     *\n     *  Returns:\n     *    true if the Strophe.TimedHandler should be called again, and false\n     *      otherwise.\n     */\n    run: function () {\n        this.lastCalled = new Date().getTime();\n        return this.handler();\n    },\n\n    /** PrivateFunction: reset\n     *  Reset the last called time for the Strophe.TimedHandler.\n     */\n    reset: function () {\n        this.lastCalled = new Date().getTime();\n    },\n\n    /** PrivateFunction: toString\n     *  Get a string representation of the Strophe.TimedHandler object.\n     *\n     *  Returns:\n     *    The string representation.\n     */\n    toString: function () {\n        return \"{TimedHandler: \" + this.handler + \"(\" + this.period +\")}\";\n    }\n};\n\n/** Class: Strophe.Connection\n *  XMPP Connection manager.\n *\n *  This class is the main part of Strophe.  It manages a BOSH or websocket\n *  connection to an XMPP server and dispatches events to the user callbacks\n *  as data arrives. It supports SASL PLAIN, SASL DIGEST-MD5, SASL SCRAM-SHA1\n *  and legacy authentication.\n *\n *  After creating a Strophe.Connection object, the user will typically\n *  call connect() with a user supplied callback to handle connection level\n *  events like authentication failure, disconnection, or connection\n *  complete.\n *\n *  The user will also have several event handlers defined by using\n *  addHandler() and addTimedHandler().  These will allow the user code to\n *  respond to interesting stanzas or do something periodically with the\n *  connection. These handlers will be active once authentication is\n *  finished.\n *\n *  To send data to the connection, use send().\n */\n\n/** Constructor: Strophe.Connection\n *  Create and initialize a Strophe.Connection object.\n *\n *  The transport-protocol for this connection will be chosen automatically\n *  based on the given service parameter. URLs starting with \"ws://\" or\n *  \"wss://\" will use WebSockets, URLs starting with \"http://\", \"https://\"\n *  or without a protocol will use BOSH.\n *\n *  To make Strophe connect to the current host you can leave out the protocol\n *  and host part and just pass the path, e.g.\n *\n *  > var conn = new Strophe.Connection(\"/http-bind/\");\n *\n *  Options common to both Websocket and BOSH:\n *  ------------------------------------------\n *\n *  cookies:\n *\n *  The *cookies* option allows you to pass in cookies to be added to the\n *  document. These cookies will then be included in the BOSH XMLHttpRequest\n *  or in the websocket connection.\n *\n *  The passed in value must be a map of cookie names and string values.\n *\n *  > { \"myCookie\": {\n *  >     \"value\": \"1234\",\n *  >     \"domain\": \".example.org\",\n *  >     \"path\": \"/\",\n *  >     \"expires\": expirationDate\n *  >     }\n *  > }\n *\n *  Note that cookies can't be set in this way for other domains (i.e. cross-domain).\n *  Those cookies need to be set under those domains, for example they can be\n *  set server-side by making a XHR call to that domain to ask it to set any\n *  necessary cookies.\n *\n *  mechanisms:\n *\n *  The *mechanisms* option allows you to specify the SASL mechanisms that this\n *  instance of Strophe.Connection (and therefore your XMPP client) will\n *  support.\n *\n *  The value must be an array of objects with Strophe.SASLMechanism\n *  prototypes.\n *\n *  If nothing is specified, then the following mechanisms (and their\n *  priorities) are registered:\n *\n *      SCRAM-SHA1 - 70\n *      DIGEST-MD5 - 60\n *      PLAIN - 50\n *      OAUTH-BEARER - 40\n *      OAUTH-2 - 30\n *      ANONYMOUS - 20\n *      EXTERNAL - 10\n *\n *  WebSocket options:\n *  ------------------\n *\n *  If you want to connect to the current host with a WebSocket connection you\n *  can tell Strophe to use WebSockets through a \"protocol\" attribute in the\n *  optional options parameter. Valid values are \"ws\" for WebSocket and \"wss\"\n *  for Secure WebSocket.\n *  So to connect to \"wss://CURRENT_HOSTNAME/xmpp-websocket\" you would call\n *\n *  > var conn = new Strophe.Connection(\"/xmpp-websocket/\", {protocol: \"wss\"});\n *\n *  Note that relative URLs _NOT_ starting with a \"/\" will also include the path\n *  of the current site.\n *\n *  Also because downgrading security is not permitted by browsers, when using\n *  relative URLs both BOSH and WebSocket connections will use their secure\n *  variants if the current connection to the site is also secure (https).\n *\n *  BOSH options:\n *  -------------\n *\n *  By adding \"sync\" to the options, you can control if requests will\n *  be made synchronously or not. The default behaviour is asynchronous.\n *  If you want to make requests synchronous, make \"sync\" evaluate to true.\n *  > var conn = new Strophe.Connection(\"/http-bind/\", {sync: true});\n *\n *  You can also toggle this on an already established connection.\n *  > conn.options.sync = true;\n *\n *  The *customHeaders* option can be used to provide custom HTTP headers to be\n *  included in the XMLHttpRequests made.\n *\n *  The *keepalive* option can be used to instruct Strophe to maintain the\n *  current BOSH session across interruptions such as webpage reloads.\n *\n *  It will do this by caching the sessions tokens in sessionStorage, and when\n *  \"restore\" is called it will check whether there are cached tokens with\n *  which it can resume an existing session.\n *\n *  The *withCredentials* option should receive a Boolean value and is used to\n *  indicate wether cookies should be included in ajax requests (by default\n *  they're not).\n *  Set this value to true if you are connecting to a BOSH service\n *  and for some reason need to send cookies to it.\n *  In order for this to work cross-domain, the server must also enable\n *  credentials by setting the Access-Control-Allow-Credentials response header\n *  to \"true\". For most usecases however this setting should be false (which\n *  is the default).\n *  Additionally, when using Access-Control-Allow-Credentials, the\n *  Access-Control-Allow-Origin header can't be set to the wildcard \"*\", but\n *  instead must be restricted to actual domains.\n *\n *  The *contentType* option can be set to change the default Content-Type\n *  of \"text/xml; charset=utf-8\", which can be useful to reduce the amount of\n *  CORS preflight requests that are sent to the server.\n *\n *  Parameters:\n *    (String) service - The BOSH or WebSocket service URL.\n *    (Object) options - A hash of configuration options\n *\n *  Returns:\n *    A new Strophe.Connection object.\n */\nStrophe.Connection = function (service, options) {\n    // The service URL\n    this.service = service;\n    // Configuration options\n    this.options = options || {};\n    var proto = this.options.protocol || \"\";\n\n    // Select protocal based on service or options\n    if (service.indexOf(\"ws:\") === 0 || service.indexOf(\"wss:\") === 0 ||\n            proto.indexOf(\"ws\") === 0) {\n        this._proto = new Strophe.Websocket(this);\n    } else {\n        this._proto = new Strophe.Bosh(this);\n    }\n\n    /* The connected JID. */\n    this.jid = \"\";\n    /* the JIDs domain */\n    this.domain = null;\n    /* stream:features */\n    this.features = null;\n\n    // SASL\n    this._sasl_data = {};\n    this.do_session = false;\n    this.do_bind = false;\n\n    // handler lists\n    this.timedHandlers = [];\n    this.handlers = [];\n    this.removeTimeds = [];\n    this.removeHandlers = [];\n    this.addTimeds = [];\n    this.addHandlers = [];\n    this.protocolErrorHandlers = {\n        'HTTP': {},\n        'websocket': {}\n    };\n\n    this._idleTimeout = null;\n    this._disconnectTimeout = null;\n\n    this.authenticated = false;\n    this.connected = false;\n    this.disconnecting = false;\n    this.do_authentication = true;\n    this.paused = false;\n    this.restored = false;\n\n    this._data = [];\n    this._uniqueId = 0;\n\n    this._sasl_success_handler = null;\n    this._sasl_failure_handler = null;\n    this._sasl_challenge_handler = null;\n\n    // Max retries before disconnecting\n    this.maxRetries = 5;\n\n    // Call onIdle callback every 1/10th of a second\n    // XXX: setTimeout should be called only with function expressions (23974bc1)\n    this._idleTimeout = setTimeout(function() {\n        this._onIdle();\n    }.bind(this), 100);\n\n    utils.addCookies(this.options.cookies);\n    this.registerSASLMechanisms(this.options.mechanisms);\n\n    // initialize plugins\n    for (var k in Strophe._connectionPlugins) {\n        if (Strophe._connectionPlugins.hasOwnProperty(k)) {\n            var ptype = Strophe._connectionPlugins[k];\n            // jslint complaints about the below line, but this is fine\n            var F = function () {}; // jshint ignore:line\n            F.prototype = ptype;\n            this[k] = new F();\n            this[k].init(this);\n        }\n    }\n};\n\nStrophe.Connection.prototype = {\n    /** Function: reset\n     *  Reset the connection.\n     *\n     *  This function should be called after a connection is disconnected\n     *  before that connection is reused.\n     */\n    reset: function () {\n        this._proto._reset();\n\n        // SASL\n        this.do_session = false;\n        this.do_bind = false;\n\n        // handler lists\n        this.timedHandlers = [];\n        this.handlers = [];\n        this.removeTimeds = [];\n        this.removeHandlers = [];\n        this.addTimeds = [];\n        this.addHandlers = [];\n\n        this.authenticated = false;\n        this.connected = false;\n        this.disconnecting = false;\n        this.restored = false;\n\n        this._data = [];\n        this._requests = [];\n        this._uniqueId = 0;\n    },\n\n    /** Function: pause\n     *  Pause the request manager.\n     *\n     *  This will prevent Strophe from sending any more requests to the\n     *  server.  This is very useful for temporarily pausing\n     *  BOSH-Connections while a lot of send() calls are happening quickly.\n     *  This causes Strophe to send the data in a single request, saving\n     *  many request trips.\n     */\n    pause: function () {\n        this.paused = true;\n    },\n\n    /** Function: resume\n     *  Resume the request manager.\n     *\n     *  This resumes after pause() has been called.\n     */\n    resume: function () {\n        this.paused = false;\n    },\n\n    /** Function: getUniqueId\n     *  Generate a unique ID for use in <iq/> elements.\n     *\n     *  All <iq/> stanzas are required to have unique id attributes.  This\n     *  function makes creating these easy.  Each connection instance has\n     *  a counter which starts from zero, and the value of this counter\n     *  plus a colon followed by the suffix becomes the unique id. If no\n     *  suffix is supplied, the counter is used as the unique id.\n     *\n     *  Suffixes are used to make debugging easier when reading the stream\n     *  data, and their use is recommended.  The counter resets to 0 for\n     *  every new connection for the same reason.  For connections to the\n     *  same server that authenticate the same way, all the ids should be\n     *  the same, which makes it easy to see changes.  This is useful for\n     *  automated testing as well.\n     *\n     *  Parameters:\n     *    (String) suffix - A optional suffix to append to the id.\n     *\n     *  Returns:\n     *    A unique string to be used for the id attribute.\n     */\n    getUniqueId: function(suffix) {\n        var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n            var r = Math.random() * 16 | 0,\n                v = c === 'x' ? r : r & 0x3 | 0x8;\n            return v.toString(16);\n        });\n        if (typeof(suffix) === \"string\" || typeof(suffix) === \"number\") {\n            return uuid + \":\" + suffix;\n        } else {\n            return uuid + \"\";\n        }\n    },\n\n    /** Function: addProtocolErrorHandler\n     *  Register a handler function for when a protocol (websocker or HTTP)\n     *  error occurs.\n     *\n     *  NOTE: Currently only HTTP errors for BOSH requests are handled.\n     *  Patches that handle websocket errors would be very welcome.\n     *\n     *  Parameters:\n     *    (String) protocol - 'HTTP' or 'websocket'\n     *    (Integer) status_code - Error status code (e.g 500, 400 or 404)\n     *    (Function) callback - Function that will fire on Http error\n     *\n     *  Example:\n     *  function onError(err_code){\n     *    //do stuff\n     *  }\n     *\n     *  var conn = Strophe.connect('http://example.com/http-bind');\n     *  conn.addProtocolErrorHandler('HTTP', 500, onError);\n     *  // Triggers HTTP 500 error and onError handler will be called\n     *  conn.connect('user_jid@incorrect_jabber_host', 'secret', onConnect);\n     */\n    addProtocolErrorHandler: function(protocol, status_code, callback){\n        this.protocolErrorHandlers[protocol][status_code] = callback;\n    },\n\n\n    /** Function: connect\n     *  Starts the connection process.\n     *\n     *  As the connection process proceeds, the user supplied callback will\n     *  be triggered multiple times with status updates.  The callback\n     *  should take two arguments - the status code and the error condition.\n     *\n     *  The status code will be one of the values in the Strophe.Status\n     *  constants.  The error condition will be one of the conditions\n     *  defined in RFC 3920 or the condition 'strophe-parsererror'.\n     *\n     *  The Parameters _wait_, _hold_ and _route_ are optional and only relevant\n     *  for BOSH connections. Please see XEP 124 for a more detailed explanation\n     *  of the optional parameters.\n     *\n     *  Parameters:\n     *    (String) jid - The user's JID.  This may be a bare JID,\n     *      or a full JID.  If a node is not supplied, SASL OAUTHBEARER or\n     *      SASL ANONYMOUS authentication will be attempted (OAUTHBEARER will\n     *      process the provided password value as an access token).\n     *    (String) pass - The user's password.\n     *    (Function) callback - The connect callback function.\n     *    (Integer) wait - The optional HTTPBIND wait value.  This is the\n     *      time the server will wait before returning an empty result for\n     *      a request.  The default setting of 60 seconds is recommended.\n     *    (Integer) hold - The optional HTTPBIND hold value.  This is the\n     *      number of connections the server will hold at one time.  This\n     *      should almost always be set to 1 (the default).\n     *    (String) route - The optional route value.\n     *    (String) authcid - The optional alternative authentication identity\n     *      (username) if intending to impersonate another user.\n     *      When using the SASL-EXTERNAL authentication mechanism, for example\n     *      with client certificates, then the authcid value is used to\n     *      determine whether an authorization JID (authzid) should be sent to\n     *      the server. The authzid should not be sent to the server if the\n     *      authzid and authcid are the same. So to prevent it from being sent\n     *      (for example when the JID is already contained in the client\n     *      certificate), set authcid to that same JID. See XEP-178 for more\n     *      details.\n     */\n    connect: function (jid, pass, callback, wait, hold, route, authcid) {\n        this.jid = jid;\n        /** Variable: authzid\n         *  Authorization identity.\n         */\n        this.authzid = Strophe.getBareJidFromJid(this.jid);\n\n        /** Variable: authcid\n         *  Authentication identity (User name).\n         */\n        this.authcid = authcid || Strophe.getNodeFromJid(this.jid);\n\n        /** Variable: pass\n         *  Authentication identity (User password).\n         */\n        this.pass = pass;\n\n        /** Variable: servtype\n         *  Digest MD5 compatibility.\n         */\n        this.servtype = \"xmpp\";\n\n        this.connect_callback = callback;\n        this.disconnecting = false;\n        this.connected = false;\n        this.authenticated = false;\n        this.restored = false;\n\n        // parse jid for domain\n        this.domain = Strophe.getDomainFromJid(this.jid);\n\n        this._changeConnectStatus(Strophe.Status.CONNECTING, null);\n\n        this._proto._connect(wait, hold, route);\n    },\n\n    /** Function: attach\n     *  Attach to an already created and authenticated BOSH session.\n     *\n     *  This function is provided to allow Strophe to attach to BOSH\n     *  sessions which have been created externally, perhaps by a Web\n     *  application.  This is often used to support auto-login type features\n     *  without putting user credentials into the page.\n     *\n     *  Parameters:\n     *    (String) jid - The full JID that is bound by the session.\n     *    (String) sid - The SID of the BOSH session.\n     *    (String) rid - The current RID of the BOSH session.  This RID\n     *      will be used by the next request.\n     *    (Function) callback The connect callback function.\n     *    (Integer) wait - The optional HTTPBIND wait value.  This is the\n     *      time the server will wait before returning an empty result for\n     *      a request.  The default setting of 60 seconds is recommended.\n     *      Other settings will require tweaks to the Strophe.TIMEOUT value.\n     *    (Integer) hold - The optional HTTPBIND hold value.  This is the\n     *      number of connections the server will hold at one time.  This\n     *      should almost always be set to 1 (the default).\n     *    (Integer) wind - The optional HTTBIND window value.  This is the\n     *      allowed range of request ids that are valid.  The default is 5.\n     */\n    attach: function (jid, sid, rid, callback, wait, hold, wind) {\n        if (this._proto instanceof Strophe.Bosh) {\n            this._proto._attach(jid, sid, rid, callback, wait, hold, wind);\n        } else {\n            throw {\n                name: 'StropheSessionError',\n                message: 'The \"attach\" method can only be used with a BOSH connection.'\n            };\n        }\n    },\n\n    /** Function: restore\n     *  Attempt to restore a cached BOSH session.\n     *\n     *  This function is only useful in conjunction with providing the\n     *  \"keepalive\":true option when instantiating a new Strophe.Connection.\n     *\n     *  When \"keepalive\" is set to true, Strophe will cache the BOSH tokens\n     *  RID (Request ID) and SID (Session ID) and then when this function is\n     *  called, it will attempt to restore the session from those cached\n     *  tokens.\n     *\n     *  This function must therefore be called instead of connect or attach.\n     *\n     *  For an example on how to use it, please see examples/restore.js\n     *\n     *  Parameters:\n     *    (String) jid - The user's JID.  This may be a bare JID or a full JID.\n     *    (Function) callback - The connect callback function.\n     *    (Integer) wait - The optional HTTPBIND wait value.  This is the\n     *      time the server will wait before returning an empty result for\n     *      a request.  The default setting of 60 seconds is recommended.\n     *    (Integer) hold - The optional HTTPBIND hold value.  This is the\n     *      number of connections the server will hold at one time.  This\n     *      should almost always be set to 1 (the default).\n     *    (Integer) wind - The optional HTTBIND window value.  This is the\n     *      allowed range of request ids that are valid.  The default is 5.\n     */\n    restore: function (jid, callback, wait, hold, wind) {\n        if (this._sessionCachingSupported()) {\n            this._proto._restore(jid, callback, wait, hold, wind);\n        } else {\n            throw {\n                name: 'StropheSessionError',\n                message: 'The \"restore\" method can only be used with a BOSH connection.'\n            };\n        }\n    },\n\n    /** PrivateFunction: _sessionCachingSupported\n     * Checks whether sessionStorage and JSON are supported and whether we're\n     * using BOSH.\n     */\n    _sessionCachingSupported: function () {\n        if (this._proto instanceof Strophe.Bosh) {\n            if (!JSON) { return false; }\n            try {\n                sessionStorage.setItem('_strophe_', '_strophe_');\n                sessionStorage.removeItem('_strophe_');\n            } catch (e) {\n                return false;\n            }\n            return true;\n        }\n        return false;\n    },\n\n    /** Function: xmlInput\n     *  User overrideable function that receives XML data coming into the\n     *  connection.\n     *\n     *  The default function does nothing.  User code can override this with\n     *  > Strophe.Connection.xmlInput = function (elem) {\n     *  >   (user code)\n     *  > };\n     *\n     *  Due to limitations of current Browsers' XML-Parsers the opening and closing\n     *  <stream> tag for WebSocket-Connoctions will be passed as selfclosing here.\n     *\n     *  BOSH-Connections will have all stanzas wrapped in a <body> tag. See\n     *  <Strophe.Bosh.strip> if you want to strip this tag.\n     *\n     *  Parameters:\n     *    (XMLElement) elem - The XML data received by the connection.\n     */\n    /* jshint unused:false */\n    xmlInput: function (elem) {\n        return;\n    },\n    /* jshint unused:true */\n\n    /** Function: xmlOutput\n     *  User overrideable function that receives XML data sent to the\n     *  connection.\n     *\n     *  The default function does nothing.  User code can override this with\n     *  > Strophe.Connection.xmlOutput = function (elem) {\n     *  >   (user code)\n     *  > };\n     *\n     *  Due to limitations of current Browsers' XML-Parsers the opening and closing\n     *  <stream> tag for WebSocket-Connoctions will be passed as selfclosing here.\n     *\n     *  BOSH-Connections will have all stanzas wrapped in a <body> tag. See\n     *  <Strophe.Bosh.strip> if you want to strip this tag.\n     *\n     *  Parameters:\n     *    (XMLElement) elem - The XMLdata sent by the connection.\n     */\n    /* jshint unused:false */\n    xmlOutput: function (elem) {\n        return;\n    },\n    /* jshint unused:true */\n\n    /** Function: rawInput\n     *  User overrideable function that receives raw data coming into the\n     *  connection.\n     *\n     *  The default function does nothing.  User code can override this with\n     *  > Strophe.Connection.rawInput = function (data) {\n     *  >   (user code)\n     *  > };\n     *\n     *  Parameters:\n     *    (String) data - The data received by the connection.\n     */\n    /* jshint unused:false */\n    rawInput: function (data) {\n        return;\n    },\n    /* jshint unused:true */\n\n    /** Function: rawOutput\n     *  User overrideable function that receives raw data sent to the\n     *  connection.\n     *\n     *  The default function does nothing.  User code can override this with\n     *  > Strophe.Connection.rawOutput = function (data) {\n     *  >   (user code)\n     *  > };\n     *\n     *  Parameters:\n     *    (String) data - The data sent by the connection.\n     */\n    /* jshint unused:false */\n    rawOutput: function (data) {\n        return;\n    },\n    /* jshint unused:true */\n\n    /** Function: nextValidRid\n     *  User overrideable function that receives the new valid rid.\n     *\n     *  The default function does nothing. User code can override this with\n     *  > Strophe.Connection.nextValidRid = function (rid) {\n     *  >    (user code)\n     *  > };\n     *\n     *  Parameters:\n     *    (Number) rid - The next valid rid\n     */\n    /* jshint unused:false */\n    nextValidRid: function (rid) {\n        return;\n    },\n    /* jshint unused:true */\n\n    /** Function: send\n     *  Send a stanza.\n     *\n     *  This function is called to push data onto the send queue to\n     *  go out over the wire.  Whenever a request is sent to the BOSH\n     *  server, all pending data is sent and the queue is flushed.\n     *\n     *  Parameters:\n     *    (XMLElement |\n     *     [XMLElement] |\n     *     Strophe.Builder) elem - The stanza to send.\n     */\n    send: function (elem) {\n        if (elem === null) { return ; }\n        if (typeof(elem.sort) === \"function\") {\n            for (var i = 0; i < elem.length; i++) {\n                this._queueData(elem[i]);\n            }\n        } else if (typeof(elem.tree) === \"function\") {\n            this._queueData(elem.tree());\n        } else {\n            this._queueData(elem);\n        }\n\n        this._proto._send();\n    },\n\n    /** Function: flush\n     *  Immediately send any pending outgoing data.\n     *\n     *  Normally send() queues outgoing data until the next idle period\n     *  (100ms), which optimizes network use in the common cases when\n     *  several send()s are called in succession. flush() can be used to\n     *  immediately send all pending data.\n     */\n    flush: function () {\n        // cancel the pending idle period and run the idle function\n        // immediately\n        clearTimeout(this._idleTimeout);\n        this._onIdle();\n    },\n\n    /** Function: sendPresence\n     *  Helper function to send presence stanzas. The main benefit is for\n     *  sending presence stanzas for which you expect a responding presence\n     *  stanza with the same id (for example when leaving a chat room).\n     *\n     *  Parameters:\n     *    (XMLElement) elem - The stanza to send.\n     *    (Function) callback - The callback function for a successful request.\n     *    (Function) errback - The callback function for a failed or timed\n     *      out request.  On timeout, the stanza will be null.\n     *    (Integer) timeout - The time specified in milliseconds for a\n     *      timeout to occur.\n     *\n     *  Returns:\n     *    The id used to send the presence.\n     */\n    sendPresence: function(elem, callback, errback, timeout) {\n        var timeoutHandler = null;\n        var that = this;\n        if (typeof(elem.tree) === \"function\") {\n            elem = elem.tree();\n        }\n        var id = elem.getAttribute('id');\n        if (!id) { // inject id if not found\n            id = this.getUniqueId(\"sendPresence\");\n            elem.setAttribute(\"id\", id);\n        }\n\n        if (typeof callback === \"function\" || typeof errback === \"function\") {\n            var handler = this.addHandler(function (stanza) {\n                // remove timeout handler if there is one\n                if (timeoutHandler) {\n                    that.deleteTimedHandler(timeoutHandler);\n                }\n                var type = stanza.getAttribute('type');\n                if (type === 'error') {\n                    if (errback) {\n                        errback(stanza);\n                    }\n                } else if (callback) {\n                    callback(stanza);\n                }\n            }, null, 'presence', null, id);\n\n            // if timeout specified, set up a timeout handler.\n            if (timeout) {\n                timeoutHandler = this.addTimedHandler(timeout, function () {\n                    // get rid of normal handler\n                    that.deleteHandler(handler);\n                    // call errback on timeout with null stanza\n                    if (errback) {\n                        errback(null);\n                    }\n                    return false;\n                });\n            }\n        }\n        this.send(elem);\n        return id;\n    },\n\n    /** Function: sendIQ\n     *  Helper function to send IQ stanzas.\n     *\n     *  Parameters:\n     *    (XMLElement) elem - The stanza to send.\n     *    (Function) callback - The callback function for a successful request.\n     *    (Function) errback - The callback function for a failed or timed\n     *      out request.  On timeout, the stanza will be null.\n     *    (Integer) timeout - The time specified in milliseconds for a\n     *      timeout to occur.\n     *\n     *  Returns:\n     *    The id used to send the IQ.\n    */\n    sendIQ: function(elem, callback, errback, timeout) {\n        var timeoutHandler = null;\n        var that = this;\n        if (typeof(elem.tree) === \"function\") {\n            elem = elem.tree();\n        }\n        var id = elem.getAttribute('id');\n        if (!id) { // inject id if not found\n            id = this.getUniqueId(\"sendIQ\");\n            elem.setAttribute(\"id\", id);\n        }\n\n        if (typeof callback === \"function\" || typeof errback === \"function\") {\n            var handler = this.addHandler(function (stanza) {\n                // remove timeout handler if there is one\n                if (timeoutHandler) {\n                    that.deleteTimedHandler(timeoutHandler);\n                }\n                var iqtype = stanza.getAttribute('type');\n                if (iqtype === 'result') {\n                    if (callback) {\n                        callback(stanza);\n                    }\n                } else if (iqtype === 'error') {\n                    if (errback) {\n                        errback(stanza);\n                    }\n                } else {\n                    throw {\n                        name: \"StropheError\",\n                        message: \"Got bad IQ type of \" + iqtype\n                    };\n                }\n            }, null, 'iq', ['error', 'result'], id);\n\n            // if timeout specified, set up a timeout handler.\n            if (timeout) {\n                timeoutHandler = this.addTimedHandler(timeout, function () {\n                    // get rid of normal handler\n                    that.deleteHandler(handler);\n                    // call errback on timeout with null stanza\n                    if (errback) {\n                        errback(null);\n                    }\n                    return false;\n                });\n            }\n        }\n        this.send(elem);\n        return id;\n    },\n\n    /** PrivateFunction: _queueData\n     *  Queue outgoing data for later sending.  Also ensures that the data\n     *  is a DOMElement.\n     */\n    _queueData: function (element) {\n        if (element === null ||\n            !element.tagName ||\n            !element.childNodes) {\n            throw {\n                name: \"StropheError\",\n                message: \"Cannot queue non-DOMElement.\"\n            };\n        }\n        this._data.push(element);\n    },\n\n    /** PrivateFunction: _sendRestart\n     *  Send an xmpp:restart stanza.\n     */\n    _sendRestart: function () {\n        this._data.push(\"restart\");\n        this._proto._sendRestart();\n        // XXX: setTimeout should be called only with function expressions (23974bc1)\n        this._idleTimeout = setTimeout(function() {\n            this._onIdle();\n        }.bind(this), 100);\n    },\n\n    /** Function: addTimedHandler\n     *  Add a timed handler to the connection.\n     *\n     *  This function adds a timed handler.  The provided handler will\n     *  be called every period milliseconds until it returns false,\n     *  the connection is terminated, or the handler is removed.  Handlers\n     *  that wish to continue being invoked should return true.\n     *\n     *  Because of method binding it is necessary to save the result of\n     *  this function if you wish to remove a handler with\n     *  deleteTimedHandler().\n     *\n     *  Note that user handlers are not active until authentication is\n     *  successful.\n     *\n     *  Parameters:\n     *    (Integer) period - The period of the handler.\n     *    (Function) handler - The callback function.\n     *\n     *  Returns:\n     *    A reference to the handler that can be used to remove it.\n     */\n    addTimedHandler: function (period, handler) {\n        var thand = new Strophe.TimedHandler(period, handler);\n        this.addTimeds.push(thand);\n        return thand;\n    },\n\n    /** Function: deleteTimedHandler\n     *  Delete a timed handler for a connection.\n     *\n     *  This function removes a timed handler from the connection.  The\n     *  handRef parameter is *not* the function passed to addTimedHandler(),\n     *  but is the reference returned from addTimedHandler().\n     *\n     *  Parameters:\n     *    (Strophe.TimedHandler) handRef - The handler reference.\n     */\n    deleteTimedHandler: function (handRef) {\n        // this must be done in the Idle loop so that we don't change\n        // the handlers during iteration\n        this.removeTimeds.push(handRef);\n    },\n\n    /** Function: addHandler\n     *  Add a stanza handler for the connection.\n     *\n     *  This function adds a stanza handler to the connection.  The\n     *  handler callback will be called for any stanza that matches\n     *  the parameters.  Note that if multiple parameters are supplied,\n     *  they must all match for the handler to be invoked.\n     *\n     *  The handler will receive the stanza that triggered it as its argument.\n     *  *The handler should return true if it is to be invoked again;\n     *  returning false will remove the handler after it returns.*\n     *\n     *  As a convenience, the ns parameters applies to the top level element\n     *  and also any of its immediate children.  This is primarily to make\n     *  matching /iq/query elements easy.\n     *\n     *  Options\n     *  ~~~~~~~\n     *  With the options argument, you can specify boolean flags that affect how\n     *  matches are being done.\n     *\n     *  Currently two flags exist:\n     *\n     *  - matchBareFromJid:\n     *      When set to true, the from parameter and the\n     *      from attribute on the stanza will be matched as bare JIDs instead\n     *      of full JIDs. To use this, pass {matchBareFromJid: true} as the\n     *      value of options. The default value for matchBareFromJid is false.\n     *\n     *  - ignoreNamespaceFragment:\n     *      When set to true, a fragment specified on the stanza's namespace\n     *      URL will be ignored when it's matched with the one configured for\n     *      the handler.\n     *\n     *      This means that if you register like this:\n     *      >   connection.addHandler(\n     *      >       handler,\n     *      >       'http://jabber.org/protocol/muc',\n     *      >       null, null, null, null,\n     *      >       {'ignoreNamespaceFragment': true}\n     *      >   );\n     *\n     *      Then a stanza with XML namespace of\n     *      'http://jabber.org/protocol/muc#user' will also be matched. If\n     *      'ignoreNamespaceFragment' is false, then only stanzas with\n     *      'http://jabber.org/protocol/muc' will be matched.\n     *\n     *  Deleting the handler\n     *  ~~~~~~~~~~~~~~~~~~~~\n     *  The return value should be saved if you wish to remove the handler\n     *  with deleteHandler().\n     *\n     *  Parameters:\n     *    (Function) handler - The user callback.\n     *    (String) ns - The namespace to match.\n     *    (String) name - The stanza name to match.\n     *    (String|Array) type - The stanza type (or types if an array) to match.\n     *    (String) id - The stanza id attribute to match.\n     *    (String) from - The stanza from attribute to match.\n     *    (String) options - The handler options\n     *\n     *  Returns:\n     *    A reference to the handler that can be used to remove it.\n     */\n    addHandler: function (handler, ns, name, type, id, from, options) {\n        var hand = new Strophe.Handler(handler, ns, name, type, id, from, options);\n        this.addHandlers.push(hand);\n        return hand;\n    },\n\n    /** Function: deleteHandler\n     *  Delete a stanza handler for a connection.\n     *\n     *  This function removes a stanza handler from the connection.  The\n     *  handRef parameter is *not* the function passed to addHandler(),\n     *  but is the reference returned from addHandler().\n     *\n     *  Parameters:\n     *    (Strophe.Handler) handRef - The handler reference.\n     */\n    deleteHandler: function (handRef) {\n        // this must be done in the Idle loop so that we don't change\n        // the handlers during iteration\n        this.removeHandlers.push(handRef);\n        // If a handler is being deleted while it is being added,\n        // prevent it from getting added\n        var i = this.addHandlers.indexOf(handRef);\n        if (i >= 0) {\n            this.addHandlers.splice(i, 1);\n        }\n    },\n\n    /** Function: registerSASLMechanisms\n     *\n     * Register the SASL mechanisms which will be supported by this instance of\n     * Strophe.Connection (i.e. which this XMPP client will support).\n     *\n     *  Parameters:\n     *    (Array) mechanisms - Array of objects with Strophe.SASLMechanism prototypes\n     *\n     */\n    registerSASLMechanisms: function (mechanisms) {\n        this.mechanisms = {};\n        mechanisms = mechanisms || [\n            Strophe.SASLAnonymous,\n            Strophe.SASLExternal,\n            Strophe.SASLMD5,\n            Strophe.SASLOAuthBearer,\n            Strophe.SASLXOAuth2,\n            Strophe.SASLPlain,\n            Strophe.SASLSHA1\n        ];\n        mechanisms.forEach(this.registerSASLMechanism.bind(this));\n    },\n\n    /** Function: registerSASLMechanism\n     *\n     * Register a single SASL mechanism, to be supported by this client.\n     *\n     *  Parameters:\n     *    (Object) mechanism - Object with a Strophe.SASLMechanism prototype\n     *\n     */\n    registerSASLMechanism: function (mechanism) {\n        this.mechanisms[mechanism.prototype.name] = mechanism;\n    },\n\n    /** Function: disconnect\n     *  Start the graceful disconnection process.\n     *\n     *  This function starts the disconnection process.  This process starts\n     *  by sending unavailable presence and sending BOSH body of type\n     *  terminate.  A timeout handler makes sure that disconnection happens\n     *  even if the BOSH server does not respond.\n     *  If the Connection object isn't connected, at least tries to abort all pending requests\n     *  so the connection object won't generate successful requests (which were already opened).\n     *\n     *  The user supplied connection callback will be notified of the\n     *  progress as this process happens.\n     *\n     *  Parameters:\n     *    (String) reason - The reason the disconnect is occuring.\n     */\n    disconnect: function (reason) {\n        this._changeConnectStatus(Strophe.Status.DISCONNECTING, reason);\n\n        Strophe.info(\"Disconnect was called because: \" + reason);\n        if (this.connected) {\n            var pres = false;\n            this.disconnecting = true;\n            if (this.authenticated) {\n                pres = $pres({\n                    xmlns: Strophe.NS.CLIENT,\n                    type: 'unavailable'\n                });\n            }\n            // setup timeout handler\n            this._disconnectTimeout = this._addSysTimedHandler(\n                3000, this._onDisconnectTimeout.bind(this));\n            this._proto._disconnect(pres);\n        } else {\n            Strophe.info(\"Disconnect was called before Strophe connected to the server\");\n            this._proto._abortAllRequests();\n            this._doDisconnect();\n        }\n    },\n\n    /** PrivateFunction: _changeConnectStatus\n     *  _Private_ helper function that makes sure plugins and the user's\n     *  callback are notified of connection status changes.\n     *\n     *  Parameters:\n     *    (Integer) status - the new connection status, one of the values\n     *      in Strophe.Status\n     *    (String) condition - the error condition or null\n     *    (XMLElement) elem - The triggering stanza.\n     */\n    _changeConnectStatus: function (status, condition, elem) {\n        // notify all plugins listening for status changes\n        for (var k in Strophe._connectionPlugins) {\n            if (Strophe._connectionPlugins.hasOwnProperty(k)) {\n                var plugin = this[k];\n                if (plugin.statusChanged) {\n                    try {\n                        plugin.statusChanged(status, condition);\n                    } catch (err) {\n                        Strophe.error(\"\" + k + \" plugin caused an exception \" +\n                                      \"changing status: \" + err);\n                    }\n                }\n            }\n        }\n\n        // notify the user's callback\n        if (this.connect_callback) {\n            try {\n                this.connect_callback(status, condition, elem);\n            } catch (e) {\n                Strophe._handleError(e);\n                Strophe.error(\n                    \"User connection callback caused an \"+\"exception: \"+e);\n            }\n        }\n    },\n\n    /** PrivateFunction: _doDisconnect\n     *  _Private_ function to disconnect.\n     *\n     *  This is the last piece of the disconnection logic.  This resets the\n     *  connection and alerts the user's connection callback.\n     */\n    _doDisconnect: function (condition) {\n        if (typeof this._idleTimeout === \"number\") {\n            clearTimeout(this._idleTimeout);\n        }\n\n        // Cancel Disconnect Timeout\n        if (this._disconnectTimeout !== null) {\n            this.deleteTimedHandler(this._disconnectTimeout);\n            this._disconnectTimeout = null;\n        }\n\n        Strophe.info(\"_doDisconnect was called\");\n        this._proto._doDisconnect();\n\n        this.authenticated = false;\n        this.disconnecting = false;\n        this.restored = false;\n\n        // delete handlers\n        this.handlers = [];\n        this.timedHandlers = [];\n        this.removeTimeds = [];\n        this.removeHandlers = [];\n        this.addTimeds = [];\n        this.addHandlers = [];\n\n        // tell the parent we disconnected\n        this._changeConnectStatus(Strophe.Status.DISCONNECTED, condition);\n        this.connected = false;\n    },\n\n    /** PrivateFunction: _dataRecv\n     *  _Private_ handler to processes incoming data from the the connection.\n     *\n     *  Except for _connect_cb handling the initial connection request,\n     *  this function handles the incoming data for all requests.  This\n     *  function also fires stanza handlers that match each incoming\n     *  stanza.\n     *\n     *  Parameters:\n     *    (Strophe.Request) req - The request that has data ready.\n     *    (string) req - The stanza a raw string (optiona).\n     */\n    _dataRecv: function (req, raw) {\n        Strophe.info(\"_dataRecv called\");\n        var elem = this._proto._reqToData(req);\n        if (elem === null) { return; }\n\n        if (this.xmlInput !== Strophe.Connection.prototype.xmlInput) {\n            if (elem.nodeName === this._proto.strip && elem.childNodes.length) {\n                this.xmlInput(elem.childNodes[0]);\n            } else {\n                this.xmlInput(elem);\n            }\n        }\n        if (this.rawInput !== Strophe.Connection.prototype.rawInput) {\n            if (raw) {\n                this.rawInput(raw);\n            } else {\n                this.rawInput(Strophe.serialize(elem));\n            }\n        }\n\n        // remove handlers scheduled for deletion\n        var i, hand;\n        while (this.removeHandlers.length > 0) {\n            hand = this.removeHandlers.pop();\n            i = this.handlers.indexOf(hand);\n            if (i >= 0) {\n                this.handlers.splice(i, 1);\n            }\n        }\n\n        // add handlers scheduled for addition\n        while (this.addHandlers.length > 0) {\n            this.handlers.push(this.addHandlers.pop());\n        }\n\n        // handle graceful disconnect\n        if (this.disconnecting && this._proto._emptyQueue()) {\n            this._doDisconnect();\n            return;\n        }\n\n        var type = elem.getAttribute(\"type\");\n        var cond, conflict;\n        if (type !== null && type === \"terminate\") {\n            // Don't process stanzas that come in after disconnect\n            if (this.disconnecting) {\n                return;\n            }\n\n            // an error occurred\n            cond = elem.getAttribute(\"condition\");\n            conflict = elem.getElementsByTagName(\"conflict\");\n            if (cond !== null) {\n                if (cond === \"remote-stream-error\" && conflict.length > 0) {\n                    cond = \"conflict\";\n                }\n                this._changeConnectStatus(Strophe.Status.CONNFAIL, cond);\n            } else {\n                this._changeConnectStatus(\n                    Strophe.Status.CONNFAIL,\n                    Strophe.ErrorCondition.UNKOWN_REASON\n                );\n            }\n            this._doDisconnect(cond);\n            return;\n        }\n\n        // send each incoming stanza through the handler chain\n        var that = this;\n        Strophe.forEachChild(elem, null, function (child) {\n            var i, newList;\n            // process handlers\n            newList = that.handlers;\n            that.handlers = [];\n            for (i = 0; i < newList.length; i++) {\n                var hand = newList[i];\n                // encapsulate 'handler.run' not to lose the whole handler list if\n                // one of the handlers throws an exception\n                try {\n                    if (hand.isMatch(child) &&\n                        (that.authenticated || !hand.user)) {\n                        if (hand.run(child)) {\n                            that.handlers.push(hand);\n                        }\n                    } else {\n                        that.handlers.push(hand);\n                    }\n                } catch(e) {\n                    // if the handler throws an exception, we consider it as false\n                    Strophe.warn('Removing Strophe handlers due to uncaught exception: '+e.message);\n                }\n            }\n        });\n    },\n\n\n    /** Attribute: mechanisms\n     *  SASL Mechanisms available for Connection.\n     */\n    mechanisms: {},\n\n    /** PrivateFunction: _connect_cb\n     *  _Private_ handler for initial connection request.\n     *\n     *  This handler is used to process the initial connection request\n     *  response from the BOSH server. It is used to set up authentication\n     *  handlers and start the authentication process.\n     *\n     *  SASL authentication will be attempted if available, otherwise\n     *  the code will fall back to legacy authentication.\n     *\n     *  Parameters:\n     *    (Strophe.Request) req - The current request.\n     *    (Function) _callback - low level (xmpp) connect callback function.\n     *      Useful for plugins with their own xmpp connect callback (when they\n     *      want to do something special).\n     */\n    _connect_cb: function (req, _callback, raw) {\n        Strophe.info(\"_connect_cb was called\");\n        this.connected = true;\n\n        var bodyWrap;\n        try {\n            bodyWrap = this._proto._reqToData(req);\n        } catch (e) {\n            if (e !== \"badformat\") { throw e; }\n            this._changeConnectStatus(\n                Strophe.Status.CONNFAIL,\n                Strophe.ErrorCondition.BAD_FORMAT\n            );\n            this._doDisconnect(Strophe.ErrorCondition.BAD_FORMAT);\n        }\n        if (!bodyWrap) { return; }\n\n        if (this.xmlInput !== Strophe.Connection.prototype.xmlInput) {\n            if (bodyWrap.nodeName === this._proto.strip && bodyWrap.childNodes.length) {\n                this.xmlInput(bodyWrap.childNodes[0]);\n            } else {\n                this.xmlInput(bodyWrap);\n            }\n        }\n        if (this.rawInput !== Strophe.Connection.prototype.rawInput) {\n            if (raw) {\n                this.rawInput(raw);\n            } else {\n                this.rawInput(Strophe.serialize(bodyWrap));\n            }\n        }\n\n        var conncheck = this._proto._connect_cb(bodyWrap);\n        if (conncheck === Strophe.Status.CONNFAIL) {\n            return;\n        }\n\n        // Check for the stream:features tag\n        var hasFeatures;\n        if (bodyWrap.getElementsByTagNameNS) {\n            hasFeatures = bodyWrap.getElementsByTagNameNS(Strophe.NS.STREAM, \"features\").length > 0;\n        } else {\n            hasFeatures = bodyWrap.getElementsByTagName(\"stream:features\").length > 0 ||\n                            bodyWrap.getElementsByTagName(\"features\").length > 0;\n        }\n        if (!hasFeatures) {\n            this._proto._no_auth_received(_callback);\n            return;\n        }\n\n        var matched = [], i, mech;\n        var mechanisms = bodyWrap.getElementsByTagName(\"mechanism\");\n        if (mechanisms.length > 0) {\n            for (i = 0; i < mechanisms.length; i++) {\n                mech = Strophe.getText(mechanisms[i]);\n                if (this.mechanisms[mech]) matched.push(this.mechanisms[mech]);\n            }\n        }\n        if (matched.length === 0) {\n            if (bodyWrap.getElementsByTagName(\"auth\").length === 0) {\n                // There are no matching SASL mechanisms and also no legacy\n                // auth available.\n                this._proto._no_auth_received(_callback);\n                return;\n            }\n        }\n        if (this.do_authentication !== false) {\n            this.authenticate(matched);\n        }\n    },\n\n    /** Function: sortMechanismsByPriority\n     *\n     *  Sorts an array of objects with prototype SASLMechanism according to\n     *  their priorities.\n     *\n     *  Parameters:\n     *    (Array) mechanisms - Array of SASL mechanisms.\n     *\n     */\n    sortMechanismsByPriority: function (mechanisms) {\n        // Sorting mechanisms according to priority.\n        var i, j, higher, swap;\n        for (i = 0; i < mechanisms.length - 1; ++i) {\n            higher = i;\n            for (j = i + 1; j < mechanisms.length; ++j) {\n                if (mechanisms[j].prototype.priority > mechanisms[higher].prototype.priority) {\n                    higher = j;\n                }\n            }\n            if (higher !== i) {\n                swap = mechanisms[i];\n                mechanisms[i] = mechanisms[higher];\n                mechanisms[higher] = swap;\n            }\n        }\n        return mechanisms;\n    },\n\n    /** PrivateFunction: _attemptSASLAuth\n     *\n     *  Iterate through an array of SASL mechanisms and attempt authentication\n     *  with the highest priority (enabled) mechanism.\n     *\n     *  Parameters:\n     *    (Array) mechanisms - Array of SASL mechanisms.\n     *\n     *  Returns:\n     *    (Boolean) mechanism_found - true or false, depending on whether a\n     *          valid SASL mechanism was found with which authentication could be\n     *          started.\n     */\n    _attemptSASLAuth: function (mechanisms) {\n        mechanisms = this.sortMechanismsByPriority(mechanisms || []);\n        var i = 0, mechanism_found = false;\n        for (i = 0; i < mechanisms.length; ++i) {\n            if (!mechanisms[i].prototype.test(this)) {\n                continue;\n            }\n            this._sasl_success_handler = this._addSysHandler(\n                this._sasl_success_cb.bind(this), null,\n                \"success\", null, null);\n            this._sasl_failure_handler = this._addSysHandler(\n                this._sasl_failure_cb.bind(this), null,\n                \"failure\", null, null);\n            this._sasl_challenge_handler = this._addSysHandler(\n                this._sasl_challenge_cb.bind(this), null,\n                \"challenge\", null, null);\n\n            this._sasl_mechanism = new mechanisms[i]();\n            this._sasl_mechanism.onStart(this);\n\n            var request_auth_exchange = $build(\"auth\", {\n                xmlns: Strophe.NS.SASL,\n                mechanism: this._sasl_mechanism.name\n            });\n            if (this._sasl_mechanism.isClientFirst) {\n                var response = this._sasl_mechanism.onChallenge(this, null);\n                request_auth_exchange.t(btoa(response));\n            }\n            this.send(request_auth_exchange.tree());\n            mechanism_found = true;\n            break;\n        }\n        return mechanism_found;\n    },\n\n    /** PrivateFunction: _attemptLegacyAuth\n     *\n     *  Attempt legacy (i.e. non-SASL) authentication.\n     *\n     */\n    _attemptLegacyAuth: function () {\n        if (Strophe.getNodeFromJid(this.jid) === null) {\n            // we don't have a node, which is required for non-anonymous\n            // client connections\n            this._changeConnectStatus(\n                Strophe.Status.CONNFAIL,\n                Strophe.ErrorCondition.MISSING_JID_NODE\n            );\n            this.disconnect(Strophe.ErrorCondition.MISSING_JID_NODE);\n        } else {\n            // Fall back to legacy authentication\n            this._changeConnectStatus(Strophe.Status.AUTHENTICATING, null);\n            this._addSysHandler(\n                this._auth1_cb.bind(this),\n                null, null, null, \"_auth_1\"\n            );\n            this.send($iq({\n                    'type': \"get\",\n                    'to': this.domain,\n                    'id': \"_auth_1\"\n                }).c(\"query\", {xmlns: Strophe.NS.AUTH})\n                .c(\"username\", {}).t(Strophe.getNodeFromJid(this.jid))\n                .tree());\n        }\n    },\n\n    /** Function: authenticate\n     * Set up authentication\n     *\n     *  Continues the initial connection request by setting up authentication\n     *  handlers and starting the authentication process.\n     *\n     *  SASL authentication will be attempted if available, otherwise\n     *  the code will fall back to legacy authentication.\n     *\n     *  Parameters:\n     *    (Array) matched - Array of SASL mechanisms supported.\n     *\n     */\n    authenticate: function (matched) {\n        if (!this._attemptSASLAuth(matched)) {\n            this._attemptLegacyAuth();\n        }\n    },\n\n    /** PrivateFunction: _sasl_challenge_cb\n     *  _Private_ handler for the SASL challenge\n     *\n     */\n    _sasl_challenge_cb: function(elem) {\n      var challenge = atob(Strophe.getText(elem));\n      var response = this._sasl_mechanism.onChallenge(this, challenge);\n      var stanza = $build('response', {\n          'xmlns': Strophe.NS.SASL\n      });\n      if (response !== \"\") {\n        stanza.t(btoa(response));\n      }\n      this.send(stanza.tree());\n      return true;\n    },\n\n    /** PrivateFunction: _auth1_cb\n     *  _Private_ handler for legacy authentication.\n     *\n     *  This handler is called in response to the initial <iq type='get'/>\n     *  for legacy authentication.  It builds an authentication <iq/> and\n     *  sends it, creating a handler (calling back to _auth2_cb()) to\n     *  handle the result\n     *\n     *  Parameters:\n     *    (XMLElement) elem - The stanza that triggered the callback.\n     *\n     *  Returns:\n     *    false to remove the handler.\n     */\n    /* jshint unused:false */\n    _auth1_cb: function (elem) {\n        // build plaintext auth iq\n        var iq = $iq({type: \"set\", id: \"_auth_2\"})\n            .c('query', {xmlns: Strophe.NS.AUTH})\n            .c('username', {}).t(Strophe.getNodeFromJid(this.jid))\n            .up()\n            .c('password').t(this.pass);\n\n        if (!Strophe.getResourceFromJid(this.jid)) {\n            // since the user has not supplied a resource, we pick\n            // a default one here.  unlike other auth methods, the server\n            // cannot do this for us.\n            this.jid = Strophe.getBareJidFromJid(this.jid) + '/strophe';\n        }\n        iq.up().c('resource', {}).t(Strophe.getResourceFromJid(this.jid));\n\n        this._addSysHandler(this._auth2_cb.bind(this), null,\n                            null, null, \"_auth_2\");\n        this.send(iq.tree());\n        return false;\n    },\n    /* jshint unused:true */\n\n    /** PrivateFunction: _sasl_success_cb\n     *  _Private_ handler for succesful SASL authentication.\n     *\n     *  Parameters:\n     *    (XMLElement) elem - The matching stanza.\n     *\n     *  Returns:\n     *    false to remove the handler.\n     */\n    _sasl_success_cb: function (elem) {\n        if (this._sasl_data[\"server-signature\"]) {\n            var serverSignature;\n            var success = atob(Strophe.getText(elem));\n            var attribMatch = /([a-z]+)=([^,]+)(,|$)/;\n            var matches = success.match(attribMatch);\n            if (matches[1] === \"v\") {\n                serverSignature = matches[2];\n            }\n\n            if (serverSignature !== this._sasl_data[\"server-signature\"]) {\n              // remove old handlers\n              this.deleteHandler(this._sasl_failure_handler);\n              this._sasl_failure_handler = null;\n              if (this._sasl_challenge_handler) {\n                this.deleteHandler(this._sasl_challenge_handler);\n                this._sasl_challenge_handler = null;\n              }\n\n              this._sasl_data = {};\n              return this._sasl_failure_cb(null);\n            }\n        }\n        Strophe.info(\"SASL authentication succeeded.\");\n\n        if (this._sasl_mechanism) {\n          this._sasl_mechanism.onSuccess();\n        }\n\n        // remove old handlers\n        this.deleteHandler(this._sasl_failure_handler);\n        this._sasl_failure_handler = null;\n        if (this._sasl_challenge_handler) {\n            this.deleteHandler(this._sasl_challenge_handler);\n            this._sasl_challenge_handler = null;\n        }\n\n        var streamfeature_handlers = [];\n        var wrapper = function(handlers, elem) {\n            while (handlers.length) {\n                this.deleteHandler(handlers.pop());\n            }\n            this._sasl_auth1_cb.bind(this)(elem);\n            return false;\n        };\n        streamfeature_handlers.push(this._addSysHandler(function(elem) {\n            wrapper.bind(this)(streamfeature_handlers, elem);\n        }.bind(this), null, \"stream:features\", null, null));\n        streamfeature_handlers.push(this._addSysHandler(function(elem) {\n            wrapper.bind(this)(streamfeature_handlers, elem);\n        }.bind(this), Strophe.NS.STREAM, \"features\", null, null));\n\n        // we must send an xmpp:restart now\n        this._sendRestart();\n\n        return false;\n    },\n\n    /** PrivateFunction: _sasl_auth1_cb\n     *  _Private_ handler to start stream binding.\n     *\n     *  Parameters:\n     *    (XMLElement) elem - The matching stanza.\n     *\n     *  Returns:\n     *    false to remove the handler.\n     */\n    _sasl_auth1_cb: function (elem) {\n        // save stream:features for future usage\n        this.features = elem;\n        var i, child;\n        for (i = 0; i < elem.childNodes.length; i++) {\n            child = elem.childNodes[i];\n            if (child.nodeName === 'bind') {\n                this.do_bind = true;\n            }\n\n            if (child.nodeName === 'session') {\n                this.do_session = true;\n            }\n        }\n\n        if (!this.do_bind) {\n            this._changeConnectStatus(Strophe.Status.AUTHFAIL, null);\n            return false;\n        } else {\n            this._addSysHandler(this._sasl_bind_cb.bind(this), null, null,\n                                null, \"_bind_auth_2\");\n\n            var resource = Strophe.getResourceFromJid(this.jid);\n            if (resource) {\n                this.send($iq({type: \"set\", id: \"_bind_auth_2\"})\n                          .c('bind', {xmlns: Strophe.NS.BIND})\n                          .c('resource', {}).t(resource).tree());\n            } else {\n                this.send($iq({type: \"set\", id: \"_bind_auth_2\"})\n                          .c('bind', {xmlns: Strophe.NS.BIND})\n                          .tree());\n            }\n        }\n        return false;\n    },\n\n    /** PrivateFunction: _sasl_bind_cb\n     *  _Private_ handler for binding result and session start.\n     *\n     *  Parameters:\n     *    (XMLElement) elem - The matching stanza.\n     *\n     *  Returns:\n     *    false to remove the handler.\n     */\n    _sasl_bind_cb: function (elem) {\n        if (elem.getAttribute(\"type\") === \"error\") {\n            Strophe.info(\"SASL binding failed.\");\n            var conflict = elem.getElementsByTagName(\"conflict\"), condition;\n            if (conflict.length > 0) {\n                condition = Strophe.ErrorCondition.CONFLICT;\n            }\n            this._changeConnectStatus(Strophe.Status.AUTHFAIL, condition, elem);\n            return false;\n        }\n\n        // TODO - need to grab errors\n        var bind = elem.getElementsByTagName(\"bind\");\n        var jidNode;\n        if (bind.length > 0) {\n            // Grab jid\n            jidNode = bind[0].getElementsByTagName(\"jid\");\n            if (jidNode.length > 0) {\n                this.jid = Strophe.getText(jidNode[0]);\n\n                if (this.do_session) {\n                    this._addSysHandler(this._sasl_session_cb.bind(this),\n                                        null, null, null, \"_session_auth_2\");\n\n                    this.send($iq({type: \"set\", id: \"_session_auth_2\"})\n                                  .c('session', {xmlns: Strophe.NS.SESSION})\n                                  .tree());\n                } else {\n                    this.authenticated = true;\n                    this._changeConnectStatus(Strophe.Status.CONNECTED, null);\n                }\n            }\n        } else {\n            Strophe.info(\"SASL binding failed.\");\n            this._changeConnectStatus(Strophe.Status.AUTHFAIL, null, elem);\n            return false;\n        }\n    },\n\n    /** PrivateFunction: _sasl_session_cb\n     *  _Private_ handler to finish successful SASL connection.\n     *\n     *  This sets Connection.authenticated to true on success, which\n     *  starts the processing of user handlers.\n     *\n     *  Parameters:\n     *    (XMLElement) elem - The matching stanza.\n     *\n     *  Returns:\n     *    false to remove the handler.\n     */\n    _sasl_session_cb: function (elem) {\n        if (elem.getAttribute(\"type\") === \"result\") {\n            this.authenticated = true;\n            this._changeConnectStatus(Strophe.Status.CONNECTED, null);\n        } else if (elem.getAttribute(\"type\") === \"error\") {\n            Strophe.info(\"Session creation failed.\");\n            this._changeConnectStatus(Strophe.Status.AUTHFAIL, null, elem);\n            return false;\n        }\n        return false;\n    },\n\n    /** PrivateFunction: _sasl_failure_cb\n     *  _Private_ handler for SASL authentication failure.\n     *\n     *  Parameters:\n     *    (XMLElement) elem - The matching stanza.\n     *\n     *  Returns:\n     *    false to remove the handler.\n     */\n    /* jshint unused:false */\n    _sasl_failure_cb: function (elem) {\n        // delete unneeded handlers\n        if (this._sasl_success_handler) {\n            this.deleteHandler(this._sasl_success_handler);\n            this._sasl_success_handler = null;\n        }\n        if (this._sasl_challenge_handler) {\n            this.deleteHandler(this._sasl_challenge_handler);\n            this._sasl_challenge_handler = null;\n        }\n\n        if(this._sasl_mechanism)\n          this._sasl_mechanism.onFailure();\n        this._changeConnectStatus(Strophe.Status.AUTHFAIL, null, elem);\n        return false;\n    },\n    /* jshint unused:true */\n\n    /** PrivateFunction: _auth2_cb\n     *  _Private_ handler to finish legacy authentication.\n     *\n     *  This handler is called when the result from the jabber:iq:auth\n     *  <iq/> stanza is returned.\n     *\n     *  Parameters:\n     *    (XMLElement) elem - The stanza that triggered the callback.\n     *\n     *  Returns:\n     *    false to remove the handler.\n     */\n    _auth2_cb: function (elem) {\n        if (elem.getAttribute(\"type\") === \"result\") {\n            this.authenticated = true;\n            this._changeConnectStatus(Strophe.Status.CONNECTED, null);\n        } else if (elem.getAttribute(\"type\") === \"error\") {\n            this._changeConnectStatus(Strophe.Status.AUTHFAIL, null, elem);\n            this.disconnect('authentication failed');\n        }\n        return false;\n    },\n\n    /** PrivateFunction: _addSysTimedHandler\n     *  _Private_ function to add a system level timed handler.\n     *\n     *  This function is used to add a Strophe.TimedHandler for the\n     *  library code.  System timed handlers are allowed to run before\n     *  authentication is complete.\n     *\n     *  Parameters:\n     *    (Integer) period - The period of the handler.\n     *    (Function) handler - The callback function.\n     */\n    _addSysTimedHandler: function (period, handler) {\n        var thand = new Strophe.TimedHandler(period, handler);\n        thand.user = false;\n        this.addTimeds.push(thand);\n        return thand;\n    },\n\n    /** PrivateFunction: _addSysHandler\n     *  _Private_ function to add a system level stanza handler.\n     *\n     *  This function is used to add a Strophe.Handler for the\n     *  library code.  System stanza handlers are allowed to run before\n     *  authentication is complete.\n     *\n     *  Parameters:\n     *    (Function) handler - The callback function.\n     *    (String) ns - The namespace to match.\n     *    (String) name - The stanza name to match.\n     *    (String) type - The stanza type attribute to match.\n     *    (String) id - The stanza id attribute to match.\n     */\n    _addSysHandler: function (handler, ns, name, type, id) {\n        var hand = new Strophe.Handler(handler, ns, name, type, id);\n        hand.user = false;\n        this.addHandlers.push(hand);\n        return hand;\n    },\n\n    /** PrivateFunction: _onDisconnectTimeout\n     *  _Private_ timeout handler for handling non-graceful disconnection.\n     *\n     *  If the graceful disconnect process does not complete within the\n     *  time allotted, this handler finishes the disconnect anyway.\n     *\n     *  Returns:\n     *    false to remove the handler.\n     */\n    _onDisconnectTimeout: function () {\n        Strophe.info(\"_onDisconnectTimeout was called\");\n        this._changeConnectStatus(Strophe.Status.CONNTIMEOUT, null);\n        this._proto._onDisconnectTimeout();\n        // actually disconnect\n        this._doDisconnect();\n        return false;\n    },\n\n    /** PrivateFunction: _onIdle\n     *  _Private_ handler to process events during idle cycle.\n     *\n     *  This handler is called every 100ms to fire timed handlers that\n     *  are ready and keep poll requests going.\n     */\n    _onIdle: function () {\n        var i, thand, since, newList;\n\n        // add timed handlers scheduled for addition\n        // NOTE: we add before remove in the case a timed handler is\n        // added and then deleted before the next _onIdle() call.\n        while (this.addTimeds.length > 0) {\n            this.timedHandlers.push(this.addTimeds.pop());\n        }\n\n        // remove timed handlers that have been scheduled for deletion\n        while (this.removeTimeds.length > 0) {\n            thand = this.removeTimeds.pop();\n            i = this.timedHandlers.indexOf(thand);\n            if (i >= 0) {\n                this.timedHandlers.splice(i, 1);\n            }\n        }\n\n        // call ready timed handlers\n        var now = new Date().getTime();\n        newList = [];\n        for (i = 0; i < this.timedHandlers.length; i++) {\n            thand = this.timedHandlers[i];\n            if (this.authenticated || !thand.user) {\n                since = thand.lastCalled + thand.period;\n                if (since - now <= 0) {\n                    if (thand.run()) {\n                        newList.push(thand);\n                    }\n                } else {\n                    newList.push(thand);\n                }\n            }\n        }\n        this.timedHandlers = newList;\n\n        clearTimeout(this._idleTimeout);\n\n        this._proto._onIdle();\n\n        // reactivate the timer only if connected\n        if (this.connected) {\n            // XXX: setTimeout should be called only with function expressions (23974bc1)\n            this._idleTimeout = setTimeout(function() {\n                this._onIdle();\n            }.bind(this), 100);\n        }\n    }\n};\n\n/** Class: Strophe.SASLMechanism\n *\n *  encapsulates SASL authentication mechanisms.\n *\n *  User code may override the priority for each mechanism or disable it completely.\n *  See <priority> for information about changing priority and <test> for informatian on\n *  how to disable a mechanism.\n *\n *  By default, all mechanisms are enabled and the priorities are\n *\n *      OAUTHBEARER - 60\n *      SCRAM-SHA1 - 50\n *      DIGEST-MD5 - 40\n *      PLAIN - 30\n *      ANONYMOUS - 20\n *      EXTERNAL - 10\n *\n *  See: Strophe.Connection.addSupportedSASLMechanisms\n */\n\n/**\n * PrivateConstructor: Strophe.SASLMechanism\n * SASL auth mechanism abstraction.\n *\n *  Parameters:\n *    (String) name - SASL Mechanism name.\n *    (Boolean) isClientFirst - If client should send response first without challenge.\n *    (Number) priority - Priority.\n *\n *  Returns:\n *    A new Strophe.SASLMechanism object.\n */\nStrophe.SASLMechanism = function(name, isClientFirst, priority) {\n  /** PrivateVariable: name\n   *  Mechanism name.\n   */\n  this.name = name;\n  /** PrivateVariable: isClientFirst\n   *  If client sends response without initial server challenge.\n   */\n  this.isClientFirst = isClientFirst;\n  /** Variable: priority\n   *  Determines which <SASLMechanism> is chosen for authentication (Higher is better).\n   *  Users may override this to prioritize mechanisms differently.\n   *\n   *  In the default configuration the priorities are\n   *\n   *  SCRAM-SHA1 - 40\n   *  DIGEST-MD5 - 30\n   *  Plain - 20\n   *\n   *  Example: (This will cause Strophe to choose the mechanism that the server sent first)\n   *\n   *  > Strophe.SASLMD5.priority = Strophe.SASLSHA1.priority;\n   *\n   *  See <SASL mechanisms> for a list of available mechanisms.\n   *\n   */\n  this.priority = priority;\n};\n\nStrophe.SASLMechanism.prototype = {\n  /**\n   *  Function: test\n   *  Checks if mechanism able to run.\n   *  To disable a mechanism, make this return false;\n   *\n   *  To disable plain authentication run\n   *  > Strophe.SASLPlain.test = function() {\n   *  >   return false;\n   *  > }\n   *\n   *  See <SASL mechanisms> for a list of available mechanisms.\n   *\n   *  Parameters:\n   *    (Strophe.Connection) connection - Target Connection.\n   *\n   *  Returns:\n   *    (Boolean) If mechanism was able to run.\n   */\n  /* jshint unused:false */\n  test: function(connection) {\n    return true;\n  },\n  /* jshint unused:true */\n\n  /** PrivateFunction: onStart\n   *  Called before starting mechanism on some connection.\n   *\n   *  Parameters:\n   *    (Strophe.Connection) connection - Target Connection.\n   */\n  onStart: function(connection) {\n    this._connection = connection;\n  },\n\n  /** PrivateFunction: onChallenge\n   *  Called by protocol implementation on incoming challenge. If client is\n   *  first (isClientFirst === true) challenge will be null on the first call.\n   *\n   *  Parameters:\n   *    (Strophe.Connection) connection - Target Connection.\n   *    (String) challenge - current challenge to handle.\n   *\n   *  Returns:\n   *    (String) Mechanism response.\n   */\n  /* jshint unused:false */\n  onChallenge: function(connection, challenge) {\n    throw new Error(\"You should implement challenge handling!\");\n  },\n  /* jshint unused:true */\n\n  /** PrivateFunction: onFailure\n   *  Protocol informs mechanism implementation about SASL failure.\n   */\n  onFailure: function() {\n    this._connection = null;\n  },\n\n  /** PrivateFunction: onSuccess\n   *  Protocol informs mechanism implementation about SASL success.\n   */\n  onSuccess: function() {\n    this._connection = null;\n  }\n};\n\n  /** Constants: SASL mechanisms\n   *  Available authentication mechanisms\n   *\n   *  Strophe.SASLAnonymous - SASL ANONYMOUS authentication.\n   *  Strophe.SASLPlain - SASL PLAIN authentication.\n   *  Strophe.SASLMD5 - SASL DIGEST-MD5 authentication\n   *  Strophe.SASLSHA1 - SASL SCRAM-SHA1 authentication\n   *  Strophe.SASLOAuthBearer - SASL OAuth Bearer authentication\n   *  Strophe.SASLExternal - SASL EXTERNAL authentication\n   *  Strophe.SASLXOAuth2 - SASL X-OAuth2 authentication\n   */\n\n// Building SASL callbacks\n\n/** PrivateConstructor: SASLAnonymous\n *  SASL ANONYMOUS authentication.\n */\nStrophe.SASLAnonymous = function() {};\nStrophe.SASLAnonymous.prototype = new Strophe.SASLMechanism(\"ANONYMOUS\", false, 20);\n\nStrophe.SASLAnonymous.prototype.test = function(connection) {\n    return connection.authcid === null;\n};\n\n\n/** PrivateConstructor: SASLPlain\n *  SASL PLAIN authentication.\n */\nStrophe.SASLPlain = function() {};\nStrophe.SASLPlain.prototype = new Strophe.SASLMechanism(\"PLAIN\", true, 50);\n\nStrophe.SASLPlain.prototype.test = function(connection) {\n    return connection.authcid !== null;\n};\n\nStrophe.SASLPlain.prototype.onChallenge = function(connection) {\n    var auth_str = connection.authzid;\n    auth_str = auth_str + \"\\u0000\";\n    auth_str = auth_str + connection.authcid;\n    auth_str = auth_str + \"\\u0000\";\n    auth_str = auth_str + connection.pass;\n    return utils.utf16to8(auth_str);\n};\n\n\n/** PrivateConstructor: SASLSHA1\n *  SASL SCRAM SHA 1 authentication.\n */\nStrophe.SASLSHA1 = function() {};\nStrophe.SASLSHA1.prototype = new Strophe.SASLMechanism(\"SCRAM-SHA-1\", true, 70);\n\nStrophe.SASLSHA1.prototype.test = function(connection) {\n    return connection.authcid !== null;\n};\n\nStrophe.SASLSHA1.prototype.onChallenge = function(connection, challenge, test_cnonce) {\n  var cnonce = test_cnonce || MD5.hexdigest(Math.random() * 1234567890);\n  var auth_str = \"n=\" + utils.utf16to8(connection.authcid);\n  auth_str += \",r=\";\n  auth_str += cnonce;\n  connection._sasl_data.cnonce = cnonce;\n  connection._sasl_data[\"client-first-message-bare\"] = auth_str;\n\n  auth_str = \"n,,\" + auth_str;\n\n  this.onChallenge = function (connection, challenge) {\n    var nonce, salt, iter, Hi, U, U_old, i, k, pass;\n    var clientKey, serverKey, clientSignature;\n    var responseText = \"c=biws,\";\n    var authMessage = connection._sasl_data[\"client-first-message-bare\"] + \",\" +\n      challenge + \",\";\n    var cnonce = connection._sasl_data.cnonce;\n    var attribMatch = /([a-z]+)=([^,]+)(,|$)/;\n\n    while (challenge.match(attribMatch)) {\n      var matches = challenge.match(attribMatch);\n      challenge = challenge.replace(matches[0], \"\");\n      switch (matches[1]) {\n      case \"r\":\n        nonce = matches[2];\n        break;\n      case \"s\":\n        salt = matches[2];\n        break;\n      case \"i\":\n        iter = matches[2];\n        break;\n      }\n    }\n\n    if (nonce.substr(0, cnonce.length) !== cnonce) {\n      connection._sasl_data = {};\n      return connection._sasl_failure_cb();\n    }\n\n    responseText += \"r=\" + nonce;\n    authMessage += responseText;\n\n    salt = atob(salt);\n    salt += \"\\x00\\x00\\x00\\x01\";\n\n    pass = utils.utf16to8(connection.pass);\n    Hi = U_old = SHA1.core_hmac_sha1(pass, salt);\n    for (i = 1; i < iter; i++) {\n      U = SHA1.core_hmac_sha1(pass, SHA1.binb2str(U_old));\n      for (k = 0; k < 5; k++) {\n        Hi[k] ^= U[k];\n      }\n      U_old = U;\n    }\n    Hi = SHA1.binb2str(Hi);\n\n    clientKey = SHA1.core_hmac_sha1(Hi, \"Client Key\");\n    serverKey = SHA1.str_hmac_sha1(Hi, \"Server Key\");\n    clientSignature = SHA1.core_hmac_sha1(SHA1.str_sha1(SHA1.binb2str(clientKey)), authMessage);\n    connection._sasl_data[\"server-signature\"] = SHA1.b64_hmac_sha1(serverKey, authMessage);\n\n    for (k = 0; k < 5; k++) {\n      clientKey[k] ^= clientSignature[k];\n    }\n\n    responseText += \",p=\" + btoa(SHA1.binb2str(clientKey));\n    return responseText;\n  }.bind(this);\n\n  return auth_str;\n};\n\n\n/** PrivateConstructor: SASLMD5\n *  SASL DIGEST MD5 authentication.\n */\nStrophe.SASLMD5 = function() {};\nStrophe.SASLMD5.prototype = new Strophe.SASLMechanism(\"DIGEST-MD5\", false, 60);\n\nStrophe.SASLMD5.prototype.test = function(connection) {\n    return connection.authcid !== null;\n};\n\n/** PrivateFunction: _quote\n *  _Private_ utility function to backslash escape and quote strings.\n *\n *  Parameters:\n *    (String) str - The string to be quoted.\n *\n *  Returns:\n *    quoted string\n */\nStrophe.SASLMD5.prototype._quote = function (str) {\n    return '\"' + str.replace(/\\\\/g, \"\\\\\\\\\").replace(/\"/g, '\\\\\"') + '\"';\n    //\" end string workaround for emacs\n};\n\nStrophe.SASLMD5.prototype.onChallenge = function(connection, challenge, test_cnonce) {\n  var attribMatch = /([a-z]+)=(\"[^\"]+\"|[^,\"]+)(?:,|$)/;\n  var cnonce = test_cnonce || MD5.hexdigest(\"\" + (Math.random() * 1234567890));\n  var realm = \"\";\n  var host = null;\n  var nonce = \"\";\n  var qop = \"\";\n  var matches;\n\n  while (challenge.match(attribMatch)) {\n    matches = challenge.match(attribMatch);\n    challenge = challenge.replace(matches[0], \"\");\n    matches[2] = matches[2].replace(/^\"(.+)\"$/, \"$1\");\n    switch (matches[1]) {\n    case \"realm\":\n      realm = matches[2];\n      break;\n    case \"nonce\":\n      nonce = matches[2];\n      break;\n    case \"qop\":\n      qop = matches[2];\n      break;\n    case \"host\":\n      host = matches[2];\n      break;\n    }\n  }\n\n  var digest_uri = connection.servtype + \"/\" + connection.domain;\n  if (host !== null) {\n    digest_uri = digest_uri + \"/\" + host;\n  }\n\n  var cred = utils.utf16to8(connection.authcid + \":\" + realm + \":\" + this._connection.pass);\n  var A1 = MD5.hash(cred) + \":\" + nonce + \":\" + cnonce;\n  var A2 = 'AUTHENTICATE:' + digest_uri;\n\n  var responseText = \"\";\n  responseText += 'charset=utf-8,';\n  responseText += 'username=' + this._quote(utils.utf16to8(connection.authcid)) + ',';\n  responseText += 'realm=' + this._quote(realm) + ',';\n  responseText += 'nonce=' + this._quote(nonce) + ',';\n  responseText += 'nc=00000001,';\n  responseText += 'cnonce=' + this._quote(cnonce) + ',';\n  responseText += 'digest-uri=' + this._quote(digest_uri) + ',';\n  responseText += 'response=' + MD5.hexdigest(MD5.hexdigest(A1) + \":\" +\n                                              nonce + \":00000001:\" +\n                                              cnonce + \":auth:\" +\n                                              MD5.hexdigest(A2)) + \",\";\n  responseText += 'qop=auth';\n\n  this.onChallenge = function () {\n      return \"\";\n  };\n  return responseText;\n};\n\n\n/** PrivateConstructor: SASLOAuthBearer\n *  SASL OAuth Bearer authentication.\n */\nStrophe.SASLOAuthBearer = function() {};\nStrophe.SASLOAuthBearer.prototype = new Strophe.SASLMechanism(\"OAUTHBEARER\", true, 40);\n\nStrophe.SASLOAuthBearer.prototype.test = function(connection) {\n    return connection.pass !== null;\n};\n\nStrophe.SASLOAuthBearer.prototype.onChallenge = function(connection) {\n    var auth_str = 'n,';\n    if (connection.authcid !== null) {\n      auth_str = auth_str + 'a=' + connection.authzid;\n    }\n    auth_str = auth_str + ',';\n    auth_str = auth_str + \"\\u0001\";\n    auth_str = auth_str + 'auth=Bearer ';\n    auth_str = auth_str + connection.pass;\n    auth_str = auth_str + \"\\u0001\";\n    auth_str = auth_str + \"\\u0001\";\n\n    return utils.utf16to8(auth_str);\n};\n\n\n/** PrivateConstructor: SASLExternal\n *  SASL EXTERNAL authentication.\n *\n *  The EXTERNAL mechanism allows a client to request the server to use\n *  credentials established by means external to the mechanism to\n *  authenticate the client. The external means may be, for instance,\n *  TLS services.\n */\nStrophe.SASLExternal = function() {};\nStrophe.SASLExternal.prototype = new Strophe.SASLMechanism(\"EXTERNAL\", true, 10);\n\nStrophe.SASLExternal.prototype.onChallenge = function(connection) {\n    /** According to XEP-178, an authzid SHOULD NOT be presented when the\n     * authcid contained or implied in the client certificate is the JID (i.e.\n     * authzid) with which the user wants to log in as.\n     *\n     * To NOT send the authzid, the user should therefore set the authcid equal\n     * to the JID when instantiating a new Strophe.Connection object.\n     */\n    return connection.authcid === connection.authzid ? '' : connection.authzid;\n};\n\n\n/** PrivateConstructor: SASLXOAuth2\n *  SASL X-OAuth2 authentication.\n */\nStrophe.SASLXOAuth2 = function () { };\nStrophe.SASLXOAuth2.prototype = new Strophe.SASLMechanism(\"X-OAUTH2\", true, 30);\n\nStrophe.SASLXOAuth2.prototype.test = function (connection) {\n    return connection.pass !== null;\n};\n\nStrophe.SASLXOAuth2.prototype.onChallenge = function (connection) {\n    var auth_str = '\\u0000';\n    if (connection.authcid !== null) {\n        auth_str = auth_str + connection.authzid;\n    }\n    auth_str = auth_str + \"\\u0000\";\n    auth_str = auth_str + connection.pass;\n\n    return utils.utf16to8(auth_str);\n};\n\n\nreturn {\n    'Strophe':         Strophe,\n    '$build':          $build,\n    '$iq':             $iq,\n    '$msg':            $msg,\n    '$pres':           $pres,\n    'SHA1':            SHA1,\n    'MD5':             MD5,\n    'b64_hmac_sha1':   SHA1.b64_hmac_sha1,\n    'b64_sha1':        SHA1.b64_sha1,\n    'str_hmac_sha1':   SHA1.str_hmac_sha1,\n    'str_sha1':        SHA1.str_sha1\n};\n}));\n\n/*\n    This program is distributed under the terms of the MIT license.\n    Please see the LICENSE file for details.\n\n    Copyright 2006-2008, OGG, LLC\n*/\n\n/* jshint undef: true, unused: true:, noarg: true, latedef: true */\n/* global define, window, setTimeout, clearTimeout, XMLHttpRequest, ActiveXObject, Strophe, $build */\n\n(function (root, factory) {\n    if (typeof define === 'function' && define.amd) {\n        define('strophe-bosh',['strophe-core'], function (core) {\n            return factory(\n                core.Strophe,\n                core.$build\n            );\n        });\n    } else if (typeof exports === 'object') {\n        var core = require('./core');\n\n        module.exports = factory(core.Strophe, core.$build);\n    } else {\n        // Browser globals\n        return factory(Strophe, $build);\n    }\n}(this, function (Strophe, $build) {\n\n/** PrivateClass: Strophe.Request\n *  _Private_ helper class that provides a cross implementation abstraction\n *  for a BOSH related XMLHttpRequest.\n *\n *  The Strophe.Request class is used internally to encapsulate BOSH request\n *  information.  It is not meant to be used from user's code.\n */\n\n/** PrivateConstructor: Strophe.Request\n *  Create and initialize a new Strophe.Request object.\n *\n *  Parameters:\n *    (XMLElement) elem - The XML data to be sent in the request.\n *    (Function) func - The function that will be called when the\n *      XMLHttpRequest readyState changes.\n *    (Integer) rid - The BOSH rid attribute associated with this request.\n *    (Integer) sends - The number of times this same request has been sent.\n */\nStrophe.Request = function (elem, func, rid, sends) {\n    this.id = ++Strophe._requestId;\n    this.xmlData = elem;\n    this.data = Strophe.serialize(elem);\n    // save original function in case we need to make a new request\n    // from this one.\n    this.origFunc = func;\n    this.func = func;\n    this.rid = rid;\n    this.date = NaN;\n    this.sends = sends || 0;\n    this.abort = false;\n    this.dead = null;\n\n    this.age = function () {\n        if (!this.date) { return 0; }\n        var now = new Date();\n        return (now - this.date) / 1000;\n    };\n    this.timeDead = function () {\n        if (!this.dead) { return 0; }\n        var now = new Date();\n        return (now - this.dead) / 1000;\n    };\n    this.xhr = this._newXHR();\n};\n\nStrophe.Request.prototype = {\n    /** PrivateFunction: getResponse\n     *  Get a response from the underlying XMLHttpRequest.\n     *\n     *  This function attempts to get a response from the request and checks\n     *  for errors.\n     *\n     *  Throws:\n     *    \"parsererror\" - A parser error occured.\n     *    \"badformat\" - The entity has sent XML that cannot be processed.\n     *\n     *  Returns:\n     *    The DOM element tree of the response.\n     */\n    getResponse: function () {\n        var node = null;\n        if (this.xhr.responseXML && this.xhr.responseXML.documentElement) {\n            node = this.xhr.responseXML.documentElement;\n            if (node.tagName === \"parsererror\") {\n                Strophe.error(\"invalid response received\");\n                Strophe.error(\"responseText: \" + this.xhr.responseText);\n                Strophe.error(\"responseXML: \" +\n                              Strophe.serialize(this.xhr.responseXML));\n                throw \"parsererror\";\n            }\n        } else if (this.xhr.responseText) {\n            // In React Native, we may get responseText but no responseXML.  We can try to parse it manually.\n            Strophe.debug(\"Got responseText but no responseXML; attempting to parse it with DOMParser...\");\n            node = new DOMParser().parseFromString(this.xhr.responseText, 'application/xml').documentElement;\n            if (!node) {\n                throw new Error('Parsing produced null node');\n            } else if (node.querySelector('parsererror')) {\n                Strophe.error(\"invalid response received: \" + node.querySelector('parsererror').textContent);\n                Strophe.error(\"responseText: \" + this.xhr.responseText);\n                throw \"badformat\";\n            }\n        }\n        return node;\n    },\n\n    /** PrivateFunction: _newXHR\n     *  _Private_ helper function to create XMLHttpRequests.\n     *\n     *  This function creates XMLHttpRequests across all implementations.\n     *\n     *  Returns:\n     *    A new XMLHttpRequest.\n     */\n    _newXHR: function () {\n        var xhr = null;\n        if (window.XMLHttpRequest) {\n            xhr = new XMLHttpRequest();\n            if (xhr.overrideMimeType) {\n                xhr.overrideMimeType(\"text/xml; charset=utf-8\");\n            }\n        } else if (window.ActiveXObject) {\n            xhr = new ActiveXObject(\"Microsoft.XMLHTTP\");\n        }\n        // use Function.bind() to prepend ourselves as an argument\n        xhr.onreadystatechange = this.func.bind(null, this);\n        return xhr;\n    }\n};\n\n/** Class: Strophe.Bosh\n *  _Private_ helper class that handles BOSH Connections\n *\n *  The Strophe.Bosh class is used internally by Strophe.Connection\n *  to encapsulate BOSH sessions. It is not meant to be used from user's code.\n */\n\n/** File: bosh.js\n *  A JavaScript library to enable BOSH in Strophejs.\n *\n *  this library uses Bidirectional-streams Over Synchronous HTTP (BOSH)\n *  to emulate a persistent, stateful, two-way connection to an XMPP server.\n *  More information on BOSH can be found in XEP 124.\n */\n\n/** PrivateConstructor: Strophe.Bosh\n *  Create and initialize a Strophe.Bosh object.\n *\n *  Parameters:\n *    (Strophe.Connection) connection - The Strophe.Connection that will use BOSH.\n *\n *  Returns:\n *    A new Strophe.Bosh object.\n */\nStrophe.Bosh = function(connection) {\n    this._conn = connection;\n    /* request id for body tags */\n    this.rid = Math.floor(Math.random() * 4294967295);\n    /* The current session ID. */\n    this.sid = null;\n\n    // default BOSH values\n    this.hold = 1;\n    this.wait = 60;\n    this.window = 5;\n    this.errors = 0;\n    this.inactivity = null;\n\n    this.lastResponseHeaders = null;\n\n    this._requests = [];\n};\n\nStrophe.Bosh.prototype = {\n    /** Variable: strip\n     *\n     *  BOSH-Connections will have all stanzas wrapped in a <body> tag when\n     *  passed to <Strophe.Connection.xmlInput> or <Strophe.Connection.xmlOutput>.\n     *  To strip this tag, User code can set <Strophe.Bosh.strip> to \"body\":\n     *\n     *  > Strophe.Bosh.prototype.strip = \"body\";\n     *\n     *  This will enable stripping of the body tag in both\n     *  <Strophe.Connection.xmlInput> and <Strophe.Connection.xmlOutput>.\n     */\n    strip: null,\n\n    /** PrivateFunction: _buildBody\n     *  _Private_ helper function to generate the <body/> wrapper for BOSH.\n     *\n     *  Returns:\n     *    A Strophe.Builder with a <body/> element.\n     */\n    _buildBody: function () {\n        var bodyWrap = $build('body', {\n            rid: this.rid++,\n            xmlns: Strophe.NS.HTTPBIND\n        });\n        if (this.sid !== null) {\n            bodyWrap.attrs({sid: this.sid});\n        }\n        if (this._conn.options.keepalive && this._conn._sessionCachingSupported()) {\n            this._cacheSession();\n        }\n        return bodyWrap;\n    },\n\n    /** PrivateFunction: _reset\n     *  Reset the connection.\n     *\n     *  This function is called by the reset function of the Strophe Connection\n     */\n    _reset: function () {\n        this.rid = Math.floor(Math.random() * 4294967295);\n        this.sid = null;\n        this.errors = 0;\n        if (this._conn._sessionCachingSupported()) {\n            window.sessionStorage.removeItem('strophe-bosh-session');\n        }\n\n        this._conn.nextValidRid(this.rid);\n    },\n\n    /** PrivateFunction: _connect\n     *  _Private_ function that initializes the BOSH connection.\n     *\n     *  Creates and sends the Request that initializes the BOSH connection.\n     */\n    _connect: function (wait, hold, route) {\n        this.wait = wait || this.wait;\n        this.hold = hold || this.hold;\n        this.errors = 0;\n\n        // build the body tag\n        var body = this._buildBody().attrs({\n            to: this._conn.domain,\n            \"xml:lang\": \"en\",\n            wait: this.wait,\n            hold: this.hold,\n            content: \"text/xml; charset=utf-8\",\n            ver: \"1.6\",\n            \"xmpp:version\": \"1.0\",\n            \"xmlns:xmpp\": Strophe.NS.BOSH\n        });\n\n        if(route){\n            body.attrs({\n                route: route\n            });\n        }\n\n        var _connect_cb = this._conn._connect_cb;\n\n        this._requests.push(\n            new Strophe.Request(body.tree(),\n                                this._onRequestStateChange.bind(\n                                    this, _connect_cb.bind(this._conn)),\n                                body.tree().getAttribute(\"rid\")));\n        this._throttledRequestHandler();\n    },\n\n    /** PrivateFunction: _attach\n     *  Attach to an already created and authenticated BOSH session.\n     *\n     *  This function is provided to allow Strophe to attach to BOSH\n     *  sessions which have been created externally, perhaps by a Web\n     *  application.  This is often used to support auto-login type features\n     *  without putting user credentials into the page.\n     *\n     *  Parameters:\n     *    (String) jid - The full JID that is bound by the session.\n     *    (String) sid - The SID of the BOSH session.\n     *    (String) rid - The current RID of the BOSH session.  This RID\n     *      will be used by the next request.\n     *    (Function) callback The connect callback function.\n     *    (Integer) wait - The optional HTTPBIND wait value.  This is the\n     *      time the server will wait before returning an empty result for\n     *      a request.  The default setting of 60 seconds is recommended.\n     *      Other settings will require tweaks to the Strophe.TIMEOUT value.\n     *    (Integer) hold - The optional HTTPBIND hold value.  This is the\n     *      number of connections the server will hold at one time.  This\n     *      should almost always be set to 1 (the default).\n     *    (Integer) wind - The optional HTTBIND window value.  This is the\n     *      allowed range of request ids that are valid.  The default is 5.\n     */\n    _attach: function (jid, sid, rid, callback, wait, hold, wind) {\n        this._conn.jid = jid;\n        this.sid = sid;\n        this.rid = rid;\n\n        this._conn.connect_callback = callback;\n\n        this._conn.domain = Strophe.getDomainFromJid(this._conn.jid);\n\n        this._conn.authenticated = true;\n        this._conn.connected = true;\n\n        this.wait = wait || this.wait;\n        this.hold = hold || this.hold;\n        this.window = wind || this.window;\n\n        this._conn._changeConnectStatus(Strophe.Status.ATTACHED, null);\n    },\n\n    /** PrivateFunction: _restore\n     *  Attempt to restore a cached BOSH session\n     *\n     *  Parameters:\n     *    (String) jid - The full JID that is bound by the session.\n     *      This parameter is optional but recommended, specifically in cases\n     *      where prebinded BOSH sessions are used where it's important to know\n     *      that the right session is being restored.\n     *    (Function) callback The connect callback function.\n     *    (Integer) wait - The optional HTTPBIND wait value.  This is the\n     *      time the server will wait before returning an empty result for\n     *      a request.  The default setting of 60 seconds is recommended.\n     *      Other settings will require tweaks to the Strophe.TIMEOUT value.\n     *    (Integer) hold - The optional HTTPBIND hold value.  This is the\n     *      number of connections the server will hold at one time.  This\n     *      should almost always be set to 1 (the default).\n     *    (Integer) wind - The optional HTTBIND window value.  This is the\n     *      allowed range of request ids that are valid.  The default is 5.\n     */\n    _restore: function (jid, callback, wait, hold, wind) {\n        var session = JSON.parse(window.sessionStorage.getItem('strophe-bosh-session'));\n        if (typeof session !== \"undefined\" &&\n                   session !== null &&\n                   session.rid &&\n                   session.sid &&\n                   session.jid &&\n                   (    typeof jid === \"undefined\" ||\n                        jid === null ||\n                        Strophe.getBareJidFromJid(session.jid) === Strophe.getBareJidFromJid(jid) ||\n                        // If authcid is null, then it's an anonymous login, so\n                        // we compare only the domains:\n                        ((Strophe.getNodeFromJid(jid) === null) && (Strophe.getDomainFromJid(session.jid) === jid))\n                    )\n        ) {\n            this._conn.restored = true;\n            this._attach(session.jid, session.sid, session.rid, callback, wait, hold, wind);\n        } else {\n            throw { name: \"StropheSessionError\", message: \"_restore: no restoreable session.\" };\n        }\n    },\n\n    /** PrivateFunction: _cacheSession\n     *  _Private_ handler for the beforeunload event.\n     *\n     *  This handler is used to process the Bosh-part of the initial request.\n     *  Parameters:\n     *    (Strophe.Request) bodyWrap - The received stanza.\n     */\n    _cacheSession: function () {\n        if (this._conn.authenticated) {\n            if (this._conn.jid && this.rid && this.sid) {\n                window.sessionStorage.setItem('strophe-bosh-session', JSON.stringify({\n                    'jid': this._conn.jid,\n                    'rid': this.rid,\n                    'sid': this.sid\n                }));\n            }\n        } else {\n            window.sessionStorage.removeItem('strophe-bosh-session');\n        }\n    },\n\n    /** PrivateFunction: _connect_cb\n     *  _Private_ handler for initial connection request.\n     *\n     *  This handler is used to process the Bosh-part of the initial request.\n     *  Parameters:\n     *    (Strophe.Request) bodyWrap - The received stanza.\n     */\n    _connect_cb: function (bodyWrap) {\n        var typ = bodyWrap.getAttribute(\"type\");\n        var cond, conflict;\n        if (typ !== null && typ === \"terminate\") {\n            // an error occurred\n            cond = bodyWrap.getAttribute(\"condition\");\n            Strophe.error(\"BOSH-Connection failed: \" + cond);\n            conflict = bodyWrap.getElementsByTagName(\"conflict\");\n            if (cond !== null) {\n                if (cond === \"remote-stream-error\" && conflict.length > 0) {\n                    cond = \"conflict\";\n                }\n                this._conn._changeConnectStatus(Strophe.Status.CONNFAIL, cond);\n            } else {\n                this._conn._changeConnectStatus(Strophe.Status.CONNFAIL, \"unknown\");\n            }\n            this._conn._doDisconnect(cond);\n            return Strophe.Status.CONNFAIL;\n        }\n\n        // check to make sure we don't overwrite these if _connect_cb is\n        // called multiple times in the case of missing stream:features\n        if (!this.sid) {\n            this.sid = bodyWrap.getAttribute(\"sid\");\n        }\n        var wind = bodyWrap.getAttribute('requests');\n        if (wind) { this.window = parseInt(wind, 10); }\n        var hold = bodyWrap.getAttribute('hold');\n        if (hold) { this.hold = parseInt(hold, 10); }\n        var wait = bodyWrap.getAttribute('wait');\n        if (wait) { this.wait = parseInt(wait, 10); }\n        var inactivity = bodyWrap.getAttribute('inactivity');\n        if (inactivity) { this.inactivity = parseInt(inactivity, 10); }\n    },\n\n    /** PrivateFunction: _disconnect\n     *  _Private_ part of Connection.disconnect for Bosh\n     *\n     *  Parameters:\n     *    (Request) pres - This stanza will be sent before disconnecting.\n     */\n    _disconnect: function (pres) {\n        this._sendTerminate(pres);\n    },\n\n    /** PrivateFunction: _doDisconnect\n     *  _Private_ function to disconnect.\n     *\n     *  Resets the SID and RID.\n     */\n    _doDisconnect: function () {\n        this.sid = null;\n        this.rid = Math.floor(Math.random() * 4294967295);\n        if (this._conn._sessionCachingSupported()) {\n            window.sessionStorage.removeItem('strophe-bosh-session');\n        }\n\n        this._conn.nextValidRid(this.rid);\n    },\n\n    /** PrivateFunction: _emptyQueue\n     * _Private_ function to check if the Request queue is empty.\n     *\n     *  Returns:\n     *    True, if there are no Requests queued, False otherwise.\n     */\n    _emptyQueue: function () {\n        return this._requests.length === 0;\n    },\n\n    /** PrivateFunction: _callProtocolErrorHandlers\n     *  _Private_ function to call error handlers registered for HTTP errors.\n     *\n     *  Parameters:\n     *    (Strophe.Request) req - The request that is changing readyState.\n     */\n    _callProtocolErrorHandlers: function (req) {\n        var reqStatus = this._getRequestStatus(req),\n            err_callback;\n        err_callback = this._conn.protocolErrorHandlers.HTTP[reqStatus];\n        if (err_callback) {\n            err_callback.call(this, reqStatus);\n        }\n    },\n\n    /** PrivateFunction: _hitError\n     *  _Private_ function to handle the error count.\n     *\n     *  Requests are resent automatically until their error count reaches\n     *  5.  Each time an error is encountered, this function is called to\n     *  increment the count and disconnect if the count is too high.\n     *\n     *  Parameters:\n     *    (Integer) reqStatus - The request status.\n     */\n    _hitError: function (reqStatus) {\n        this.errors++;\n        Strophe.warn(\"request errored, status: \" + reqStatus +\n                     \", number of errors: \" + this.errors);\n        if (this.errors > 4) {\n            this._conn._onDisconnectTimeout();\n        }\n    },\n\n    /** PrivateFunction: _no_auth_received\n     *\n     * Called on stream start/restart when no stream:features\n     * has been received and sends a blank poll request.\n     */\n    _no_auth_received: function (callback) {\n        Strophe.warn(\"Server did not yet offer a supported authentication \"+\n                     \"mechanism. Sending a blank poll request.\");\n        if (callback) {\n            callback = callback.bind(this._conn);\n        } else {\n            callback = this._conn._connect_cb.bind(this._conn);\n        }\n        var body = this._buildBody();\n        this._requests.push(\n            new Strophe.Request(\n                body.tree(),\n                this._onRequestStateChange.bind(this, callback),\n                body.tree().getAttribute(\"rid\")\n            )\n        );\n        this._throttledRequestHandler();\n    },\n\n    /** PrivateFunction: _onDisconnectTimeout\n     *  _Private_ timeout handler for handling non-graceful disconnection.\n     *\n     *  Cancels all remaining Requests and clears the queue.\n     */\n    _onDisconnectTimeout: function () {\n        this._abortAllRequests();\n    },\n\n    /** PrivateFunction: _abortAllRequests\n     *  _Private_ helper function that makes sure all pending requests are aborted.\n     */\n    _abortAllRequests: function _abortAllRequests() {\n        var req;\n        while (this._requests.length > 0) {\n            req = this._requests.pop();\n            req.abort = true;\n            req.xhr.abort();\n            // jslint complains, but this is fine. setting to empty func\n            // is necessary for IE6\n            req.xhr.onreadystatechange = function () {}; // jshint ignore:line\n        }\n    },\n\n    /** PrivateFunction: _onIdle\n     *  _Private_ handler called by Strophe.Connection._onIdle\n     *\n     *  Sends all queued Requests or polls with empty Request if there are none.\n     */\n    _onIdle: function () {\n        var data = this._conn._data;\n        // if no requests are in progress, poll\n        if (this._conn.authenticated && this._requests.length === 0 &&\n            data.length === 0 && !this._conn.disconnecting) {\n            Strophe.info(\"no requests during idle cycle, sending \" +\n                         \"blank request\");\n            data.push(null);\n        }\n\n        if (this._conn.paused) {\n            return;\n        }\n\n        if (this._requests.length < 2 && data.length > 0) {\n            var body = this._buildBody();\n            for (var i = 0; i < data.length; i++) {\n                if (data[i] !== null) {\n                    if (data[i] === \"restart\") {\n                        body.attrs({\n                            to: this._conn.domain,\n                            \"xml:lang\": \"en\",\n                            \"xmpp:restart\": \"true\",\n                            \"xmlns:xmpp\": Strophe.NS.BOSH\n                        });\n                    } else {\n                        body.cnode(data[i]).up();\n                    }\n                }\n            }\n            delete this._conn._data;\n            this._conn._data = [];\n            this._requests.push(\n                new Strophe.Request(body.tree(),\n                                    this._onRequestStateChange.bind(\n                                        this, this._conn._dataRecv.bind(this._conn)),\n                                    body.tree().getAttribute(\"rid\")));\n            this._throttledRequestHandler();\n        }\n\n        if (this._requests.length > 0) {\n            var time_elapsed = this._requests[0].age();\n            if (this._requests[0].dead !== null) {\n                if (this._requests[0].timeDead() >\n                    Math.floor(Strophe.SECONDARY_TIMEOUT * this.wait)) {\n                    this._throttledRequestHandler();\n                }\n            }\n\n            if (time_elapsed > Math.floor(Strophe.TIMEOUT * this.wait)) {\n                Strophe.warn(\"Request \" +\n                             this._requests[0].id +\n                             \" timed out, over \" + Math.floor(Strophe.TIMEOUT * this.wait) +\n                             \" seconds since last activity\");\n                this._throttledRequestHandler();\n            }\n        }\n    },\n\n    /** PrivateFunction: _getRequestStatus\n     *\n     *  Returns the HTTP status code from a Strophe.Request\n     *\n     *  Parameters:\n     *    (Strophe.Request) req - The Strophe.Request instance.\n     *    (Integer) def - The default value that should be returned if no\n     *          status value was found.\n     */\n    _getRequestStatus: function (req, def) {\n        var reqStatus;\n        if (req.xhr.readyState === 4) {\n            try {\n                reqStatus = req.xhr.status;\n            } catch (e) {\n                // ignore errors from undefined status attribute. Works\n                // around a browser bug\n                Strophe.error(\n                    \"Caught an error while retrieving a request's status, \" +\n                    \"reqStatus: \" + reqStatus);\n            }\n        }\n        if (typeof(reqStatus) === \"undefined\") {\n            reqStatus = typeof def === 'number' ? def : 0;\n        }\n        return reqStatus;\n    },\n\n    /** PrivateFunction: _onRequestStateChange\n     *  _Private_ handler for Strophe.Request state changes.\n     *\n     *  This function is called when the XMLHttpRequest readyState changes.\n     *  It contains a lot of error handling logic for the many ways that\n     *  requests can fail, and calls the request callback when requests\n     *  succeed.\n     *\n     *  Parameters:\n     *    (Function) func - The handler for the request.\n     *    (Strophe.Request) req - The request that is changing readyState.\n     */\n    _onRequestStateChange: function (func, req) {\n        Strophe.debug(\"request id \"+req.id+\".\"+req.sends+\n                      \" state changed to \"+req.xhr.readyState);\n        if (req.abort) {\n            req.abort = false;\n            return;\n        }\n        if (req.xhr.readyState !== 4) {\n            // The request is not yet complete\n            return;\n        }\n        var reqStatus = this._getRequestStatus(req);\n        this.lastResponseHeaders = req.xhr.getAllResponseHeaders();\n        if (this.disconnecting && reqStatus >= 400) {\n            this._hitError(reqStatus);\n            this._callProtocolErrorHandlers(req);\n            return;\n        }\n\n        var valid_request = reqStatus > 0 && reqStatus < 500;\n        var too_many_retries = req.sends > this._conn.maxRetries;\n        if (valid_request || too_many_retries) {\n            // remove from internal queue\n            this._removeRequest(req);\n            Strophe.debug(\"request id \"+req.id+\" should now be removed\");\n        }\n\n        if (reqStatus === 200) {\n            // request succeeded\n            var reqIs0 = (this._requests[0] === req);\n            var reqIs1 = (this._requests[1] === req);\n            // if request 1 finished, or request 0 finished and request\n            // 1 is over Strophe.SECONDARY_TIMEOUT seconds old, we need to\n            // restart the other - both will be in the first spot, as the\n            // completed request has been removed from the queue already\n            if (reqIs1 ||\n                (reqIs0 && this._requests.length > 0 &&\n                    this._requests[0].age() > Math.floor(Strophe.SECONDARY_TIMEOUT * this.wait))) {\n                this._restartRequest(0);\n            }\n            this._conn.nextValidRid(Number(req.rid) + 1);\n            Strophe.debug(\"request id \"+req.id+\".\"+req.sends+\" got 200\");\n            func(req); // call handler\n            this.errors = 0;\n        } else if (reqStatus === 0 ||\n                   (reqStatus >= 400 && reqStatus < 600) ||\n                   reqStatus >= 12000) {\n            // request failed\n            Strophe.error(\"request id \"+req.id+\".\"+req.sends+\" error \"+reqStatus+\" happened\");\n            this._hitError(reqStatus);\n            this._callProtocolErrorHandlers(req);\n            if (reqStatus >= 400 && reqStatus < 500) {\n                this._conn._changeConnectStatus(Strophe.Status.DISCONNECTING, null);\n                this._conn._doDisconnect();\n            }\n        } else {\n            Strophe.error(\"request id \"+req.id+\".\"+req.sends+\" error \"+reqStatus+\" happened\");\n        }\n\n        if (!valid_request && !too_many_retries) {\n            this._throttledRequestHandler();\n        } else if (too_many_retries && !this._conn.connected) {\n            this._conn._changeConnectStatus(Strophe.Status.CONNFAIL, \"giving-up\");\n        }\n    },\n\n    /** PrivateFunction: _processRequest\n     *  _Private_ function to process a request in the queue.\n     *\n     *  This function takes requests off the queue and sends them and\n     *  restarts dead requests.\n     *\n     *  Parameters:\n     *    (Integer) i - The index of the request in the queue.\n     */\n    _processRequest: function (i) {\n        var self = this;\n        var req = this._requests[i];\n        var reqStatus = this._getRequestStatus(req, -1);\n\n        // make sure we limit the number of retries\n        if (req.sends > this._conn.maxRetries) {\n            this._conn._onDisconnectTimeout();\n            return;\n        }\n\n        var time_elapsed = req.age();\n        var primaryTimeout = (!isNaN(time_elapsed) &&\n                              time_elapsed > Math.floor(Strophe.TIMEOUT * this.wait));\n        var secondaryTimeout = (req.dead !== null &&\n                                req.timeDead() > Math.floor(Strophe.SECONDARY_TIMEOUT * this.wait));\n        var requestCompletedWithServerError = (req.xhr.readyState === 4 &&\n                                               (reqStatus < 1 || reqStatus >= 500));\n        if (primaryTimeout || secondaryTimeout ||\n            requestCompletedWithServerError) {\n            if (secondaryTimeout) {\n                Strophe.error(\"Request \" + this._requests[i].id +\n                              \" timed out (secondary), restarting\");\n            }\n            req.abort = true;\n            req.xhr.abort();\n            // setting to null fails on IE6, so set to empty function\n            req.xhr.onreadystatechange = function () {};\n            this._requests[i] = new Strophe.Request(req.xmlData,\n                                                    req.origFunc,\n                                                    req.rid,\n                                                    req.sends);\n            req = this._requests[i];\n        }\n\n        if (req.xhr.readyState === 0) {\n            Strophe.debug(\"request id \"+req.id+\".\"+req.sends+\" posting\");\n\n            try {\n                var contentType = this._conn.options.contentType || \"text/xml; charset=utf-8\";\n                req.xhr.open(\"POST\", this._conn.service, this._conn.options.sync ? false : true);\n                if (typeof req.xhr.setRequestHeader !== 'undefined') {\n                    // IE9 doesn't have setRequestHeader\n                    req.xhr.setRequestHeader(\"Content-Type\", contentType);\n                }\n                if (this._conn.options.withCredentials) {\n                    req.xhr.withCredentials = true;\n                }\n            } catch (e2) {\n                Strophe.error(\"XHR open failed: \" + e2.toString());\n                if (!this._conn.connected) {\n                    this._conn._changeConnectStatus(\n                            Strophe.Status.CONNFAIL, \"bad-service\");\n                }\n                this._conn.disconnect();\n                return;\n            }\n\n            // Fires the XHR request -- may be invoked immediately\n            // or on a gradually expanding retry window for reconnects\n            var sendFunc = function () {\n                req.date = new Date();\n                if (self._conn.options.customHeaders){\n                    var headers = self._conn.options.customHeaders;\n                    for (var header in headers) {\n                        if (headers.hasOwnProperty(header)) {\n                            req.xhr.setRequestHeader(header, headers[header]);\n                        }\n                    }\n                }\n                req.xhr.send(req.data);\n            };\n\n            // Implement progressive backoff for reconnects --\n            // First retry (send === 1) should also be instantaneous\n            if (req.sends > 1) {\n                // Using a cube of the retry number creates a nicely\n                // expanding retry window\n                var backoff = Math.min(Math.floor(Strophe.TIMEOUT * this.wait),\n                                       Math.pow(req.sends, 3)) * 1000;\n                setTimeout(function() {\n                    // XXX: setTimeout should be called only with function expressions (23974bc1)\n                    sendFunc();\n                }, backoff);\n            } else {\n                sendFunc();\n            }\n\n            req.sends++;\n\n            if (this._conn.xmlOutput !== Strophe.Connection.prototype.xmlOutput) {\n                if (req.xmlData.nodeName === this.strip && req.xmlData.childNodes.length) {\n                    this._conn.xmlOutput(req.xmlData.childNodes[0]);\n                } else {\n                    this._conn.xmlOutput(req.xmlData);\n                }\n            }\n            if (this._conn.rawOutput !== Strophe.Connection.prototype.rawOutput) {\n                this._conn.rawOutput(req.data);\n            }\n        } else {\n            Strophe.debug(\"_processRequest: \" +\n                          (i === 0 ? \"first\" : \"second\") +\n                          \" request has readyState of \" +\n                          req.xhr.readyState);\n        }\n    },\n\n    /** PrivateFunction: _removeRequest\n     *  _Private_ function to remove a request from the queue.\n     *\n     *  Parameters:\n     *    (Strophe.Request) req - The request to remove.\n     */\n    _removeRequest: function (req) {\n        Strophe.debug(\"removing request\");\n        var i;\n        for (i = this._requests.length - 1; i >= 0; i--) {\n            if (req === this._requests[i]) {\n                this._requests.splice(i, 1);\n            }\n        }\n        // IE6 fails on setting to null, so set to empty function\n        req.xhr.onreadystatechange = function () {};\n        this._throttledRequestHandler();\n    },\n\n    /** PrivateFunction: _restartRequest\n     *  _Private_ function to restart a request that is presumed dead.\n     *\n     *  Parameters:\n     *    (Integer) i - The index of the request in the queue.\n     */\n    _restartRequest: function (i) {\n        var req = this._requests[i];\n        if (req.dead === null) {\n            req.dead = new Date();\n        }\n\n        this._processRequest(i);\n    },\n\n    /** PrivateFunction: _reqToData\n     * _Private_ function to get a stanza out of a request.\n     *\n     * Tries to extract a stanza out of a Request Object.\n     * When this fails the current connection will be disconnected.\n     *\n     *  Parameters:\n     *    (Object) req - The Request.\n     *\n     *  Returns:\n     *    The stanza that was passed.\n     */\n    _reqToData: function (req) {\n        try {\n            return req.getResponse();\n        } catch (e) {\n            if (e !== \"parsererror\") { throw e; }\n            this._conn.disconnect(\"strophe-parsererror\");\n        }\n    },\n\n    /** PrivateFunction: _sendTerminate\n     *  _Private_ function to send initial disconnect sequence.\n     *\n     *  This is the first step in a graceful disconnect.  It sends\n     *  the BOSH server a terminate body and includes an unavailable\n     *  presence if authentication has completed.\n     */\n    _sendTerminate: function (pres) {\n        Strophe.info(\"_sendTerminate was called\");\n        var body = this._buildBody().attrs({type: \"terminate\"});\n        if (pres) {\n            body.cnode(pres.tree());\n        }\n        var req = new Strophe.Request(\n            body.tree(),\n            this._onRequestStateChange.bind(\n            this, this._conn._dataRecv.bind(this._conn)),\n            body.tree().getAttribute(\"rid\")\n        );\n        this._requests.push(req);\n        this._throttledRequestHandler();\n    },\n\n    /** PrivateFunction: _send\n     *  _Private_ part of the Connection.send function for BOSH\n     *\n     * Just triggers the RequestHandler to send the messages that are in the queue\n     */\n    _send: function () {\n        clearTimeout(this._conn._idleTimeout);\n        this._throttledRequestHandler();\n\n        // XXX: setTimeout should be called only with function expressions (23974bc1)\n        this._conn._idleTimeout = setTimeout(function() {\n            this._onIdle();\n        }.bind(this._conn), 100);\n    },\n\n    /** PrivateFunction: _sendRestart\n     *\n     *  Send an xmpp:restart stanza.\n     */\n    _sendRestart: function () {\n        this._throttledRequestHandler();\n        clearTimeout(this._conn._idleTimeout);\n    },\n\n    /** PrivateFunction: _throttledRequestHandler\n     *  _Private_ function to throttle requests to the connection window.\n     *\n     *  This function makes sure we don't send requests so fast that the\n     *  request ids overflow the connection window in the case that one\n     *  request died.\n     */\n    _throttledRequestHandler: function () {\n        if (!this._requests) {\n            Strophe.debug(\"_throttledRequestHandler called with \" +\n                          \"undefined requests\");\n        } else {\n            Strophe.debug(\"_throttledRequestHandler called with \" +\n                          this._requests.length + \" requests\");\n        }\n\n        if (!this._requests || this._requests.length === 0) {\n            return;\n        }\n\n        if (this._requests.length > 0) {\n            this._processRequest(0);\n        }\n\n        if (this._requests.length > 1 &&\n            Math.abs(this._requests[0].rid -\n                     this._requests[1].rid) < this.window) {\n            this._processRequest(1);\n        }\n    }\n};\nreturn Strophe;\n}));\n\n/*\n    This program is distributed under the terms of the MIT license.\n    Please see the LICENSE file for details.\n\n    Copyright 2006-2008, OGG, LLC\n*/\n\n/* jshint undef: true, unused: true:, noarg: true, latedef: true */\n/* global define, window, clearTimeout, WebSocket, DOMParser, Strophe, $build */\n\n(function (root, factory) {\n    if (typeof define === 'function' && define.amd) {\n        define('strophe-websocket',['strophe-core'], function (core) {\n            return factory(\n                core.Strophe,\n                core.$build\n            );\n        });\n    } else if (typeof exports === 'object') {\n        var core = require('./core');\n\n        module.exports = factory(core.Strophe, core.$build);\n    } else {\n        // Browser globals\n        return factory(Strophe, $build);\n    }\n}(this, function (Strophe, $build) {\n\n/** Class: Strophe.WebSocket\n *  _Private_ helper class that handles WebSocket Connections\n *\n *  The Strophe.WebSocket class is used internally by Strophe.Connection\n *  to encapsulate WebSocket sessions. It is not meant to be used from user's code.\n */\n\n/** File: websocket.js\n *  A JavaScript library to enable XMPP over Websocket in Strophejs.\n *\n *  This file implements XMPP over WebSockets for Strophejs.\n *  If a Connection is established with a Websocket url (ws://...)\n *  Strophe will use WebSockets.\n *  For more information on XMPP-over-WebSocket see RFC 7395:\n *  http://tools.ietf.org/html/rfc7395\n *\n *  WebSocket support implemented by Andreas Guth (andreas.guth@rwth-aachen.de)\n */\n\n/** PrivateConstructor: Strophe.Websocket\n *  Create and initialize a Strophe.WebSocket object.\n *  Currently only sets the connection Object.\n *\n *  Parameters:\n *    (Strophe.Connection) connection - The Strophe.Connection that will use WebSockets.\n *\n *  Returns:\n *    A new Strophe.WebSocket object.\n */\nStrophe.Websocket = function(connection) {\n    this._conn = connection;\n    this.strip = \"wrapper\";\n\n    var service = connection.service;\n    if (service.indexOf(\"ws:\") !== 0 && service.indexOf(\"wss:\") !== 0) {\n        // If the service is not an absolute URL, assume it is a path and put the absolute\n        // URL together from options, current URL and the path.\n        var new_service = \"\";\n\n        if (connection.options.protocol === \"ws\" && window.location.protocol !== \"https:\") {\n            new_service += \"ws\";\n        } else {\n            new_service += \"wss\";\n        }\n\n        new_service += \"://\" + window.location.host;\n\n        if (service.indexOf(\"/\") !== 0) {\n            new_service += window.location.pathname + service;\n        } else {\n            new_service += service;\n        }\n\n        connection.service = new_service;\n    }\n};\n\nStrophe.Websocket.prototype = {\n    /** PrivateFunction: _buildStream\n     *  _Private_ helper function to generate the <stream> start tag for WebSockets\n     *\n     *  Returns:\n     *    A Strophe.Builder with a <stream> element.\n     */\n    _buildStream: function () {\n        return $build(\"open\", {\n            \"xmlns\": Strophe.NS.FRAMING,\n            \"to\": this._conn.domain,\n            \"version\": '1.0'\n        });\n    },\n\n    /** PrivateFunction: _check_streamerror\n     * _Private_ checks a message for stream:error\n     *\n     *  Parameters:\n     *    (Strophe.Request) bodyWrap - The received stanza.\n     *    connectstatus - The ConnectStatus that will be set on error.\n     *  Returns:\n     *     true if there was a streamerror, false otherwise.\n     */\n    _check_streamerror: function (bodyWrap, connectstatus) {\n        var errors;\n        if (bodyWrap.getElementsByTagNameNS) {\n            errors = bodyWrap.getElementsByTagNameNS(Strophe.NS.STREAM, \"error\");\n        } else {\n            errors = bodyWrap.getElementsByTagName(\"stream:error\");\n        }\n        if (errors.length === 0) {\n            return false;\n        }\n        var error = errors[0];\n\n        var condition = \"\";\n        var text = \"\";\n\n        var ns = \"urn:ietf:params:xml:ns:xmpp-streams\";\n        for (var i = 0; i < error.childNodes.length; i++) {\n            var e = error.childNodes[i];\n            if (e.getAttribute(\"xmlns\") !== ns) {\n                break;\n            } if (e.nodeName === \"text\") {\n                text = e.textContent;\n            } else {\n                condition = e.nodeName;\n            }\n        }\n\n        var errorString = \"WebSocket stream error: \";\n\n        if (condition) {\n            errorString += condition;\n        } else {\n            errorString += \"unknown\";\n        }\n\n        if (text) {\n            errorString += \" - \" + text;\n        }\n\n        Strophe.error(errorString);\n\n        // close the connection on stream_error\n        this._conn._changeConnectStatus(connectstatus, condition);\n        this._conn._doDisconnect();\n        return true;\n    },\n\n    /** PrivateFunction: _reset\n     *  Reset the connection.\n     *\n     *  This function is called by the reset function of the Strophe Connection.\n     *  Is not needed by WebSockets.\n     */\n    _reset: function () {\n        return;\n    },\n\n    /** PrivateFunction: _connect\n     *  _Private_ function called by Strophe.Connection.connect\n     *\n     *  Creates a WebSocket for a connection and assigns Callbacks to it.\n     *  Does nothing if there already is a WebSocket.\n     */\n    _connect: function () {\n        // Ensure that there is no open WebSocket from a previous Connection.\n        this._closeSocket();\n\n        // Create the new WobSocket\n        this.socket = new WebSocket(this._conn.service, \"xmpp\");\n        this.socket.onopen = this._onOpen.bind(this);\n        this.socket.onerror = this._onError.bind(this);\n        this.socket.onclose = this._onClose.bind(this);\n        this.socket.onmessage = this._connect_cb_wrapper.bind(this);\n    },\n\n    /** PrivateFunction: _connect_cb\n     *  _Private_ function called by Strophe.Connection._connect_cb\n     *\n     * checks for stream:error\n     *\n     *  Parameters:\n     *    (Strophe.Request) bodyWrap - The received stanza.\n     */\n    _connect_cb: function(bodyWrap) {\n        var error = this._check_streamerror(bodyWrap, Strophe.Status.CONNFAIL);\n        if (error) {\n            return Strophe.Status.CONNFAIL;\n        }\n    },\n\n    /** PrivateFunction: _handleStreamStart\n     * _Private_ function that checks the opening <open /> tag for errors.\n     *\n     * Disconnects if there is an error and returns false, true otherwise.\n     *\n     *  Parameters:\n     *    (Node) message - Stanza containing the <open /> tag.\n     */\n    _handleStreamStart: function(message) {\n        var error = false;\n\n        // Check for errors in the <open /> tag\n        var ns = message.getAttribute(\"xmlns\");\n        if (typeof ns !== \"string\") {\n            error = \"Missing xmlns in <open />\";\n        } else if (ns !== Strophe.NS.FRAMING) {\n            error = \"Wrong xmlns in <open />: \" + ns;\n        }\n\n        var ver = message.getAttribute(\"version\");\n        if (typeof ver !== \"string\") {\n            error = \"Missing version in <open />\";\n        } else if (ver !== \"1.0\") {\n            error = \"Wrong version in <open />: \" + ver;\n        }\n\n        if (error) {\n            this._conn._changeConnectStatus(Strophe.Status.CONNFAIL, error);\n            this._conn._doDisconnect();\n            return false;\n        }\n\n        return true;\n    },\n\n    /** PrivateFunction: _connect_cb_wrapper\n     * _Private_ function that handles the first connection messages.\n     *\n     * On receiving an opening stream tag this callback replaces itself with the real\n     * message handler. On receiving a stream error the connection is terminated.\n     */\n    _connect_cb_wrapper: function(message) {\n        if (message.data.indexOf(\"<open \") === 0 || message.data.indexOf(\"<?xml\") === 0) {\n            // Strip the XML Declaration, if there is one\n            var data = message.data.replace(/^(<\\?.*?\\?>\\s*)*/, \"\");\n            if (data === '') return;\n\n            var streamStart = new DOMParser().parseFromString(data, \"text/xml\").documentElement;\n            this._conn.xmlInput(streamStart);\n            this._conn.rawInput(message.data);\n\n            //_handleStreamSteart will check for XML errors and disconnect on error\n            if (this._handleStreamStart(streamStart)) {\n                //_connect_cb will check for stream:error and disconnect on error\n                this._connect_cb(streamStart);\n            }\n        } else if (message.data.indexOf(\"<close \") === 0) { // <close xmlns=\"urn:ietf:params:xml:ns:xmpp-framing />\n            // Parse the raw string to an XML element\n            var parsedMessage = new DOMParser().parseFromString(message.data, \"text/xml\").documentElement;\n            // Report this input to the raw and xml handlers\n            this._conn.xmlInput(parsedMessage);\n            this._conn.rawInput(message.data);\n            var see_uri = parsedMessage.getAttribute(\"see-other-uri\");\n            if (see_uri) {\n                var service = this._conn.service;\n                // Valid scenarios: WSS->WSS, WS->ANY\n                var isSecureRedirect = (service.indexOf(\"wss:\") >= 0 && see_uri.indexOf(\"wss:\") >= 0) || (service.indexOf(\"ws:\") >= 0);\n                if(isSecureRedirect) {\n                    this._conn._changeConnectStatus(\n                        Strophe.Status.REDIRECT,\n                        \"Received see-other-uri, resetting connection\"\n                    );\n                    this._conn.reset();\n                    this._conn.service = see_uri;\n                    this._connect();\n                }\n            } else {\n                this._conn._changeConnectStatus(\n                    Strophe.Status.CONNFAIL,\n                    \"Received closing stream\"\n                );\n                this._conn._doDisconnect();\n            }\n        } else {\n            var string = this._streamWrap(message.data);\n            var elem = new DOMParser().parseFromString(string, \"text/xml\").documentElement;\n            this.socket.onmessage = this._onMessage.bind(this);\n            this._conn._connect_cb(elem, null, message.data);\n        }\n    },\n\n    /** PrivateFunction: _disconnect\n     *  _Private_ function called by Strophe.Connection.disconnect\n     *\n     *  Disconnects and sends a last stanza if one is given\n     *\n     *  Parameters:\n     *    (Request) pres - This stanza will be sent before disconnecting.\n     */\n    _disconnect: function (pres) {\n        if (this.socket && this.socket.readyState !== WebSocket.CLOSED) {\n            if (pres) {\n                this._conn.send(pres);\n            }\n            var close = $build(\"close\", { \"xmlns\": Strophe.NS.FRAMING });\n            this._conn.xmlOutput(close.tree());\n            var closeString = Strophe.serialize(close);\n            this._conn.rawOutput(closeString);\n            try {\n                this.socket.send(closeString);\n            } catch (e) {\n                Strophe.info(\"Couldn't send <close /> tag.\");\n            }\n        }\n        this._conn._doDisconnect();\n    },\n\n    /** PrivateFunction: _doDisconnect\n     *  _Private_ function to disconnect.\n     *\n     *  Just closes the Socket for WebSockets\n     */\n    _doDisconnect: function () {\n        Strophe.info(\"WebSockets _doDisconnect was called\");\n        this._closeSocket();\n    },\n\n    /** PrivateFunction _streamWrap\n     *  _Private_ helper function to wrap a stanza in a <stream> tag.\n     *  This is used so Strophe can process stanzas from WebSockets like BOSH\n     */\n    _streamWrap: function (stanza) {\n        return \"<wrapper>\" + stanza + '</wrapper>';\n    },\n\n\n    /** PrivateFunction: _closeSocket\n     *  _Private_ function to close the WebSocket.\n     *\n     *  Closes the socket if it is still open and deletes it\n     */\n    _closeSocket: function () {\n        if (this.socket) { try {\n            this.socket.onerror = null;\n            this.socket.close();\n        } catch (e) {} }\n        this.socket = null;\n    },\n\n    /** PrivateFunction: _emptyQueue\n     * _Private_ function to check if the message queue is empty.\n     *\n     *  Returns:\n     *    True, because WebSocket messages are send immediately after queueing.\n     */\n    _emptyQueue: function () {\n        return true;\n    },\n\n    /** PrivateFunction: _onClose\n     * _Private_ function to handle websockets closing.\n     *\n     * Nothing to do here for WebSockets\n     */\n    _onClose: function(e) {\n        if(this._conn.connected && !this._conn.disconnecting) {\n            Strophe.error(\"Websocket closed unexpectedly\");\n            this._conn._doDisconnect();\n        } else if (e && e.code === 1006 && !this._conn.connected && this.socket) {\n            // in case the onError callback was not called (Safari 10 does not\n            // call onerror when the initial connection fails) we need to\n            // dispatch a CONNFAIL status update to be consistent with the\n            // behavior on other browsers.\n            Strophe.error(\"Websocket closed unexcectedly\");\n            this._conn._changeConnectStatus(\n                Strophe.Status.CONNFAIL,\n                \"The WebSocket connection could not be established or was disconnected.\"\n            );\n            this._conn._doDisconnect();\n        } else {\n            Strophe.info(\"Websocket closed\");\n        }\n    },\n\n    /** PrivateFunction: _no_auth_received\n     *\n     * Called on stream start/restart when no stream:features\n     * has been received.\n     */\n    _no_auth_received: function (callback) {\n        Strophe.error(\"Server did not offer a supported authentication mechanism\");\n        this._changeConnectStatus(\n            Strophe.Status.CONNFAIL,\n            Strophe.ErrorCondition.NO_AUTH_MECH\n        );\n        if (callback) {\n            callback.call(this._conn);\n        }\n        this._conn._doDisconnect();\n    },\n\n    /** PrivateFunction: _onDisconnectTimeout\n     *  _Private_ timeout handler for handling non-graceful disconnection.\n     *\n     *  This does nothing for WebSockets\n     */\n    _onDisconnectTimeout: function () {},\n\n    /** PrivateFunction: _abortAllRequests\n     *  _Private_ helper function that makes sure all pending requests are aborted.\n     */\n    _abortAllRequests: function () {},\n\n    /** PrivateFunction: _onError\n     * _Private_ function to handle websockets errors.\n     *\n     * Parameters:\n     * (Object) error - The websocket error.\n     */\n    _onError: function(error) {\n        Strophe.error(\"Websocket error \" + error);\n        this._conn._changeConnectStatus(\n            Strophe.Status.CONNFAIL,\n            \"The WebSocket connection could not be established or was disconnected.\"\n        );\n        this._disconnect();\n    },\n\n    /** PrivateFunction: _onIdle\n     *  _Private_ function called by Strophe.Connection._onIdle\n     *\n     *  sends all queued stanzas\n     */\n    _onIdle: function () {\n        var data = this._conn._data;\n        if (data.length > 0 && !this._conn.paused) {\n            for (var i = 0; i < data.length; i++) {\n                if (data[i] !== null) {\n                    var stanza, rawStanza;\n                    if (data[i] === \"restart\") {\n                        stanza = this._buildStream().tree();\n                    } else {\n                        stanza = data[i];\n                    }\n                    rawStanza = Strophe.serialize(stanza);\n                    this._conn.xmlOutput(stanza);\n                    this._conn.rawOutput(rawStanza);\n                    this.socket.send(rawStanza);\n                }\n            }\n            this._conn._data = [];\n        }\n    },\n\n    /** PrivateFunction: _onMessage\n     * _Private_ function to handle websockets messages.\n     *\n     * This function parses each of the messages as if they are full documents.\n     * [TODO : We may actually want to use a SAX Push parser].\n     *\n     * Since all XMPP traffic starts with\n     *  <stream:stream version='1.0'\n     *                 xml:lang='en'\n     *                 xmlns='jabber:client'\n     *                 xmlns:stream='http://etherx.jabber.org/streams'\n     *                 id='3697395463'\n     *                 from='SERVER'>\n     *\n     * The first stanza will always fail to be parsed.\n     *\n     * Additionally, the seconds stanza will always be <stream:features> with\n     * the stream NS defined in the previous stanza, so we need to 'force'\n     * the inclusion of the NS in this stanza.\n     *\n     * Parameters:\n     * (string) message - The websocket message.\n     */\n    _onMessage: function(message) {\n        var elem, data;\n        // check for closing stream\n        var close = '<close xmlns=\"urn:ietf:params:xml:ns:xmpp-framing\" />';\n        if (message.data === close) {\n            this._conn.rawInput(close);\n            this._conn.xmlInput(message);\n            if (!this._conn.disconnecting) {\n                this._conn._doDisconnect();\n            }\n            return;\n        } else if (message.data.search(\"<open \") === 0) {\n            // This handles stream restarts\n            elem = new DOMParser().parseFromString(message.data, \"text/xml\").documentElement;\n            if (!this._handleStreamStart(elem)) {\n                return;\n            }\n        } else {\n            data = this._streamWrap(message.data);\n            elem = new DOMParser().parseFromString(data, \"text/xml\").documentElement;\n        }\n\n        if (this._check_streamerror(elem, Strophe.Status.ERROR)) {\n            return;\n        }\n\n        //handle unavailable presence stanza before disconnecting\n        if (this._conn.disconnecting &&\n                elem.firstChild.nodeName === \"presence\" &&\n                elem.firstChild.getAttribute(\"type\") === \"unavailable\") {\n            this._conn.xmlInput(elem);\n            this._conn.rawInput(Strophe.serialize(elem));\n            // if we are already disconnecting we will ignore the unavailable stanza and\n            // wait for the </stream:stream> tag before we close the connection\n            return;\n        }\n        this._conn._dataRecv(elem, message.data);\n    },\n\n    /** PrivateFunction: _onOpen\n     * _Private_ function to handle websockets connection setup.\n     *\n     * The opening stream tag is sent here.\n     */\n    _onOpen: function() {\n        Strophe.info(\"Websocket open\");\n        var start = this._buildStream();\n        this._conn.xmlOutput(start.tree());\n\n        var startString = Strophe.serialize(start);\n        this._conn.rawOutput(startString);\n        this.socket.send(startString);\n    },\n\n    /** PrivateFunction: _reqToData\n     * _Private_ function to get a stanza out of a request.\n     *\n     * WebSockets don't use requests, so the passed argument is just returned.\n     *\n     *  Parameters:\n     *    (Object) stanza - The stanza.\n     *\n     *  Returns:\n     *    The stanza that was passed.\n     */\n    _reqToData: function (stanza) {\n        return stanza;\n    },\n\n    /** PrivateFunction: _send\n     *  _Private_ part of the Connection.send function for WebSocket\n     *\n     * Just flushes the messages that are in the queue\n     */\n    _send: function () {\n        this._conn.flush();\n    },\n\n    /** PrivateFunction: _sendRestart\n     *\n     *  Send an xmpp:restart stanza.\n     */\n    _sendRestart: function () {\n        clearTimeout(this._conn._idleTimeout);\n        this._conn._onIdle.bind(this._conn)();\n    }\n};\nreturn Strophe;\n}));\n\n(function(root){\n    if(typeof define === 'function' && define.amd){\n        define('strophe',[\n            \"strophe-core\",\n            \"strophe-bosh\",\n            \"strophe-websocket\"\n        ], function (wrapper) {\n            return wrapper;\n        });\n    } else if (typeof exports === 'object') {\n        var core = require('./core');\n        require('./bosh');\n        require('./websocket');\n        module.exports = core;\n    }\n})(this);\n\n\nrequire([\"strophe-polyfill\"]);\n/* jshint ignore:start */\n    //The modules for your project will be inlined above\n    //this snippet. Ask almond to synchronously require the\n    //module value for 'main' here and return it as the\n    //value to use for the public API for the built file.\n    return require('strophe');\n}));\n/* jshint ignore:end */\n","/**\n * The events for the conference.\n */\n\n/**\n * Indicates that authentication status changed.\n */\nexport const AUTH_STATUS_CHANGED = 'conference.auth_status_changed';\n\n/**\n * A participant avatar has changed.\n */\nexport const AVATAR_CHANGED = 'conference.avatarChanged';\n\n/**\n * Fired just before the statistics module is disposed and it's the last chance\n * to submit some logs to the statistics service (ex. CallStats if enabled),\n * before it's disconnected.\n */\nexport const BEFORE_STATISTICS_DISPOSED = 'conference.beforeStatisticsDisposed';\n\n/**\n * Indicates that an error occured.\n */\nexport const CONFERENCE_ERROR = 'conference.error';\n\n/**\n * Indicates that conference failed.\n */\nexport const CONFERENCE_FAILED = 'conference.failed';\n\n/**\n * Indicates that conference has been joined. The event does NOT provide any\n * parameters to its listeners.\n */\nexport const CONFERENCE_JOINED = 'conference.joined';\n\n/**\n * Indicates that conference has been left.\n */\nexport const CONFERENCE_LEFT = 'conference.left';\n\n/**\n * Indicates that the connection to the conference has been established\n * XXX This is currently fired whenVthe *ICE* connection enters 'connected'\n * state for the first time.\n */\nexport const CONNECTION_ESTABLISHED = 'conference.connectionEstablished';\n\n/**\n * Indicates that the connection to the conference has been interrupted for some\n * reason.\n * XXX This is currently fired when the *ICE* connection is interrupted.\n */\nexport const CONNECTION_INTERRUPTED = 'conference.connectionInterrupted';\n\n/**\n * Indicates that the connection to the conference has been restored.\n * XXX This is currently fired when the *ICE* connection is restored.\n */\nexport const CONNECTION_RESTORED = 'conference.connectionRestored';\n\n/**\n * A connection to the video bridge's data channel has been established.\n */\nexport const DATA_CHANNEL_OPENED = 'conference.dataChannelOpened';\n\n/**\n * A user has changed it display name\n */\nexport const DISPLAY_NAME_CHANGED = 'conference.displayNameChanged';\n\n/**\n * The dominant speaker was changed.\n */\nexport const DOMINANT_SPEAKER_CHANGED = 'conference.dominantSpeaker';\n\n/**\n * Indicates that DTMF support changed.\n */\nexport const DTMF_SUPPORT_CHANGED = 'conference.dtmfSupportChanged';\n\n/**\n * Indicates that a message from another participant is received on data\n * channel.\n */\nexport const ENDPOINT_MESSAGE_RECEIVED = 'conference.endpoint_message_received';\n\n/**\n * NOTE This is lib-jitsi-meet internal event and can be removed at any time !\n *\n * Event emitted when conference transits, between one to one and multiparty JVB\n * conference. If the conference switches to P2P it's neither one to one nor\n * a multiparty JVB conference, but P2P (the status argument of this event will\n * be <tt>false</tt>).\n *\n * The first argument is a boolean which carries the previous value and\n * the seconds argument is a boolean with the new status. The event is emitted\n * only if the previous and the new values are different.\n *\n * @type {string}\n */\nexport const JVB121_STATUS = 'conference.jvb121Status';\n\n/**\n * You are kicked from the conference.\n * @param {JitsiParticipant} the participant that initiated the kick.\n */\nexport const KICKED = 'conference.kicked';\n\n/**\n * Participant was kicked from the conference.\n * @param {JitsiParticipant} the participant that initiated the kick.\n * @param {JitsiParticipant} the participant that was kicked.\n */\nexport const PARTICIPANT_KICKED = 'conference.participant_kicked';\n\n/**\n * The Last N set is changed.\n *\n * @param {Array<string>|null} leavingEndpointIds the ids of all the endpoints\n * which are leaving Last N\n * @param {Array<string>|null} enteringEndpointIds the ids of all the endpoints\n * which are entering Last N\n */\nexport const LAST_N_ENDPOINTS_CHANGED = 'conference.lastNEndpointsChanged';\n\n/**\n * Indicates that the room has been locked or unlocked.\n */\nexport const LOCK_STATE_CHANGED = 'conference.lock_state_changed';\n\n/**\n * Indicates that the region of the media server (jitsi-videobridge) that we\n * are connected to changed (or was initially set).\n * @type {string} the region.\n */\nexport const SERVER_REGION_CHANGED = 'conference.server_region_changed';\n\n/**\n * New text message was received.\n */\nexport const MESSAGE_RECEIVED = 'conference.messageReceived';\n\n/**\n * New private text message was received.\n */\nexport const PRIVATE_MESSAGE_RECEIVED = 'conference.privateMessageReceived';\n\n/**\n * Event fired when JVB sends notification about interrupted/restored user's\n * ICE connection status or we detect local problem with the video track.\n * First argument is the ID of the participant and\n * the seconds is a string indicating if the connection is currently\n * - active - the connection is active\n * - inactive - the connection is inactive, was intentionally interrupted by\n * the bridge\n * - interrupted - a network problem occurred\n * - restoring - the connection was inactive and is restoring now\n *\n * The current status value can be obtained by calling\n * JitsiParticipant.getConnectionStatus().\n */\nexport const PARTICIPANT_CONN_STATUS_CHANGED\n    = 'conference.participant_conn_status_changed';\n\n/**\n * Indicates that the features of the participant has been changed.\n */\nexport const PARTCIPANT_FEATURES_CHANGED\n    = 'conference.partcipant_features_changed';\n\n/**\n * Indicates that a the value of a specific property of a specific participant\n * has changed.\n */\nexport const PARTICIPANT_PROPERTY_CHANGED\n    = 'conference.participant_property_changed';\n\n/**\n * Indicates that the conference has switched between JVB and P2P connections.\n * The first argument of this event is a <tt>boolean</tt> which when set to\n * <tt>true</tt> means that the conference is running on the P2P connection.\n */\nexport const P2P_STATUS = 'conference.p2pStatus';\n\n/**\n * Indicates that phone number changed.\n */\nexport const PHONE_NUMBER_CHANGED = 'conference.phoneNumberChanged';\n\n/**\n * The conference properties changed.\n * @type {string}\n */\nexport const PROPERTIES_CHANGED = 'conference.propertiesChanged';\n\n/**\n * Indicates that recording state changed.\n */\nexport const RECORDER_STATE_CHANGED = 'conference.recorderStateChanged';\n\n/**\n * Indicates that video SIP GW state changed.\n * @param {VideoSIPGWConstants} status.\n */\nexport const VIDEO_SIP_GW_AVAILABILITY_CHANGED\n    = 'conference.videoSIPGWAvailabilityChanged';\n\n/**\n * Indicates that video SIP GW Session state changed.\n * @param {options} event - {\n *     {string} address,\n *     {VideoSIPGWConstants} oldState,\n *     {VideoSIPGWConstants} newState,\n *     {string} displayName}\n * }.\n */\nexport const VIDEO_SIP_GW_SESSION_STATE_CHANGED\n    = 'conference.videoSIPGWSessionStateChanged';\n\n/**\n * Indicates that start muted settings changed.\n */\nexport const START_MUTED_POLICY_CHANGED\n    = 'conference.start_muted_policy_changed';\n\n/**\n * Indicates that the local user has started muted.\n */\nexport const STARTED_MUTED = 'conference.started_muted';\n\n/**\n * Indicates that subject of the conference has changed.\n */\nexport const SUBJECT_CHANGED = 'conference.subjectChanged';\n\n/**\n * Indicates that DTMF support changed.\n */\nexport const SUSPEND_DETECTED = 'conference.suspendDetected';\n\n/**\n * Event indicates that local user is talking while he muted himself\n */\nexport const TALK_WHILE_MUTED = 'conference.talk_while_muted';\n\n/**\n * A new media track was added to the conference. The event provides the\n * following parameters to its listeners:\n *\n * @param {JitsiTrack} track the added JitsiTrack\n */\nexport const TRACK_ADDED = 'conference.trackAdded';\n\n/**\n * Audio levels of a media track ( attached to the conference) was changed.\n */\nexport const TRACK_AUDIO_LEVEL_CHANGED = 'conference.audioLevelsChanged';\n\n/**\n * A media track ( attached to the conference) mute status was changed.\n * @param {JitsiParticipant|null} the participant that initiated the mute\n * if it is a remote mute.\n */\nexport const TRACK_MUTE_CHANGED = 'conference.trackMuteChanged';\n\n/**\n * The media track was removed from the conference. The event provides the\n * following parameters to its listeners:\n *\n * @param {JitsiTrack} track the removed JitsiTrack\n */\nexport const TRACK_REMOVED = 'conference.trackRemoved';\n\n/**\n * Notifies for transcription status changes. The event provides the\n * following parameters to its listeners:\n *\n * @param {String} status - The new status.\n */\nexport const TRANSCRIPTION_STATUS_CHANGED\n    = 'conference.transcriptionStatusChanged';\n\n\n/**\n * A new user joined the conference.\n */\nexport const USER_JOINED = 'conference.userJoined';\n\n/**\n * A user has left the conference.\n */\nexport const USER_LEFT = 'conference.userLeft';\n\n/**\n * User role changed.\n */\nexport const USER_ROLE_CHANGED = 'conference.roleChanged';\n\n/**\n * User status changed.\n */\nexport const USER_STATUS_CHANGED = 'conference.statusChanged';\n\n/**\n * Event indicates that the bot participant type changed.\n */\nexport const BOT_TYPE_CHANGED = 'conference.bot_type_changed';\n","import BrowserCapabilities from './BrowserCapabilities';\n\nexport default new BrowserCapabilities();\n","/* Copyright @ 2015-present 8x8, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar Logger = require(\"./Logger\");\nvar LogCollector = require(\"./LogCollector\");\n\n/**\n * Definition of the log method\n * @name log_method\n * @function\n * @param {...*} log_args the arguments to be logged\n */\n/**\n * The logger's transport type definition.\n *\n * @typedef {object} LoggerTransport\n *\n * @property {log_method} trace method called to log on {@link Logger.levels.TRACE} logging level\n * @property {log_method} debug method called to log on {@link Logger.levels.DEBUG} logging level\n * @property {log_method} info method called to log on {@link Logger.levels.INFO} logging level\n * @property {log_method} log method called to log on {@link Logger.levels.LOG} logging level\n * @property {log_method} warn method called to log on {@link Logger.levels.WARN} logging level\n * @property {log_method} error method called to log on {@link Logger.levels.ERROR} logging level\n */\n\n/**\n * Map with the created loggers with ID.\n */\nvar idLoggers = {};\n\n/**\n * Array with the loggers without id.\n */\nvar loggers = [];\n\n/**\n * Log level for the lbrary.\n */\nvar curLevel = Logger.levels.TRACE;\n\n\nmodule.exports = {\n    /**\n     * Adds given {@link LoggerTransport} instance to the list of global\n     * transports which means that it'll be used by all {@link Logger}s\n     * @param {LoggerTransport} transport\n     */\n    addGlobalTransport: function(transport) {\n        Logger.addGlobalTransport(transport);\n    },\n    /**\n     * Removes given {@link LoggerTransport} instance from the list of global\n     * transports\n     * @param {LoggerTransport} transport\n     */\n    removeGlobalTransport: function(transport) {\n        Logger.removeGlobalTransport(transport);\n    },\n    /**\n    * Sets global options which will be used by all loggers. Changing these\n    * works even after other loggers are created.\n    */\n    setGlobalOptions: function(options) {\n        Logger.setGlobalOptions(options);\n    },\n    /**\n     * Creates new logger.\n     * @arguments the same as Logger constructor\n     */\n    getLogger: function(id, transports, options) {\n        var logger = new Logger(curLevel, id, transports, options);\n        if(id) {\n            idLoggers[id] = idLoggers[id] || [];\n            idLoggers[id].push(logger);\n        } else {\n            loggers.push(logger);\n        }\n        return logger;\n    },\n    /**\n     * Changes the log level for the existing loggers by id.\n     * @param level the new log level.\n     * @param id if specified the level will be changed only for loggers with the\n     * same id. Otherwise the operation will affect all loggers that don't\n     * have id.\n     */\n    setLogLevelById: function(level, id) {\n        var l = id? (idLoggers[id] || []) : loggers;\n        for(var i = 0; i < l.length; i++) {\n            l[i].setLevel(level);\n        }\n    },\n    /**\n     * Changes the log level for all existing loggers.\n     * @param level the new log level.\n     */\n    setLogLevel: function (level) {\n        curLevel = level;\n        var i = 0;\n        for(; i < loggers.length; i++) {\n            loggers[i].setLevel(level);\n        }\n\n        for(var id in idLoggers) {\n            var l = idLoggers[id] || [];\n            for(i = 0; i < l.length; i++) {\n                l[i].setLevel(level);\n            }\n        }\n    },\n    /**\n     * The supported log levels.\n     */\n    levels: Logger.levels,\n    /**\n     * Exports the <tt>LogCollector</tt>.\n     */\n    LogCollector: LogCollector\n};\n","import EventEmitter from 'events';\n\nimport { FEEDBACK } from '../../service/statistics/AnalyticsEvents';\nimport analytics from './AnalyticsAdapter';\nimport CallStats from './CallStats';\nimport LocalStats from './LocalStatsCollector';\nimport RTPStats from './RTPStatsCollector';\n\nimport browser from '../browser';\nimport Settings from '../settings/Settings';\nimport ScriptUtil from '../util/ScriptUtil';\nimport JitsiTrackError from '../../JitsiTrackError';\nimport * as StatisticsEvents from '../../service/statistics/Events';\n\nconst logger = require('jitsi-meet-logger').getLogger(__filename);\n\n/**\n * Stores all active {@link Statistics} instances.\n * @type {Set<Statistics>}\n */\nlet _instances;\n\n/**\n * True if callstats API is loaded\n */\nlet isCallstatsLoaded = false;\n\n/**\n * Since callstats.io is a third party, we cannot guarantee the quality of their\n * service. More specifically, their server may take noticeably long time to\n * respond. Consequently, it is in our best interest (in the sense that the\n * intergration of callstats.io is pretty important to us but not enough to\n * allow it to prevent people from joining a conference) to (1) start\n * downloading their API as soon as possible and (2) do the downloading\n * asynchronously.\n *\n * @param {StatisticsOptions} options - Options to use for downloading and\n * initializing callstats backend.\n */\nfunction loadCallStatsAPI(options) {\n    if (!isCallstatsLoaded) {\n        ScriptUtil.loadScript(\n            options.customScriptUrl\n                || 'https://api.callstats.io/static/callstats-ws.min.js',\n            /* async */ true,\n            /* prepend */ true,\n            /* relativeURL */ undefined,\n            /* loadCallback */ () => _initCallStatsBackend(options)\n        );\n        isCallstatsLoaded = true;\n    }\n}\n\n/**\n * Initializes Callstats backend.\n *\n * @param {StatisticsOptions} options - The options to use for initializing\n * callstats backend.\n * @private\n */\nfunction _initCallStatsBackend(options) {\n    if (CallStats.isBackendInitialized()) {\n        return;\n    }\n\n    const userName = Settings.callStatsUserName;\n\n    if (!CallStats.initBackend({\n        callStatsID: options.callStatsID,\n        callStatsSecret: options.callStatsSecret,\n        userName: options.swapUserNameAndAlias\n            ? options.callStatsAliasName : userName,\n        aliasName: options.swapUserNameAndAlias\n            ? userName : options.callStatsAliasName,\n        applicationName: options.applicationName,\n        getWiFiStatsMethod: options.getWiFiStatsMethod,\n        confID: options.confID\n    })) {\n        logger.error('CallStats Backend initialization failed bad');\n    }\n}\n\n/**\n * callstats strips any additional fields from Error except for \"name\", \"stack\",\n * \"message\" and \"constraintName\". So we need to bundle additional information\n * from JitsiTrackError into error passed to callstats to preserve valuable\n * information about error.\n * @param {JitsiTrackError} error\n */\nfunction formatJitsiTrackErrorForCallStats(error) {\n    const err = new Error();\n\n    // Just copy original stack from error\n    err.stack = error.stack;\n\n    // Combine name from error's name plus (possibly) name of original GUM error\n    err.name = (error.name || 'Unknown error') + (error.gum && error.gum.error\n        && error.gum.error.name ? ` - ${error.gum.error.name}` : '');\n\n    // Put all constraints into this field. For constraint failed errors we will\n    // still know which exactly constraint failed as it will be a part of\n    // message.\n    err.constraintName = error.gum && error.gum.constraints\n        ? JSON.stringify(error.gum.constraints) : '';\n\n    // Just copy error's message.\n    err.message = error.message;\n\n    return err;\n}\n\n/**\n * Init statistic options\n * @param options\n */\nStatistics.init = function(options) {\n    Statistics.audioLevelsEnabled = !options.disableAudioLevels;\n\n    if (typeof options.audioLevelsInterval === 'number') {\n        Statistics.audioLevelsInterval = options.audioLevelsInterval;\n    }\n\n    Statistics.disableThirdPartyRequests = options.disableThirdPartyRequests;\n};\n\n/**\n * The options to configure Statistics.\n * @typedef {Object} StatisticsOptions\n * @property {string} applicationName - The application name to pass to\n * callstats.\n * @property {string} callStatsAliasName - The alias name to use when\n * initializing callstats.\n * @property {string} callStatsConfIDNamespace - A namespace to prepend the\n * callstats conference ID with.\n * @property {string} confID - The callstats conference ID to use.\n * @property {string} callStatsID - Callstats credentials - the id.\n * @property {string} callStatsSecret - Callstats credentials - the secret.\n * @property {string} customScriptUrl - A custom lib url to use when downloading\n * callstats library.\n * @property {string} roomName - The room name we are currently in.\n * @property {boolean} swapUserNameAndAlias - Whether to swap the places of\n * username and alias when initiating callstats.\n */\n/**\n *\n * @param xmpp\n * @param {StatisticsOptions} options - The options to use creating the\n * Statistics.\n */\nexport default function Statistics(xmpp, options) {\n    /**\n     * {@link RTPStats} mapped by {@link TraceablePeerConnection.id} which\n     * collect RTP statistics for each peerconnection.\n     * @type {Map<string, RTPStats}\n     */\n    this.rtpStatsMap = new Map();\n    this.eventEmitter = new EventEmitter();\n    this.xmpp = xmpp;\n    this.options = options || {};\n\n    this.callStatsIntegrationEnabled\n        = this.options.callStatsID && this.options.callStatsSecret\n\n            // Even though AppID and AppSecret may be specified, the integration\n            // of callstats.io may be disabled because of globally-disallowed\n            // requests to any third parties.\n            && (Statistics.disableThirdPartyRequests !== true);\n    if (this.callStatsIntegrationEnabled) {\n        if (browser.isReactNative()) {\n            _initCallStatsBackend(this.options);\n        } else {\n            loadCallStatsAPI(this.options);\n        }\n\n        if (!this.options.confID) {\n            logger.warn('\"confID\" is not defined');\n        }\n\n        if (!this.options.callStatsConfIDNamespace) {\n            logger.warn('\"callStatsConfIDNamespace\" is not defined');\n        }\n    }\n\n    /**\n     * Stores {@link CallStats} instances for each\n     * {@link TraceablePeerConnection} (one {@link CallStats} instance serves\n     * one TPC). The instances are mapped by {@link TraceablePeerConnection.id}.\n     * @type {Map<number, CallStats>}\n     */\n    this.callsStatsInstances = new Map();\n\n    Statistics.instances.add(this);\n}\nStatistics.audioLevelsEnabled = false;\nStatistics.audioLevelsInterval = 200;\nStatistics.disableThirdPartyRequests = false;\nStatistics.analytics = analytics;\n\nObject.defineProperty(Statistics, 'instances', {\n    /**\n     * Returns the Set holding all active {@link Statistics} instances. Lazily\n     * initializes the Set to allow any Set polyfills to be applied.\n     * @type {Set<Statistics>}\n     */\n    get() {\n        if (!_instances) {\n            _instances = new Set();\n        }\n\n        return _instances;\n    }\n});\n\n/**\n * Starts collecting RTP stats for given peerconnection.\n * @param {TraceablePeerConnection} peerconnection\n */\nStatistics.prototype.startRemoteStats = function(peerconnection) {\n    this.stopRemoteStats(peerconnection);\n\n    try {\n        const rtpStats\n            = new RTPStats(\n                peerconnection,\n                Statistics.audioLevelsInterval,\n                2000,\n                this.eventEmitter);\n\n        rtpStats.start(Statistics.audioLevelsEnabled);\n        this.rtpStatsMap.set(peerconnection.id, rtpStats);\n    } catch (e) {\n        logger.error(`Failed to start collecting remote statistics: ${e}`);\n    }\n};\n\nStatistics.localStats = [];\n\nStatistics.startLocalStats = function(stream, callback) {\n    if (!Statistics.audioLevelsEnabled) {\n        return;\n    }\n    const localStats = new LocalStats(stream, Statistics.audioLevelsInterval,\n        callback);\n\n    this.localStats.push(localStats);\n    localStats.start();\n};\n\nStatistics.prototype.addAudioLevelListener = function(listener) {\n    if (!Statistics.audioLevelsEnabled) {\n        return;\n    }\n    this.eventEmitter.on(StatisticsEvents.AUDIO_LEVEL, listener);\n};\n\nStatistics.prototype.removeAudioLevelListener = function(listener) {\n    if (!Statistics.audioLevelsEnabled) {\n        return;\n    }\n    this.eventEmitter.removeListener(StatisticsEvents.AUDIO_LEVEL, listener);\n};\n\nStatistics.prototype.addBeforeDisposedListener = function(listener) {\n    this.eventEmitter.on(StatisticsEvents.BEFORE_DISPOSED, listener);\n};\n\nStatistics.prototype.removeBeforeDisposedListener = function(listener) {\n    this.eventEmitter.removeListener(\n        StatisticsEvents.BEFORE_DISPOSED, listener);\n};\n\nStatistics.prototype.addConnectionStatsListener = function(listener) {\n    this.eventEmitter.on(StatisticsEvents.CONNECTION_STATS, listener);\n};\n\nStatistics.prototype.removeConnectionStatsListener = function(listener) {\n    this.eventEmitter.removeListener(\n        StatisticsEvents.CONNECTION_STATS,\n        listener);\n};\n\nStatistics.prototype.addByteSentStatsListener = function(listener) {\n    this.eventEmitter.on(StatisticsEvents.BYTE_SENT_STATS, listener);\n};\n\nStatistics.prototype.removeByteSentStatsListener = function(listener) {\n    this.eventEmitter.removeListener(StatisticsEvents.BYTE_SENT_STATS,\n        listener);\n};\n\nStatistics.prototype.dispose = function() {\n    try {\n        // NOTE Before reading this please see the comment in stopCallStats...\n        //\n        // Here we prevent from emitting the event twice in case it will be\n        // triggered from stopCallStats.\n        // If the event is triggered from here it means that the logs will not\n        // be submitted anyway (because there is no CallStats instance), but\n        // we're doing that for the sake of some kind of consistency.\n        if (!this.callsStatsInstances.size) {\n            this.eventEmitter.emit(StatisticsEvents.BEFORE_DISPOSED);\n        }\n        for (const callStats of this.callsStatsInstances.values()) {\n            this.stopCallStats(callStats.tpc);\n        }\n        for (const tpcId of this.rtpStatsMap.keys()) {\n            this._stopRemoteStats(tpcId);\n        }\n        if (this.eventEmitter) {\n            this.eventEmitter.removeAllListeners();\n        }\n    } finally {\n        Statistics.instances.delete(this);\n    }\n};\n\nStatistics.stopLocalStats = function(stream) {\n    if (!Statistics.audioLevelsEnabled) {\n        return;\n    }\n\n    for (let i = 0; i < Statistics.localStats.length; i++) {\n        if (Statistics.localStats[i].stream === stream) {\n            const localStats = Statistics.localStats.splice(i, 1);\n\n            localStats[0].stop();\n            break;\n        }\n    }\n};\n\n/**\n * Stops remote RTP stats for given peerconnection ID.\n * @param {string} tpcId {@link TraceablePeerConnection.id}\n * @private\n */\nStatistics.prototype._stopRemoteStats = function(tpcId) {\n    const rtpStats = this.rtpStatsMap.get(tpcId);\n\n    if (rtpStats) {\n        rtpStats.stop();\n        this.rtpStatsMap.delete(tpcId);\n    }\n};\n\n/**\n * Stops collecting RTP stats for given peerconnection\n * @param {TraceablePeerConnection} tpc\n */\nStatistics.prototype.stopRemoteStats = function(tpc) {\n    this._stopRemoteStats(tpc.id);\n};\n\n// CALSTATS METHODS\n\n/**\n * Initializes the callstats.io API.\n * @param {TraceablePeerConnection} tpc the {@link TraceablePeerConnection}\n * instance for which CalStats will be started.\n * @param {string} remoteUserID\n */\nStatistics.prototype.startCallStats = function(tpc, remoteUserID) {\n    if (!this.callStatsIntegrationEnabled) {\n        return;\n    } else if (this.callsStatsInstances.has(tpc.id)) {\n        logger.error('CallStats instance for ${tpc} exists already');\n\n        return;\n    }\n\n    logger.info(`Starting CallStats for ${tpc}...`);\n\n    const newInstance\n        = new CallStats(\n            tpc,\n            {\n                confID: this._getCallStatsConfID(),\n                remoteUserID\n            });\n\n    this.callsStatsInstances.set(tpc.id, newInstance);\n};\n\n/**\n * Obtains the list of *all* {@link CallStats} instances collected from every\n * valid {@link Statistics} instance.\n * @return {Set<CallStats>}\n * @private\n */\nStatistics._getAllCallStatsInstances = function() {\n    const csInstances = new Set();\n\n    for (const statistics of Statistics.instances) {\n        for (const cs of statistics.callsStatsInstances.values()) {\n            csInstances.add(cs);\n        }\n    }\n\n    return csInstances;\n};\n\n/**\n * Constructs the CallStats conference ID based on the options currently\n * configured in this instance.\n * @return {string}\n * @private\n */\nStatistics.prototype._getCallStatsConfID = function() {\n    // The conference ID is case sensitive!!!\n    return this.options.callStatsConfIDNamespace\n        ? `${this.options.callStatsConfIDNamespace}/${this.options.roomName}`\n        : this.options.roomName;\n};\n\n/**\n * Removes the callstats.io instances.\n */\nStatistics.prototype.stopCallStats = function(tpc) {\n    const callStatsInstance = this.callsStatsInstances.get(tpc.id);\n\n    if (callStatsInstance) {\n        // FIXME the original purpose of adding BEFORE_DISPOSED event was to be\n        // able to submit the last log batch from jitsi-meet to CallStats. After\n        // recent changes we dispose the CallStats earlier\n        // (before Statistics.dispose), so we need to emit this event here to\n        // give this last chance for final log batch submission.\n        //\n        // Eventually there should be a separate module called \"log storage\"\n        // which should emit proper events when it's underlying\n        // CallStats instance is going away.\n        if (this.callsStatsInstances.size === 1) {\n            this.eventEmitter.emit(StatisticsEvents.BEFORE_DISPOSED);\n        }\n        this.callsStatsInstances.delete(tpc.id);\n\n        // The fabric needs to be terminated when being stopped\n        callStatsInstance.sendTerminateEvent();\n    }\n};\n\n/**\n * Returns true if the callstats integration is enabled, otherwise returns\n * false.\n *\n * @returns true if the callstats integration is enabled, otherwise returns\n * false.\n */\nStatistics.prototype.isCallstatsEnabled = function() {\n    return this.callStatsIntegrationEnabled;\n};\n\n/**\n * Logs either resume or hold event for the given peer connection.\n * @param {TraceablePeerConnection} tpc the connection for which event will be\n * reported\n * @param {boolean} isResume true for resume or false for hold\n */\nStatistics.prototype.sendConnectionResumeOrHoldEvent = function(tpc, isResume) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendResumeOrHoldEvent(isResume);\n    }\n};\n\n/**\n * Notifies CallStats and analytics (if present) for ice connection failed\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n */\nStatistics.prototype.sendIceConnectionFailedEvent = function(tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendIceConnectionFailedEvent();\n    }\n};\n\n/**\n * Notifies CallStats for mute events\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n * @param {boolean} muted true for muted and false for not muted\n * @param {String} type \"audio\"/\"video\"\n */\nStatistics.prototype.sendMuteEvent = function(tpc, muted, type) {\n    const instance = tpc && this.callsStatsInstances.get(tpc.id);\n\n    CallStats.sendMuteEvent(muted, type, instance);\n};\n\n/**\n * Notifies CallStats for screen sharing events\n * @param start {boolean} true for starting screen sharing and\n * false for not stopping\n * @param {string|null} ssrc - optional ssrc value, used only when\n * starting screen sharing.\n */\nStatistics.prototype.sendScreenSharingEvent\n    = function(start, ssrc) {\n        for (const cs of this.callsStatsInstances.values()) {\n            cs.sendScreenSharingEvent(start, ssrc);\n        }\n    };\n\n/**\n * Notifies the statistics module that we are now the dominant speaker of the\n * conference.\n * @param {String} roomJid - The room jid where the speaker event occurred.\n */\nStatistics.prototype.sendDominantSpeakerEvent = function(roomJid) {\n    for (const cs of this.callsStatsInstances.values()) {\n        cs.sendDominantSpeakerEvent();\n    }\n\n    // xmpp send dominant speaker event\n    this.xmpp.sendDominantSpeakerEvent(roomJid);\n};\n\n/**\n * Notifies about active device.\n * @param {{deviceList: {String:String}}} devicesData - list of devices with\n *      their data\n */\nStatistics.sendActiveDeviceListEvent = function(devicesData) {\n    const globalSet = Statistics._getAllCallStatsInstances();\n\n    if (globalSet.size) {\n        for (const cs of globalSet) {\n            CallStats.sendActiveDeviceListEvent(devicesData, cs);\n        }\n    } else {\n        CallStats.sendActiveDeviceListEvent(devicesData, null);\n    }\n};\n\n/* eslint-disable max-params */\n\n/**\n * Lets the underlying statistics module know where is given SSRC rendered by\n * providing renderer tag ID.\n * @param {TraceablePeerConnection} tpc the connection to which the stream\n * belongs to\n * @param {number} ssrc the SSRC of the stream\n * @param {boolean} isLocal\n * @param {string} userId\n * @param {string} usageLabel  meaningful usage label of this stream like\n *        'microphone', 'camera' or 'screen'.\n * @param {string} containerId the id of media 'audio' or 'video' tag which\n *        renders the stream.\n */\nStatistics.prototype.associateStreamWithVideoTag = function(\n        tpc,\n        ssrc,\n        isLocal,\n        userId,\n        usageLabel,\n        containerId) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.associateStreamWithVideoTag(\n            ssrc,\n            isLocal,\n            userId,\n            usageLabel,\n            containerId);\n    }\n};\n\n/* eslint-enable max-params */\n\n/**\n * Notifies CallStats that getUserMedia failed.\n *\n * @param {Error} e error to send\n */\nStatistics.sendGetUserMediaFailed = function(e) {\n    const error\n        = e instanceof JitsiTrackError\n            ? formatJitsiTrackErrorForCallStats(e) : e;\n    const globalSet = Statistics._getAllCallStatsInstances();\n\n    if (globalSet.size) {\n        for (const cs of globalSet) {\n            CallStats.sendGetUserMediaFailed(error, cs);\n        }\n    } else {\n        CallStats.sendGetUserMediaFailed(error, null);\n    }\n};\n\n/**\n * Notifies CallStats that peer connection failed to create offer.\n *\n * @param {Error} e error to send\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n */\nStatistics.prototype.sendCreateOfferFailed = function(e, tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendCreateOfferFailed(e);\n    }\n};\n\n/**\n * Notifies CallStats that peer connection failed to create answer.\n *\n * @param {Error} e error to send\n * @param {TraceablePeerConnection} tpc connection on which failure occured.\n */\nStatistics.prototype.sendCreateAnswerFailed = function(e, tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendCreateAnswerFailed(e);\n    }\n};\n\n/**\n * Notifies CallStats that peer connection failed to set local description.\n *\n * @param {Error} e error to send\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n */\nStatistics.prototype.sendSetLocalDescFailed = function(e, tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendSetLocalDescFailed(e);\n    }\n};\n\n/**\n * Notifies CallStats that peer connection failed to set remote description.\n *\n * @param {Error} e error to send\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n */\nStatistics.prototype.sendSetRemoteDescFailed = function(e, tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendSetRemoteDescFailed(e);\n    }\n};\n\n/**\n * Notifies CallStats that peer connection failed to add ICE candidate.\n *\n * @param {Error} e error to send\n * @param {TraceablePeerConnection} tpc connection on which failure occurred.\n */\nStatistics.prototype.sendAddIceCandidateFailed = function(e, tpc) {\n    const instance = this.callsStatsInstances.get(tpc.id);\n\n    if (instance) {\n        instance.sendAddIceCandidateFailed(e);\n    }\n};\n\n/**\n * Adds to CallStats an application log.\n *\n * @param {String} m a log message to send or an {Error} object to be reported\n */\nStatistics.sendLog = function(m) {\n    const globalSubSet = new Set();\n\n    // FIXME we don't want to duplicate logs over P2P instance, but\n    // here we should go over instances and call this method for each\n    // unique conference ID rather than selecting the first one.\n    // We don't have such use case though, so leaving as is for now.\n    for (const stats of Statistics.instances) {\n        if (stats.callsStatsInstances.size) {\n            globalSubSet.add(stats.callsStatsInstances.values().next().value);\n        }\n    }\n\n    if (globalSubSet.size) {\n        for (const csPerStats of globalSubSet) {\n            CallStats.sendApplicationLog(m, csPerStats);\n        }\n    } else {\n        CallStats.sendApplicationLog(m, null);\n    }\n};\n\n/**\n * Sends the given feedback through CallStats.\n *\n * @param overall an integer between 1 and 5 indicating the user's rating.\n * @param comment the comment from the user.\n * @returns {Promise} Resolves when callstats feedback has been submitted\n * successfully.\n */\nStatistics.prototype.sendFeedback = function(overall, comment) {\n    // Statistics.analytics.sendEvent is currently fire and forget, without\n    // confirmation of successful send.\n    Statistics.analytics.sendEvent(\n        FEEDBACK,\n        {\n            rating: overall,\n            comment\n        });\n\n    return CallStats.sendFeedback(this._getCallStatsConfID(), overall, comment);\n};\n\nStatistics.LOCAL_JID = require('../../service/statistics/constants').LOCAL_JID;\n\n/**\n * Reports global error to CallStats.\n *\n * @param {Error} error\n */\nStatistics.reportGlobalError = function(error) {\n    if (error instanceof JitsiTrackError && error.gum) {\n        Statistics.sendGetUserMediaFailed(error);\n    } else {\n        Statistics.sendLog(error);\n    }\n};\n\n/**\n * Sends event to analytics and logs a message to the logger/console. Console\n * messages might also be logged to callstats automatically.\n *\n * @param {string | Object} event the event name, or an object which\n * represents the entire event.\n * @param {Object} properties properties to attach to the event (if an event\n * name as opposed to an event object is provided).\n */\nStatistics.sendAnalyticsAndLog = function(event, properties = {}) {\n    if (!event) {\n        logger.warn('No event or event name given.');\n\n        return;\n    }\n\n    let eventToLog;\n\n    // Also support an API with a single object as an event.\n    if (typeof event === 'object') {\n        eventToLog = event;\n    } else {\n        eventToLog = {\n            name: event,\n            properties\n        };\n    }\n\n    logger.log(JSON.stringify(eventToLog));\n\n    // We do this last, because it may modify the object which is passed.\n    this.analytics.sendEvent(event, properties);\n};\n\n/**\n * Sends event to analytics.\n *\n * @param {string | Object} eventName the event name, or an object which\n * represents the entire event.\n * @param {Object} properties properties to attach to the event\n */\nStatistics.sendAnalytics = function(eventName, properties = {}) {\n    this.analytics.sendEvent(eventName, properties);\n};\n","import { getLogger } from 'jitsi-meet-logger';\nconst logger = getLogger(__filename);\n\nimport RandomUtil from '../util/RandomUtil';\nimport browser from '../browser';\n\nconst SDPUtil = {\n    filterSpecialChars(text) {\n        // XXX Neither one of the falsy values (e.g. null, undefined, false,\n        // \"\", etc.) \"contain\" special chars.\n        // eslint-disable-next-line no-useless-escape\n        return text ? text.replace(/[\\\\\\/\\{,\\}\\+]/g, '') : text;\n    },\n    iceparams(mediadesc, sessiondesc) {\n        let data = null;\n        let pwd, ufrag;\n\n        if ((ufrag = SDPUtil.findLine(mediadesc, 'a=ice-ufrag:', sessiondesc))\n                && (pwd\n                    = SDPUtil.findLine(\n                        mediadesc,\n                        'a=ice-pwd:',\n                        sessiondesc))) {\n            data = {\n                ufrag: SDPUtil.parseICEUfrag(ufrag),\n                pwd: SDPUtil.parseICEPwd(pwd)\n            };\n        }\n\n        return data;\n    },\n    parseICEUfrag(line) {\n        return line.substring(12);\n    },\n    buildICEUfrag(frag) {\n        return `a=ice-ufrag:${frag}`;\n    },\n    parseICEPwd(line) {\n        return line.substring(10);\n    },\n    buildICEPwd(pwd) {\n        return `a=ice-pwd:${pwd}`;\n    },\n    parseMID(line) {\n        return line.substring(6);\n    },\n    parseMLine(line) {\n        const data = {};\n        const parts = line.substring(2).split(' ');\n\n        data.media = parts.shift();\n        data.port = parts.shift();\n        data.proto = parts.shift();\n        if (parts[parts.length - 1] === '') { // trailing whitespace\n            parts.pop();\n        }\n        data.fmt = parts;\n\n        return data;\n    },\n    buildMLine(mline) {\n        return (\n            `m=${mline.media} ${mline.port} ${mline.proto} ${\n                mline.fmt.join(' ')}`);\n    },\n    parseRTPMap(line) {\n        const data = {};\n        let parts = line.substring(9).split(' ');\n\n        data.id = parts.shift();\n        parts = parts[0].split('/');\n        data.name = parts.shift();\n        data.clockrate = parts.shift();\n        data.channels = parts.length ? parts.shift() : '1';\n\n        return data;\n    },\n\n    /**\n     * Parses SDP line \"a=sctpmap:...\" and extracts SCTP port from it.\n     * @param line eg. \"a=sctpmap:5000 webrtc-datachannel\"\n     * @returns [SCTP port number, protocol, streams]\n     */\n    parseSCTPMap(line) {\n        const parts = line.substring(10).split(' ');\n        const sctpPort = parts[0];\n        const protocol = parts[1];\n\n        // Stream count is optional\n        const streamCount = parts.length > 2 ? parts[2] : null;\n\n\n        return [ sctpPort, protocol, streamCount ];// SCTP port\n    },\n    buildRTPMap(el) {\n        let line\n            = `a=rtpmap:${el.getAttribute('id')} ${el.getAttribute('name')}/${\n                el.getAttribute('clockrate')}`;\n\n        if (el.getAttribute('channels')\n            && el.getAttribute('channels') !== '1') {\n            line += `/${el.getAttribute('channels')}`;\n        }\n\n        return line;\n    },\n    parseCrypto(line) {\n        const data = {};\n        const parts = line.substring(9).split(' ');\n\n        data.tag = parts.shift();\n        data['crypto-suite'] = parts.shift();\n        data['key-params'] = parts.shift();\n        if (parts.length) {\n            data['session-params'] = parts.join(' ');\n        }\n\n        return data;\n    },\n    parseFingerprint(line) { // RFC 4572\n        const data = {};\n        const parts = line.substring(14).split(' ');\n\n        data.hash = parts.shift();\n        data.fingerprint = parts.shift();\n\n        // TODO assert that fingerprint satisfies 2UHEX *(\":\" 2UHEX) ?\n        return data;\n    },\n    parseFmtp(line) {\n        const data = [];\n        let parts = line.split(' ');\n\n        parts.shift();\n        parts = parts.join(' ').split(';');\n        for (let i = 0; i < parts.length; i++) {\n            let key = parts[i].split('=')[0];\n\n            while (key.length && key[0] === ' ') {\n                key = key.substring(1);\n            }\n            const value = parts[i].split('=')[1];\n\n            if (key && value) {\n                data.push({ name: key,\n                    value });\n            } else if (key) {\n                // rfc 4733 (DTMF) style stuff\n                data.push({ name: '',\n                    value: key });\n            }\n        }\n\n        return data;\n    },\n    parseICECandidate(line) {\n        const candidate = {};\n        const elems = line.split(' ');\n\n        candidate.foundation = elems[0].substring(12);\n        candidate.component = elems[1];\n        candidate.protocol = elems[2].toLowerCase();\n        candidate.priority = elems[3];\n        candidate.ip = elems[4];\n        candidate.port = elems[5];\n\n        // elems[6] => \"typ\"\n        candidate.type = elems[7];\n        candidate.generation = 0; // default value, may be overwritten below\n        for (let i = 8; i < elems.length; i += 2) {\n            switch (elems[i]) {\n            case 'raddr':\n                candidate['rel-addr'] = elems[i + 1];\n                break;\n            case 'rport':\n                candidate['rel-port'] = elems[i + 1];\n                break;\n            case 'generation':\n                candidate.generation = elems[i + 1];\n                break;\n            case 'tcptype':\n                candidate.tcptype = elems[i + 1];\n                break;\n            default: // TODO\n                logger.log(\n                    `parseICECandidate not translating \"${\n                        elems[i]}\" = \"${elems[i + 1]}\"`);\n            }\n        }\n        candidate.network = '1';\n\n        // not applicable to SDP -- FIXME: should be unique, not just random\n        // eslint-disable-next-line newline-per-chained-call\n        candidate.id = Math.random().toString(36).substr(2, 10);\n\n        return candidate;\n    },\n    buildICECandidate(cand) {\n        let line = [\n            `a=candidate:${cand.foundation}`,\n            cand.component,\n            cand.protocol,\n            cand.priority,\n            cand.ip,\n            cand.port,\n            'typ',\n            cand.type\n        ].join(' ');\n\n        line += ' ';\n        switch (cand.type) {\n        case 'srflx':\n        case 'prflx':\n        case 'relay':\n            if (cand.hasOwnAttribute('rel-addr')\n                    && cand.hasOwnAttribute('rel-port')) {\n                line += 'raddr';\n                line += ' ';\n                line += cand['rel-addr'];\n                line += ' ';\n                line += 'rport';\n                line += ' ';\n                line += cand['rel-port'];\n                line += ' ';\n            }\n            break;\n        }\n        if (cand.hasOwnAttribute('tcptype')) {\n            line += 'tcptype';\n            line += ' ';\n            line += cand.tcptype;\n            line += ' ';\n        }\n        line += 'generation';\n        line += ' ';\n        line += cand.hasOwnAttribute('generation') ? cand.generation : '0';\n\n        return line;\n    },\n    parseSSRC(desc) {\n        // proprietary mapping of a=ssrc lines\n        // TODO: see \"Jingle RTP Source Description\" by Juberti and P. Thatcher\n        // on google docs and parse according to that\n        const data = new Map();\n        const lines = desc.split('\\r\\n');\n\n        for (let i = 0; i < lines.length; i++) {\n            if (lines[i].substring(0, 7) === 'a=ssrc:') {\n                // FIXME: Use regex to smartly find the ssrc.\n                const ssrc = lines[i].split('a=ssrc:')[1].split(' ')[0];\n\n                if (!data.get(ssrc)) {\n                    data.set(ssrc, []);\n                }\n\n                data.get(ssrc).push(lines[i]);\n            }\n        }\n\n        return data;\n    },\n    parseRTCPFB(line) {\n        const parts = line.substr(10).split(' ');\n        const data = {};\n\n        data.pt = parts.shift();\n        data.type = parts.shift();\n        data.params = parts;\n\n        return data;\n    },\n    parseExtmap(line) {\n        const parts = line.substr(9).split(' ');\n        const data = {};\n\n        data.value = parts.shift();\n        if (data.value.indexOf('/') === -1) {\n            data.direction = 'both';\n        } else {\n            data.direction = data.value.substr(data.value.indexOf('/') + 1);\n            data.value = data.value.substr(0, data.value.indexOf('/'));\n        }\n        data.uri = parts.shift();\n        data.params = parts;\n\n        return data;\n    },\n    findLine(haystack, needle, sessionpart) {\n        let lines = haystack.split('\\r\\n');\n\n        for (let i = 0; i < lines.length; i++) {\n            if (lines[i].substring(0, needle.length) === needle) {\n                return lines[i];\n            }\n        }\n        if (!sessionpart) {\n            return false;\n        }\n\n        // search session part\n        lines = sessionpart.split('\\r\\n');\n        for (let j = 0; j < lines.length; j++) {\n            if (lines[j].substring(0, needle.length) === needle) {\n                return lines[j];\n            }\n        }\n\n        return false;\n    },\n    findLines(haystack, needle, sessionpart) {\n        let lines = haystack.split('\\r\\n');\n        const needles = [];\n\n        for (let i = 0; i < lines.length; i++) {\n            if (lines[i].substring(0, needle.length) === needle) {\n                needles.push(lines[i]);\n            }\n        }\n        if (needles.length || !sessionpart) {\n            return needles;\n        }\n\n        // search session part\n        lines = sessionpart.split('\\r\\n');\n        for (let j = 0; j < lines.length; j++) {\n            if (lines[j].substring(0, needle.length) === needle) {\n                needles.push(lines[j]);\n            }\n        }\n\n        return needles;\n    },\n    candidateToJingle(line) {\n        // a=candidate:2979166662 1 udp 2113937151 192.168.2.100 57698 typ host\n        // generation 0\n        //      <candidate component=... foundation=... generation=... id=...\n        // ip=... network=... port=... priority=... protocol=... type=.../>\n        if (line.indexOf('candidate:') === 0) {\n            // eslint-disable-next-line no-param-reassign\n            line = `a=${line}`;\n        } else if (line.substring(0, 12) !== 'a=candidate:') {\n            logger.log(\n                'parseCandidate called with a line that is not a candidate'\n                    + ' line');\n            logger.log(line);\n\n            return null;\n        }\n        if (line.substring(line.length - 2) === '\\r\\n') { // chomp it\n            // eslint-disable-next-line no-param-reassign\n            line = line.substring(0, line.length - 2);\n        }\n        const candidate = {};\n        const elems = line.split(' ');\n\n        if (elems[6] !== 'typ') {\n            logger.log('did not find typ in the right place');\n            logger.log(line);\n\n            return null;\n        }\n        candidate.foundation = elems[0].substring(12);\n        candidate.component = elems[1];\n        candidate.protocol = elems[2].toLowerCase();\n        candidate.priority = elems[3];\n        candidate.ip = elems[4];\n        candidate.port = elems[5];\n\n        // elems[6] => \"typ\"\n        candidate.type = elems[7];\n\n        candidate.generation = '0'; // default, may be overwritten below\n        for (let i = 8; i < elems.length; i += 2) {\n            switch (elems[i]) {\n            case 'raddr':\n                candidate['rel-addr'] = elems[i + 1];\n                break;\n            case 'rport':\n                candidate['rel-port'] = elems[i + 1];\n                break;\n            case 'generation':\n                candidate.generation = elems[i + 1];\n                break;\n            case 'tcptype':\n                candidate.tcptype = elems[i + 1];\n                break;\n            default: // TODO\n                logger.log(`not translating \"${elems[i]}\" = \"${elems[i + 1]}\"`);\n            }\n        }\n        candidate.network = '1';\n\n        // not applicable to SDP -- FIXME: should be unique, not just random\n        // eslint-disable-next-line newline-per-chained-call\n        candidate.id = Math.random().toString(36).substr(2, 10);\n\n        return candidate;\n    },\n    candidateFromJingle(cand) {\n        let line = 'a=candidate:';\n\n        line += cand.getAttribute('foundation');\n        line += ' ';\n        line += cand.getAttribute('component');\n        line += ' ';\n\n        let protocol = cand.getAttribute('protocol');\n\n        // use tcp candidates for FF\n\n        if (browser.isFirefox() && protocol.toLowerCase() === 'ssltcp') {\n            protocol = 'tcp';\n        }\n\n        line += protocol; // .toUpperCase(); // chrome M23 doesn't like this\n        line += ' ';\n        line += cand.getAttribute('priority');\n        line += ' ';\n        line += cand.getAttribute('ip');\n        line += ' ';\n        line += cand.getAttribute('port');\n        line += ' ';\n        line += 'typ';\n        line += ` ${cand.getAttribute('type')}`;\n        line += ' ';\n        switch (cand.getAttribute('type')) {\n        case 'srflx':\n        case 'prflx':\n        case 'relay':\n            if (cand.getAttribute('rel-addr')\n                    && cand.getAttribute('rel-port')) {\n                line += 'raddr';\n                line += ' ';\n                line += cand.getAttribute('rel-addr');\n                line += ' ';\n                line += 'rport';\n                line += ' ';\n                line += cand.getAttribute('rel-port');\n                line += ' ';\n            }\n            break;\n        }\n        if (protocol.toLowerCase() === 'tcp') {\n            line += 'tcptype';\n            line += ' ';\n            line += cand.getAttribute('tcptype');\n            line += ' ';\n        }\n        line += 'generation';\n        line += ' ';\n        line += cand.getAttribute('generation') || '0';\n\n        return `${line}\\r\\n`;\n    },\n\n    /**\n     * Parse the 'most' primary video ssrc from the given m line\n     * @param {object} mLine object as parsed from transform.parse\n     * @return {number} the primary video ssrc from the given m line\n     */\n    parsePrimaryVideoSsrc(videoMLine) {\n        const numSsrcs = videoMLine.ssrcs\n            .map(ssrcInfo => ssrcInfo.id)\n            .filter((ssrc, index, array) => array.indexOf(ssrc) === index)\n            .length;\n        const numGroups\n            = (videoMLine.ssrcGroups && videoMLine.ssrcGroups.length) || 0;\n\n        if (numSsrcs > 1 && numGroups === 0) {\n            // Ambiguous, can't figure out the primary\n            return;\n        }\n        let primarySsrc = null;\n\n        if (numSsrcs === 1) {\n            primarySsrc = videoMLine.ssrcs[0].id;\n        } else if (numSsrcs === 2) {\n            // Can figure it out if there's an FID group\n            const fidGroup\n                = videoMLine.ssrcGroups.find(\n                    group => group.semantics === 'FID');\n\n            if (fidGroup) {\n                primarySsrc = fidGroup.ssrcs.split(' ')[0];\n            }\n        } else if (numSsrcs >= 3) {\n            // Can figure it out if there's a sim group\n            const simGroup\n                = videoMLine.ssrcGroups.find(\n                    group => group.semantics === 'SIM');\n\n            if (simGroup) {\n                primarySsrc = simGroup.ssrcs.split(' ')[0];\n            }\n        }\n\n        return primarySsrc;\n    },\n\n    /**\n     * Generate an ssrc\n     * @returns {number} an ssrc\n     */\n    generateSsrc() {\n        return RandomUtil.randomInt(1, 0xffffffff);\n    },\n\n    /**\n     * Get an attribute for the given ssrc with the given attributeName\n     *  from the given mline\n     * @param {object} mLine an mLine object as parsed from transform.parse\n     * @param {number} ssrc the ssrc for which an attribtue is desired\n     * @param {string} attributeName the name of the desired attribute\n     * @returns {string} the value corresponding to the given ssrc\n     *  and attributeName\n     */\n    getSsrcAttribute(mLine, ssrc, attributeName) {\n        for (let i = 0; i < mLine.ssrcs.length; ++i) {\n            const ssrcLine = mLine.ssrcs[i];\n\n            if (ssrcLine.id === ssrc\n                && ssrcLine.attribute === attributeName) {\n                return ssrcLine.value;\n            }\n        }\n    },\n\n    /**\n     * Parses the ssrcs from the group sdp line and\n     *  returns them as a list of numbers\n     * @param {object} the ssrcGroup object as parsed from\n     *  sdp-transform\n     * @returns {list<number>} a list of the ssrcs in the group\n     *  parsed as numbers\n     */\n    parseGroupSsrcs(ssrcGroup) {\n        return ssrcGroup\n            .ssrcs\n            .split(' ')\n            .map(ssrcStr => parseInt(ssrcStr, 10));\n    },\n\n    /**\n     * Get the mline of the given type from the given sdp\n     * @param {object} sdp sdp as parsed from transform.parse\n     * @param {string} type the type of the desired mline (e.g. \"video\")\n     * @returns {object} a media object\n     */\n    getMedia(sdp, type) {\n        return sdp.media.find(m => m.type === type);\n    },\n\n    /**\n     * Extracts the ICE username fragment from an SDP string.\n     * @param {string} sdp the SDP in raw text format\n     */\n    getUfrag(sdp) {\n        const ufragLines\n            = sdp.split('\\n').filter(line => line.startsWith('a=ice-ufrag:'));\n\n        if (ufragLines.length > 0) {\n            return ufragLines[0].substr('a=ice-ufrag:'.length);\n        }\n    },\n\n    /**\n     * Sets the given codecName as the preferred codec by\n     *  moving it to the beginning of the payload types\n     *  list (modifies the given mline in place).  If there\n     *  are multiple options within the same codec (multiple h264\n     *  profiles, for instance), this will prefer the first one\n     *  that is found.\n     * @param {object} videoMLine the video mline object from\n     *  an sdp as parsed by transform.parse\n     * @param {string} codecName the name of the preferred codec\n     */\n    preferVideoCodec(videoMLine, codecName) {\n        let payloadType = null;\n\n        if (!videoMLine || !codecName) {\n            return;\n        }\n\n        for (let i = 0; i < videoMLine.rtp.length; ++i) {\n            const rtp = videoMLine.rtp[i];\n\n            if (rtp.codec\n                && rtp.codec.toLowerCase() === codecName.toLowerCase()) {\n                payloadType = rtp.payload;\n                break;\n            }\n        }\n        if (payloadType) {\n            // Call toString() on payloads to get around an issue within\n            // SDPTransform that sets payloads as a number, instead of a string,\n            // when there is only one payload.\n            const payloadTypes\n                = videoMLine.payloads\n                    .toString()\n                    .split(' ')\n                    .map(p => parseInt(p, 10));\n            const payloadIndex = payloadTypes.indexOf(payloadType);\n\n            payloadTypes.splice(payloadIndex, 1);\n            payloadTypes.unshift(payloadType);\n            videoMLine.payloads = payloadTypes.join(' ');\n        }\n    },\n\n    /**\n     * Strips the given codec from the given mline. All related RTX payload\n     * types are also stripped. If the resulting mline would have no codecs,\n     * it's disabled.\n     *\n     * @param {object} videoMLine the video mline object from an sdp as parsed\n     * by transform.parse.\n     * @param {string} codecName the name of the codec which will be stripped.\n     */\n    stripVideoCodec(videoMLine, codecName) {\n        if (!videoMLine || !codecName) {\n            return;\n        }\n\n        const removePts = [];\n\n        for (const rtp of videoMLine.rtp) {\n            if (rtp.codec\n                && rtp.codec.toLowerCase() === codecName.toLowerCase()) {\n                removePts.push(rtp.payload);\n            }\n        }\n\n        if (removePts.length > 0) {\n            // We also need to remove the payload types that are related to RTX\n            // for the codecs we want to disable.\n            const rtxApts = removePts.map(item => `apt=${item}`);\n            const rtxPts = videoMLine.fmtp.filter(\n                item => rtxApts.indexOf(item.config) !== -1);\n\n            removePts.push(...rtxPts.map(item => item.payload));\n\n            // Call toString() on payloads to get around an issue within\n            // SDPTransform that sets payloads as a number, instead of a string,\n            // when there is only one payload.\n            const allPts = videoMLine.payloads\n                .toString()\n                .split(' ')\n                .map(Number);\n            const keepPts = allPts.filter(pt => removePts.indexOf(pt) === -1);\n\n            if (keepPts.length === 0) {\n                // There are no other video codecs, disable the stream.\n                videoMLine.port = 0;\n                videoMLine.direction = 'inactive';\n                videoMLine.payloads = '*';\n            } else {\n                videoMLine.payloads = keepPts.join(' ');\n            }\n\n            videoMLine.rtp = videoMLine.rtp.filter(\n                item => keepPts.indexOf(item.payload) !== -1);\n            videoMLine.fmtp = videoMLine.fmtp.filter(\n                item => keepPts.indexOf(item.payload) !== -1);\n            if (videoMLine.rtcpFb) {\n                videoMLine.rtcpFb = videoMLine.rtcpFb.filter(\n                    item => keepPts.indexOf(item.payload) !== -1);\n            }\n        }\n    }\n};\n\nexport default SDPUtil;\n","const RTCEvents = {\n    /**\n     * Indicates error while create answer call.\n     */\n    CREATE_ANSWER_FAILED: 'rtc.create_answer_failed',\n\n    /**\n     * Indicates error while create offer call.\n     */\n    CREATE_OFFER_FAILED: 'rtc.create_offer_failed',\n    DATA_CHANNEL_OPEN: 'rtc.data_channel_open',\n    ENDPOINT_CONN_STATUS_CHANGED: 'rtc.endpoint_conn_status_changed',\n    DOMINANT_SPEAKER_CHANGED: 'rtc.dominant_speaker_changed',\n    LASTN_ENDPOINT_CHANGED: 'rtc.lastn_endpoint_changed',\n\n    /**\n     * Event emitted when the user granted a permission for the camera / mic.\n     * Used to keep track of the granted permissions on browsers which don't\n     * support the Permissions API.\n     */\n    GRANTED_PERMISSIONS: 'rtc.granted_permissions',\n\n    IS_SELECTED_CHANGED: 'rtc.is_selected_change',\n\n    /**\n     * Event emitted when {@link RTC.setLastN} method is called to update with\n     * the new value set.\n     * The first argument is the value passed to {@link RTC.setLastN}.\n     */\n    LASTN_VALUE_CHANGED: 'rtc.lastn_value_changed',\n\n    /**\n     * Event emitted when ssrc for a local track is extracted and stored\n     * in {@link TraceablePeerConnection}.\n     * @param {JitsiLocalTrack} track which ssrc was updated\n     * @param {string} ssrc that was stored\n     */\n    LOCAL_TRACK_SSRC_UPDATED: 'rtc.local_track_ssrc_updated',\n\n    TRACK_ATTACHED: 'rtc.track_attached',\n\n    /**\n     * Event fired when we remote track is added to the conference.\n     * 1st event argument is the added <tt>JitsiRemoteTrack</tt> instance.\n     **/\n    REMOTE_TRACK_ADDED: 'rtc.remote_track_added',\n\n    // FIXME get rid of this event in favour of NO_DATA_FROM_SOURCE event\n    // (currently implemented for local tracks only)\n    REMOTE_TRACK_MUTE: 'rtc.remote_track_mute',\n\n    /**\n     * Indicates that the remote track has been removed from the conference.\n     * 1st event argument is the removed {@link JitsiRemoteTrack} instance.\n     */\n    REMOTE_TRACK_REMOVED: 'rtc.remote_track_removed',\n\n    // FIXME get rid of this event in favour of NO_DATA_FROM_SOURCE event\n    // (currently implemented for local tracks only)\n    REMOTE_TRACK_UNMUTE: 'rtc.remote_track_unmute',\n\n    /**\n     * Indicates error while set local description.\n     */\n    SET_LOCAL_DESCRIPTION_FAILED: 'rtc.set_local_description_failed',\n\n    /**\n     * Indicates error while set remote description.\n     */\n    SET_REMOTE_DESCRIPTION_FAILED: 'rtc.set_remote_description_failed',\n    AUDIO_OUTPUT_DEVICE_CHANGED: 'rtc.audio_output_device_changed',\n    DEVICE_LIST_CHANGED: 'rtc.device_list_changed',\n\n    /**\n     * Indicates that the list with available devices will change.\n     */\n    DEVICE_LIST_WILL_CHANGE: 'rtc.device_list_will_change',\n    DEVICE_LIST_AVAILABLE: 'rtc.device_list_available',\n\n    /**\n     * Indicates that a message from another participant is received on\n     * data channel.\n     */\n    ENDPOINT_MESSAGE_RECEIVED: 'rtc.endpoint_message_received',\n\n    /**\n     * Designates an event indicating that the local ICE username fragment of\n     * the jingle session has changed.\n     * The first argument of the vent is <tt>TraceablePeerConnection</tt> which\n     * is the source of the event.\n     * The second argument is the actual \"ufrag\" string.\n     */\n    LOCAL_UFRAG_CHANGED: 'rtc.local_ufrag_changed',\n\n    /**\n     * Designates an event indicating that the local ICE username fragment of\n     * the jingle session has changed.\n     * The first argument of the vent is <tt>TraceablePeerConnection</tt> which\n     * is the source of the event.\n     * The second argument is the actual \"ufrag\" string.\n     */\n    REMOTE_UFRAG_CHANGED: 'rtc.remote_ufrag_changed'\n};\n\nmodule.exports = RTCEvents;\n","/**\n * This class exports constants and factory methods related to the analytics\n * API provided by AnalyticsAdapter. In order for entries in a database to be\n * somewhat easily traceable back to the code which produced them, events sent\n * through analytics should be defined here.\n *\n * Since the AnalyticsAdapter API can be used in different ways, for some events\n * it is more convenient to just define the event name as a constant. For other\n * events a factory function is easier.\n *\n * A general approach for adding a new event:\n * 1. Determine the event type: track, UI, page, or operational. If in doubt use\n * operational.\n * 2. Determine whether the event is related to other existing events, and\n * which fields are desired to be set: name, action, actionSubject, source.\n * 3. If the name is sufficient (the other fields are not important), use a\n * constant. Otherwise use a factory function.\n *\n * Note that the AnalyticsAdapter uses the events passed to its functions for\n * its own purposes, and might modify them. Because of this, factory functions\n * should create new objects.\n *\n */\n\n/**\n * The constant which identifies an event of type \"operational\".\n * @type {string}\n */\nexport const TYPE_OPERATIONAL = 'operational';\n\n/**\n * The constant which identifies an event of type \"page\".\n * @type {string}\n */\nexport const TYPE_PAGE = 'page';\n\n/**\n * The constant which identifies an event of type \"track\".\n * @type {string}\n */\nexport const TYPE_TRACK = 'track';\n\n/**\n * The constant which identifies an event of type \"ui\".\n * @type {string}\n */\nexport const TYPE_UI = 'ui';\n\n/**\n * The \"action\" value for Jingle events which indicates that the Jingle session\n * was restarted (TODO: verify/fix the documentation)\n * @type {string}\n */\nexport const ACTION_JINGLE_RESTART = 'restart';\n\n/**\n * The \"action\" value for Jingle events which indicates that a session-accept\n * timed out (TODO: verify/fix the documentation)\n * @type {string}\n */\nexport const ACTION_JINGLE_SA_TIMEOUT = 'session-accept.timeout';\n\n/**\n * The \"action\" value for Jingle events which indicates that a session-initiate\n * was received.\n * @type {string}\n */\nexport const ACTION_JINGLE_SI_RECEIVED = 'session-initiate.received';\n\n/**\n * The \"action\" value for Jingle events which indicates that a session-initiate\n * not arrived within a timeout (the value is specified in\n * the {@link JingleSessionPC}.\n * @type {string}\n */\nexport const ACTION_JINGLE_SI_TIMEOUT = 'session-initiate.timeout';\n\n/**\n * A constant for the \"terminate\" action for Jingle events. TODO: verify/fix\n * the documentation)\n * @type {string}\n */\nexport const ACTION_JINGLE_TERMINATE = 'terminate';\n\n/**\n * The \"action\" value for Jingle events which indicates that a transport-replace\n * was received.\n * @type {string}\n */\nexport const ACTION_JINGLE_TR_RECEIVED\n    = 'transport-replace.received';\n\n/**\n * The \"action\" value for Jingle events which indicates that a transport-replace\n * succeeded (TODO: verify/fix the documentation)\n * @type {string}\n */\nexport const ACTION_JINGLE_TR_SUCCESS\n    = 'transport-replace.success';\n\n/**\n * The \"action\" value for P2P events which indicates that a connection was\n * established (TODO: verify/fix the documentation)\n * @type {string}\n */\nexport const ACTION_P2P_ESTABLISHED = 'established';\n\n/**\n * The \"action\" value for P2P events which indicates that something failed.\n * @type {string}\n */\nexport const ACTION_P2P_FAILED = 'failed';\n\n/**\n * The \"action\" value for P2P events which indicates that a switch to\n * jitsi-videobridge happened.\n * @type {string}\n */\nexport const ACTION_P2P_SWITCH_TO_JVB = 'switch.to.jvb';\n\n/**\n * The name of an event which indicates an available device. We send one such\n * event per available device once when the available devices are first known,\n * and every time that they change\n * @type {string}\n *\n * Properties:\n *      audio_input_device_count: the number of audio input devices available at\n *          the time the event was sent.\n *      audio_output_device_count: the number of audio output devices available\n *          at the time the event was sent.\n *      video_input_device_count: the number of video input devices available at\n *          the time the event was sent.\n *      video_output_device_count: the number of video output devices available\n *          at the time the event was sent.\n *      device_id: an identifier of the device described in this event.\n *      device_group_id:\n *      device_kind: one of 'audioinput', 'audiooutput', 'videoinput' or\n *          'videooutput'.\n *      device_label: a string which describes the device.\n */\nexport const AVAILABLE_DEVICE = 'available.device';\n\n/**\n * This appears to be fired only in certain cases when the XMPP connection\n * disconnects (and it was intentional?). It is currently never observed to\n * fire in production.\n *\n * TODO: document\n *\n * Properties:\n *      message: an error message\n */\nexport const CONNECTION_DISCONNECTED = 'connection.disconnected';\n\n/**\n * Indicates that the user of the application provided feedback in terms of a\n * rating (an integer from 1 to 5) and an optional comment.\n * Properties:\n *      value: the user's rating (an integer from 1 to 5)\n *      comment: the user's comment\n */\nexport const FEEDBACK = 'feedback';\n\n/**\n * Indicates the duration of a particular phase of the ICE connectivity\n * establishment.\n *\n * Properties:\n *      phase: the ICE phase (e.g. 'gathering', 'checking', 'establishment')\n *      value: the duration in milliseconds.\n *      p2p: whether the associated ICE connection is p2p or towards a\n *          jitsi-videobridge\n *      initiator: whether the local Jingle peer is the initiator or responder\n *          in the Jingle session. XXX we probably actually care about the ICE\n *          role (controlling vs controlled), and we assume that this correlates\n *          with the Jingle initiator.\n */\nexport const ICE_DURATION = 'ice.duration';\n\n/**\n * Indicates the difference in milliseconds between the ICE establishment time\n * for the P2P and JVB connections (e.g. a value of 10 would indicate that the\n * P2P connection took 10ms more than JVB connection to establish).\n *\n * Properties:\n *      value: the difference in establishment durations in milliseconds.\n *\n */\nexport const ICE_ESTABLISHMENT_DURATION_DIFF\n    = 'ice.establishment.duration.diff';\n\n/**\n * Indicates that the ICE state has changed.\n *\n * Properties:\n *      state: the ICE state which was entered (e.g. 'checking', 'connected',\n *          'completed', etc).\n *      value: the time in milliseconds (as reported by\n *          window.performance.now()) that the state change occurred.\n *      p2p: whether the associated ICE connection is p2p or towards a\n *          jitsi-videobridge\n *      signalingState: The signaling state of the associated PeerConnection\n *      reconnect: whether the associated Jingle session is in the process of\n *          reconnecting (or is it ICE? TODO: verify/fix the documentation)\n */\nexport const ICE_STATE_CHANGED = 'ice.state.changed';\n\n/**\n * Indicates that no bytes have been sent for the track.\n *\n * Properties:\n *      mediaType: the media type of the local track ('audio' or 'video').\n */\nexport const NO_BYTES_SENT = 'track.no-bytes-sent';\n\n/**\n * Indicates that a track was unmuted (?).\n *\n * Properties:\n *      mediaType: the media type of the local track ('audio' or 'video').\n *      trackType: the type of the track ('local' or 'remote').\n *      value: TODO: document\n */\nexport const TRACK_UNMUTED = 'track.unmuted';\n\n/**\n * Creates an operational event which indicates that we have received a\n * \"bridge down\" event from jicofo.\n */\nexport const createBridgeDownEvent = function() {\n    const bridgeDown = 'bridge.down';\n\n    return {\n        action: bridgeDown,\n        actionSubject: bridgeDown,\n        type: TYPE_OPERATIONAL\n    };\n};\n\n/**\n * Creates an event which indicates that the XMPP connection failed\n * @param errorType TODO\n * @param errorMessage TODO\n * @param detail connection failed details.\n */\nexport const createConnectionFailedEvent\n    = function(errorType, errorMessage, details) {\n        return {\n            type: TYPE_OPERATIONAL,\n            action: 'connection.failed',\n            attributes: {\n                'error_type': errorType,\n                'error_message': errorMessage,\n                ...details\n            }\n        };\n    };\n\n/**\n * Creates an operational event which indicates that a particular connection\n * stage was reached (i.e. the XMPP connection transitioned to the \"connected\"\n * state).\n *\n * @param stage the stage which was reached\n * @param attributes additional attributes for the event. This should be an\n * object with a \"value\" property indicating a timestamp in milliseconds\n * relative to the beginning of the document's lifetime.\n *\n */\nexport const createConnectionStageReachedEvent = function(stage, attributes) {\n    const action = 'connection.stage.reached';\n\n    return {\n        action,\n        actionSubject: stage,\n        attributes,\n        source: action,\n        type: TYPE_OPERATIONAL\n    };\n};\n\n/**\n * Creates an operational event for the end-to-end round trip time to a\n * specific remote participant.\n * @param participantId the ID of the remote participant.\n * @param region the region of the remote participant\n * @param rtt the rtt\n */\nexport const createE2eRttEvent = function(participantId, region, rtt) {\n    const attributes = {\n        'participant_id': participantId,\n        region,\n        rtt\n    };\n\n    return {\n        attributes,\n        name: 'e2e_rtt',\n        type: TYPE_OPERATIONAL\n    };\n};\n\n/**\n * Creates an event which indicates that the focus has left the MUC.\n */\nexport const createFocusLeftEvent = function() {\n    const action = 'focus.left';\n\n    return {\n        action,\n        actionSubject: action,\n        type: TYPE_OPERATIONAL\n    };\n};\n\n/**\n * Creates an event related to a getUserMedia call.\n *\n * @param action the type of the result that the event represents: 'error',\n * 'success', 'warning', etc.\n * @param attributes the attributes to attach to the event.\n * @returns {{type: string, source: string, name: string}}\n */\nexport const createGetUserMediaEvent = function(action, attributes = {}) {\n    return {\n        type: TYPE_OPERATIONAL,\n        source: 'get.user.media',\n        action,\n        attributes\n    };\n};\n\n/**\n * Creates an event related to remote participant connection status changes.\n *\n * @param attributes the attributes to attach to the event.\n * @returns {{type: string, source: string, name: string}}\n */\nexport const createParticipantConnectionStatusEvent = function(attributes = {}) {\n    const action = 'duration';\n\n    return {\n        type: TYPE_OPERATIONAL,\n        source: 'peer.conn.status',\n        action,\n        attributes\n    };\n};\n\n/**\n * Creates an event for a Jingle-related event.\n * @param action the action of the event\n * @param attributes attributes to add to the event.\n */\nexport const createJingleEvent = function(action, attributes = {}) {\n    return {\n        type: TYPE_OPERATIONAL,\n        action,\n        source: 'jingle',\n        attributes\n    };\n};\n\n/**\n * Creates an event which indicates that a local track was not able to read\n * data from its source (a camera or a microphone).\n *\n * @param mediaType {String} the media type of the local track ('audio' or\n * 'video').\n */\nexport const createNoDataFromSourceEvent = function(mediaType, value) {\n    return {\n        attributes: {\n            'media_type': mediaType,\n            value\n        },\n        action: 'track.no.data.from.source',\n        type: TYPE_OPERATIONAL\n    };\n};\n\n/**\n * Creates an event for a p2p-related event.\n * @param action the action of the event\n * @param attributes attributes to add to the event.\n */\nexport const createP2PEvent = function(action, attributes = {}) {\n    return {\n        type: TYPE_OPERATIONAL,\n        action,\n        source: 'p2p',\n        attributes\n    };\n};\n\n/**\n * Indicates that we received a remote command to mute.\n */\nexport const createRemotelyMutedEvent = function() {\n    return {\n        type: TYPE_OPERATIONAL,\n        action: 'remotely.muted'\n    };\n};\n\n/**\n * Creates an event which contains RTP statistics such as RTT and packet loss.\n *\n * All average RTP stats are currently reported under 1 event name, but with\n * different properties that allows to distinguish between a P2P call, a\n * call relayed through TURN or the JVB, and multiparty vs 1:1.\n *\n * The structure of the event is:\n *\n * {\n *      p2p: true,\n *      conferenceSize: 2,\n *      localCandidateType: \"relay\",\n *      remoteCandidateType: \"relay\",\n *      transportType: \"udp\",\n *\n *      // Average RTT of 200ms\n *      \"rtt.avg\": 200,\n *      \"rtt.samples\": \"[100, 200, 300]\",\n *\n *      // Average packet loss of 10%\n *      \"packet.loss.avg\": 10,\n *      \"packet.loss.samples\": '[5, 10, 15]'\n *\n *      // Difference in milliseconds in the end-to-end RTT between p2p and jvb.\n *      // The e2e RTT through jvb is 15ms shorter:\n *      \"rtt.diff\": 15,\n *\n *      // End-to-end RTT through JVB is ms.\n *      \"end2end.rtt.avg\" = 100\n * }\n *\n * Note that the value of the \"samples\" properties are (JSON encoded) strings,\n * and not JSON arrays, as events' attributes can not be nested. The samples are\n * currently included for debug purposes only and can be removed anytime soon\n * from the structure.\n *\n * Also note that not all of values are present in each event, as values are\n * obtained and calculated as part of different process/event pipe. For example\n * {@link ConnectionAvgStats} instances are doing the reports for each\n * {@link TraceablePeerConnection} and work independently from the main stats\n * pipe.\n */\nexport const createRtpStatsEvent = function(attributes) {\n    return {\n        type: TYPE_OPERATIONAL,\n        action: 'rtp.stats',\n        attributes\n    };\n};\n\n/**\n * Creates an event which contains the round trip time (RTT) to a set of\n * regions.\n *\n * @param attributes\n * @returns {{type: string, action: string, attributes: *}}\n */\nexport const createRttByRegionEvent = function(attributes) {\n    return {\n        type: TYPE_OPERATIONAL,\n        action: 'rtt.by.region',\n        attributes\n    };\n};\n\n/**\n * Creates an event which contains information about the audio output problem (the user id of the affected participant,\n * the local audio levels and the remote audio levels that triggered the event).\n *\n * @param {string} userID - The user id of the affected participant.\n * @param {*} localAudioLevels - The local audio levels.\n * @param {*} remoteAudioLevels - The audio levels received from the participant.\n */\nexport function createAudioOutputProblemEvent(userID, localAudioLevels, remoteAudioLevels) {\n    return {\n        type: TYPE_OPERATIONAL,\n        action: 'audio.output.problem',\n        attributes: {\n            userID,\n            localAudioLevels,\n            remoteAudioLevels\n        }\n    };\n}\n\n/**\n * Creates an event which contains an information related to the bridge channel close event.\n *\n * @param {string} code - A code from {@link https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent}\n * @param {string} reason - A string which describes the reason for closing the bridge channel.\n * @returns {{type: string, action: string, attributes: { code: string, reason: string }}}\n */\nexport const createBridgeChannelClosedEvent = function(code, reason) {\n    return {\n        type: TYPE_OPERATIONAL,\n        action: 'bridge-channel.error',\n        attributes: {\n            code,\n            reason\n        }\n    };\n};\n\n/**\n * Creates an event which indicates the Time To First Media (TTFM).\n * It is measured in milliseconds relative to the beginning of the document's\n * lifetime (i.e. the origin used by window.performance.now()), and it excludes\n * the following:\n * 1. The delay due to getUserMedia()\n * 2. The period between the MUC being joined and the reception of the Jingle\n * session-initiate from jicofo. This is because jicofo will not start a Jingle\n * session until there are at least 2 participants in the room.\n *\n * @param attributes the attributes to add to the event. Currently used fields:\n *      mediaType: the media type of the local track ('audio' or 'video').\n *      muted: whether the track has ever been muted (?)\n *      value: the TTMF in milliseconds.\n */\nexport const createTtfmEvent = function(attributes) {\n    return createConnectionStageReachedEvent('ttfm', attributes);\n};\n","/**\n * The audio type.\n */\nexport const AUDIO = 'audio';\n\n/**\n * The video type.\n */\nexport const VIDEO = 'video';\n","/* global\n          __filename,\n          MediaStreamTrack,\n          RTCIceCandidate: true,\n          RTCPeerConnection,\n          RTCSessionDescription: true\n*/\n\nimport { AVAILABLE_DEVICE } from '../../service/statistics/AnalyticsEvents';\nimport CameraFacingMode from '../../service/RTC/CameraFacingMode';\nimport EventEmitter from 'events';\nimport { getLogger } from 'jitsi-meet-logger';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport JitsiTrackError from '../../JitsiTrackError';\nimport Listenable from '../util/Listenable';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport Resolutions from '../../service/RTC/Resolutions';\nimport browser from '../browser';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport screenObtainer from './ScreenObtainer';\nimport SDPUtil from '../xmpp/SDPUtil';\nimport Statistics from '../statistics/statistics';\nimport VideoType from '../../service/RTC/VideoType';\n\nconst logger = getLogger(__filename);\n\n// Require adapter only for certain browsers. This is being done for\n// react-native, which has its own shims, and while browsers are being migrated\n// over to use adapter's shims.\nif (browser.usesAdapter()) {\n    require('webrtc-adapter');\n}\n\nconst eventEmitter = new EventEmitter();\n\nconst AVAILABLE_DEVICES_POLL_INTERVAL_TIME = 3000; // ms\n\n/**\n * Default resolution to obtain for video tracks if no resolution is specified.\n * This default is used for old gum flow only, as new gum flow uses\n * {@link DEFAULT_CONSTRAINTS}.\n */\nconst OLD_GUM_DEFAULT_RESOLUTION = 720;\n\n/**\n * Default devices to obtain when no specific devices are specified. This\n * default is used for old gum flow only.\n */\nconst OLD_GUM_DEFAULT_DEVICES = [ 'audio', 'video' ];\n\n/**\n * Default MediaStreamConstraints to use for calls to getUserMedia.\n *\n * @private\n */\nconst DEFAULT_CONSTRAINTS = {\n    video: {\n        aspectRatio: 16 / 9,\n        height: {\n            ideal: 720,\n            max: 720,\n            min: 240\n        }\n    }\n};\n\n/**\n * The default frame rate for Screen Sharing.\n */\nconst SS_DEFAULT_FRAME_RATE = 5;\n\n// Currently audio output device change is supported only in Chrome and\n// default output always has 'default' device ID\nlet audioOutputDeviceId = 'default'; // default device\n// whether user has explicitly set a device to use\nlet audioOutputChanged = false;\n\n// Disables all audio processing\nlet disableAP = false;\n\n// Disables Acoustic Echo Cancellation\nlet disableAEC = false;\n\n// Disables Noise Suppression\nlet disableNS = false;\n\n// Disables Automatic Gain Control\nlet disableAGC = false;\n\n// Disables Highpass Filter\nlet disableHPF = false;\n\nconst featureDetectionAudioEl = document.createElement('audio');\nconst isAudioOutputDeviceChangeAvailable\n    = typeof featureDetectionAudioEl.setSinkId !== 'undefined';\n\nlet availableDevices;\nlet availableDevicesPollTimer;\n\n/**\n * Initialize wrapper function for enumerating devices.\n * TODO: remove this, it should no longer be needed.\n *\n * @returns {?Function}\n */\nfunction initEnumerateDevicesWithCallback() {\n    if (navigator.mediaDevices && navigator.mediaDevices.enumerateDevices) {\n        return callback => {\n            navigator.mediaDevices.enumerateDevices()\n                .then(callback, () => callback([]));\n        };\n    }\n}\n\n/**\n *\n * @param constraints\n * @param isNewStyleConstraintsSupported\n * @param resolution\n */\nfunction setResolutionConstraints(\n        constraints,\n        isNewStyleConstraintsSupported,\n        resolution) {\n    if (Resolutions[resolution]) {\n        if (isNewStyleConstraintsSupported) {\n            constraints.video.width = {\n                ideal: Resolutions[resolution].width\n            };\n            constraints.video.height = {\n                ideal: Resolutions[resolution].height\n            };\n        }\n\n        constraints.video.mandatory.minWidth = Resolutions[resolution].width;\n        constraints.video.mandatory.minHeight = Resolutions[resolution].height;\n    }\n\n    if (constraints.video.mandatory.minWidth) {\n        constraints.video.mandatory.maxWidth\n            = constraints.video.mandatory.minWidth;\n    }\n\n    if (constraints.video.mandatory.minHeight) {\n        constraints.video.mandatory.maxHeight\n            = constraints.video.mandatory.minHeight;\n    }\n}\n\n/**\n * @param {string[]} um required user media types\n *\n * @param {Object} [options={}] optional parameters\n * @param {string} options.resolution\n * @param {number} options.bandwidth\n * @param {number} options.fps\n * @param {string} options.desktopStream\n * @param {string} options.cameraDeviceId\n * @param {string} options.micDeviceId\n * @param {CameraFacingMode} options.facingMode\n * @param {bool} firefox_fake_device\n * @param {Object} options.frameRate - used only for dekstop sharing.\n * @param {Object} options.frameRate.min - Minimum fps\n * @param {Object} options.frameRate.max - Maximum fps\n */\nfunction getConstraints(um, options = {}) {\n    const constraints = {\n        audio: false,\n        video: false\n    };\n\n    // Don't mix new and old style settings for Chromium as this leads\n    // to TypeError in new Chromium versions. @see\n    // https://bugs.chromium.org/p/chromium/issues/detail?id=614716\n    // This is a temporary solution, in future we will fully split old and\n    // new style constraints when new versions of Chromium and Firefox will\n    // have stable support of new constraints format. For more information\n    // @see https://github.com/jitsi/lib-jitsi-meet/pull/136\n    const isNewStyleConstraintsSupported\n        = browser.isFirefox()\n            || browser.isSafariWithVP8()\n            || browser.isEdge()\n            || browser.isReactNative();\n\n    if (um.indexOf('video') >= 0) {\n        // same behaviour as true\n        constraints.video = { mandatory: {},\n            optional: [] };\n\n        if (options.cameraDeviceId) {\n            if (isNewStyleConstraintsSupported) {\n                // New style of setting device id.\n                constraints.video.deviceId = options.cameraDeviceId;\n            }\n\n            // Old style.\n            constraints.video.mandatory.sourceId = options.cameraDeviceId;\n        } else {\n            // Prefer the front i.e. user-facing camera (to the back i.e.\n            // environment-facing camera, for example).\n            // TODO: Maybe use \"exact\" syntax if options.facingMode is defined,\n            // but this probably needs to be decided when updating other\n            // constraints, as we currently don't use \"exact\" syntax anywhere.\n            const facingMode = options.facingMode || CameraFacingMode.USER;\n\n            if (isNewStyleConstraintsSupported) {\n                constraints.video.facingMode = facingMode;\n            }\n            constraints.video.optional.push({\n                facingMode\n            });\n        }\n\n        if (options.minFps || options.maxFps || options.fps) {\n            // for some cameras it might be necessary to request 30fps\n            // so they choose 30fps mjpg over 10fps yuy2\n            if (options.minFps || options.fps) {\n                // Fall back to options.fps for backwards compatibility\n                options.minFps = options.minFps || options.fps;\n                constraints.video.mandatory.minFrameRate = options.minFps;\n            }\n            if (options.maxFps) {\n                constraints.video.mandatory.maxFrameRate = options.maxFps;\n            }\n        }\n\n        setResolutionConstraints(\n            constraints, isNewStyleConstraintsSupported, options.resolution);\n    }\n    if (um.indexOf('audio') >= 0) {\n        if (browser.isReactNative()) {\n            // The react-native-webrtc project that we're currently using\n            // expects the audio constraint to be a boolean.\n            constraints.audio = true;\n        } else if (browser.isFirefox()) {\n            if (options.micDeviceId) {\n                constraints.audio = {\n                    mandatory: {},\n                    deviceId: options.micDeviceId, // new style\n                    optional: [ {\n                        sourceId: options.micDeviceId // old style\n                    } ] };\n            } else {\n                constraints.audio = true;\n            }\n        } else {\n            // same behaviour as true\n            constraints.audio = { mandatory: {},\n                optional: [] };\n            if (options.micDeviceId) {\n                if (isNewStyleConstraintsSupported) {\n                    // New style of setting device id.\n                    constraints.audio.deviceId = options.micDeviceId;\n                }\n\n                // Old style.\n                constraints.audio.optional.push({\n                    sourceId: options.micDeviceId\n                });\n            }\n\n            // if it is good enough for hangouts...\n            constraints.audio.optional.push(\n                { echoCancellation: !disableAEC && !disableAP },\n                { googEchoCancellation: !disableAEC && !disableAP },\n                { googAutoGainControl: !disableAGC && !disableAP },\n                { googNoiseSuppression: !disableNS && !disableAP },\n                { googHighpassFilter: !disableHPF && !disableAP },\n                { googNoiseSuppression2: !disableNS && !disableAP },\n                { googEchoCancellation2: !disableAEC && !disableAP },\n                { googAutoGainControl2: !disableAGC && !disableAP }\n            );\n        }\n    }\n    if (um.indexOf('screen') >= 0) {\n        if (browser.isChrome()) {\n            constraints.video = {\n                mandatory: getSSConstraints({\n                    ...options,\n                    source: 'screen'\n                }),\n                optional: []\n            };\n\n        } else if (browser.isFirefox()) {\n            constraints.video = {\n                mozMediaSource: 'window',\n                mediaSource: 'window',\n                frameRate: options.frameRate || {\n                    min: SS_DEFAULT_FRAME_RATE,\n                    max: SS_DEFAULT_FRAME_RATE\n                }\n            };\n\n        } else {\n            const errmsg\n                = '\\'screen\\' WebRTC media source is supported only in Chrome'\n                    + ' and Firefox';\n\n            GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\n            logger.error(errmsg);\n        }\n    }\n    if (um.indexOf('desktop') >= 0) {\n        constraints.video = {\n            mandatory: getSSConstraints({\n                ...options,\n                source: 'desktop'\n            }),\n            optional: []\n        };\n    }\n\n    if (options.bandwidth) {\n        if (!constraints.video) {\n            // same behaviour as true\n            constraints.video = { mandatory: {},\n                optional: [] };\n        }\n        constraints.video.optional.push({ bandwidth: options.bandwidth });\n    }\n\n    // we turn audio for both audio and video tracks, the fake audio & video\n    // seems to work only when enabled in one getUserMedia call, we cannot get\n    // fake audio separate by fake video this later can be a problem with some\n    // of the tests\n    if (browser.isFirefox() && options.firefox_fake_device) {\n        // seems to be fixed now, removing this experimental fix, as having\n        // multiple audio tracks brake the tests\n        // constraints.audio = true;\n        constraints.fake = true;\n    }\n\n    return constraints;\n}\n\n/**\n * Creates a constraints object to be passed into a call to getUserMedia.\n *\n * @param {Array} um - An array of user media types to get. The accepted\n * types are \"video\", \"audio\", and \"desktop.\"\n * @param {Object} options - Various values to be added to the constraints.\n * @param {string} options.cameraDeviceId - The device id for the video\n * capture device to get video from.\n * @param {Object} options.constraints - Default constraints object to use\n * as a base for the returned constraints.\n * @param {Object} options.desktopStream - The desktop source id from which\n * to capture a desktop sharing video.\n * @param {string} options.facingMode - Which direction the camera is\n * pointing to.\n * @param {string} options.micDeviceId - The device id for the audio capture\n * device to get audio from.\n * @param {Object} options.frameRate - used only for dekstop sharing.\n * @param {Object} options.frameRate.min - Minimum fps\n * @param {Object} options.frameRate.max - Maximum fps\n * @private\n * @returns {Object}\n */\nfunction newGetConstraints(um = [], options = {}) {\n    // Create a deep copy of the constraints to avoid any modification of\n    // the passed in constraints object.\n    const constraints = JSON.parse(JSON.stringify(\n        options.constraints || DEFAULT_CONSTRAINTS));\n\n    if (um.indexOf('video') >= 0) {\n        if (!constraints.video) {\n            constraints.video = {};\n        }\n\n        if (options.cameraDeviceId) {\n            constraints.video.deviceId = options.cameraDeviceId;\n        } else {\n            const facingMode = options.facingMode || CameraFacingMode.USER;\n\n            constraints.video.facingMode = facingMode;\n        }\n    } else {\n        constraints.video = false;\n    }\n\n    if (um.indexOf('audio') >= 0) {\n        if (!constraints.audio || typeof constraints.audio === 'boolean') {\n            constraints.audio = {};\n        }\n\n        // NOTE(brian): the new-style ('advanced' instead of 'optional')\n        // doesn't seem to carry through the googXXX constraints\n        // Changing back to 'optional' here (even with video using\n        // the 'advanced' style) allows them to be passed through\n        // but also requires the device id to capture to be set in optional\n        // as sourceId otherwise the constraints are considered malformed.\n        if (!constraints.audio.optional) {\n            constraints.audio.optional = [];\n        }\n\n        constraints.audio.optional.push(\n            { sourceId: options.micDeviceId },\n            { echoCancellation: !disableAEC && !disableAP },\n            { googEchoCancellation: !disableAEC && !disableAP },\n            { googAutoGainControl: !disableAGC && !disableAP },\n            { googNoiseSuppression: !disableNS && !disableAP },\n            { googHighpassFilter: !disableHPF && !disableAP },\n            { googNoiseSuppression2: !disableNS && !disableAP },\n            { googEchoCancellation2: !disableAEC && !disableAP },\n            { googAutoGainControl2: !disableAGC && !disableAP }\n        );\n    } else {\n        constraints.audio = false;\n    }\n\n    if (um.indexOf('desktop') >= 0) {\n        if (!constraints.video || typeof constraints.video === 'boolean') {\n            constraints.video = {};\n        }\n\n        constraints.video = {\n            mandatory: getSSConstraints({\n                ...options,\n                source: 'desktop'\n            })\n        };\n    }\n\n    return constraints;\n}\n\n/**\n * Generates GUM constraints for screen sharing.\n *\n * @param {Object} options - The options passed to\n * <tt>obtainAudioAndVideoPermissions</tt>.\n * @returns {Object} - GUM constraints.\n *\n * TODO: Currently only the new GUM flow and Chrome is using the method. We\n * should make it work for all use cases.\n */\nfunction getSSConstraints(options = {}) {\n    const {\n        desktopStream,\n        frameRate = {\n            min: SS_DEFAULT_FRAME_RATE,\n            max: SS_DEFAULT_FRAME_RATE\n        }\n    } = options;\n    const { max, min } = frameRate;\n\n    const constraints = {\n        chromeMediaSource: options.source,\n        maxWidth: window.screen.width,\n        maxHeight: window.screen.height\n    };\n\n    if (typeof min === 'number') {\n        constraints.minFrameRate = min;\n    }\n\n    if (typeof max === 'number') {\n        constraints.maxFrameRate = max;\n    }\n\n    if (typeof desktopStream !== 'undefined') {\n        constraints.chromeMediaSourceId = desktopStream;\n    }\n\n    return constraints;\n}\n\n/**\n * Generates constraints for screen sharing when using getDisplayMedia.\n * The constraints(MediaTrackConstraints) are applied to the resulting track.\n *\n * @returns {Object} - MediaTrackConstraints constraints.\n */\nfunction getTrackSSConstraints(options = {}) {\n    // we used to set height and width in the constraints, but this can lead\n    // to inconsistencies if the browser is on a lower resolution screen\n    // and we share a screen with bigger resolution, so they are now not set\n    const constraints = {\n        frameRate: SS_DEFAULT_FRAME_RATE\n    };\n    const { desktopSharingFrameRate } = options;\n\n    if (desktopSharingFrameRate && desktopSharingFrameRate.max) {\n        constraints.frameRate = desktopSharingFrameRate.max;\n    }\n\n    return constraints;\n}\n\n/**\n * Updates the granted permissions based on the options we requested and the\n * streams we received.\n * @param um the options we requested to getUserMedia.\n * @param stream the stream we received from calling getUserMedia.\n */\nfunction updateGrantedPermissions(um, stream) {\n    const audioTracksReceived\n        = Boolean(stream) && stream.getAudioTracks().length > 0;\n    const videoTracksReceived\n        = Boolean(stream) && stream.getVideoTracks().length > 0;\n    const grantedPermissions = {};\n\n    if (um.indexOf('video') !== -1) {\n        grantedPermissions.video = videoTracksReceived;\n    }\n    if (um.indexOf('audio') !== -1) {\n        grantedPermissions.audio = audioTracksReceived;\n    }\n\n    eventEmitter.emit(RTCEvents.GRANTED_PERMISSIONS, grantedPermissions);\n}\n\n/**\n * Checks if new list of available media devices differs from previous one.\n * @param {MediaDeviceInfo[]} newDevices - list of new devices.\n * @returns {boolean} - true if list is different, false otherwise.\n */\nfunction compareAvailableMediaDevices(newDevices) {\n    if (newDevices.length !== availableDevices.length) {\n        return true;\n    }\n\n    /* eslint-disable newline-per-chained-call */\n\n    return (\n        newDevices.map(mediaDeviceInfoToJSON).sort().join('')\n            !== availableDevices\n                .map(mediaDeviceInfoToJSON).sort().join(''));\n\n    /* eslint-enable newline-per-chained-call */\n\n    /**\n     *\n     * @param info\n     */\n    function mediaDeviceInfoToJSON(info) {\n        return JSON.stringify({\n            kind: info.kind,\n            deviceId: info.deviceId,\n            groupId: info.groupId,\n            label: info.label,\n            facing: info.facing\n        });\n    }\n}\n\n/**\n * Sends analytics event with the passed device list.\n *\n * @param {Array<MediaDeviceInfo>} deviceList - List with info about the\n * available devices.\n * @returns {void}\n */\nfunction sendDeviceListToAnalytics(deviceList) {\n    const audioInputDeviceCount\n        = deviceList.filter(d => d.kind === 'audioinput').length;\n    const audioOutputDeviceCount\n        = deviceList.filter(d => d.kind === 'audiooutput').length;\n    const videoInputDeviceCount\n        = deviceList.filter(d => d.kind === 'videoinput').length;\n    const videoOutputDeviceCount\n        = deviceList.filter(d => d.kind === 'videooutput').length;\n\n    deviceList.forEach(device => {\n        const attributes = {\n            'audio_input_device_count': audioInputDeviceCount,\n            'audio_output_device_count': audioOutputDeviceCount,\n            'video_input_device_count': videoInputDeviceCount,\n            'video_output_device_count': videoOutputDeviceCount,\n            'device_id': device.deviceId,\n            'device_group_id': device.groupId,\n            'device_kind': device.kind,\n            'device_label': device.label\n        };\n\n        Statistics.sendAnalytics(AVAILABLE_DEVICE, attributes);\n    });\n}\n\n/**\n * Event handler for the 'devicechange' event.\n *\n * @param {MediaDeviceInfo[]} devices - list of media devices.\n * @emits RTCEvents.DEVICE_LIST_CHANGED\n */\nfunction onMediaDevicesListChanged(devicesReceived) {\n    availableDevices = devicesReceived.slice(0);\n    logger.info(\n        'list of media devices has changed:',\n        availableDevices);\n\n    sendDeviceListToAnalytics(availableDevices);\n\n    // Used by tracks to update the real device id before the consumer of lib-jitsi-meet receives the new device list.\n    eventEmitter.emit(RTCEvents.DEVICE_LIST_WILL_CHANGE, devicesReceived);\n\n    eventEmitter.emit(RTCEvents.DEVICE_LIST_CHANGED, devicesReceived);\n}\n\n/**\n * Handles the newly created Media Streams.\n * @param streams the new Media Streams\n * @param resolution the resolution of the video streams\n * @returns {*[]} object that describes the new streams\n */\nfunction handleLocalStream(streams, resolution) {\n    let audioStream, desktopStream, videoStream;\n    const res = [];\n\n    // XXX The function obtainAudioAndVideoPermissions has examined the type of\n    // the browser, its capabilities, etc. and has taken the decision whether to\n    // invoke getUserMedia per device (e.g. Firefox) or once for both audio and\n    // video (e.g. Chrome). In order to not duplicate the logic here, examine\n    // the specified streams and figure out what we've received based on\n    // obtainAudioAndVideoPermissions' decision.\n    if (streams) {\n        // As mentioned above, certian types of browser (e.g. Chrome) support\n        // (with a result which meets our requirements expressed bellow) calling\n        // getUserMedia once for both audio and video.\n        const audioVideo = streams.audioVideo;\n\n        if (audioVideo) {\n            const audioTracks = audioVideo.getAudioTracks();\n\n            if (audioTracks.length) {\n                audioStream = new MediaStream();\n                for (let i = 0; i < audioTracks.length; i++) {\n                    audioStream.addTrack(audioTracks[i]);\n                }\n            }\n\n            const videoTracks = audioVideo.getVideoTracks();\n\n            if (videoTracks.length) {\n                videoStream = new MediaStream();\n                for (let j = 0; j < videoTracks.length; j++) {\n                    videoStream.addTrack(videoTracks[j]);\n                }\n            }\n        } else {\n            // On other types of browser (e.g. Firefox) we choose (namely,\n            // obtainAudioAndVideoPermissions) to call getUserMedia per device\n            // (type).\n            audioStream = streams.audio;\n            videoStream = streams.video;\n        }\n\n        desktopStream = streams.desktop;\n    }\n\n    if (desktopStream) {\n        const { stream, sourceId, sourceType } = desktopStream;\n\n        res.push({\n            stream,\n            sourceId,\n            sourceType,\n            track: stream.getVideoTracks()[0],\n            mediaType: MediaType.VIDEO,\n            videoType: VideoType.DESKTOP\n        });\n    }\n    if (audioStream) {\n        res.push({\n            stream: audioStream,\n            track: audioStream.getAudioTracks()[0],\n            mediaType: MediaType.AUDIO,\n            videoType: null\n        });\n    }\n    if (videoStream) {\n        res.push({\n            stream: videoStream,\n            track: videoStream.getVideoTracks()[0],\n            mediaType: MediaType.VIDEO,\n            videoType: VideoType.CAMERA,\n            resolution\n        });\n    }\n\n    return res;\n}\n\n/**\n * Represents a default implementation of setting a <tt>MediaStream</tt> as the\n * source of a video element that tries to be browser-agnostic through feature\n * checking. Note though that it was not completely clear from the predating\n * browser-specific implementations what &quot;videoSrc&quot; was because one\n * implementation of {@link RTCUtils#getVideoSrc} would return\n * <tt>MediaStream</tt> (e.g. Firefox), another a <tt>string</tt> representation\n * of the <tt>URL</tt> of the <tt>MediaStream</tt> (e.g. Chrome) and the return\n * value was only used by {@link RTCUIHelper#getVideoId} which itself did not\n * appear to be used anywhere. Generally, the implementation will try to follow\n * the related standards i.e. work with the <tt>srcObject</tt> and <tt>src</tt>\n * properties of the specified <tt>element</tt> taking into account vender\n * prefixes.\n *\n * @param element the element whose video source/src is to be set to the\n * specified <tt>stream</tt>\n * @param {MediaStream} stream the <tt>MediaStream</tt> to set as the video\n * source/src of <tt>element</tt>\n */\nfunction defaultSetVideoSrc(element, stream) {\n    // srcObject\n    let srcObjectPropertyName = 'srcObject';\n\n    if (!(srcObjectPropertyName in element)) {\n        srcObjectPropertyName = 'mozSrcObject';\n        if (!(srcObjectPropertyName in element)) {\n            srcObjectPropertyName = null;\n        }\n    }\n    if (srcObjectPropertyName) {\n        element[srcObjectPropertyName] = stream;\n\n        return;\n    }\n\n    // src\n    let src;\n\n    if (stream) {\n        src = stream.jitsiObjectURL;\n\n        // Save the created URL for stream so we can reuse it and not keep\n        // creating URLs.\n        if (!src) {\n            stream.jitsiObjectURL = src = URL.createObjectURL(stream);\n        }\n    }\n    element.src = src || '';\n}\n\n/**\n *\n */\nclass RTCUtils extends Listenable {\n    /**\n     *\n     */\n    constructor() {\n        super(eventEmitter);\n    }\n\n    /**\n     * Depending on the browser, sets difference instance methods for\n     * interacting with user media and adds methods to native WebRTC-related\n     * objects. Also creates an instance variable for peer connection\n     * constraints.\n     *\n     * @param {Object} options\n     * @returns {void}\n     */\n    init(options = {}) {\n        if (typeof options.disableAEC === 'boolean') {\n            disableAEC = options.disableAEC;\n            logger.info(`Disable AEC: ${disableAEC}`);\n        }\n        if (typeof options.disableNS === 'boolean') {\n            disableNS = options.disableNS;\n            logger.info(`Disable NS: ${disableNS}`);\n        }\n        if (typeof options.disableAP === 'boolean') {\n            disableAP = options.disableAP;\n            logger.info(`Disable AP: ${disableAP}`);\n        }\n        if (typeof options.disableAGC === 'boolean') {\n            disableAGC = options.disableAGC;\n            logger.info(`Disable AGC: ${disableAGC}`);\n        }\n        if (typeof options.disableHPF === 'boolean') {\n            disableHPF = options.disableHPF;\n            logger.info(`Disable HPF: ${disableHPF}`);\n        }\n\n        availableDevices = undefined;\n        window.clearInterval(availableDevicesPollTimer);\n        availableDevicesPollTimer = undefined;\n\n        this.enumerateDevices = initEnumerateDevicesWithCallback();\n\n        if (browser.usesNewGumFlow()) {\n            this.RTCPeerConnectionType = RTCPeerConnection;\n\n            this.attachMediaStream\n                = wrapAttachMediaStream((element, stream) => {\n                    if (element) {\n                        element.srcObject = stream;\n                    }\n                });\n\n            this.getStreamID = ({ id }) => id;\n            this.getTrackID = ({ id }) => id;\n        } else if (browser.isChromiumBased() // this is chrome < 61\n                || browser.isReactNative()) {\n\n            this.RTCPeerConnectionType = RTCPeerConnection;\n\n            this.attachMediaStream\n                = wrapAttachMediaStream((element, stream) => {\n                    defaultSetVideoSrc(element, stream);\n\n                    return element;\n                });\n\n            this.getStreamID = function({ id }) {\n                // A. MediaStreams from FF endpoints have the characters '{' and\n                // '}' that make jQuery choke.\n                // B. The react-native-webrtc implementation that we use at the\n                // time of this writing returns a number for the id of\n                // MediaStream. Let's just say that a number contains no special\n                // characters.\n                return (\n                    typeof id === 'number'\n                        ? id\n                        : SDPUtil.filterSpecialChars(id));\n            };\n            this.getTrackID = ({ id }) => id;\n\n            if (!MediaStream.prototype.getVideoTracks) {\n                MediaStream.prototype.getVideoTracks = function() {\n                    return this.videoTracks;\n                };\n            }\n            if (!MediaStream.prototype.getAudioTracks) {\n                MediaStream.prototype.getAudioTracks = function() {\n                    return this.audioTracks;\n                };\n            }\n        } else {\n            const message = 'Endpoint does not appear to be WebRTC-capable';\n\n            logger.error(message);\n            throw new Error(message);\n        }\n\n        this._initPCConstraints(options);\n\n        screenObtainer.init(\n            options,\n            this.getUserMediaWithConstraints.bind(this));\n\n        if (this.isDeviceListAvailable()) {\n            this.enumerateDevices(ds => {\n                availableDevices = ds.splice(0);\n\n                logger.debug('Available devices: ', availableDevices);\n                sendDeviceListToAnalytics(availableDevices);\n\n                eventEmitter.emit(\n                    RTCEvents.DEVICE_LIST_AVAILABLE,\n                    availableDevices);\n\n\n                // Use a shared callback to handle both the devicechange event\n                // and the polling implementations. This prevents duplication\n                // and works around a chrome bug (verified to occur on 68) where\n                // devicechange fires twice in a row, which can cause async post\n                // devicechange processing to collide.\n                const updateKnownDevices = () => this.enumerateDevices(pds => {\n                    if (compareAvailableMediaDevices(pds)) {\n                        onMediaDevicesListChanged(pds);\n                    }\n                });\n\n                if (browser.supportsDeviceChangeEvent()) {\n                    navigator.mediaDevices.addEventListener(\n                        'devicechange',\n                        updateKnownDevices);\n                } else {\n                    // Periodically poll enumerateDevices() method to check if\n                    // list of media devices has changed.\n                    availableDevicesPollTimer = window.setInterval(\n                        updateKnownDevices,\n                        AVAILABLE_DEVICES_POLL_INTERVAL_TIME);\n                }\n            });\n        }\n    }\n\n    /**\n     * Creates instance objects for peer connection constraints both for p2p\n     * and outside of p2p.\n     *\n     * @params {Object} options - Configuration for setting RTCUtil's instance\n     * objects for peer connection constraints.\n     * @params {boolean} options.useIPv6 - Set to true if IPv6 should be used.\n     * @params {Object} options.testing - Additional configuration for work in\n     * development.\n     * @params {Object} options.testing.forceP2PSuspendVideoRatio - True if\n     * video should become suspended if bandwidth estimation becomes low while\n     * in peer to peer connection mode.\n     */\n    _initPCConstraints(options) {\n        if (browser.isFirefox()) {\n            this.pcConstraints = {};\n        } else if (browser.isChromiumBased() || browser.isReactNative()) {\n            this.pcConstraints = { optional: [\n                { googHighStartBitrate: 0 },\n                { googPayloadPadding: true },\n                { googScreencastMinBitrate: 100 },\n                { googCpuOveruseDetection: true },\n                { googCpuOveruseEncodeUsage: true },\n                { googCpuUnderuseThreshold: 55 },\n                { googCpuOveruseThreshold: 85 }\n            ] };\n\n            if (options.useIPv6) {\n                // https://code.google.com/p/webrtc/issues/detail?id=2828\n                this.pcConstraints.optional.push({ googIPv6: true });\n            }\n\n            this.p2pPcConstraints\n                = JSON.parse(JSON.stringify(this.pcConstraints));\n        }\n\n        this.p2pPcConstraints = this.p2pPcConstraints || this.pcConstraints;\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n    * @param {string[]} um required user media types\n    * @param {Object} [options] optional parameters\n    * @param {string} options.resolution\n    * @param {number} options.bandwidth\n    * @param {number} options.fps\n    * @param {string} options.desktopStream\n    * @param {string} options.cameraDeviceId\n    * @param {string} options.micDeviceId\n    * @param {Object} options.frameRate - used only for dekstop sharing.\n    * @param {Object} options.frameRate.min - Minimum fps\n    * @param {Object} options.frameRate.max - Maximum fps\n    * @returns {Promise} Returns a media stream on success or a JitsiTrackError\n    * on failure.\n    **/\n    getUserMediaWithConstraints(um, options = {}) {\n        const constraints = getConstraints(um, options);\n\n        logger.info('Get media constraints', constraints);\n\n        return new Promise((resolve, reject) => {\n            navigator.mediaDevices.getUserMedia(constraints)\n                .then(stream => {\n                    logger.log('onUserMediaSuccess');\n                    updateGrantedPermissions(um, stream);\n                    resolve(stream);\n                })\n                .catch(error => {\n                    logger.warn('Failed to get access to local media. '\n                        + ` ${error} ${constraints} `);\n                    updateGrantedPermissions(um, undefined);\n                    reject(new JitsiTrackError(error, constraints, um));\n                });\n        });\n    }\n\n    /**\n     * Acquires a media stream via getUserMedia that\n     * matches the given constraints\n     *\n     * @param {array} umDevices which devices to acquire (e.g. audio, video)\n     * @param {Object} constraints - Stream specifications to use.\n     * @returns {Promise}\n     */\n    _newGetUserMediaWithConstraints(umDevices, constraints = {}) {\n        return new Promise((resolve, reject) => {\n            navigator.mediaDevices.getUserMedia(constraints)\n                .then(stream => {\n                    logger.log('onUserMediaSuccess');\n                    updateGrantedPermissions(umDevices, stream);\n                    resolve(stream);\n                })\n                .catch(error => {\n                    logger.warn('Failed to get access to local media. '\n                        + ` ${error} ${constraints} `);\n                    updateGrantedPermissions(umDevices, undefined);\n                    reject(new JitsiTrackError(error, constraints, umDevices));\n                });\n        });\n    }\n\n    /**\n     * Acquire a display stream via the screenObtainer. This requires extra\n     * logic compared to use screenObtainer versus normal device capture logic\n     * in RTCUtils#_newGetUserMediaWithConstraints.\n     *\n     * @param {Object} options\n     * @param {Object} options.desktopSharingExtensionExternalInstallation\n     * @param {string[]} options.desktopSharingSources\n     * @param {Object} options.desktopSharingFrameRate\n     * @param {Object} options.desktopSharingFrameRate.min - Minimum fps\n     * @param {Object} options.desktopSharingFrameRate.max - Maximum fps\n     * @returns {Promise} A promise which will be resolved with an object which\n     * contains the acquired display stream. If desktop sharing is not supported\n     * then a rejected promise will be returned.\n     */\n    _newGetDesktopMedia(options) {\n        if (!screenObtainer.isSupported() || !browser.supportsVideo()) {\n            return Promise.reject(\n                new Error('Desktop sharing is not supported!'));\n        }\n\n        return new Promise((resolve, reject) => {\n            screenObtainer.obtainStream(\n                this._parseDesktopSharingOptions(options),\n                stream => {\n                    resolve(stream);\n                },\n                error => {\n                    reject(error);\n                });\n        });\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Creates the local MediaStreams.\n     * @param {Object} [options] optional parameters\n     * @param {Array} options.devices the devices that will be requested\n     * @param {string} options.resolution resolution constraints\n     * @param {string} options.cameraDeviceId\n     * @param {string} options.micDeviceId\n     * @param {Object} options.desktopSharingFrameRate\n     * @param {Object} options.desktopSharingFrameRate.min - Minimum fps\n     * @param {Object} options.desktopSharingFrameRate.max - Maximum fps\n     * @returns {*} Promise object that will receive the new JitsiTracks\n     */\n    obtainAudioAndVideoPermissions(options = {}) {\n        options.devices = options.devices || [ ...OLD_GUM_DEFAULT_DEVICES ];\n        options.resolution = options.resolution || OLD_GUM_DEFAULT_RESOLUTION;\n\n        const requestingDesktop = options.devices.includes('desktop');\n\n        if (requestingDesktop && !screenObtainer.isSupported()) {\n            return Promise.reject(\n                new Error('Desktop sharing is not supported!'));\n        }\n\n        return this._getAudioAndVideoStreams(options).then(streams =>\n            handleLocalStream(streams, options.resolution));\n    }\n\n    /**\n     * Performs one call to getUserMedia for audio and/or video and another call\n     * for desktop.\n     *\n     * @param {Object} options - An object describing how the gUM request should\n     * be executed. See {@link obtainAudioAndVideoPermissions} for full options.\n     * @returns {*} Promise object that will receive the new JitsiTracks on\n     * success or a JitsiTrackError on failure.\n     */\n    _getAudioAndVideoStreams(options) {\n        const requestingDesktop = options.devices.includes('desktop');\n\n        options.devices = options.devices.filter(device =>\n            device !== 'desktop');\n\n        const gumPromise = options.devices.length\n            ? this.getUserMediaWithConstraints(options.devices, options)\n            : Promise.resolve(null);\n\n        return gumPromise\n            .then(avStream => {\n                // If any requested devices are missing, call gum again in\n                // an attempt to obtain the actual error. For example, the\n                // requested video device is missing or permission was\n                // denied.\n                const missingTracks\n                    = this._getMissingTracks(options.devices, avStream);\n\n                if (missingTracks.length) {\n                    this.stopMediaStream(avStream);\n\n                    return this.getUserMediaWithConstraints(\n                        missingTracks, options)\n\n                        // GUM has already failed earlier and this success\n                        // handling should not be reached.\n                        .then(() => Promise.reject(new JitsiTrackError(\n                            { name: 'UnknownError' },\n                            getConstraints(options.devices, options),\n                            missingTracks)));\n                }\n\n                return avStream;\n            })\n            .then(audioVideo => {\n                if (!requestingDesktop) {\n                    return { audioVideo };\n                }\n\n                if (options.desktopSharingSourceDevice) {\n                    this.stopMediaStream(audioVideo);\n\n                    throw new Error('Using a camera as screenshare source is'\n                        + 'not supported on this browser.');\n                }\n\n                return new Promise((resolve, reject) => {\n                    screenObtainer.obtainStream(\n                        this._parseDesktopSharingOptions(options),\n                        desktop => resolve({\n                            audioVideo,\n                            desktop\n                        }),\n                        error => {\n                            if (audioVideo) {\n                                this.stopMediaStream(audioVideo);\n                            }\n                            reject(error);\n                        });\n                });\n            });\n    }\n\n    /**\n     * Private utility for determining if the passed in MediaStream contains\n     * tracks of the type(s) specified in the requested devices.\n     *\n     * @param {string[]} requestedDevices - The track types that are expected to\n     * be includes in the stream.\n     * @param {MediaStream} stream - The MediaStream to check if it has the\n     * expected track types.\n     * @returns {string[]} An array of string with the missing track types. The\n     * array will be empty if all requestedDevices are found in the stream.\n     */\n    _getMissingTracks(requestedDevices = [], stream) {\n        const missingDevices = [];\n\n        const audioDeviceRequested = requestedDevices.includes('audio');\n        const audioTracksReceived\n            = stream && stream.getAudioTracks().length > 0;\n\n        if (audioDeviceRequested && !audioTracksReceived) {\n            missingDevices.push('audio');\n        }\n\n        const videoDeviceRequested = requestedDevices.includes('video');\n        const videoTracksReceived\n            = stream && stream.getVideoTracks().length > 0;\n\n        if (videoDeviceRequested && !videoTracksReceived) {\n            missingDevices.push('video');\n        }\n\n        return missingDevices;\n    }\n\n    /**\n     * Returns an object formatted for specifying desktop sharing parameters.\n     *\n     * @param {Object} options - Takes in the same options object as\n     * {@link obtainAudioAndVideoPermissions}.\n     * @returns {Object}\n     */\n    _parseDesktopSharingOptions(options) {\n        return {\n            ...options.desktopSharingExtensionExternalInstallation,\n            desktopSharingSources: options.desktopSharingSources,\n            gumOptions: {\n                frameRate: options.desktopSharingFrameRate\n            },\n            trackOptions: getTrackSSConstraints(options)\n        };\n    }\n\n    /**\n     * Gets streams from specified device types. This function intentionally\n     * ignores errors for upstream to catch and handle instead.\n     *\n     * @param {Object} options - A hash describing what devices to get and\n     * relevant constraints.\n     * @param {string[]} options.devices - The types of media to capture. Valid\n     * values are \"desktop\", \"audio\", and \"video\".\n     * @param {Object} options.desktopSharingFrameRate\n     * @param {Object} options.desktopSharingFrameRate.min - Minimum fps\n     * @param {Object} options.desktopSharingFrameRate.max - Maximum fps\n     * @param {String} options.desktopSharingSourceDevice - The device id or\n     * label for a video input source that should be used for screensharing.\n     * @returns {Promise} The promise, when successful, will return an array of\n     * meta data for the requested device type, which includes the stream and\n     * track. If an error occurs, it will be deferred to the caller for\n     * handling.\n     */\n    newObtainAudioAndVideoPermissions(options) {\n        logger.info('Using the new gUM flow');\n\n        const mediaStreamsMetaData = [];\n\n        // Declare private functions to be used in the promise chain below.\n        // These functions are declared in the scope of this function because\n        // they are not being used anywhere else, so only this function needs to\n        // know about them.\n\n        /**\n         * Executes a request for desktop media if specified in options.\n         *\n         * @returns {Promise}\n         */\n        const maybeRequestDesktopDevice = function() {\n            const umDevices = options.devices || [];\n            const isDesktopDeviceRequested\n                = umDevices.indexOf('desktop') !== -1;\n\n            if (!isDesktopDeviceRequested) {\n                return Promise.resolve();\n            }\n\n            const {\n                desktopSharingExtensionExternalInstallation,\n                desktopSharingSourceDevice,\n                desktopSharingSources,\n                desktopSharingFrameRate\n            } = options;\n\n            // Attempt to use a video input device as a screenshare source if\n            // the option is defined.\n            if (desktopSharingSourceDevice) {\n                const matchingDevice\n                    = availableDevices && availableDevices.find(device =>\n                        device.kind === 'videoinput'\n                            && (device.deviceId === desktopSharingSourceDevice\n                            || device.label === desktopSharingSourceDevice));\n                const requestedDevices = [ 'video' ];\n\n                // Leverage the helper used by {@link _newGetDesktopMedia} to\n                // get constraints for the desktop stream.\n                const { gumOptions, trackOptions }\n                    = this._parseDesktopSharingOptions(options);\n\n                // Create a custom constraints object to use exact device\n                // matching to make sure there is no fallthrough to another\n                // camera device. If a matching device could not be found, try\n                // anyways and let the caller handle errors.\n                const constraints = {\n                    video: {\n                        ...gumOptions,\n                        deviceId: {\n                            exact: (matchingDevice && matchingDevice.deviceId)\n                                || desktopSharingSourceDevice\n                        }\n                    }\n                };\n\n                return this._newGetUserMediaWithConstraints(\n                    requestedDevices, constraints)\n                    .then(stream => {\n                        const track = stream && stream.getTracks()[0];\n                        const applyConstrainsPromise\n                            = track && track.applyConstraints\n                                ? track.applyConstraints(trackOptions)\n                                : Promise.resolve();\n\n                        return applyConstrainsPromise\n                            .then(() => {\n                                return {\n                                    sourceType: 'device',\n                                    stream\n                                };\n                            });\n                    });\n            }\n\n            return this._newGetDesktopMedia({\n                desktopSharingExtensionExternalInstallation,\n                desktopSharingSources,\n                desktopSharingFrameRate\n            });\n        }.bind(this);\n\n        /**\n         * Creates a meta data object about the passed in desktopStream and\n         * pushes the meta data to the internal array mediaStreamsMetaData to be\n         * returned later.\n         *\n         * @param {MediaStreamTrack} desktopStream - A track for a desktop\n         * capture.\n         * @returns {void}\n         */\n        const maybeCreateAndAddDesktopTrack = function(desktopStream) {\n            if (!desktopStream) {\n                return;\n            }\n\n            const { stream, sourceId, sourceType } = desktopStream;\n\n            mediaStreamsMetaData.push({\n                stream,\n                sourceId,\n                sourceType,\n                track: stream.getVideoTracks()[0],\n                videoType: VideoType.DESKTOP\n            });\n        };\n\n        /**\n         * Executes a request for audio and/or video, as specified in options.\n         * By default both audio and video will be captured if options.devices\n         * is not defined.\n         *\n         * @returns {Promise}\n         */\n        const maybeRequestCaptureDevices = function() {\n            const umDevices = options.devices || [ 'audio', 'video' ];\n            const requestedCaptureDevices = umDevices.filter(device =>\n                device === 'audio'\n                || (device === 'video' && browser.supportsVideo()));\n\n            if (!requestedCaptureDevices.length) {\n                return Promise.resolve();\n            }\n\n            const constraints = newGetConstraints(\n                requestedCaptureDevices, options);\n\n            logger.info('Got media constraints: ', constraints);\n\n            return this._newGetUserMediaWithConstraints(\n                requestedCaptureDevices, constraints);\n        }.bind(this);\n\n        /**\n         * Splits the passed in media stream into separate audio and video\n         * streams and creates meta data objects for each and pushes them to the\n         * internal array mediaStreamsMetaData to be returned later.\n         *\n         * @param {MediaStreamTrack} avStream - A track for with audio and/or\n         * video track.\n         * @returns {void}\n         */\n        const maybeCreateAndAddAVTracks = function(avStream) {\n            if (!avStream) {\n                return;\n            }\n\n            const audioTracks = avStream.getAudioTracks();\n\n            if (audioTracks.length) {\n                const audioStream = new MediaStream(audioTracks);\n\n                mediaStreamsMetaData.push({\n                    stream: audioStream,\n                    track: audioStream.getAudioTracks()[0],\n                    effects: options.effects\n                });\n            }\n\n            const videoTracks = avStream.getVideoTracks();\n\n            if (videoTracks.length) {\n                const videoStream = new MediaStream(videoTracks);\n\n                mediaStreamsMetaData.push({\n                    stream: videoStream,\n                    track: videoStream.getVideoTracks()[0],\n                    videoType: VideoType.CAMERA,\n                    effects: options.effects\n                });\n            }\n        };\n\n        return maybeRequestDesktopDevice()\n            .then(maybeCreateAndAddDesktopTrack)\n            .then(maybeRequestCaptureDevices)\n            .then(maybeCreateAndAddAVTracks)\n            .then(() => mediaStreamsMetaData)\n            .catch(error => {\n                mediaStreamsMetaData.forEach(({ stream }) => {\n                    this.stopMediaStream(stream);\n                });\n\n                return Promise.reject(error);\n            });\n    }\n\n    /**\n     * Checks whether it is possible to enumerate available cameras/microphones.\n     *\n     * @returns {boolean} {@code true} if the device listing is available;\n     * {@code false}, otherwise.\n     */\n    isDeviceListAvailable() {\n        return Boolean(\n            navigator.mediaDevices\n                && navigator.mediaDevices.enumerateDevices);\n    }\n\n    /**\n     * Returns true if changing the input (camera / microphone) or output\n     * (audio) device is supported and false if not.\n     * @params {string} [deviceType] - type of device to change. Default is\n     *      undefined or 'input', 'output' - for audio output device change.\n     * @returns {boolean} true if available, false otherwise.\n     */\n    isDeviceChangeAvailable(deviceType) {\n        return deviceType === 'output' || deviceType === 'audiooutput'\n            ? isAudioOutputDeviceChangeAvailable\n            : browser.isChromiumBased()\n                || browser.isFirefox() || browser.isEdge();\n    }\n\n    /**\n     * A method to handle stopping of the stream.\n     * One point to handle the differences in various implementations.\n     * @param mediaStream MediaStream object to stop.\n     */\n    stopMediaStream(mediaStream) {\n        if (!mediaStream) {\n            return;\n        }\n\n        mediaStream.getTracks().forEach(track => {\n            if (track.stop) {\n                track.stop();\n            }\n        });\n\n        // leave stop for implementation still using it\n        if (mediaStream.stop) {\n            mediaStream.stop();\n        }\n\n        // The MediaStream implementation of the react-native-webrtc project has\n        // an explicit release method that is to be invoked in order to release\n        // used resources such as memory.\n        if (mediaStream.release) {\n            mediaStream.release();\n        }\n\n        // if we have done createObjectURL, lets clean it\n        const url = mediaStream.jitsiObjectURL;\n\n        if (url) {\n            delete mediaStream.jitsiObjectURL;\n            URL.revokeObjectURL(url);\n        }\n    }\n\n    /**\n     * Returns whether the desktop sharing is enabled or not.\n     * @returns {boolean}\n     */\n    isDesktopSharingEnabled() {\n        return screenObtainer.isSupported();\n    }\n\n    /**\n     * Sets current audio output device.\n     * @param {string} deviceId - id of 'audiooutput' device from\n     *      navigator.mediaDevices.enumerateDevices(), 'default' for default\n     *      device\n     * @returns {Promise} - resolves when audio output is changed, is rejected\n     *      otherwise\n     */\n    setAudioOutputDevice(deviceId) {\n        if (!this.isDeviceChangeAvailable('output')) {\n            return Promise.reject(\n                new Error('Audio output device change is not supported'));\n        }\n\n        return featureDetectionAudioEl.setSinkId(deviceId)\n            .then(() => {\n                audioOutputDeviceId = deviceId;\n                audioOutputChanged = true;\n\n                logger.log(`Audio output device set to ${deviceId}`);\n\n                eventEmitter.emit(RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED,\n                    deviceId);\n            });\n    }\n\n    /**\n     * Returns currently used audio output device id, '' stands for default\n     * device\n     * @returns {string}\n     */\n    getAudioOutputDevice() {\n        return audioOutputDeviceId;\n    }\n\n    /**\n     * Returns list of available media devices if its obtained, otherwise an\n     * empty array is returned/\n     * @returns {Array} list of available media devices.\n     */\n    getCurrentlyAvailableMediaDevices() {\n        return availableDevices;\n    }\n\n    /**\n     * Returns event data for device to be reported to stats.\n     * @returns {MediaDeviceInfo} device.\n     */\n    getEventDataForActiveDevice(device) {\n        const deviceList = [];\n        const deviceData = {\n            'deviceId': device.deviceId,\n            'kind': device.kind,\n            'label': device.label,\n            'groupId': device.groupId\n        };\n\n        deviceList.push(deviceData);\n\n        return { deviceList };\n    }\n\n    /**\n     * Configures the given PeerConnection constraints to either enable or\n     * disable (according to the value of the 'enable' parameter) the\n     * 'googSuspendBelowMinBitrate' option.\n     * @param constraints the constraints on which to operate.\n     * @param enable {boolean} whether to enable or disable the suspend video\n     * option.\n     */\n    setSuspendVideo(constraints, enable) {\n        if (!constraints.optional) {\n            constraints.optional = [];\n        }\n\n        // Get rid of all \"googSuspendBelowMinBitrate\" constraints (we assume\n        // that the elements of constraints.optional contain a single property).\n        constraints.optional\n            = constraints.optional.filter(\n                c => !c.hasOwnProperty('googSuspendBelowMinBitrate'));\n\n        if (enable) {\n            constraints.optional.push({ googSuspendBelowMinBitrate: 'true' });\n        }\n    }\n}\n\nconst rtcUtils = new RTCUtils();\n\n/**\n * Wraps original attachMediaStream function to set current audio output device\n * if this is supported.\n * @param {Function} origAttachMediaStream\n * @returns {Function}\n */\nfunction wrapAttachMediaStream(origAttachMediaStream) {\n    return function(element, stream) {\n        // eslint-disable-next-line prefer-rest-params\n        const res = origAttachMediaStream.apply(rtcUtils, arguments);\n\n        if (stream\n                && rtcUtils.isDeviceChangeAvailable('output')\n                && stream.getAudioTracks\n                && stream.getAudioTracks().length\n\n                // we skip setting audio output if there was no explicit change\n                && audioOutputChanged) {\n            element.setSinkId(rtcUtils.getAudioOutputDevice())\n                .catch(function(ex) {\n                    const err\n                        = new JitsiTrackError(ex, null, [ 'audiooutput' ]);\n\n                    GlobalOnErrorHandler.callUnhandledRejectionHandler({\n                        promise: this, // eslint-disable-line no-invalid-this\n                        reason: err\n                    });\n\n                    logger.warn(\n                        'Failed to set audio output device for the element.'\n                            + ' Default audio output device will be used'\n                            + ' instead',\n                        element,\n                        err);\n                });\n        }\n\n        return res;\n    };\n}\n\nexport default rtcUtils;\n","/**\n * This utility class defines custom onerror and onunhandledrejection functions.\n * The custom error handlers respect the previously-defined error handlers.\n * GlobalOnErrorHandler class provides utilities to add many custom error\n * handlers and to execute the error handlers directly.\n */\n\n\n/**\n * List with global error handlers that will be executed.\n */\nconst handlers = [];\n\n// If an old handler exists, also fire its events.\nconst oldOnErrorHandler = window.onerror;\n\n/**\n * Custom error handler that calls the old global error handler and executes\n * all handlers that were previously added.\n */\nfunction JitsiGlobalErrorHandler(...args) {\n    handlers.forEach(handler => handler(...args));\n    oldOnErrorHandler && oldOnErrorHandler(...args);\n}\n\n// If an old handler exists, also fire its events.\nconst oldOnUnhandledRejection = window.onunhandledrejection;\n\n/**\n * Custom handler that calls the old global handler and executes all handlers\n * that were previously added. This handler handles rejected Promises.\n */\nfunction JitsiGlobalUnhandledRejection(event) {\n    handlers.forEach(handler => handler(null, null, null, null, event.reason));\n    oldOnUnhandledRejection && oldOnUnhandledRejection(event);\n}\n\n// Setting the custom error handlers.\nwindow.onerror = JitsiGlobalErrorHandler;\nwindow.onunhandledrejection = JitsiGlobalUnhandledRejection;\n\nconst GlobalOnErrorHandler = {\n    /**\n     * Adds new error handlers.\n     * @param handler the new handler.\n     */\n    addHandler(handler) {\n        handlers.push(handler);\n    },\n\n    /**\n     * Calls the global error handler if there is one.\n     * @param error the error to pass to the error handler\n     */\n    callErrorHandler(error) {\n        const errHandler = window.onerror;\n\n        if (!errHandler) {\n            return;\n        }\n        errHandler(null, null, null, null, error);\n    },\n\n    /**\n     * Calls the global rejection handler if there is one.\n     * @param error the error to pass to the rejection handler.\n     */\n    callUnhandledRejectionHandler(error) {\n        const errHandler = window.onunhandledrejection;\n\n        if (!errHandler) {\n            return;\n        }\n        errHandler(error);\n    }\n};\n\n\nmodule.exports = GlobalOnErrorHandler;\n","/**\n * The errors for the JitsiTrack objects.\n */\n\n/**\n * Generic error for jidesha extension for Chrome.\n */\nexport const CHROME_EXTENSION_GENERIC_ERROR\n    = 'gum.chrome_extension_generic_error';\n\n/**\n * An error which indicates that the jidesha extension for Chrome is\n * failed to install.\n */\nexport const CHROME_EXTENSION_INSTALLATION_ERROR\n    = 'gum.chrome_extension_installation_error';\n\n/**\n * This error indicates that the attempt to start screensharing was initiated by\n * a script which did not originate in user gesture handler. It means that\n * you should to trigger the action again in response to a button click for\n * example.\n * @type {string}\n */\nexport const CHROME_EXTENSION_USER_GESTURE_REQUIRED\n    = 'gum.chrome_extension_user_gesture_required';\n\n/**\n * An error which indicates that user canceled screen sharing window\n * selection dialog in jidesha extension for Chrome.\n */\nexport const CHROME_EXTENSION_USER_CANCELED\n    = 'gum.chrome_extension_user_canceled';\n\n/**\n * An error which indicates that some of requested constraints in\n * getUserMedia call were not satisfied.\n */\nexport const CONSTRAINT_FAILED = 'gum.constraint_failed';\n\n/**\n * A generic error which indicates an error occurred while selecting\n * a DesktopCapturerSource from the electron app.\n */\nexport const ELECTRON_DESKTOP_PICKER_ERROR\n    = 'gum.electron_desktop_picker_error';\n\n/**\n * An error which indicates a custom desktop picker could not be detected\n * for the electron app.\n */\nexport const ELECTRON_DESKTOP_PICKER_NOT_FOUND\n    = 'gum.electron_desktop_picker_not_found';\n\n/**\n * An error which indicates that the jidesha extension for Firefox is\n * needed to proceed with screen sharing, and that it is not installed.\n */\nexport const FIREFOX_EXTENSION_NEEDED = 'gum.firefox_extension_needed';\n\n/**\n * Generic getUserMedia error.\n */\nexport const GENERAL = 'gum.general';\n\n/**\n * An error which indicates that requested device was not found.\n */\nexport const NOT_FOUND = 'gum.not_found';\n\n/**\n * An error which indicates that user denied permission to share requested\n * device.\n */\nexport const PERMISSION_DENIED = 'gum.permission_denied';\n\n/**\n * An error which indicates that track has been already disposed and cannot\n * be longer used.\n */\nexport const TRACK_IS_DISPOSED = 'track.track_is_disposed';\n\n/**\n * An error which indicates that track has no MediaStream associated.\n */\nexport const TRACK_NO_STREAM_FOUND = 'track.no_stream_found';\n\n/**\n * An error which indicates that requested video resolution is not supported\n * by a webcam.\n */\nexport const UNSUPPORTED_RESOLUTION = 'gum.unsupported_resolution';\n","/* global __filename */\n\nimport { getLogger } from 'jitsi-meet-logger';\n\nimport BridgeChannel from './BridgeChannel';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport JitsiLocalTrack from './JitsiLocalTrack';\nimport Listenable from '../util/Listenable';\nimport { safeCounterIncrement } from '../util/MathUtil';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport browser from '../browser';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport RTCUtils from './RTCUtils';\nimport Statistics from '../statistics/statistics';\nimport TraceablePeerConnection from './TraceablePeerConnection';\nimport VideoType from '../../service/RTC/VideoType';\n\nconst logger = getLogger(__filename);\n\n/**\n * The counter used to generated id numbers assigned to peer connections\n * @type {number}\n */\nlet peerConnectionIdCounter = 0;\n\n/**\n * The counter used to generate id number for the local\n * <code>MediaStreamTrack</code>s.\n * @type {number}\n */\nlet rtcTrackIdCounter = 0;\n\n/**\n *\n * @param tracksInfo\n * @param options\n */\nfunction createLocalTracks(tracksInfo, options) {\n    const newTracks = [];\n    let deviceId = null;\n\n    tracksInfo.forEach(trackInfo => {\n        if (trackInfo.mediaType === MediaType.AUDIO) {\n            deviceId = options.micDeviceId;\n        } else if (trackInfo.videoType === VideoType.CAMERA) {\n            deviceId = options.cameraDeviceId;\n        }\n        rtcTrackIdCounter = safeCounterIncrement(rtcTrackIdCounter);\n        const localTrack = new JitsiLocalTrack({\n            ...trackInfo,\n            deviceId,\n            facingMode: options.facingMode,\n            rtcId: rtcTrackIdCounter,\n            effects: options.effects\n        });\n\n        newTracks.push(localTrack);\n    });\n\n    return newTracks;\n}\n\n/**\n * Creates {@code JitsiLocalTrack} instances from the passed in meta information\n * about MedieaTracks.\n *\n * @param {Object[]} mediaStreamMetaData - An array of meta information with\n * MediaTrack instances. Each can look like:\n * {{\n *     stream: MediaStream instance that holds a track with audio or video,\n *     track: MediaTrack within the MediaStream,\n *     videoType: \"camera\" or \"desktop\" or falsy,\n *     sourceId: ID of the desktopsharing source,\n *     sourceType: The desktopsharing source type,\n *     effects: Array of effect types\n * }}\n */\nfunction _newCreateLocalTracks(mediaStreamMetaData = []) {\n    return mediaStreamMetaData.map(metaData => {\n        const {\n            sourceId,\n            sourceType,\n            stream,\n            track,\n            videoType,\n            effects\n        } = metaData;\n\n        const { deviceId, facingMode } = track.getSettings();\n\n        // FIXME Move rtcTrackIdCounter to a static method in JitsiLocalTrack\n        // so RTC does not need to handle ID management. This move would be\n        // safer to do once the old createLocalTracks is removed.\n        rtcTrackIdCounter = safeCounterIncrement(rtcTrackIdCounter);\n\n        return new JitsiLocalTrack({\n            deviceId,\n            facingMode,\n            mediaType: track.kind,\n            rtcId: rtcTrackIdCounter,\n            sourceId,\n            sourceType,\n            stream,\n            track,\n            videoType: videoType || null,\n            effects\n        });\n    });\n}\n\n/**\n *\n */\nexport default class RTC extends Listenable {\n    /**\n     *\n     * @param conference\n     * @param options\n     */\n    constructor(conference, options = {}) {\n        super();\n        this.conference = conference;\n\n        /**\n         * A map of active <tt>TraceablePeerConnection</tt>.\n         * @type {Map.<number, TraceablePeerConnection>}\n         */\n        this.peerConnections = new Map();\n\n        this.localTracks = [];\n\n        this.options = options;\n\n        // BridgeChannel instance.\n        // @private\n        // @type {BridgeChannel}\n        this._channel = null;\n\n        // A flag whether we had received that the channel had opened we can\n        // get this flag out of sync if for some reason channel got closed\n        // from server, a desired behaviour so we can see errors when this\n        // happen.\n        // @private\n        // @type {boolean}\n        this._channelOpen = false;\n\n        /**\n         * The value specified to the last invocation of setLastN before the\n         * channel completed opening. If non-null, the value will be sent\n         * through a channel (once) as soon as it opens and will then be\n         * discarded.\n         * @private\n         * @type {number}\n         */\n        this._lastN = -1;\n\n        /**\n         * Defines the last N endpoints list. It can be null or an array once\n         * initialised with a channel last N event.\n         * @type {Array<string>|null}\n         * @private\n         */\n        this._lastNEndpoints = null;\n\n        /**\n         * The number representing the maximum video height the local client\n         * should receive from the bridge.\n         *\n         * @type {number|undefined}\n         * @private\n         */\n        this._maxFrameHeight = undefined;\n\n        /**\n         * The endpoint ID of currently pinned participant or <tt>null</tt> if\n         * no user is pinned.\n         * @type {string|null}\n         * @private\n         */\n        this._pinnedEndpoint = null;\n\n        /**\n         * The endpoint IDs of currently selected participants.\n         *\n         * @type {Array}\n         * @private\n         */\n        this._selectedEndpoints = [];\n\n        // The last N change listener.\n        this._lastNChangeListener = this._onLastNChanged.bind(this);\n\n        this._onDeviceListChanged = this._onDeviceListChanged.bind(this);\n        this._updateAudioOutputForAudioTracks\n            = this._updateAudioOutputForAudioTracks.bind(this);\n\n        // Switch audio output device on all remote audio tracks. Local audio\n        // tracks handle this event by themselves.\n        if (RTCUtils.isDeviceChangeAvailable('output')) {\n            RTCUtils.addListener(\n                RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED,\n                this._updateAudioOutputForAudioTracks\n            );\n\n            RTCUtils.addListener(\n                RTCEvents.DEVICE_LIST_CHANGED,\n                this._onDeviceListChanged\n            );\n        }\n    }\n\n    /**\n     * Removes any listeners and stored state from this {@code RTC} instance.\n     *\n     * @returns {void}\n     */\n    destroy() {\n        RTCUtils.removeListener(\n            RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED,\n            this._updateAudioOutputForAudioTracks\n        );\n\n        RTCUtils.removeListener(\n            RTCEvents.DEVICE_LIST_CHANGED,\n            this._onDeviceListChanged\n        );\n\n        this.removeListener(\n            RTCEvents.LASTN_ENDPOINT_CHANGED,\n            this._lastNChangeListener\n        );\n\n        if (this._channelOpenListener) {\n            this.removeListener(\n                RTCEvents.DATA_CHANNEL_OPEN,\n                this._channelOpenListener\n            );\n        }\n    }\n\n    /**\n     * Exposes the private helper for converting a WebRTC MediaStream to a\n     * JitsiLocalTrack.\n     *\n     * @param {Array<Object>} tracksInfo\n     * @returns {Array<JitsiLocalTrack>}\n     */\n    static newCreateLocalTracks(tracksInfo) {\n        return _newCreateLocalTracks(tracksInfo);\n    }\n\n    /**\n     * Creates the local MediaStreams.\n     * @param {object} [options] Optional parameters.\n     * @param {array} options.devices The devices that will be requested.\n     * @param {string} options.resolution Resolution constraints.\n     * @param {string} options.cameraDeviceId\n     * @param {string} options.micDeviceId\n     * @returns {*} Promise object that will receive the new JitsiTracks\n     */\n    static obtainAudioAndVideoPermissions(options) {\n        const usesNewGumFlow = browser.usesNewGumFlow();\n        const obtainMediaPromise = usesNewGumFlow\n            ? RTCUtils.newObtainAudioAndVideoPermissions(options)\n            : RTCUtils.obtainAudioAndVideoPermissions(options);\n\n        return obtainMediaPromise.then(tracksInfo => {\n            if (usesNewGumFlow) {\n                return _newCreateLocalTracks(tracksInfo);\n            }\n\n            return createLocalTracks(tracksInfo, options);\n        });\n    }\n\n    /**\n     * Initializes the bridge channel of this instance.\n     * At least one of both, peerconnection or wsUrl parameters, must be\n     * given.\n     * @param {RTCPeerConnection} [peerconnection] WebRTC peer connection\n     * instance.\n     * @param {string} [wsUrl] WebSocket URL.\n     */\n    initializeBridgeChannel(peerconnection, wsUrl) {\n        this._channel = new BridgeChannel(\n            peerconnection, wsUrl, this.eventEmitter);\n\n        this._channelOpenListener = () => {\n            // Mark that channel as opened.\n            this._channelOpen = true;\n\n            // When the channel becomes available, tell the bridge about\n            // video selections so that it can do adaptive simulcast,\n            // we want the notification to trigger even if userJid\n            // is undefined, or null.\n            try {\n                this._channel.sendPinnedEndpointMessage(\n                    this._pinnedEndpoint);\n                this._channel.sendSelectedEndpointsMessage(\n                    this._selectedEndpoints);\n\n                if (typeof this._maxFrameHeight !== 'undefined') {\n                    this._channel.sendReceiverVideoConstraintMessage(\n                        this._maxFrameHeight);\n                }\n            } catch (error) {\n                GlobalOnErrorHandler.callErrorHandler(error);\n                logger.error(\n                    `Cannot send selected(${this._selectedEndpoint})`\n                    + `pinned(${this._pinnedEndpoint})`\n                    + `frameHeight(${this._maxFrameHeight}) endpoint message`,\n                    error);\n            }\n\n            this.removeListener(RTCEvents.DATA_CHANNEL_OPEN,\n                this._channelOpenListener);\n            this._channelOpenListener = null;\n\n            // If setLastN was invoked before the bridge channel completed\n            // opening, apply the specified value now that the channel\n            // is open. NOTE that -1 is the default value assumed by both\n            // RTC module and the JVB.\n            if (this._lastN !== -1) {\n                this._channel.sendSetLastNMessage(this._lastN);\n            }\n        };\n\n        this.addListener(RTCEvents.DATA_CHANNEL_OPEN,\n            this._channelOpenListener);\n\n        // Add Last N change listener.\n        this.addListener(RTCEvents.LASTN_ENDPOINT_CHANGED,\n            this._lastNChangeListener);\n    }\n\n    /**\n     * Callback invoked when the list of known audio and video devices has\n     * been updated. Attempts to update the known available audio output\n     * devices.\n     *\n     * @private\n     * @returns {void}\n     */\n    _onDeviceListChanged() {\n        this._updateAudioOutputForAudioTracks(RTCUtils.getAudioOutputDevice());\n    }\n\n    /**\n     * Receives events when Last N had changed.\n     * @param {array} lastNEndpoints The new Last N endpoints.\n     * @private\n     */\n    _onLastNChanged(lastNEndpoints = []) {\n        const oldLastNEndpoints = this._lastNEndpoints || [];\n        let leavingLastNEndpoints = [];\n        let enteringLastNEndpoints = [];\n\n        this._lastNEndpoints = lastNEndpoints;\n\n        leavingLastNEndpoints = oldLastNEndpoints.filter(\n            id => !this.isInLastN(id));\n\n        enteringLastNEndpoints = lastNEndpoints.filter(\n            id => oldLastNEndpoints.indexOf(id) === -1);\n\n        this.conference.eventEmitter.emit(\n            JitsiConferenceEvents.LAST_N_ENDPOINTS_CHANGED,\n            leavingLastNEndpoints,\n            enteringLastNEndpoints);\n    }\n\n    /**\n     * Should be called when current media session ends and after the\n     * PeerConnection has been closed using PeerConnection.close() method.\n     */\n    onCallEnded() {\n        if (this._channel) {\n            // The BridgeChannel is not explicitly closed as the PeerConnection\n            // is closed on call ended which triggers datachannel onclose\n            // events. If using a WebSocket, the channel must be closed since\n            // it is not managed by the PeerConnection.\n            // The reference is cleared to disable any logic related to the\n            // channel.\n            if (this._channel && this._channel.mode === 'websocket') {\n                this._channel.close();\n            }\n\n            this._channel = null;\n            this._channelOpen = false;\n        }\n    }\n\n    /**\n     * Sets the maximum video size the local participant should receive from\n     * remote participants. Will cache the value and send it through the channel\n     * once it is created.\n     *\n     * @param {number} maxFrameHeightPixels the maximum frame height, in pixels,\n     * this receiver is willing to receive.\n     * @returns {void}\n     */\n    setReceiverVideoConstraint(maxFrameHeight) {\n        this._maxFrameHeight = maxFrameHeight;\n\n        if (this._channel && this._channelOpen) {\n            this._channel.sendReceiverVideoConstraintMessage(maxFrameHeight);\n        }\n    }\n\n    /**\n     * Elects the participants with the given ids to be the selected\n     * participants in order to always receive video for this participant (even\n     * when last n is enabled). If there is no channel we store it and send it\n     * through the channel once it is created.\n     *\n     * @param {Array<string>} ids - The user ids.\n     * @throws NetworkError or InvalidStateError or Error if the operation\n     * fails.\n     * @returns {void}\n     */\n    selectEndpoints(ids) {\n        this._selectedEndpoints = ids;\n\n        if (this._channel && this._channelOpen) {\n            this._channel.sendSelectedEndpointsMessage(ids);\n        }\n    }\n\n    /**\n     * Elects the participant with the given id to be the pinned participant in\n     * order to always receive video for this participant (even when last n is\n     * enabled).\n     * @param {stirng} id The user id.\n     * @throws NetworkError or InvalidStateError or Error if the operation\n     * fails.\n     */\n    pinEndpoint(id) {\n        // Cache the value if channel is missing, till we open it.\n        this._pinnedEndpoint = id;\n        if (this._channel && this._channelOpen) {\n            this._channel.sendPinnedEndpointMessage(id);\n        }\n    }\n\n    /**\n     *\n     * @param eventType\n     * @param listener\n     */\n    static addListener(eventType, listener) {\n        RTCUtils.addListener(eventType, listener);\n    }\n\n    /**\n     *\n     * @param eventType\n     * @param listener\n     */\n    static removeListener(eventType, listener) {\n        RTCUtils.removeListener(eventType, listener);\n    }\n\n    /**\n     *\n     * @param options\n     */\n    static init(options = {}) {\n        this.options = options;\n\n        return RTCUtils.init(this.options);\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     * Creates new <tt>TraceablePeerConnection</tt>\n     * @param {SignalingLayer} signaling The signaling layer that will\n     *      provide information about the media or participants which is not\n     *      carried over SDP.\n     * @param {object} iceConfig An object describing the ICE config like\n     *      defined in the WebRTC specification.\n     * @param {boolean} isP2P Indicates whether or not the new TPC will be used\n     *      in a peer to peer type of session.\n     * @param {object} options The config options.\n     * @param {boolean} options.disableSimulcast If set to 'true' will disable\n     *      the simulcast.\n     * @param {boolean} options.disableRtx If set to 'true' will disable the\n     *      RTX.\n     * @param {boolean} options.disableH264 If set to 'true' H264 will be\n     *      disabled by removing it from the SDP.\n     * @param {boolean} options.preferH264 If set to 'true' H264 will be\n     *      preferred over other video codecs.\n     * @param {boolean} options.startSilent If set to 'true' no audio will be sent or received.\n     * @return {TraceablePeerConnection}\n     */\n    createPeerConnection(signaling, iceConfig, isP2P, options) {\n        const pcConstraints = RTC.getPCConstraints(isP2P);\n\n        if (typeof options.abtestSuspendVideo !== 'undefined') {\n            RTCUtils.setSuspendVideo(pcConstraints, options.abtestSuspendVideo);\n\n            Statistics.analytics.addPermanentProperties(\n                { abtestSuspendVideo: options.abtestSuspendVideo });\n        }\n\n        // FIXME: We should rename iceConfig to pcConfig.\n        if (browser.supportsSdpSemantics()) {\n            iceConfig.sdpSemantics = 'plan-b';\n        }\n\n        peerConnectionIdCounter = safeCounterIncrement(peerConnectionIdCounter);\n\n        const newConnection\n            = new TraceablePeerConnection(\n                this,\n                peerConnectionIdCounter,\n                signaling,\n                iceConfig, pcConstraints,\n                isP2P, options);\n\n        this.peerConnections.set(newConnection.id, newConnection);\n\n        return newConnection;\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Removed given peer connection from this RTC module instance.\n     * @param {TraceablePeerConnection} traceablePeerConnection\n     * @return {boolean} <tt>true</tt> if the given peer connection was removed\n     * successfully or <tt>false</tt> if there was no peer connection mapped in\n     * this RTC instance.\n     */\n    _removePeerConnection(traceablePeerConnection) {\n        const id = traceablePeerConnection.id;\n\n        if (this.peerConnections.has(id)) {\n            // NOTE Remote tracks are not removed here.\n            this.peerConnections.delete(id);\n\n            return true;\n        }\n\n        return false;\n\n    }\n\n    /**\n     *\n     * @param track\n     */\n    addLocalTrack(track) {\n        if (!track) {\n            throw new Error('track must not be null nor undefined');\n        }\n\n        this.localTracks.push(track);\n\n        track.conference = this.conference;\n    }\n\n    /**\n     * Returns the current value for \"lastN\" - the amount of videos are going\n     * to be delivered. When set to -1 for unlimited or all available videos.\n     * @return {number}\n     */\n    getLastN() {\n        return this._lastN;\n    }\n\n    /**\n     * Get local video track.\n     * @returns {JitsiLocalTrack|undefined}\n     */\n    getLocalVideoTrack() {\n        const localVideo = this.getLocalTracks(MediaType.VIDEO);\n\n\n        return localVideo.length ? localVideo[0] : undefined;\n    }\n\n    /**\n     * Get local audio track.\n     * @returns {JitsiLocalTrack|undefined}\n     */\n    getLocalAudioTrack() {\n        const localAudio = this.getLocalTracks(MediaType.AUDIO);\n\n\n        return localAudio.length ? localAudio[0] : undefined;\n    }\n\n    /**\n     * Returns the local tracks of the given media type, or all local tracks if\n     * no specific type is given.\n     * @param {MediaType} [mediaType] Optional media type filter.\n     * (audio or video).\n     */\n    getLocalTracks(mediaType) {\n        let tracks = this.localTracks.slice();\n\n        if (mediaType !== undefined) {\n            tracks = tracks.filter(\n                track => track.getType() === mediaType);\n        }\n\n        return tracks;\n    }\n\n    /**\n     * Obtains all remote tracks currently known to this RTC module instance.\n     * @param {MediaType} [mediaType] The remote tracks will be filtered\n     *      by their media type if this argument is specified.\n     * @return {Array<JitsiRemoteTrack>}\n     */\n    getRemoteTracks(mediaType) {\n        let remoteTracks = [];\n\n        for (const tpc of this.peerConnections.values()) {\n            const pcRemoteTracks = tpc.getRemoteTracks(undefined, mediaType);\n\n            if (pcRemoteTracks) {\n                remoteTracks = remoteTracks.concat(pcRemoteTracks);\n            }\n        }\n\n        return remoteTracks;\n    }\n\n    /**\n     * Set mute for all local audio streams attached to the conference.\n     * @param value The mute value.\n     * @returns {Promise}\n     */\n    setAudioMute(value) {\n        const mutePromises = [];\n\n        this.getLocalTracks(MediaType.AUDIO).forEach(audioTrack => {\n            // this is a Promise\n            mutePromises.push(value ? audioTrack.mute() : audioTrack.unmute());\n        });\n\n        // We return a Promise from all Promises so we can wait for their\n        // execution.\n        return Promise.all(mutePromises);\n    }\n\n    /**\n     *\n     * @param track\n     */\n    removeLocalTrack(track) {\n        const pos = this.localTracks.indexOf(track);\n\n        if (pos === -1) {\n            return;\n        }\n\n        this.localTracks.splice(pos, 1);\n    }\n\n    /**\n     * Removes all JitsiRemoteTracks associated with given MUC nickname\n     * (resource part of the JID). Returns array of removed tracks.\n     *\n     * @param {string} Owner The resource part of the MUC JID.\n     * @returns {JitsiRemoteTrack[]}\n     */\n    removeRemoteTracks(owner) {\n        let removedTracks = [];\n\n        for (const tpc of this.peerConnections.values()) {\n            const pcRemovedTracks = tpc.removeRemoteTracks(owner);\n\n            removedTracks = removedTracks.concat(pcRemovedTracks);\n        }\n\n        logger.debug(\n            `Removed remote tracks for ${owner}`\n                + ` count: ${removedTracks.length}`);\n\n        return removedTracks;\n    }\n\n    /**\n     *\n     */\n    static getPCConstraints(isP2P) {\n        const pcConstraints\n            = isP2P ? RTCUtils.p2pPcConstraints : RTCUtils.pcConstraints;\n\n        if (!pcConstraints) {\n            return {};\n        }\n\n        return JSON.parse(JSON.stringify(pcConstraints));\n    }\n\n    /**\n     *\n     * @param elSelector\n     * @param stream\n     */\n    static attachMediaStream(elSelector, stream) {\n        return RTCUtils.attachMediaStream(elSelector, stream);\n    }\n\n    /**\n     * Returns the id of the given stream.\n     * @param {MediaStream} stream\n     */\n    static getStreamID(stream) {\n        return RTCUtils.getStreamID(stream);\n    }\n\n    /**\n     * Returns the id of the given track.\n     * @param {MediaStreamTrack} track\n     */\n    static getTrackID(track) {\n        return RTCUtils.getTrackID(track);\n    }\n\n    /**\n     * Returns true if retrieving the the list of input devices is supported\n     * and false if not.\n     */\n    static isDeviceListAvailable() {\n        return RTCUtils.isDeviceListAvailable();\n    }\n\n    /**\n     * Returns true if changing the input (camera / microphone) or output\n     * (audio) device is supported and false if not.\n     * @param {string} [deviceType] Type of device to change. Default is\n     *      undefined or 'input', 'output' - for audio output device change.\n     * @returns {boolean} true if available, false otherwise.\n     */\n    static isDeviceChangeAvailable(deviceType) {\n        return RTCUtils.isDeviceChangeAvailable(deviceType);\n    }\n\n    /**\n     * Returns whether the current execution environment supports WebRTC (for\n     * use within this library).\n     *\n     * @returns {boolean} {@code true} if WebRTC is supported in the current\n     * execution environment (for use within this library); {@code false},\n     * otherwise.\n     */\n    static isWebRtcSupported() {\n        return browser.isSupported();\n    }\n\n    /**\n     * Returns currently used audio output device id, '' stands for default\n     * device\n     * @returns {string}\n     */\n    static getAudioOutputDevice() {\n        return RTCUtils.getAudioOutputDevice();\n    }\n\n    /**\n     * Returns list of available media devices if its obtained, otherwise an\n     * empty array is returned/\n     * @returns {array} list of available media devices.\n     */\n    static getCurrentlyAvailableMediaDevices() {\n        return RTCUtils.getCurrentlyAvailableMediaDevices();\n    }\n\n    /**\n     * Returns event data for device to be reported to stats.\n     * @returns {MediaDeviceInfo} device.\n     */\n    static getEventDataForActiveDevice(device) {\n        return RTCUtils.getEventDataForActiveDevice(device);\n    }\n\n    /**\n     * Sets current audio output device.\n     * @param {string} deviceId Id of 'audiooutput' device from\n     *      navigator.mediaDevices.enumerateDevices().\n     * @returns {Promise} resolves when audio output is changed, is rejected\n     *      otherwise\n     */\n    static setAudioOutputDevice(deviceId) {\n        return RTCUtils.setAudioOutputDevice(deviceId);\n    }\n\n    /**\n     * Returns <tt>true<tt/> if given WebRTC MediaStream is considered a valid\n     * \"user\" stream which means that it's not a \"receive only\" stream nor a\n     * \"mixed\" JVB stream.\n     *\n     * Clients that implement Unified Plan, such as Firefox use recvonly\n     * \"streams/channels/tracks\" for receiving remote stream/tracks, as opposed\n     * to Plan B where there are only 3 channels: audio, video and data.\n     *\n     * @param {MediaStream} stream The WebRTC MediaStream instance.\n     * @returns {boolean}\n     */\n    static isUserStream(stream) {\n        return RTC.isUserStreamById(RTCUtils.getStreamID(stream));\n    }\n\n    /**\n     * Returns <tt>true<tt/> if a WebRTC MediaStream identified by given stream\n     * ID is considered a valid \"user\" stream which means that it's not a\n     * \"receive only\" stream nor a \"mixed\" JVB stream.\n     *\n     * Clients that implement Unified Plan, such as Firefox use recvonly\n     * \"streams/channels/tracks\" for receiving remote stream/tracks, as opposed\n     * to Plan B where there are only 3 channels: audio, video and data.\n     *\n     * @param {string} streamId The id of WebRTC MediaStream.\n     * @returns {boolean}\n     */\n    static isUserStreamById(streamId) {\n        return streamId && streamId !== 'mixedmslabel'\n            && streamId !== 'default';\n    }\n\n    /**\n     * Allows to receive list of available cameras/microphones.\n     * @param {function} callback Would receive array of devices as an\n     *      argument.\n     */\n    static enumerateDevices(callback) {\n        RTCUtils.enumerateDevices(callback);\n    }\n\n    /**\n     * A method to handle stopping of the stream.\n     * One point to handle the differences in various implementations.\n     * @param {MediaStream} mediaStream MediaStream object to stop.\n     */\n    static stopMediaStream(mediaStream) {\n        RTCUtils.stopMediaStream(mediaStream);\n    }\n\n    /**\n     * Returns whether the desktop sharing is enabled or not.\n     * @returns {boolean}\n     */\n    static isDesktopSharingEnabled() {\n        return RTCUtils.isDesktopSharingEnabled();\n    }\n\n    /**\n     * Closes the currently opened bridge channel.\n     */\n    closeBridgeChannel() {\n        if (this._channel) {\n            this._channel.close();\n            this._channelOpen = false;\n\n            this.removeListener(RTCEvents.LASTN_ENDPOINT_CHANGED,\n                this._lastNChangeListener);\n        }\n    }\n\n    /* eslint-disable max-params */\n    /**\n     *\n     * @param {TraceablePeerConnection} tpc\n     * @param {number} ssrc\n     * @param {number} audioLevel\n     * @param {boolean} isLocal\n     */\n    setAudioLevel(tpc, ssrc, audioLevel, isLocal) {\n        const track = tpc.getTrackBySSRC(ssrc);\n\n        if (!track) {\n            return;\n        } else if (!track.isAudioTrack()) {\n            logger.warn(`Received audio level for non-audio track: ${ssrc}`);\n\n            return;\n        } else if (track.isLocal() !== isLocal) {\n            logger.error(\n                `${track} was expected to ${isLocal ? 'be' : 'not be'} local`);\n        }\n\n        track.setAudioLevel(audioLevel, tpc);\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Sends message via the bridge channel.\n     * @param {string} to The id of the endpoint that should receive the\n     *      message. If \"\" the message will be sent to all participants.\n     * @param {object} payload The payload of the message.\n     * @throws NetworkError or InvalidStateError or Error if the operation\n     * fails or there is no data channel created.\n     */\n    sendChannelMessage(to, payload) {\n        if (this._channel) {\n            this._channel.sendMessage(to, payload);\n        } else {\n            throw new Error('Channel support is disabled!');\n        }\n    }\n\n    /**\n     * Selects a new value for \"lastN\". The requested amount of videos are going\n     * to be delivered after the value is in effect. Set to -1 for unlimited or\n     * all available videos.\n     * @param {number} value the new value for lastN.\n     */\n    setLastN(value) {\n        if (this._lastN !== value) {\n            this._lastN = value;\n            if (this._channel && this._channelOpen) {\n                this._channel.sendSetLastNMessage(value);\n            }\n            this.eventEmitter.emit(RTCEvents.LASTN_VALUE_CHANGED, value);\n        }\n    }\n\n    /**\n     * Indicates if the endpoint id is currently included in the last N.\n     * @param {string} id The endpoint id that we check for last N.\n     * @returns {boolean} true if the endpoint id is in the last N or if we\n     * don't have bridge channel support, otherwise we return false.\n     */\n    isInLastN(id) {\n        return !this._lastNEndpoints // lastNEndpoints not initialised yet.\n            || this._lastNEndpoints.indexOf(id) > -1;\n    }\n\n    /**\n     * Updates the target audio output device for all remote audio tracks.\n     *\n     * @param {string} deviceId - The device id of the audio ouput device to\n     * use for all remote tracks.\n     * @private\n     * @returns {void}\n     */\n    _updateAudioOutputForAudioTracks(deviceId) {\n        const remoteAudioTracks = this.getRemoteTracks(MediaType.AUDIO);\n\n        for (const track of remoteAudioTracks) {\n            track.setAudioOutput(deviceId);\n        }\n    }\n}\n","/* global module */\n/**\n * Enumeration of the video types\n * @type {{CAMERA: string, DESKTOP: string}}\n */\nconst VideoType = {\n    /**\n     * The camera video type.\n     */\n    CAMERA: 'camera',\n\n    /**\n     * The desktop video type.\n     */\n    DESKTOP: 'desktop'\n};\n\nmodule.exports = VideoType;\n","import * as JitsiTrackErrors from './JitsiTrackErrors';\n\nconst TRACK_ERROR_TO_MESSAGE_MAP = {};\n\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.UNSUPPORTED_RESOLUTION]\n    = 'Video resolution is not supported: ';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.CHROME_EXTENSION_INSTALLATION_ERROR]\n    = 'Failed to install Chrome extension';\nTRACK_ERROR_TO_MESSAGE_MAP[\n    JitsiTrackErrors.CHROME_EXTENSION_USER_GESTURE_REQUIRED]\n    = 'Failed to install Chrome extension - installations can only be initiated'\n        + ' by a user gesture.';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.CHROME_EXTENSION_USER_CANCELED]\n    = 'User canceled Chrome\\'s screen sharing prompt';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.CHROME_EXTENSION_GENERIC_ERROR]\n    = 'Unknown error from Chrome extension';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.ELECTRON_DESKTOP_PICKER_ERROR]\n    = 'Unkown error from desktop picker';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.ELECTRON_DESKTOP_PICKER_NOT_FOUND]\n    = 'Failed to detect desktop picker';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.GENERAL]\n    = 'Generic getUserMedia error';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.PERMISSION_DENIED]\n    = 'User denied permission to use device(s): ';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.NOT_FOUND]\n    = 'Requested device(s) was/were not found: ';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.CONSTRAINT_FAILED]\n    = 'Constraint could not be satisfied: ';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.TRACK_IS_DISPOSED]\n    = 'Track has been already disposed';\nTRACK_ERROR_TO_MESSAGE_MAP[JitsiTrackErrors.TRACK_NO_STREAM_FOUND]\n    = 'Track does not have an associated Media Stream';\n\n// FIXME: Using prototype inheritance because otherwise instanceof is not\n// working properly (see https://github.com/babel/babel/issues/3083)\n\n/**\n *\n * Represents an error that occurred to a JitsiTrack. Can represent various\n * types of errors. For error descriptions (@see JitsiTrackErrors).\n *\n * @extends Error\n *\n *\n * @constructor\n * @param {Object|string} error - error object or error name\n * @param {Object|string} (options) - getUserMedia constraints object or\n * error message\n * @param {('audio'|'video'|'desktop'|'screen'|'audiooutput')[]} (devices) -\n * list of getUserMedia requested devices\n */\nfunction JitsiTrackError(error, options, devices) {\n    if (typeof error === 'object' && typeof error.name !== 'undefined') {\n        /**\n         * Additional information about original getUserMedia error\n         * and constraints.\n         * @type {{\n         *     error: Object,\n         *     constraints: Object,\n         *     devices: Array.<'audio'|'video'|'desktop'|'screen'>\n         * }}\n         */\n        this.gum = {\n            error,\n            constraints: options,\n            devices: devices && Array.isArray(devices)\n                ? devices.slice(0)\n                : undefined\n        };\n\n        switch (error.name) {\n        case 'NotAllowedError':\n        case 'PermissionDeniedError':\n        case 'SecurityError':\n            this.name = JitsiTrackErrors.PERMISSION_DENIED;\n            this.message\n                = TRACK_ERROR_TO_MESSAGE_MAP[this.name]\n                    + (this.gum.devices || []).join(', ');\n            break;\n        case 'DevicesNotFoundError':\n        case 'NotFoundError':\n            this.name = JitsiTrackErrors.NOT_FOUND;\n            this.message\n                = TRACK_ERROR_TO_MESSAGE_MAP[this.name]\n                    + (this.gum.devices || []).join(', ');\n            break;\n        case 'ConstraintNotSatisfiedError':\n        case 'OverconstrainedError': {\n            const constraintName = error.constraintName || error.constraint;\n\n            // we treat deviceId as unsupported resolution, as we want to\n            // retry and finally if everything fails to remove deviceId from\n            // mandatory constraints\n            if (options\n                    && options.video\n                    && (!devices || devices.indexOf('video') > -1)\n                    && (constraintName === 'minWidth'\n                        || constraintName === 'maxWidth'\n                        || constraintName === 'minHeight'\n                        || constraintName === 'maxHeight'\n                        || constraintName === 'width'\n                        || constraintName === 'height'\n                        || constraintName === 'deviceId')) {\n                this.name = JitsiTrackErrors.UNSUPPORTED_RESOLUTION;\n                this.message\n                    = TRACK_ERROR_TO_MESSAGE_MAP[this.name]\n                        + getResolutionFromFailedConstraint(\n                            constraintName,\n                            options);\n            } else {\n                this.name = JitsiTrackErrors.CONSTRAINT_FAILED;\n                this.message\n                    = TRACK_ERROR_TO_MESSAGE_MAP[this.name]\n                        + error.constraintName;\n            }\n            break;\n        }\n\n        default:\n            this.name = JitsiTrackErrors.GENERAL;\n            this.message\n                = error.message || TRACK_ERROR_TO_MESSAGE_MAP[this.name];\n            break;\n        }\n    } else if (typeof error === 'string') {\n        if (TRACK_ERROR_TO_MESSAGE_MAP[error]) {\n            this.name = error;\n            this.message = options || TRACK_ERROR_TO_MESSAGE_MAP[error];\n        } else {\n            // this is some generic error that do not fit any of our\n            // pre-defined errors, so don't give it any specific name, just\n            // store message\n            this.message = error;\n        }\n    } else {\n        throw new Error('Invalid arguments');\n    }\n\n    this.stack = error.stack || (new Error()).stack;\n}\n\nJitsiTrackError.prototype = Object.create(Error.prototype);\nJitsiTrackError.prototype.constructor = JitsiTrackError;\n\n/**\n * Gets failed resolution constraint from corresponding object.\n * @param {string} failedConstraintName\n * @param {Object} constraints\n * @returns {string|number}\n */\nfunction getResolutionFromFailedConstraint(failedConstraintName, constraints) {\n    if (constraints && constraints.video && constraints.video.mandatory) {\n        switch (failedConstraintName) {\n        case 'width':\n            return constraints.video.mandatory.minWidth;\n        case 'height':\n            return constraints.video.mandatory.minHeight;\n        default:\n            return constraints.video.mandatory[failedConstraintName] || '';\n        }\n    }\n\n    return '';\n}\n\nexport default JitsiTrackError;\n","/**\n * The media track was removed to the conference.\n */\nexport const LOCAL_TRACK_STOPPED = 'track.stopped';\n\n/**\n * Audio levels of a this track was changed.\n * The first argument is a number with audio level value in range [0, 1].\n * The second argument is a <tt>TraceablePeerConnection</tt> which is the peer\n * connection which measured the audio level (one audio track can be added\n * to multiple peer connection at the same time). This argument is optional for\n * local tracks for which we can measure audio level without the peer\n * connection (the value will be <tt>undefined</tt>).\n *\n * NOTE The second argument should be treated as library internal and can be\n * removed at any time.\n */\nexport const TRACK_AUDIO_LEVEL_CHANGED = 'track.audioLevelsChanged';\n\n/**\n * The audio output of the track was changed.\n */\nexport const TRACK_AUDIO_OUTPUT_CHANGED = 'track.audioOutputChanged';\n\n/**\n * A media track mute status was changed.\n */\nexport const TRACK_MUTE_CHANGED = 'track.trackMuteChanged';\n\n/**\n * The video type(\"camera\" or \"desktop\") of the track was changed.\n */\nexport const TRACK_VIDEOTYPE_CHANGED = 'track.videoTypeChanged';\n\n/**\n * Indicates that the track is not receiving any data even though we expect it\n * to receive data (i.e. the stream is not stopped).\n */\nexport const NO_DATA_FROM_SOURCE = 'track.no_data_from_source';\n","/**\n * The errors for the conference.\n */\n\n/**\n * Indicates that client must be authenticated to create the conference.\n */\nexport const AUTHENTICATION_REQUIRED = 'conference.authenticationRequired';\n\n/**\n * Indicates that chat error occurred.\n */\nexport const CHAT_ERROR = 'conference.chatError';\n\n/**\n * Indicates that conference has been destroyed.\n */\nexport const CONFERENCE_DESTROYED = 'conference.destroyed';\n\n/**\n * Indicates that max users limit has been reached.\n */\nexport const CONFERENCE_MAX_USERS = 'conference.max_users';\n\n/**\n * Indicates that a connection error occurred when trying to join a conference.\n */\nexport const CONNECTION_ERROR = 'conference.connectionError';\n\n/**\n * Indicates that a connection error is due to not allowed,\n * occurred when trying to join a conference.\n */\nexport const NOT_ALLOWED_ERROR = 'conference.connectionError.notAllowed';\n\n/**\n * Indicates that focus error happened.\n */\nexport const FOCUS_DISCONNECTED = 'conference.focusDisconnected';\n\n/**\n * Indicates that focus left the conference.\n */\nexport const FOCUS_LEFT = 'conference.focusLeft';\n\n/**\n * Indicates that graceful shutdown happened.\n */\nexport const GRACEFUL_SHUTDOWN = 'conference.gracefulShutdown';\n\n/**\n * Indicates that the versions of the server side components are incompatible\n * with the client side.\n */\nexport const INCOMPATIBLE_SERVER_VERSIONS\n    = 'conference.incompatible_server_versions';\n\n/**\n * Indicates that offer/answer had failed.\n */\nexport const OFFER_ANSWER_FAILED = 'conference.offerAnswerFailed';\n\n/**\n * Indicates that password cannot be set for this conference.\n */\nexport const PASSWORD_NOT_SUPPORTED = 'conference.passwordNotSupported';\n\n/**\n * Indicates that a password is required in order to join the conference.\n */\nexport const PASSWORD_REQUIRED = 'conference.passwordRequired';\n\n/**\n * Indicates that reservation system returned error.\n */\nexport const RESERVATION_ERROR = 'conference.reservationError';\n\n/**\n * Indicates that the conference setup failed.\n */\nexport const SETUP_FAILED = 'conference.setup_failed';\n\n/**\n * Indicates that there is no available videobridge.\n */\nexport const VIDEOBRIDGE_NOT_AVAILABLE = 'conference.videobridgeNotAvailable';\n","/* global $ */\n\nimport SDPUtil from './SDPUtil';\n\n/**\n *\n * @param sdp\n */\nexport default function SDP(sdp) {\n    const media = sdp.split('\\r\\nm=');\n\n    for (let i = 1, length = media.length; i < length; i++) {\n        let mediaI = `m=${media[i]}`;\n\n        if (i !== length - 1) {\n            mediaI += '\\r\\n';\n        }\n        media[i] = mediaI;\n    }\n    const session = `${media.shift()}\\r\\n`;\n\n    this.media = media;\n    this.raw = session + media.join('');\n    this.session = session;\n}\n\n/**\n * A flag will make {@link transportToJingle} and {@link jingle2media} replace\n * ICE candidates IPs with invalid value of '1.1.1.1' which will cause ICE\n * failure. The flag is used in the automated testing.\n * @type {boolean}\n */\nSDP.prototype.failICE = false;\n\n/**\n * Whether or not to remove TCP ice candidates when translating from/to jingle.\n * @type {boolean}\n */\nSDP.prototype.removeTcpCandidates = false;\n\n/**\n * Whether or not to remove UDP ice candidates when translating from/to jingle.\n * @type {boolean}\n */\nSDP.prototype.removeUdpCandidates = false;\n\n/**\n * Returns map of MediaChannel mapped per channel idx.\n */\nSDP.prototype.getMediaSsrcMap = function() {\n    const self = this;\n    const mediaSSRCs = {};\n    let tmp;\n\n    for (let mediaindex = 0; mediaindex < self.media.length; mediaindex++) {\n        tmp = SDPUtil.findLines(self.media[mediaindex], 'a=ssrc:');\n        const mid\n            = SDPUtil.parseMID(\n                SDPUtil.findLine(self.media[mediaindex], 'a=mid:'));\n        const media = {\n            mediaindex,\n            mid,\n            ssrcs: {},\n            ssrcGroups: []\n        };\n\n        mediaSSRCs[mediaindex] = media;\n        tmp.forEach(line => {\n            const linessrc = line.substring(7).split(' ')[0];\n\n            // allocate new ChannelSsrc\n\n            if (!media.ssrcs[linessrc]) {\n                media.ssrcs[linessrc] = {\n                    ssrc: linessrc,\n                    lines: []\n                };\n            }\n            media.ssrcs[linessrc].lines.push(line);\n        });\n        tmp = SDPUtil.findLines(self.media[mediaindex], 'a=ssrc-group:');\n        tmp.forEach(line => {\n            const idx = line.indexOf(' ');\n            const semantics = line.substr(0, idx).substr(13);\n            const ssrcs = line.substr(14 + semantics.length).split(' ');\n\n            if (ssrcs.length) {\n                media.ssrcGroups.push({\n                    semantics,\n                    ssrcs\n                });\n            }\n        });\n    }\n\n    return mediaSSRCs;\n};\n\n/**\n * Returns <tt>true</tt> if this SDP contains given SSRC.\n * @param ssrc the ssrc to check.\n * @returns {boolean} <tt>true</tt> if this SDP contains given SSRC.\n */\nSDP.prototype.containsSSRC = function(ssrc) {\n    // FIXME this code is really strange - improve it if you can\n    const medias = this.getMediaSsrcMap();\n    let result = false;\n\n    Object.keys(medias).forEach(mediaindex => {\n        if (result) {\n            return;\n        }\n        if (medias[mediaindex].ssrcs[ssrc]) {\n            result = true;\n        }\n    });\n\n    return result;\n};\n\n// remove iSAC and CN from SDP\nSDP.prototype.mangle = function() {\n    let i, j, lines, mline, newdesc, rtpmap;\n\n    for (i = 0; i < this.media.length; i++) {\n        lines = this.media[i].split('\\r\\n');\n        lines.pop(); // remove empty last element\n        mline = SDPUtil.parseMLine(lines.shift());\n        if (mline.media !== 'audio') {\n            continue; // eslint-disable-line no-continue\n        }\n        newdesc = '';\n        mline.fmt.length = 0;\n        for (j = 0; j < lines.length; j++) {\n            if (lines[j].substr(0, 9) === 'a=rtpmap:') {\n                rtpmap = SDPUtil.parseRTPMap(lines[j]);\n                if (rtpmap.name === 'CN' || rtpmap.name === 'ISAC') {\n                    continue; // eslint-disable-line no-continue\n                }\n                mline.fmt.push(rtpmap.id);\n            }\n            newdesc += `${lines[j]}\\r\\n`;\n        }\n        this.media[i] = `${SDPUtil.buildMLine(mline)}\\r\\n${newdesc}`;\n    }\n    this.raw = this.session + this.media.join('');\n};\n\n// remove lines matching prefix from session section\nSDP.prototype.removeSessionLines = function(prefix) {\n    const self = this;\n    const lines = SDPUtil.findLines(this.session, prefix);\n\n    lines.forEach(line => {\n        self.session = self.session.replace(`${line}\\r\\n`, '');\n    });\n    this.raw = this.session + this.media.join('');\n\n    return lines;\n};\n\n// remove lines matching prefix from a media section specified by mediaindex\n// TODO: non-numeric mediaindex could match mid\nSDP.prototype.removeMediaLines = function(mediaindex, prefix) {\n    const self = this;\n    const lines = SDPUtil.findLines(this.media[mediaindex], prefix);\n\n    lines.forEach(line => {\n        self.media[mediaindex]\n            = self.media[mediaindex].replace(`${line}\\r\\n`, '');\n    });\n    this.raw = this.session + this.media.join('');\n\n    return lines;\n};\n\n// add content's to a jingle element\nSDP.prototype.toJingle = function(elem, thecreator) {\n    let i, j, k, lines, mline, rtpmap, ssrc, tmp;\n\n    // new bundle plan\n\n    lines = SDPUtil.findLines(this.session, 'a=group:');\n    if (lines.length) {\n        for (i = 0; i < lines.length; i++) {\n            tmp = lines[i].split(' ');\n            const semantics = tmp.shift().substr(8);\n\n            elem.c('group', { xmlns: 'urn:xmpp:jingle:apps:grouping:0',\n                semantics });\n            for (j = 0; j < tmp.length; j++) {\n                elem.c('content', { name: tmp[j] }).up();\n            }\n            elem.up();\n        }\n    }\n    for (i = 0; i < this.media.length; i++) {\n        mline = SDPUtil.parseMLine(this.media[i].split('\\r\\n')[0]);\n        if (!(mline.media === 'audio'\n              || mline.media === 'video'\n              || mline.media === 'application')) {\n            continue; // eslint-disable-line no-continue\n        }\n        const assrcline = SDPUtil.findLine(this.media[i], 'a=ssrc:');\n\n        if (assrcline) {\n            ssrc = assrcline.substring(7).split(' ')[0]; // take the first\n        } else {\n            ssrc = false;\n        }\n\n        elem.c('content', { creator: thecreator,\n            name: mline.media });\n        const amidline = SDPUtil.findLine(this.media[i], 'a=mid:');\n\n        if (amidline) {\n            // prefer identifier from a=mid if present\n            const mid = SDPUtil.parseMID(amidline);\n\n            elem.attrs({ name: mid });\n        }\n\n        if (SDPUtil.findLine(this.media[i], 'a=rtpmap:').length) {\n            elem.c('description',\n                { xmlns: 'urn:xmpp:jingle:apps:rtp:1',\n                    media: mline.media });\n            if (ssrc) {\n                elem.attrs({ ssrc });\n            }\n            for (j = 0; j < mline.fmt.length; j++) {\n                rtpmap\n                    = SDPUtil.findLine(\n                        this.media[i],\n                        `a=rtpmap:${mline.fmt[j]}`);\n                elem.c('payload-type', SDPUtil.parseRTPMap(rtpmap));\n\n                // put any 'a=fmtp:' + mline.fmt[j] lines into <param name=foo\n                // value=bar/>\n                const afmtpline\n                    = SDPUtil.findLine(\n                        this.media[i],\n                        `a=fmtp:${mline.fmt[j]}`);\n\n                if (afmtpline) {\n                    tmp = SDPUtil.parseFmtp(afmtpline);\n\n                    // eslint-disable-next-line max-depth\n                    for (k = 0; k < tmp.length; k++) {\n                        elem.c('parameter', tmp[k]).up();\n                    }\n                }\n\n                // XEP-0293 -- map a=rtcp-fb\n                this.rtcpFbToJingle(i, elem, mline.fmt[j]);\n\n                elem.up();\n            }\n            const crypto\n                = SDPUtil.findLines(this.media[i], 'a=crypto:', this.session);\n\n            if (crypto.length) {\n                elem.c('encryption', { required: 1 });\n                crypto.forEach(\n                    line => elem.c('crypto', SDPUtil.parseCrypto(line)).up());\n                elem.up(); // end of encryption\n            }\n\n            if (ssrc) {\n                const ssrcMap = SDPUtil.parseSSRC(this.media[i]);\n\n                for (const [ availableSsrc, ssrcParameters ] of ssrcMap) {\n                    elem.c('source', {\n                        ssrc: availableSsrc,\n                        xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0'\n                    });\n\n                    ssrcParameters.forEach(ssrcSdpLine => {\n                        // get everything after first space\n                        const idx = ssrcSdpLine.indexOf(' ');\n                        const kv = ssrcSdpLine.substr(idx + 1);\n\n                        elem.c('parameter');\n                        if (kv.indexOf(':') === -1) {\n                            elem.attrs({ name: kv });\n                        } else {\n                            const name = kv.split(':', 2)[0];\n\n                            elem.attrs({ name });\n\n                            let v = kv.split(':', 2)[1];\n\n                            v = SDPUtil.filterSpecialChars(v);\n                            elem.attrs({ value: v });\n                        }\n                        elem.up();\n                    });\n\n                    elem.up();\n                }\n\n                // XEP-0339 handle ssrc-group attributes\n                const ssrcGroupLines\n                    = SDPUtil.findLines(this.media[i], 'a=ssrc-group:');\n\n                ssrcGroupLines.forEach(line => {\n                    const idx = line.indexOf(' ');\n                    const semantics = line.substr(0, idx).substr(13);\n                    const ssrcs = line.substr(14 + semantics.length).split(' ');\n\n                    if (ssrcs.length) {\n                        elem.c('ssrc-group', { semantics,\n                            xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0' });\n                        ssrcs.forEach(s => elem.c('source', { ssrc: s }).up());\n                        elem.up();\n                    }\n                });\n            }\n\n            const ridLines = SDPUtil.findLines(this.media[i], 'a=rid');\n\n            if (ridLines.length) {\n                // Map a line which looks like \"a=rid:2 send\" to just\n                // the rid (\"2\")\n                const rids = ridLines\n                    .map(ridLine => ridLine.split(':')[1])\n                    .map(ridInfo => ridInfo.split(' ')[0]);\n\n                rids.forEach(rid => {\n                    elem.c('source', {\n                        rid,\n                        xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0'\n                    });\n                    elem.up();\n                });\n                const unifiedSimulcast\n                    = SDPUtil.findLine(this.media[i], 'a=simulcast');\n\n                if (unifiedSimulcast) {\n                    elem.c('rid-group', {\n                        semantics: 'SIM',\n                        xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0'\n                    });\n                    rids.forEach(rid => {\n                        elem.c('source', { rid }).up();\n                    });\n                    elem.up();\n                }\n            }\n\n            if (SDPUtil.findLine(this.media[i], 'a=rtcp-mux')) {\n                elem.c('rtcp-mux').up();\n            }\n\n            // XEP-0293 -- map a=rtcp-fb:*\n            this.rtcpFbToJingle(i, elem, '*');\n\n            // XEP-0294\n            lines = SDPUtil.findLines(this.media[i], 'a=extmap:');\n            if (lines.length) {\n                for (j = 0; j < lines.length; j++) {\n                    tmp = SDPUtil.parseExtmap(lines[j]);\n                    elem.c('rtp-hdrext', {\n                        xmlns: 'urn:xmpp:jingle:apps:rtp:rtp-hdrext:0',\n                        uri: tmp.uri,\n                        id: tmp.value\n                    });\n\n                    // eslint-disable-next-line max-depth\n                    if (tmp.hasOwnProperty('direction')) {\n\n                        // eslint-disable-next-line max-depth\n                        switch (tmp.direction) {\n                        case 'sendonly':\n                            elem.attrs({ senders: 'responder' });\n                            break;\n                        case 'recvonly':\n                            elem.attrs({ senders: 'initiator' });\n                            break;\n                        case 'sendrecv':\n                            elem.attrs({ senders: 'both' });\n                            break;\n                        case 'inactive':\n                            elem.attrs({ senders: 'none' });\n                            break;\n                        }\n                    }\n\n                    // TODO: handle params\n                    elem.up();\n                }\n            }\n            elem.up(); // end of description\n        }\n\n        // map ice-ufrag/pwd, dtls fingerprint, candidates\n        this.transportToJingle(i, elem);\n\n        const m = this.media[i];\n\n        if (SDPUtil.findLine(m, 'a=sendrecv', this.session)) {\n            elem.attrs({ senders: 'both' });\n        } else if (SDPUtil.findLine(m, 'a=sendonly', this.session)) {\n            elem.attrs({ senders: 'initiator' });\n        } else if (SDPUtil.findLine(m, 'a=recvonly', this.session)) {\n            elem.attrs({ senders: 'responder' });\n        } else if (SDPUtil.findLine(m, 'a=inactive', this.session)) {\n            elem.attrs({ senders: 'none' });\n        }\n        if (mline.port === '0') {\n            // estos hack to reject an m-line\n            elem.attrs({ senders: 'rejected' });\n        }\n        elem.up(); // end of content\n    }\n    elem.up();\n\n    return elem;\n};\n\nSDP.prototype.transportToJingle = function(mediaindex, elem) {\n    let tmp;\n    const self = this;\n\n    elem.c('transport');\n\n    // XEP-0343 DTLS/SCTP\n    const sctpmap\n        = SDPUtil.findLine(this.media[mediaindex], 'a=sctpmap:', self.session);\n\n    if (sctpmap) {\n        const sctpAttrs = SDPUtil.parseSCTPMap(sctpmap);\n\n        elem.c('sctpmap', {\n            xmlns: 'urn:xmpp:jingle:transports:dtls-sctp:1',\n            number: sctpAttrs[0], /* SCTP port */\n            protocol: sctpAttrs[1] /* protocol */\n        });\n\n        // Optional stream count attribute\n        if (sctpAttrs.length > 2) {\n            elem.attrs({ streams: sctpAttrs[2] });\n        }\n        elem.up();\n    }\n\n    // XEP-0320\n    const fingerprints\n        = SDPUtil.findLines(\n            this.media[mediaindex],\n            'a=fingerprint:',\n            this.session);\n\n    fingerprints.forEach(line => {\n        tmp = SDPUtil.parseFingerprint(line);\n        tmp.xmlns = 'urn:xmpp:jingle:apps:dtls:0';\n        elem.c('fingerprint').t(tmp.fingerprint);\n        delete tmp.fingerprint;\n\n        // eslint-disable-next-line no-param-reassign\n        line\n            = SDPUtil.findLine(\n                self.media[mediaindex],\n                'a=setup:',\n                self.session);\n        if (line) {\n            tmp.setup = line.substr(8);\n        }\n        elem.attrs(tmp);\n        elem.up(); // end of fingerprint\n    });\n    tmp = SDPUtil.iceparams(this.media[mediaindex], this.session);\n    if (tmp) {\n        tmp.xmlns = 'urn:xmpp:jingle:transports:ice-udp:1';\n        elem.attrs(tmp);\n\n        // XEP-0176\n        const lines\n            = SDPUtil.findLines(\n                this.media[mediaindex],\n                'a=candidate:',\n                this.session);\n\n        if (lines.length) { // add any a=candidate lines\n            lines.forEach(line => {\n                const candidate = SDPUtil.candidateToJingle(line);\n\n                if (self.failICE) {\n                    candidate.ip = '1.1.1.1';\n                }\n                const protocol\n                    = candidate && typeof candidate.protocol === 'string'\n                        ? candidate.protocol.toLowerCase()\n                        : '';\n\n                if ((self.removeTcpCandidates\n                        && (protocol === 'tcp' || protocol === 'ssltcp'))\n                    || (self.removeUdpCandidates && protocol === 'udp')) {\n                    return;\n                }\n                elem.c('candidate', candidate).up();\n            });\n        }\n    }\n    elem.up(); // end of transport\n};\n\n// XEP-0293\nSDP.prototype.rtcpFbToJingle = function(mediaindex, elem, payloadtype) {\n    const lines\n        = SDPUtil.findLines(\n            this.media[mediaindex],\n            `a=rtcp-fb:${payloadtype}`);\n\n    lines.forEach(line => {\n        const tmp = SDPUtil.parseRTCPFB(line);\n\n        if (tmp.type === 'trr-int') {\n            elem.c('rtcp-fb-trr-int', {\n                xmlns: 'urn:xmpp:jingle:apps:rtp:rtcp-fb:0',\n                value: tmp.params[0]\n            });\n            elem.up();\n        } else {\n            elem.c('rtcp-fb', {\n                xmlns: 'urn:xmpp:jingle:apps:rtp:rtcp-fb:0',\n                type: tmp.type\n            });\n            if (tmp.params.length > 0) {\n                elem.attrs({ 'subtype': tmp.params[0] });\n            }\n            elem.up();\n        }\n    });\n};\n\nSDP.prototype.rtcpFbFromJingle = function(elem, payloadtype) { // XEP-0293\n    let media = '';\n    let tmp\n        = elem.find(\n            '>rtcp-fb-trr-int[xmlns=\"urn:xmpp:jingle:apps:rtp:rtcp-fb:0\"]');\n\n    if (tmp.length) {\n        media += 'a=rtcp-fb:* trr-int ';\n        if (tmp.attr('value')) {\n            media += tmp.attr('value');\n        } else {\n            media += '0';\n        }\n        media += '\\r\\n';\n    }\n    tmp = elem.find('>rtcp-fb[xmlns=\"urn:xmpp:jingle:apps:rtp:rtcp-fb:0\"]');\n    tmp.each(function() {\n        /* eslint-disable no-invalid-this */\n        media += `a=rtcp-fb:${payloadtype} ${$(this).attr('type')}`;\n        if ($(this).attr('subtype')) {\n            media += ` ${$(this).attr('subtype')}`;\n        }\n        media += '\\r\\n';\n\n        /* eslint-enable no-invalid-this */\n    });\n\n    return media;\n};\n\n// construct an SDP from a jingle stanza\nSDP.prototype.fromJingle = function(jingle) {\n    const self = this;\n\n    this.raw = 'v=0\\r\\n'\n        + 'o=- 1923518516 2 IN IP4 0.0.0.0\\r\\n'// FIXME\n        + 's=-\\r\\n'\n        + 't=0 0\\r\\n';\n\n    // http://tools.ietf.org/html/draft-ietf-mmusic-sdp-bundle-negotiation-04\n    // #section-8\n    const groups\n        = $(jingle).find('>group[xmlns=\"urn:xmpp:jingle:apps:grouping:0\"]');\n\n    if (groups.length) {\n        groups.each((idx, group) => {\n            const contents\n                = $(group)\n                    .find('>content')\n                    .map((_, content) => content.getAttribute('name'))\n                    .get();\n\n            if (contents.length > 0) {\n                self.raw\n                    += `a=group:${\n                        group.getAttribute('semantics')\n                            || group.getAttribute('type')} ${\n                        contents.join(' ')}\\r\\n`;\n            }\n        });\n    }\n\n    this.session = this.raw;\n    jingle.find('>content').each(function() {\n        // eslint-disable-next-line no-invalid-this\n        const m = self.jingle2media($(this));\n\n        self.media.push(m);\n    });\n\n    // reconstruct msid-semantic -- apparently not necessary\n    /*\n     var msid = SDPUtil.parseSSRC(this.raw);\n     if (msid.hasOwnProperty('mslabel')) {\n     this.session += \"a=msid-semantic: WMS \" + msid.mslabel + \"\\r\\n\";\n     }\n     */\n\n    this.raw = this.session + this.media.join('');\n};\n\n// translate a jingle content element into an an SDP media part\nSDP.prototype.jingle2media = function(content) {\n    const desc = content.find('description');\n    let media = '';\n    const self = this;\n    const sctp = content.find(\n        '>transport>sctpmap[xmlns=\"urn:xmpp:jingle:transports:dtls-sctp:1\"]');\n\n    let tmp = { media: desc.attr('media') };\n\n    tmp.port = '1';\n    if (content.attr('senders') === 'rejected') {\n        // estos hack to reject an m-line.\n        tmp.port = '0';\n    }\n    if (content.find('>transport>fingerprint').length\n            || desc.find('encryption').length) {\n        tmp.proto = sctp.length ? 'DTLS/SCTP' : 'RTP/SAVPF';\n    } else {\n        tmp.proto = 'RTP/AVPF';\n    }\n    if (sctp.length) {\n        media += `m=application ${tmp.port} DTLS/SCTP ${\n            sctp.attr('number')}\\r\\n`;\n        media += `a=sctpmap:${sctp.attr('number')} ${sctp.attr('protocol')}`;\n\n        const streamCount = sctp.attr('streams');\n\n        if (streamCount) {\n            media += ` ${streamCount}\\r\\n`;\n        } else {\n            media += '\\r\\n';\n        }\n    } else {\n        tmp.fmt\n            = desc\n                .find('payload-type')\n                .map(function() {\n                    // eslint-disable-next-line no-invalid-this\n                    return this.getAttribute('id');\n                })\n                .get();\n        media += `${SDPUtil.buildMLine(tmp)}\\r\\n`;\n    }\n\n    media += 'c=IN IP4 0.0.0.0\\r\\n';\n    if (!sctp.length) {\n        media += 'a=rtcp:1 IN IP4 0.0.0.0\\r\\n';\n    }\n    tmp\n        = content.find(\n            '>transport[xmlns=\"urn:xmpp:jingle:transports:ice-udp:1\"]');\n    if (tmp.length) {\n        if (tmp.attr('ufrag')) {\n            media += `${SDPUtil.buildICEUfrag(tmp.attr('ufrag'))}\\r\\n`;\n        }\n        if (tmp.attr('pwd')) {\n            media += `${SDPUtil.buildICEPwd(tmp.attr('pwd'))}\\r\\n`;\n        }\n        tmp.find('>fingerprint').each(function() {\n            /* eslint-disable no-invalid-this */\n            // FIXME: check namespace at some point\n            media += `a=fingerprint:${this.getAttribute('hash')}`;\n            media += ` ${$(this).text()}`;\n            media += '\\r\\n';\n            if (this.getAttribute('setup')) {\n                media += `a=setup:${this.getAttribute('setup')}\\r\\n`;\n            }\n\n            /* eslint-enable no-invalid-this */\n        });\n    }\n    switch (content.attr('senders')) {\n    case 'initiator':\n        media += 'a=sendonly\\r\\n';\n        break;\n    case 'responder':\n        media += 'a=recvonly\\r\\n';\n        break;\n    case 'none':\n        media += 'a=inactive\\r\\n';\n        break;\n    case 'both':\n        media += 'a=sendrecv\\r\\n';\n        break;\n    }\n    media += `a=mid:${content.attr('name')}\\r\\n`;\n\n    // <description><rtcp-mux/></description>\n    // see http://code.google.com/p/libjingle/issues/detail?id=309 -- no spec\n    // though\n    // and http://mail.jabber.org/pipermail/jingle/2011-December/001761.html\n    if (desc.find('rtcp-mux').length) {\n        media += 'a=rtcp-mux\\r\\n';\n    }\n\n    if (desc.find('encryption').length) {\n        desc.find('encryption>crypto').each(function() {\n            /* eslint-disable no-invalid-this */\n            media += `a=crypto:${this.getAttribute('tag')}`;\n            media += ` ${this.getAttribute('crypto-suite')}`;\n            media += ` ${this.getAttribute('key-params')}`;\n            if (this.getAttribute('session-params')) {\n                media += ` ${this.getAttribute('session-params')}`;\n            }\n            media += '\\r\\n';\n\n            /* eslint-enable no-invalid-this */\n        });\n    }\n    desc.find('payload-type').each(function() {\n        /* eslint-disable no-invalid-this */\n        media += `${SDPUtil.buildRTPMap(this)}\\r\\n`;\n        if ($(this).find('>parameter').length) {\n            media += `a=fmtp:${this.getAttribute('id')} `;\n            media\n                += $(this)\n                    .find('parameter')\n                    .map(function() {\n                        const name = this.getAttribute('name');\n\n                        return (\n                            (name ? `${name}=` : '')\n                                + this.getAttribute('value'));\n                    })\n                    .get()\n                    .join('; ');\n            media += '\\r\\n';\n        }\n\n        // xep-0293\n        media += self.rtcpFbFromJingle($(this), this.getAttribute('id'));\n\n        /* eslint-enable no-invalid-this */\n    });\n\n    // xep-0293\n    media += self.rtcpFbFromJingle(desc, '*');\n\n    // xep-0294\n    tmp\n        = desc.find(\n            '>rtp-hdrext[xmlns=\"urn:xmpp:jingle:apps:rtp:rtp-hdrext:0\"]');\n    tmp.each(function() {\n        /* eslint-disable no-invalid-this */\n        media\n            += `a=extmap:${this.getAttribute('id')} ${\n                this.getAttribute('uri')}\\r\\n`;\n\n        /* eslint-enable no-invalid-this */\n    });\n\n    content\n        .find(\n            '>transport[xmlns=\"urn:xmpp:jingle:transports:ice-udp:1\"]'\n                + '>candidate')\n        .each(function() {\n            /* eslint-disable no-invalid-this */\n            let protocol = this.getAttribute('protocol');\n\n            protocol\n                = typeof protocol === 'string' ? protocol.toLowerCase() : '';\n\n            if ((self.removeTcpCandidates\n                    && (protocol === 'tcp' || protocol === 'ssltcp'))\n                || (self.removeUdpCandidates && protocol === 'udp')) {\n                return;\n            } else if (self.failICE) {\n                this.setAttribute('ip', '1.1.1.1');\n            }\n\n            media += SDPUtil.candidateFromJingle(this);\n\n            /* eslint-enable no-invalid-this */\n        });\n\n    // XEP-0339 handle ssrc-group attributes\n    content\n        .find('description>ssrc-group[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]')\n        .each(function() {\n            /* eslint-disable no-invalid-this */\n            const semantics = this.getAttribute('semantics');\n            const ssrcs\n                = $(this)\n                    .find('>source')\n                    .map(function() {\n                        return this.getAttribute('ssrc');\n                    })\n                    .get();\n\n            if (ssrcs.length) {\n                media += `a=ssrc-group:${semantics} ${ssrcs.join(' ')}\\r\\n`;\n            }\n\n            /* eslint-enable no-invalid-this */\n        });\n\n    tmp\n        = content.find(\n            'description>source[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]');\n    tmp.each(function() {\n        /* eslint-disable no-invalid-this */\n        const ssrc = this.getAttribute('ssrc');\n\n        // eslint-disable-next-line newline-per-chained-call\n        $(this).find('>parameter').each(function() {\n            const name = this.getAttribute('name');\n            let value = this.getAttribute('value');\n\n            value = SDPUtil.filterSpecialChars(value);\n            media += `a=ssrc:${ssrc} ${name}`;\n            if (value && value.length) {\n                media += `:${value}`;\n            }\n            media += '\\r\\n';\n        });\n\n        /* eslint-enable no-invalid-this */\n    });\n\n    return media;\n};\n","// TODO: Maybe fix the values to 'Chrome', 'Internet Explorer', etc. Currently\n// this values needs to be as they are becuse they are going to analytics,\n// callstats, etc.\n\nexport const CHROME = 'chrome';\n\nexport const OPERA = 'opera';\n\nexport const FIREFOX = 'firefox';\n\nexport const INTERNET_EXPLORER = 'iexplorer';\n\nexport const EDGE = 'edge';\n\nexport const SAFARI = 'safari';\n\nexport const NWJS = 'nwjs';\n\nexport const ELECTRON = 'electron';\n\nexport const REACT_NATIVE = 'react-native';\n\nexport const UNKNOWN = 'unknown';\n","import bowser from 'bowser';\n\nimport {\n    CHROME,\n    OPERA,\n    FIREFOX,\n    INTERNET_EXPLORER,\n    EDGE,\n    SAFARI,\n    NWJS,\n    ELECTRON,\n    REACT_NATIVE,\n    UNKNOWN\n} from './browsers';\n\n/**\n * Maps the names of the browsers from bowser to the internal names defined in\n * ./browsers.js\n */\nconst bowserNameToJitsiName = {\n    'Chrome': CHROME,\n    'Chromium': CHROME,\n    'Opera': OPERA,\n    'Firefox': FIREFOX,\n    'Internet Explorer': INTERNET_EXPLORER,\n    'Microsoft Edge': EDGE,\n    'Safari': SAFARI\n};\n\n/**\n * Detects a Chromium based environent.\n * \n * NOTE: Here we cannot check solely for \"Chrome\" in the UA string and the\n * \"window.chrome\" property, because Edge has both, so we add an explicit\n * check for NOT Edge.\n *\n * @returns {Object|undefined} - The name (CHROME) and version.\n */\nfunction _detectChromiumBased() {\n    const userAgent = navigator.userAgent;\n\n    if (Boolean(window.chrome)\n            && !userAgent.match(/Edge/) && userAgent.match(/Chrome/)) {\n        const version = userAgent.match(/Chrome\\/([\\d.]+)/)[1];\n\n        return {\n            name: CHROME,\n            version\n        };\n    }\n}\n\n/**\n * Detects Electron environment.\n *\n * @returns {Object|undefined} - The name (ELECTRON) and version.\n */\nfunction _detectElectron() {\n    const userAgent = navigator.userAgent;\n\n    if (userAgent.match(/Electron/)) {\n        const version = userAgent.match(/Electron\\/([\\d.]+)/)[1];\n\n        return {\n            name: ELECTRON,\n            version\n        };\n    }\n}\n\n/**\n * Detects NWJS environment.\n *\n * @returns {Object|undefined} - The name (NWJS) and version.\n */\nfunction _detectNWJS() {\n    const userAgent = navigator.userAgent;\n\n    if (userAgent.match(/JitsiMeetNW/)) {\n        const version = userAgent.match(/JitsiMeetNW\\/([\\d.]+)/)[1];\n\n        return {\n            name: NWJS,\n            version\n        };\n    }\n}\n\n/**\n * Detects React Native environment.\n * @returns {Object|undefined} - The name (REACT_NATIVE) and version.\n */\nfunction _detectReactNative() {\n    const match\n        = navigator.userAgent.match(/\\b(react[ \\t_-]*native)(?:\\/(\\S+))?/i);\n    let version;\n\n    // If we're remote debugging a React Native app, it may be treated as\n    // Chrome. Check navigator.product as well and always return some version\n    // even if we can't get the real one.\n\n    if (match || navigator.product === 'ReactNative') {\n        let name;\n\n        if (match && match.length > 2) {\n            name = match[1];\n            version = match[2];\n        }\n        name || (name = 'react-native');\n        version || (version = 'unknown');\n\n        return {\n            name: REACT_NATIVE,\n            version\n        };\n    }\n}\n\n/**\n * Returns information about the current browser.\n *\n * @returns {Object} - The name and version of the browser.\n */\nfunction _detect() {\n    let browserInfo;\n    const detectors = [\n        _detectReactNative,\n        _detectElectron,\n        _detectNWJS\n    ];\n\n    // Try all browser detectors\n    for (let i = 0; i < detectors.length; i++) {\n        browserInfo = detectors[i]();\n        if (browserInfo) {\n            return browserInfo;\n        }\n    }\n\n    const { name, version } = bowser;\n\n    if (name in bowserNameToJitsiName) {\n        return {\n            name: bowserNameToJitsiName[name],\n            version\n        };\n    }\n\n    // Detect other browsers with the Chrome engine, such as Vivaldi.\n    browserInfo = _detectChromiumBased();\n    if (browserInfo) {\n        return browserInfo;\n    }\n\n    return {\n        name: UNKNOWN,\n        version: undefined\n    };\n}\n\n/**\n * Implements browser detection.\n */\nexport default class BrowserDetection {\n    /**\n     * Creates new BrowserDetection instance.\n     *\n     * @param {Object} [browserInfo] - Information about the browser.\n     * @param {string} browserInfo.name - The name of the browser.\n     * @param {string} browserInfo.version - The version of the browser.\n     */\n    constructor(browserInfo) {\n        let name, version;\n\n        if (typeof browserInfo === 'undefined') {\n            const detectedBrowserInfo = _detect();\n\n            name = detectedBrowserInfo.name;\n            version = detectedBrowserInfo.version;\n        } else if (browserInfo.name in bowserNameToJitsiName) {\n            name = bowserNameToJitsiName[browserInfo.name];\n            version = browserInfo.version;\n        } else {\n            name = UNKNOWN;\n            version = undefined;\n        }\n\n        this._name = name;\n        this._version = version;\n    }\n\n    /**\n     * Gets current browser name.\n     * @returns {string}\n     */\n    getName() {\n        return this._name;\n    }\n\n    /**\n     * Checks if current browser is Chrome.\n     * @returns {boolean}\n     */\n    isChrome() {\n        return this._name === CHROME;\n    }\n\n    /**\n     * Checks if current browser is Opera.\n     * @returns {boolean}\n     */\n    isOpera() {\n        return this._name === OPERA;\n    }\n\n    /**\n     * Checks if current browser is Firefox.\n     * @returns {boolean}\n     */\n    isFirefox() {\n        return this._name === FIREFOX;\n    }\n\n    /**\n     * Checks if current browser is Internet Explorer.\n     * @returns {boolean}\n     */\n    isIExplorer() {\n        return this._name === INTERNET_EXPLORER;\n    }\n\n    /**\n     * Checks if current browser is Microsoft Edge.\n     * @returns {boolean}\n     */\n    isEdge() {\n        return this._name === EDGE;\n    }\n\n    /**\n     * Checks if current browser is Safari.\n     * @returns {boolean}\n     */\n    isSafari() {\n        return this._name === SAFARI;\n    }\n\n    /**\n     * Checks if current environment is NWJS.\n     * @returns {boolean}\n     */\n    isNWJS() {\n        return this._name === NWJS;\n    }\n\n    /**\n     * Checks if current environment is Electron.\n     * @returns {boolean}\n     */\n    isElectron() {\n        return this._name === ELECTRON;\n    }\n\n    /**\n     * Checks if current environment is React Native.\n     * @returns {boolean}\n     */\n    isReactNative() {\n        return this._name === REACT_NATIVE;\n    }\n\n    /**\n     * Returns the version of the current browser.\n     * @returns {string}\n     */\n    getVersion() {\n        return this._version;\n    }\n\n    /**\n     * Compares the passed version with the current browser version.\n     * {@see https://github.com/lancedikson/bowser}\n     */\n    static compareVersions = bowser.compareVersions;\n\n    /**\n     * Compares the passed version with the current browser version.\n     *\n     * @param {*} version - The version to compare with. Anything different\n     * than string will be converted to string.\n     * @returns {number|undefined} - Returns 0 if the version is equal to the\n     * current one, 1 if the version is greater than the current one, -1 if the\n     * version is lower than the current one and undefined if the current\n     * browser version is unknown.\n     */\n    compareVersion(version) {\n        if (this._version) {\n            return bowser.compareVersions([ String(version), this._version ]);\n        }\n    }\n\n    /**\n     * Compares the passed version with the current browser version.\n     *\n     * @param {*} version - The version to compare with. Anything different\n     * than string will be converted to string.\n     * @returns {boolean|undefined} - Returns true if the current version is\n     * greater than the passed version and false otherwise. Returns undefined if\n     * the current browser version is unknown.\n     */\n    isVersionGreaterThan(version) {\n        return this.compareVersion(version) === -1;\n    }\n\n    /**\n     * Compares the passed version with the current browser version.\n     *\n     * @param {*} version - The version to compare with. Anything different\n     * than string will be converted to string.\n     * @returns {boolean|undefined} - Returns true if the current version is\n     * lower than the passed version and false otherwise. Returns undefined if\n     * the current browser version is unknown.\n     */\n    isVersionLessThan(version) {\n        return this.compareVersion(version) === 1;\n    }\n\n    /**\n     * Compares the passed version with the current browser version.\n     *\n     * @param {*} version - The version to compare with. Anything different\n     * than string will be converted to string.\n     * @returns {boolean|undefined} - Returns true if the current version is\n     * equal to the passed version and false otherwise. Returns undefined if\n     * the current browser version is unknown.\n     */\n    isVersionEqualTo(version) {\n        return this.compareVersion(version) === 0;\n    }\n}\n","export * from './browser-capabilities';\nexport * from './browser-detection';\nexport * from './avatar';\n","/**\n * Status that video SIP GW service is available.\n * @type {string}\n */\nexport const STATUS_AVAILABLE = 'available';\n\n/**\n * Status that video SIP GW service is not available.\n * @type {string}\n */\nexport const STATUS_UNDEFINED = 'undefined';\n\n/**\n * Status that video SIP GW service is available but there are no free nodes\n * at the moment to serve new requests.\n * @type {string}\n */\nexport const STATUS_BUSY = 'busy';\n\n/**\n * Video SIP GW session state, currently running.\n * @type {string}\n */\nexport const STATE_ON = 'on';\n\n/**\n * Video SIP GW session state, currently stopped and not running.\n * @type {string}\n */\nexport const STATE_OFF = 'off';\n\n/**\n * Video SIP GW session state, currently is starting.\n * @type {string}\n */\nexport const STATE_PENDING = 'pending';\n\n/**\n * Video SIP GW session state, has observed some issues and is retrying at the\n * moment.\n * @type {string}\n */\nexport const STATE_RETRYING = 'retrying';\n\n/**\n * Video SIP GW session state, tried to start but it failed.\n * @type {string}\n */\nexport const STATE_FAILED = 'failed';\n\n/**\n * Error on trying to create video SIP GW session in conference where\n * there is no room connection (hasn't joined or has left the room).\n * @type {string}\n */\nexport const ERROR_NO_CONNECTION = 'error_no_connection';\n\n/**\n * Error on trying to create video SIP GW session with address for which\n * there is an already created session.\n * @type {string}\n */\nexport const ERROR_SESSION_EXISTS = 'error_session_already_exists';\n","/**\n * The events for the connection.\n */\n\n/**\n * Indicates that the connection has been disconnected. The event provides\n * the following parameters to its listeners:\n *\n * @param msg {string} a message associated with the disconnect such as the\n * last (known) error message\n */\nexport const CONNECTION_DISCONNECTED = 'connection.connectionDisconnected';\n\n/**\n * Indicates that the connection has been established. The event provides\n * the following parameters to its listeners:\n *\n * @param id {string} the ID of the local endpoint/participant/peer (within\n * the context of the established connection)\n */\nexport const CONNECTION_ESTABLISHED = 'connection.connectionEstablished';\n\n/**\n * Indicates that the connection has been failed for some reason. The event\n * provides the following parameters to its listeners:\n *\n * @param errType {JitsiConnectionErrors} the type of error associated with\n * the failure\n * @param errReason {string} the error (message) associated with the failure\n * @param credentials {object} the credentials used to connect (if any)\n * @param errReasonDetails {object} an optional object with details about\n * the error, like shard moving, suspending. Used for analytics purposes.\n */\nexport const CONNECTION_FAILED = 'connection.connectionFailed';\n\n/**\n * Indicates that the performed action cannot be executed because the\n * connection is not in the correct state(connected, disconnected, etc.)\n */\nexport const WRONG_STATE = 'connection.wrongState';\n","var parser = require('./parser');\nvar writer = require('./writer');\n\nexports.write = writer;\nexports.parse = parser.parse;\nexports.parseFmtpConfig = parser.parseFmtpConfig;\nexports.parseParams = parser.parseParams;\nexports.parsePayloads = parser.parsePayloads;\nexports.parseRemoteCandidates = parser.parseRemoteCandidates;\nexports.parseImageAttributes = parser.parseImageAttributes;\nexports.parseSimulcastStreamList = parser.parseSimulcastStreamList;\n","/**\n * Notifies about audio level in RTP statistics by SSRC.\n *\n * @param ssrc - The synchronization source identifier (SSRC) of the\n * endpoint/participant whose audio level is being reported.\n * @param {number} audioLevel - The audio level of <tt>ssrc</tt> according to\n * RTP statistics.\n * @param {boolean} isLocal - <tt>true</tt> if <tt>ssrc</tt> identifies the\n * local endpoint/participant; otherwise, <tt>false</tt>.\n */\nexport const AUDIO_LEVEL = 'statistics.audioLevel';\n\n/**\n * An event fired just before the statistics module gets disposes and it's\n * the last chance to submit some logs that will end up in stats services like\n * CallStats (if enabled).\n */\nexport const BEFORE_DISPOSED = 'statistics.before_disposed';\n\n/**\n * An event carrying all statistics by ssrc.\n */\nexport const BYTE_SENT_STATS = 'statistics.byte_sent_stats';\n\n/**\n * An event carrying connection statistics.\n *\n * @param {object} connectionStats - The connection statistics carried by the\n * event such as <tt>bandwidth</tt>, <tt>bitrate</tt>, <tt>packetLoss</tt>,\n * <tt>resolution</tt>, and <tt>transport</tt>.\n */\nexport const CONNECTION_STATS = 'statistics.connectionstats';\n","import EventEmitter from 'events';\n\n/**\n * The class implements basic event operations - add/remove listener.\n * NOTE: The purpose of the class is to be extended in order to add\n * this functionality to other classes.\n */\nexport default class Listenable {\n    /**\n     * Creates new instance.\n     * @param {EventEmitter} eventEmitter\n     * @constructor\n     */\n    constructor(eventEmitter = new EventEmitter()) {\n        this.eventEmitter = eventEmitter;\n\n        // aliases for addListener/removeListener\n        this.addEventListener = this.on = this.addListener;\n        this.removeEventListener = this.off = this.removeListener;\n    }\n\n    /**\n     * Adds new listener.\n     * @param {String} eventName the name of the event\n     * @param {Function} listener the listener.\n     */\n    addListener(eventName, listener) {\n        this.eventEmitter.addListener(eventName, listener);\n    }\n\n    /**\n     * Removes listener.\n     * @param {String} eventName the name of the event that triggers the\n     * listener\n     * @param {Function} listener the listener.\n     */\n    removeListener(eventName, listener) {\n        this.eventEmitter.removeListener(eventName, listener);\n    }\n}\n","import { getLogger } from 'jitsi-meet-logger';\nconst logger = getLogger(__filename);\n\nimport UsernameGenerator from '../util/UsernameGenerator';\n\nlet _callStatsUserName;\n\nlet _machineId;\n\n/**\n *\n */\nexport default {\n    /**\n     * Returns fake username for callstats\n     * @returns {string} fake username for callstats\n     */\n    get callStatsUserName() {\n        if (!_callStatsUserName) {\n            const localStorage = getLocalStorage();\n\n            if (localStorage) {\n                _callStatsUserName = localStorage.getItem('callStatsUserName');\n            }\n            if (!_callStatsUserName) {\n                _callStatsUserName = generateCallStatsUserName();\n                if (localStorage) {\n                    localStorage.setItem(\n                        'callStatsUserName',\n                        _callStatsUserName);\n                }\n            }\n        }\n\n        return _callStatsUserName;\n    },\n\n    /**\n     * Returns current machine id.\n     * @returns {string} machine id\n     */\n    get machineId() {\n        if (!_machineId) {\n            const localStorage = getLocalStorage();\n\n            if (localStorage) {\n                _machineId = localStorage.getItem('jitsiMeetId');\n            }\n            if (!_machineId) {\n                _machineId = generateJitsiMeetId();\n                if (localStorage) {\n                    localStorage.setItem('jitsiMeetId', _machineId);\n                }\n            }\n        }\n\n        return _machineId;\n    },\n\n    /**\n     * Returns current session id.\n     * @returns {string} current session id\n     */\n    get sessionId() {\n        // We may update sessionId in localStorage from another JitsiConference\n        // instance and that's why we should always re-read it.\n        const localStorage = getLocalStorage();\n\n        return localStorage ? localStorage.getItem('sessionId') : undefined;\n    },\n\n    /**\n     * Save current session id.\n     * @param {string} sessionId session id\n     */\n    set sessionId(sessionId) {\n        const localStorage = getLocalStorage();\n\n        if (localStorage) {\n            if (sessionId) {\n                localStorage.setItem('sessionId', sessionId);\n            } else {\n                localStorage.removeItem('sessionId');\n            }\n        }\n    }\n};\n\n/**\n * Generate fake username for callstats.\n * @returns {string} fake random username\n */\nfunction generateCallStatsUserName() {\n    const username = UsernameGenerator.generateUsername();\n\n    logger.log('generated callstats uid', username);\n\n    return username;\n}\n\n/**\n * Generate unique id.\n * @returns {string} random unique id\n */\nfunction generateJitsiMeetId() {\n    const jitsiMeetId = generateUniqueId();\n\n    logger.log('generated id', jitsiMeetId);\n\n    return jitsiMeetId;\n}\n\n/**\n * Gets the localStorage of the browser. (Technically, gets the localStorage of\n * the global object because there may be no browser but React Native for\n * example).\n * @returns {Storage} the local Storage object (if any)\n */\nfunction getLocalStorage() {\n    let storage;\n\n    try {\n        // eslint-disable-next-line no-invalid-this\n        storage = (window || this).localStorage;\n    } catch (error) {\n        logger.error(error);\n    }\n\n    return storage;\n}\n\n/**\n *\n */\nfunction generateUniqueId() {\n    return _p8() + _p8() + _p8() + _p8();\n}\n\n/**\n *\n */\nfunction _p8() {\n    return `${Math.random().toString(16)}000000000`.substr(2, 8);\n}\n","/**\n * Indicates that the local connection statistics were updated.\n */\nexport const LOCAL_STATS_UPDATED = 'cq.local_stats_updated';\n\n/**\n * Indicates that the connection statistics for a particular remote participant\n * were updated.\n */\nexport const REMOTE_STATS_UPDATED = 'cq.remote_stats_updated';\n","import * as transform from 'sdp-transform';\n\n/**\n * Parses the primary SSRC of given SSRC group.\n * @param {object} group the SSRC group object as defined by the 'sdp-transform'\n * @return {Number} the primary SSRC number\n */\nexport function parsePrimarySSRC(group) {\n    return parseInt(group.ssrcs.split(' ')[0], 10);\n}\n\n/**\n * Parses the secondary SSRC of given SSRC group.\n * @param {object} group the SSRC group object as defined by the 'sdp-transform'\n * @return {Number} the secondary SSRC number\n */\nexport function parseSecondarySSRC(group) {\n    return parseInt(group.ssrcs.split(' ')[1], 10);\n}\n\n/**\n * Tells how many distinct SSRCs are contained in given media line.\n * @param {Object} mLine the media line object as defined by 'sdp-transform' lib\n * @return {number}\n */\nfunction _getSSRCCount(mLine) {\n    if (!mLine.ssrcs) {\n        return 0;\n    }\n\n    return mLine.ssrcs\n        .map(ssrcInfo => ssrcInfo.id)\n        .filter((ssrc, index, array) => array.indexOf(ssrc) === index)\n        .length;\n}\n\n/**\n * A wrapper around 'sdp-transform' media description object which provides\n * utility methods for common SDP/SSRC related operations.\n */\nclass MLineWrap {\n\n    /**\n     * Creates new <tt>MLineWrap</t>>\n     * @param {Object} mLine the media line object as defined by 'sdp-transform'\n     * lib.\n     */\n    constructor(mLine) {\n        if (!mLine) {\n            throw new Error('mLine is undefined');\n        }\n\n        this.mLine = mLine;\n    }\n\n    /**\n     * Getter for the mLine's \"ssrcs\" array. If the array was undefined an empty\n     * one will be preassigned.\n     *\n     * @return {Array<Object>} an array of 'sdp-transform' SSRC attributes\n     * objects.\n     */\n    get ssrcs() {\n        if (!this.mLine.ssrcs) {\n            this.mLine.ssrcs = [];\n        }\n\n        return this.mLine.ssrcs;\n    }\n\n    /**\n     * Setter for the mLine's \"ssrcs\" array.\n     *\n     * @param {Array<Object>} ssrcs an array of 'sdp-transform' SSRC attributes\n     * objects.\n     */\n    set ssrcs(ssrcs) {\n        this.mLine.ssrcs = ssrcs;\n    }\n\n    /**\n     * Returns the direction of the underlying media description.\n     * @return {string} the media direction name as defined in the SDP.\n     */\n    get direction() {\n        return this.mLine.direction;\n    }\n\n    /**\n     * Modifies the direction of the underlying media description.\n     * @param {string} direction the new direction to be set\n     */\n    set direction(direction) {\n        this.mLine.direction = direction;\n    }\n\n    /**\n     * Exposes the SSRC group array of the underlying media description object.\n     * @return {Array.<Object>}\n     */\n    get ssrcGroups() {\n        if (!this.mLine.ssrcGroups) {\n            this.mLine.ssrcGroups = [];\n        }\n\n        return this.mLine.ssrcGroups;\n    }\n\n    /**\n     * Modifies the SSRC groups array of the underlying media description\n     * object.\n     * @param {Array.<Object>} ssrcGroups\n     */\n    set ssrcGroups(ssrcGroups) {\n        this.mLine.ssrcGroups = ssrcGroups;\n    }\n\n    /**\n     * Obtains value from SSRC attribute.\n     * @param {number} ssrcNumber the SSRC number for which attribute is to be\n     * found\n     * @param {string} attrName the name of the SSRC attribute to be found.\n     * @return {string|undefined} the value of SSRC attribute or\n     * <tt>undefined</tt> if no such attribute exists.\n     */\n    getSSRCAttrValue(ssrcNumber, attrName) {\n        const attribute = this.ssrcs.find(\n            ssrcObj => ssrcObj.id === ssrcNumber\n            && ssrcObj.attribute === attrName);\n\n\n        return attribute && attribute.value;\n    }\n\n    /**\n     * Removes all attributes for given SSRC number.\n     * @param {number} ssrcNum the SSRC number for which all attributes will be\n     * removed.\n     */\n    removeSSRC(ssrcNum) {\n        if (!this.mLine.ssrcs || !this.mLine.ssrcs.length) {\n            return;\n        }\n\n        this.mLine.ssrcs\n            = this.mLine.ssrcs.filter(ssrcObj => ssrcObj.id !== ssrcNum);\n    }\n\n    /**\n     * Adds SSRC attribute\n     * @param {object} ssrcObj the SSRC attribute object as defined in\n     * the 'sdp-transform' lib.\n     */\n    addSSRCAttribute(ssrcObj) {\n        this.ssrcs.push(ssrcObj);\n    }\n\n    /**\n     * Finds a SSRC group matching both semantics and SSRCs in order.\n     * @param {string} semantics the name of the semantics\n     * @param {string} [ssrcs] group SSRCs as a string (like it's defined in\n     * SSRC group object of the 'sdp-transform' lib) e.g. \"1232546 342344 25434\"\n     * @return {object|undefined} the SSRC group object or <tt>undefined</tt> if\n     * not found.\n     */\n    findGroup(semantics, ssrcs) {\n        return this.ssrcGroups.find(\n            group =>\n                group.semantics === semantics\n                    && (!ssrcs || ssrcs === group.ssrcs));\n    }\n\n    /**\n     * Finds all groups matching given semantic's name.\n     * @param {string} semantics the name of the semantics\n     * @return {Array.<object>} an array of SSRC group objects as defined by\n     * the 'sdp-transform' lib.\n     */\n    findGroups(semantics) {\n        return this.ssrcGroups.filter(\n            group => group.semantics === semantics);\n    }\n\n    /**\n     * Finds all groups matching given semantic's name and group's primary SSRC.\n     * @param {string} semantics the name of the semantics\n     * @param {number} primarySSRC the primary SSRC number to be matched\n     * @return {Object} SSRC group object as defined by the 'sdp-transform' lib.\n     */\n    findGroupByPrimarySSRC(semantics, primarySSRC) {\n        return this.ssrcGroups.find(\n            group => group.semantics === semantics\n                && parsePrimarySSRC(group) === primarySSRC);\n    }\n\n    /**\n     * @param {string|null} msid the media stream id or <tt>null</tt> to match\n     * the first SSRC object with any 'msid' value.\n     * @return {Object|undefined} the SSRC object as defined by 'sdp-transform'\n     * lib.\n     */\n    findSSRCByMSID(msid) {\n        return this.ssrcs.find(\n            ssrcObj => ssrcObj.attribute === 'msid'\n                && (msid === null || ssrcObj.value === msid));\n    }\n\n    /**\n     * Gets the SSRC count for the underlying media description.\n     * @return {number}\n     */\n    getSSRCCount() {\n        return _getSSRCCount(this.mLine);\n    }\n\n    /**\n     * Checks whether the underlying media description contains any SSRC groups.\n     * @return {boolean} <tt>true</tt> if there are any SSRC groups or\n     * <tt>false</tt> otherwise.\n     */\n    containsAnySSRCGroups() {\n        return this.mLine.ssrcGroups !== undefined;\n    }\n\n    /**\n     * Finds the primary video SSRC.\n     * @returns {number|undefined} the primary video ssrc\n     * @throws Error if the underlying media description is not a video\n     */\n    getPrimaryVideoSsrc() {\n        const mediaType = this.mLine.type;\n\n        if (mediaType !== 'video') {\n            throw new Error(\n                `getPrimarySsrc doesn't work with '${mediaType}'`);\n        }\n\n        const numSsrcs = _getSSRCCount(this.mLine);\n\n        if (numSsrcs === 1) {\n            // Not using \"ssrcs\" getter on purpose here\n            return this.mLine.ssrcs[0].id;\n        }\n\n        // Look for a SIM, FID, or FEC-FR group\n        if (this.mLine.ssrcGroups) {\n            const simGroup = this.findGroup('SIM');\n\n            if (simGroup) {\n                return parsePrimarySSRC(simGroup);\n            }\n            const fidGroup = this.findGroup('FID');\n\n            if (fidGroup) {\n                return parsePrimarySSRC(fidGroup);\n            }\n            const fecGroup = this.findGroup('FEC-FR');\n\n            if (fecGroup) {\n                return parsePrimarySSRC(fecGroup);\n            }\n        }\n\n    }\n\n    /**\n     * Obtains RTX SSRC from the underlying video description (the\n     * secondary SSRC of the first \"FID\" group found)\n     * @param {number} primarySsrc the video ssrc for which to find the\n     * corresponding rtx ssrc\n     * @returns {number|undefined} the rtx ssrc (or undefined if there isn't\n     * one)\n     */\n    getRtxSSRC(primarySsrc) {\n        const fidGroup = this.findGroupByPrimarySSRC('FID', primarySsrc);\n\n\n        return fidGroup && parseSecondarySSRC(fidGroup);\n    }\n\n    /**\n     * Obtains all SSRCs contained in the underlying media description.\n     * @return {Array.<number>} an array with all SSRC as numbers.\n     */\n    getSSRCs() {\n        return this.ssrcs\n            .map(ssrcInfo => ssrcInfo.id)\n            .filter((ssrc, index, array) => array.indexOf(ssrc) === index);\n    }\n\n    /**\n     * Obtains primary video SSRCs.\n     * @return {Array.<number>} an array of all primary video SSRCs as numbers.\n     * @throws Error if the wrapped media description is not a video.\n     */\n    getPrimaryVideoSSRCs() {\n        const mediaType = this.mLine.type;\n\n        if (mediaType !== 'video') {\n            throw new Error(\n                `getPrimaryVideoSSRCs doesn't work with ${mediaType}`);\n        }\n\n        const videoSSRCs = this.getSSRCs();\n\n        for (const ssrcGroupInfo of this.ssrcGroups) {\n            // Right now, FID and FEC-FR groups are the only ones we parse to\n            // disqualify streams.  If/when others arise we'll\n            // need to add support for them here\n            if (ssrcGroupInfo.semantics === 'FID'\n                    || ssrcGroupInfo.semantics === 'FEC-FR') {\n                // secondary streams should be filtered out\n                const secondarySsrc = parseSecondarySSRC(ssrcGroupInfo);\n\n                videoSSRCs.splice(\n                    videoSSRCs.indexOf(secondarySsrc), 1);\n            }\n        }\n\n        return videoSSRCs;\n    }\n\n    /**\n     * Dumps all SSRC groups of this media description to JSON.\n     */\n    dumpSSRCGroups() {\n        return JSON.stringify(this.mLine.ssrcGroups);\n    }\n\n    /**\n     * Removes all SSRC groups which contain given SSRC number at any position.\n     * @param {number} ssrc the SSRC for which all matching groups are to be\n     * removed.\n     */\n    removeGroupsWithSSRC(ssrc) {\n        if (!this.mLine.ssrcGroups) {\n            return;\n        }\n\n        this.mLine.ssrcGroups = this.mLine.ssrcGroups\n            .filter(groupInfo => groupInfo.ssrcs.indexOf(`${ssrc}`) === -1);\n    }\n\n    /**\n     * Removes groups that match given semantics.\n     * @param {string} semantics e.g. \"SIM\" or \"FID\"\n     */\n    removeGroupsBySemantics(semantics) {\n        if (!this.mLine.ssrcGroups) {\n            return;\n        }\n\n        this.mLine.ssrcGroups\n            = this.mLine.ssrcGroups\n                .filter(groupInfo => groupInfo.semantics !== semantics);\n    }\n\n    /**\n     * Replaces SSRC (does not affect SSRC groups, but only attributes).\n     * @param {number} oldSSRC the old SSRC number\n     * @param {number} newSSRC the new SSRC number\n     */\n    replaceSSRC(oldSSRC, newSSRC) {\n        if (this.mLine.ssrcs) {\n            this.mLine.ssrcs.forEach(ssrcInfo => {\n                if (ssrcInfo.id === oldSSRC) {\n                    ssrcInfo.id = newSSRC;\n                }\n            });\n        }\n    }\n\n    /**\n     * Adds given SSRC group to this media description.\n     * @param {object} group the SSRC group object as defined by\n     * the 'sdp-transform' lib.\n     */\n    addSSRCGroup(group) {\n        this.ssrcGroups.push(group);\n    }\n}\n\n/**\n * Utility class for SDP manipulation using the 'sdp-transform' library.\n *\n * Typical use usage scenario:\n *\n * const transformer = new SdpTransformWrap(rawSdp);\n * const videoMLine = transformer.selectMedia('video);\n * if (videoMLine) {\n *     videoMLiner.addSSRCAttribute({\n *         id: 2342343,\n *         attribute: \"cname\",\n *         value: \"someCname\"\n *     });\n *     rawSdp = transformer.toRawSdp();\n * }\n */\nexport class SdpTransformWrap {\n\n    /**\n     * Creates new instance and parses the raw SDP into objects using\n     * 'sdp-transform' lib.\n     * @param {string} rawSDP the SDP in raw text format.\n     */\n    constructor(rawSDP) {\n        this.parsedSDP = transform.parse(rawSDP);\n    }\n\n    /**\n     * Selects the first media SDP of given name.\n     * @param {string} mediaType the name of the media e.g. 'audio', 'video',\n     * 'data'.\n     * @return {MLineWrap|null} return {@link MLineWrap} instance for the media\n     * line or <tt>null</tt> if not found. The object returned references\n     * the underlying SDP state held by this <tt>SdpTransformWrap</tt> instance\n     * (it's not a copy).\n     */\n    selectMedia(mediaType) {\n        const selectedMLine\n            = this.parsedSDP.media.find(mLine => mLine.type === mediaType);\n\n        return selectedMLine ? new MLineWrap(selectedMLine) : null;\n    }\n\n    /**\n     * Converts the currently stored SDP state in this instance to raw text SDP\n     * format.\n     * @return {string}\n     */\n    toRawSDP() {\n        return transform.write(this.parsedSDP);\n    }\n}\n","/**\n * The know jingle actions that can be sent and should be acted upon by\n * {@code ProxyConnectionService} and {@code ProxyConnectionPC}.\n */\nexport const ACTIONS = {\n    ACCEPT: 'session-accept',\n    CONNECTION_ERROR: 'connection-error-encountered',\n    INITIATE: 'session-initiate',\n    TERMINATE: 'session-terminate',\n    TRANSPORT_INFO: 'transport-info',\n    UNAVAILABLE: 'unavailable'\n};\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nfunction EventEmitter() {\n  this._events = this._events || {};\n  this._maxListeners = this._maxListeners || undefined;\n}\nmodule.exports = EventEmitter;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nEventEmitter.defaultMaxListeners = 10;\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function(n) {\n  if (!isNumber(n) || n < 0 || isNaN(n))\n    throw TypeError('n must be a positive number');\n  this._maxListeners = n;\n  return this;\n};\n\nEventEmitter.prototype.emit = function(type) {\n  var er, handler, len, args, i, listeners;\n\n  if (!this._events)\n    this._events = {};\n\n  // If there is no 'error' event listener then throw.\n  if (type === 'error') {\n    if (!this._events.error ||\n        (isObject(this._events.error) && !this._events.error.length)) {\n      er = arguments[1];\n      if (er instanceof Error) {\n        throw er; // Unhandled 'error' event\n      } else {\n        // At least give some kind of context to the user\n        var err = new Error('Uncaught, unspecified \"error\" event. (' + er + ')');\n        err.context = er;\n        throw err;\n      }\n    }\n  }\n\n  handler = this._events[type];\n\n  if (isUndefined(handler))\n    return false;\n\n  if (isFunction(handler)) {\n    switch (arguments.length) {\n      // fast cases\n      case 1:\n        handler.call(this);\n        break;\n      case 2:\n        handler.call(this, arguments[1]);\n        break;\n      case 3:\n        handler.call(this, arguments[1], arguments[2]);\n        break;\n      // slower\n      default:\n        args = Array.prototype.slice.call(arguments, 1);\n        handler.apply(this, args);\n    }\n  } else if (isObject(handler)) {\n    args = Array.prototype.slice.call(arguments, 1);\n    listeners = handler.slice();\n    len = listeners.length;\n    for (i = 0; i < len; i++)\n      listeners[i].apply(this, args);\n  }\n\n  return true;\n};\n\nEventEmitter.prototype.addListener = function(type, listener) {\n  var m;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events)\n    this._events = {};\n\n  // To avoid recursion in the case that type === \"newListener\"! Before\n  // adding it to the listeners, first emit \"newListener\".\n  if (this._events.newListener)\n    this.emit('newListener', type,\n              isFunction(listener.listener) ?\n              listener.listener : listener);\n\n  if (!this._events[type])\n    // Optimize the case of one listener. Don't need the extra array object.\n    this._events[type] = listener;\n  else if (isObject(this._events[type]))\n    // If we've already got an array, just append.\n    this._events[type].push(listener);\n  else\n    // Adding the second element, need to change to array.\n    this._events[type] = [this._events[type], listener];\n\n  // Check for listener leak\n  if (isObject(this._events[type]) && !this._events[type].warned) {\n    if (!isUndefined(this._maxListeners)) {\n      m = this._maxListeners;\n    } else {\n      m = EventEmitter.defaultMaxListeners;\n    }\n\n    if (m && m > 0 && this._events[type].length > m) {\n      this._events[type].warned = true;\n      console.error('(node) warning: possible EventEmitter memory ' +\n                    'leak detected. %d listeners added. ' +\n                    'Use emitter.setMaxListeners() to increase limit.',\n                    this._events[type].length);\n      if (typeof console.trace === 'function') {\n        // not supported in IE 10\n        console.trace();\n      }\n    }\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.once = function(type, listener) {\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  var fired = false;\n\n  function g() {\n    this.removeListener(type, g);\n\n    if (!fired) {\n      fired = true;\n      listener.apply(this, arguments);\n    }\n  }\n\n  g.listener = listener;\n  this.on(type, g);\n\n  return this;\n};\n\n// emits a 'removeListener' event iff the listener was removed\nEventEmitter.prototype.removeListener = function(type, listener) {\n  var list, position, length, i;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events || !this._events[type])\n    return this;\n\n  list = this._events[type];\n  length = list.length;\n  position = -1;\n\n  if (list === listener ||\n      (isFunction(list.listener) && list.listener === listener)) {\n    delete this._events[type];\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n\n  } else if (isObject(list)) {\n    for (i = length; i-- > 0;) {\n      if (list[i] === listener ||\n          (list[i].listener && list[i].listener === listener)) {\n        position = i;\n        break;\n      }\n    }\n\n    if (position < 0)\n      return this;\n\n    if (list.length === 1) {\n      list.length = 0;\n      delete this._events[type];\n    } else {\n      list.splice(position, 1);\n    }\n\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.removeAllListeners = function(type) {\n  var key, listeners;\n\n  if (!this._events)\n    return this;\n\n  // not listening for removeListener, no need to emit\n  if (!this._events.removeListener) {\n    if (arguments.length === 0)\n      this._events = {};\n    else if (this._events[type])\n      delete this._events[type];\n    return this;\n  }\n\n  // emit removeListener for all listeners on all events\n  if (arguments.length === 0) {\n    for (key in this._events) {\n      if (key === 'removeListener') continue;\n      this.removeAllListeners(key);\n    }\n    this.removeAllListeners('removeListener');\n    this._events = {};\n    return this;\n  }\n\n  listeners = this._events[type];\n\n  if (isFunction(listeners)) {\n    this.removeListener(type, listeners);\n  } else if (listeners) {\n    // LIFO order\n    while (listeners.length)\n      this.removeListener(type, listeners[listeners.length - 1]);\n  }\n  delete this._events[type];\n\n  return this;\n};\n\nEventEmitter.prototype.listeners = function(type) {\n  var ret;\n  if (!this._events || !this._events[type])\n    ret = [];\n  else if (isFunction(this._events[type]))\n    ret = [this._events[type]];\n  else\n    ret = this._events[type].slice();\n  return ret;\n};\n\nEventEmitter.prototype.listenerCount = function(type) {\n  if (this._events) {\n    var evlistener = this._events[type];\n\n    if (isFunction(evlistener))\n      return 1;\n    else if (evlistener)\n      return evlistener.length;\n  }\n  return 0;\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  return emitter.listenerCount(type);\n};\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\n","const Resolutions = {\n    '1080': {\n        width: 1920,\n        height: 1080,\n        order: 8\n    },\n    'fullhd': {\n        width: 1920,\n        height: 1080,\n        order: 8\n    },\n    '720': {\n        width: 1280,\n        height: 720,\n        order: 7\n    },\n    'hd': {\n        width: 1280,\n        height: 720,\n        order: 7\n    },\n    '960': {\n        width: 960,\n        height: 720,\n        order: 6\n    },\n    '540': {\n        width: 960,\n        height: 540,\n        order: 5\n    },\n    'qhd': {\n        width: 960,\n        height: 540,\n        order: 5\n    },\n\n    // 16:9 resolution first.\n    '360': {\n        width: 640,\n        height: 360,\n        order: 4\n    },\n    '640': {\n        width: 640,\n        height: 480,\n        order: 3\n    },\n    'vga': {\n        width: 640,\n        height: 480,\n        order: 3\n    },\n\n    // 16:9 resolution first.\n    '180': {\n        width: 320,\n        height: 180,\n        order: 2\n    },\n    '320': {\n        width: 320,\n        height: 240,\n        order: 1\n    }\n};\n\nmodule.exports = Resolutions;\n","/**\n * The pending Jingle session state which means the session as defined in\n * XEP-0166(before 'session-invite/session-accept' took place).\n *\n * @type {string}\n */\nexport const PENDING = 'pending';\n\n/**\n * The active Jingle session state as defined in XEP-0166\n * (after 'session-invite'/'session-accept').\n *\n * @type {string}\n */\nexport const ACTIVE = 'active';\n\n/**\n * The ended Jingle session state as defined in XEP-0166\n * (after 'session-terminate').\n * @type {string}\n */\nexport const ENDED = 'ended';\n","/* global callstats */\n\nimport browser from '../browser';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\n\nconst logger = require('jitsi-meet-logger').getLogger(__filename);\n\n/**\n * We define enumeration of wrtcFuncNames as we need them before\n * callstats is initialized to queue events.\n * @const\n * @see http://www.callstats.io/api/#enumeration-of-wrtcfuncnames\n */\nconst wrtcFuncNames = {\n    createOffer: 'createOffer',\n    createAnswer: 'createAnswer',\n    setLocalDescription: 'setLocalDescription',\n    setRemoteDescription: 'setRemoteDescription',\n    addIceCandidate: 'addIceCandidate',\n    getUserMedia: 'getUserMedia',\n    iceConnectionFailure: 'iceConnectionFailure',\n    signalingError: 'signalingError',\n    applicationLog: 'applicationLog'\n};\n\n/**\n * We define enumeration of fabricEvent as we need them before\n * callstats is initialized to queue events.\n * @const\n * @see http://www.callstats.io/api/#enumeration-of-fabricevent\n */\nconst fabricEvent = {\n    fabricHold: 'fabricHold',\n    fabricResume: 'fabricResume',\n    audioMute: 'audioMute',\n    audioUnmute: 'audioUnmute',\n    videoPause: 'videoPause',\n    videoResume: 'videoResume',\n    fabricUsageEvent: 'fabricUsageEvent',\n    fabricStats: 'fabricStats',\n    fabricTerminated: 'fabricTerminated',\n    screenShareStart: 'screenShareStart',\n    screenShareStop: 'screenShareStop',\n    dominantSpeaker: 'dominantSpeaker',\n    activeDeviceList: 'activeDeviceList'\n};\n\n/**\n * The user id to report to callstats as destination.\n * @type {string}\n */\nconst DEFAULT_REMOTE_USER = 'jitsi';\n\n/**\n * Type of pending reports, can be event or an error.\n * @type {{ERROR: string, EVENT: string}}\n */\nconst reportType = {\n    ERROR: 'error',\n    EVENT: 'event',\n    MST_WITH_USERID: 'mstWithUserID'\n};\n\n/**\n * Set of currently existing {@link CallStats} instances.\n * @type {Set<CallStats>}\n */\nlet _fabrics;\n\n/**\n * An instance of this class is a wrapper for the CallStats API fabric. A fabric\n * reports one peer connection the the CallStats backend and is allocated with\n * {@link callstats.addNewFabric}. It has a bunch of instance methods for\n * reporting various events. A fabric is considered disposed when\n * {@link CallStats.sendTerminateEvent} is executed.\n *\n * Currently only one backend instance can be created ever and it's done using\n * {@link CallStats.initBackend}. At the time of this writing there is no way to\n * explicitly shutdown the backend, but it's supposed to close it's connection\n * automatically, after all fabrics have been terminated.\n */\nexport default class CallStats {\n    /**\n     * A callback passed to {@link callstats.addNewFabric}.\n     * @param {string} error 'success' means ok\n     * @param {string} msg some more details\n     * @private\n     */\n    static _addNewFabricCallback(error, msg) {\n        if (CallStats.backend && error !== 'success') {\n            logger.error(`Monitoring status: ${error} msg: ${msg}`);\n        }\n    }\n\n    /**\n     * Callback passed to {@link callstats.initialize} (backend initialization)\n     * @param {string} error 'success' means ok\n     * @param {String} msg\n     * @private\n     */\n    static _initCallback(error, msg) {\n        logger.log(`CallStats Status: err=${error} msg=${msg}`);\n\n        // there is no lib, nothing to report to\n        if (error !== 'success') {\n            return;\n        }\n\n        CallStats.backendInitialized = true;\n\n        // I hate that\n        let atLeastOneFabric = false;\n        let defaultInstance = null;\n\n        for (const callStatsInstance of CallStats.fabrics.values()) {\n            if (!callStatsInstance.hasFabric) {\n                logger.debug('addNewFabric - initCallback');\n                if (callStatsInstance._addNewFabric()) {\n                    atLeastOneFabric = true;\n                    if (!defaultInstance) {\n                        defaultInstance = callStatsInstance;\n                    }\n                }\n            }\n        }\n\n        if (!atLeastOneFabric) {\n            return;\n        }\n\n        CallStats._emptyReportQueue(defaultInstance);\n    }\n\n    /**\n     * Empties report queue.\n     *\n     * @param {CallStats} csInstance - The callstats instance.\n     * @private\n     */\n    static _emptyReportQueue(csInstance) {\n        // There is no conference ID nor a PeerConnection available when some of\n        // the events are scheduled on the reportsQueue, so those will be\n        // reported on the first initialized fabric.\n        const defaultConfID = csInstance.confID;\n        const defaultPC = csInstance.peerconnection;\n\n        // notify callstats about failures if there were any\n        for (const report of CallStats.reportsQueue) {\n            if (report.type === reportType.ERROR) {\n                const errorData = report.data;\n\n                CallStats._reportError(\n                    csInstance,\n                    errorData.type,\n                    errorData.error,\n                    errorData.pc || defaultPC);\n            } else if (report.type === reportType.EVENT) {\n                // if we have and event to report and we failed to add\n                // fabric this event will not be reported anyway, returning\n                // an error\n                const eventData = report.data;\n\n                CallStats.backend.sendFabricEvent(\n                    report.pc || defaultPC,\n                    eventData.event,\n                    defaultConfID,\n                    eventData.eventData);\n            } else if (report.type === reportType.MST_WITH_USERID) {\n                const data = report.data;\n\n                CallStats.backend.associateMstWithUserID(\n                    report.pc || defaultPC,\n                    data.callStatsId,\n                    defaultConfID,\n                    data.ssrc,\n                    data.usageLabel,\n                    data.containerId\n                );\n            }\n        }\n        CallStats.reportsQueue.length = 0;\n    }\n\n    /* eslint-disable max-params */\n    /**\n     * Reports an error to callstats.\n     *\n     * @param {CallStats} [cs]\n     * @param type the type of the error, which will be one of the wrtcFuncNames\n     * @param error the error\n     * @param pc the peerconnection\n     * @private\n     */\n    static _reportError(cs, type, error, pc) {\n        let _error = error;\n\n        if (!_error) {\n            logger.warn('No error is passed!');\n            _error = new Error('Unknown error');\n        }\n        if (CallStats.backendInitialized && cs) {\n            CallStats.backend.reportError(pc, cs.confID, type, _error);\n        } else {\n            CallStats.reportsQueue.push({\n                type: reportType.ERROR,\n                data: {\n                    error: _error,\n                    pc,\n                    type\n                }\n            });\n        }\n\n        // else just ignore it\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Reports an error to callstats.\n     *\n     * @param {CallStats} cs\n     * @param event the type of the event, which will be one of the fabricEvent\n     * @param eventData additional data to pass to event\n     * @private\n     */\n    static _reportEvent(cs, event, eventData) {\n        const pc = cs && cs.peerconnection;\n        const confID = cs && cs.confID;\n\n        if (CallStats.backendInitialized && cs) {\n            CallStats.backend.sendFabricEvent(pc, event, confID, eventData);\n        } else {\n            CallStats.reportsQueue.push({\n                confID,\n                pc,\n                type: reportType.EVENT,\n                data: { event,\n                    eventData }\n            });\n        }\n    }\n\n    /**\n     * Wraps some of the CallStats API method and logs their calls with\n     * arguments on the debug logging level. Also wraps some of the backend\n     * methods execution into try catch blocks to not crash the app in case\n     * there is a problem with the backend itself.\n     * @param {callstats} theBackend\n     * @private\n     */\n    static _traceAndCatchBackendCalls(theBackend) {\n        const tryCatchMethods = [\n            'associateMstWithUserID',\n            'sendFabricEvent',\n            'sendUserFeedback'\n\n            // 'reportError', - this one needs special handling - see code below\n        ];\n\n        for (const methodName of tryCatchMethods) {\n            const originalMethod = theBackend[methodName];\n\n            theBackend[methodName] = function(...theArguments) {\n                try {\n                    return originalMethod.apply(theBackend, theArguments);\n                } catch (e) {\n                    GlobalOnErrorHandler.callErrorHandler(e);\n                }\n            };\n        }\n        const debugMethods = [\n            'associateMstWithUserID',\n            'sendFabricEvent',\n            'sendUserFeedback'\n\n            // 'reportError', - this one needs special handling - see code below\n        ];\n\n        for (const methodName of debugMethods) {\n            const originalMethod = theBackend[methodName];\n\n            theBackend[methodName] = function(...theArguments) {\n                logger.debug(methodName, theArguments);\n                originalMethod.apply(theBackend, theArguments);\n            };\n        }\n        const originalReportError = theBackend.reportError;\n\n        /* eslint-disable max-params */\n        theBackend.reportError = function(pc, cs, type, ...args) {\n            // Logs from the logger are submitted on the applicationLog event\n            // \"type\". Logging the arguments on the logger will create endless\n            // loop, because it will put all the logs to the logger queue again.\n            if (type === wrtcFuncNames.applicationLog) {\n                // NOTE otherArguments are not logged to the console on purpose\n                // to not log the whole log batch\n                // FIXME check the current logging level (currently not exposed\n                // by the logger implementation)\n                // NOTE it is not safe to log whole objects on react-native as\n                // those contain too many circular references and may crash\n                // the app.\n                if (!browser.isReactNative()) {\n                    console && console.debug('reportError', pc, cs, type);\n                }\n            } else {\n                logger.debug('reportError', pc, cs, type, ...args);\n            }\n            try {\n                originalReportError.call(theBackend, pc, cs, type, ...args);\n            } catch (exception) {\n                if (type === wrtcFuncNames.applicationLog) {\n                    console && console.error('reportError', exception);\n                } else {\n                    GlobalOnErrorHandler.callErrorHandler(exception);\n                }\n            }\n        };\n\n        /* eslint-enable max-params */\n    }\n\n    /**\n     * Returns the Set with the currently existing {@link CallStats} instances.\n     * Lazily initializes the Set to allow any Set polyfills to be applied.\n     * @type {Set<CallStats>}\n     */\n    static get fabrics() {\n        if (!_fabrics) {\n            _fabrics = new Set();\n        }\n\n        return _fabrics;\n    }\n\n    /**\n     * Initializes the CallStats backend. Should be called only if\n     * {@link CallStats.isBackendInitialized} returns <tt>false</tt>.\n     * @param {object} options\n     * @param {String} options.callStatsID CallStats credentials - ID\n     * @param {String} options.callStatsSecret CallStats credentials - secret\n     * @param {string} options.aliasName the <tt>aliasName</tt> part of\n     * the <tt>userID</tt> aka endpoint ID, see CallStats docs for more info.\n     * @param {string} options.userName the <tt>userName</tt> part of\n     * the <tt>userID</tt> aka display name, see CallStats docs for more info.\n     *\n     */\n    static initBackend(options) {\n        if (CallStats.backend) {\n            throw new Error('CallStats backend has been initialized already!');\n        }\n        try {\n            const CallStatsBackend = callstats;\n\n            CallStats.backend = new CallStatsBackend();\n            CallStats._traceAndCatchBackendCalls(CallStats.backend);\n            CallStats.userID = {\n                aliasName: options.aliasName,\n                userName: options.userName\n            };\n            CallStats.callStatsID = options.callStatsID;\n            CallStats.callStatsSecret = options.callStatsSecret;\n\n            let configParams;\n\n            if (options.applicationName) {\n                configParams = {\n                    applicationVersion:\n                        `${options.applicationName} (${\n                            browser.getName()})`\n                };\n            }\n\n            if (options.confID) {\n                // we first check is there a tenant in the confID\n                const match = options.confID.match(/.*\\/(.*)\\/.*/);\n\n                // if there is no tenant, we will just set '/'\n                configParams.siteID = (match && match[1]) || '/';\n            }\n\n            // userID is generated or given by the origin server\n            CallStats.backend.initialize(\n                CallStats.callStatsID,\n                CallStats.callStatsSecret,\n                CallStats.userID,\n                CallStats._initCallback,\n                undefined,\n                configParams);\n\n            const getWiFiStatsMethod = options.getWiFiStatsMethod;\n\n            if (getWiFiStatsMethod) {\n                CallStats.backend.attachWifiStatsHandler(getWiFiStatsMethod);\n\n                getWiFiStatsMethod().then(result => {\n                    if (result) {\n                        logger.info('Reported wifi addresses:'\n                            , JSON.parse(result).addresses);\n                    }\n                })\n                .catch(() => {});// eslint-disable-line no-empty-function\n            }\n\n            return true;\n        } catch (e) {\n            // The callstats.io API failed to initialize (e.g. because its\n            // download did not succeed in general or on time). Further attempts\n            // to utilize it cannot possibly succeed.\n            GlobalOnErrorHandler.callErrorHandler(e);\n            CallStats.backend = null;\n            logger.error(e);\n\n            return false;\n        }\n    }\n\n    /**\n     * Checks if the CallStats backend has been created. It does not mean that\n     * it has been initialized, but only that the API instance has been\n     * allocated successfully.\n     * @return {boolean} <tt>true</tt> if backend exists or <tt>false</tt>\n     * otherwise\n     */\n    static isBackendInitialized() {\n        return Boolean(CallStats.backend);\n    }\n\n    /**\n     * Notifies CallStats about active device.\n     * @param {{deviceList: {String:String}}} devicesData list of devices with\n     * their data\n     * @param {CallStats} cs callstats instance related to the event\n     */\n    static sendActiveDeviceListEvent(devicesData, cs) {\n        CallStats._reportEvent(cs, fabricEvent.activeDeviceList, devicesData);\n    }\n\n    /**\n     * Notifies CallStats that there is a log we want to report.\n     *\n     * @param {Error} e error to send or {String} message\n     * @param {CallStats} cs callstats instance related to the error (optional)\n     */\n    static sendApplicationLog(e, cs) {\n        try {\n            CallStats._reportError(\n                cs,\n                wrtcFuncNames.applicationLog,\n                e,\n                cs && cs.peerconnection);\n        } catch (error) {\n            // If sendApplicationLog fails it should not be printed to\n            // the logger, because it will try to push the logs again\n            // (through sendApplicationLog) and an endless loop is created.\n            if (console && (typeof console.error === 'function')) {\n                // FIXME send analytics event as well\n                console.error('sendApplicationLog failed', error);\n            }\n        }\n    }\n\n    /**\n     * Sends the given feedback through CallStats.\n     *\n     * @param {string} conferenceID the conference ID for which the feedback\n     * will be reported.\n     * @param overall an integer between 1 and 5 indicating the\n     * user feedback\n     * @param comment detailed feedback from the user.\n     */\n    static sendFeedback(conferenceID, overall, comment) {\n        return new Promise((resolve, reject) => {\n            if (CallStats.backend) {\n                CallStats.backend.sendUserFeedback(\n                    conferenceID,\n                    {\n                        userID: CallStats.userID,\n                        overall,\n                        comment\n                    },\n                    (status, message) => {\n                        if (status === 'success') {\n                            resolve(message);\n                        } else {\n                            reject(message);\n                        }\n                    });\n            } else {\n                const reason = 'Failed to submit feedback to CallStats - no backend';\n\n                logger.error(reason);\n                reject(reason);\n            }\n        });\n    }\n\n    /**\n     * Notifies CallStats that getUserMedia failed.\n     *\n     * @param {Error} e error to send\n     * @param {CallStats} cs callstats instance related to the error (optional)\n     */\n    static sendGetUserMediaFailed(e, cs) {\n        CallStats._reportError(cs, wrtcFuncNames.getUserMedia, e, null);\n    }\n\n    /**\n     * Notifies CallStats for mute events\n     * @param mute {boolean} true for muted and false for not muted\n     * @param type {String} \"audio\"/\"video\"\n     * @param {CallStats} cs callstats instance related to the event\n     */\n    static sendMuteEvent(mute, type, cs) {\n        let event;\n\n        if (type === 'video') {\n            event = mute ? fabricEvent.videoPause : fabricEvent.videoResume;\n        } else {\n            event = mute ? fabricEvent.audioMute : fabricEvent.audioUnmute;\n        }\n\n        CallStats._reportEvent(cs, event);\n    }\n\n    /**\n     * Creates new CallStats instance that handles all callstats API calls for\n     * given {@link TraceablePeerConnection}. Each instance is meant to handle\n     * one CallStats fabric added with 'addFabric' API method for the\n     * {@link TraceablePeerConnection} instance passed in the constructor.\n     * @param {TraceablePeerConnection} tpc\n     * @param {Object} options\n     * @param {string} options.confID the conference ID that wil be used to\n     * report the session.\n     * @param {string} [options.remoteUserID='jitsi'] the remote user ID to\n     * which given <tt>tpc</tt> is connected.\n     */\n    constructor(tpc, options) {\n        this.confID = options.confID;\n        this.tpc = tpc;\n        this.peerconnection = tpc.peerconnection;\n        this.remoteUserID = options.remoteUserID || DEFAULT_REMOTE_USER;\n        this.hasFabric = false;\n\n        CallStats.fabrics.add(this);\n\n        if (CallStats.backendInitialized) {\n            this._addNewFabric();\n\n            // if this is the first fabric let's try to empty the\n            // report queue. Reports all events that we recorded between\n            // backend initialization and receiving the first fabric\n            if (CallStats.fabrics.size === 1) {\n                CallStats._emptyReportQueue(this);\n            }\n        }\n    }\n\n    /**\n     * Initializes CallStats fabric by calling \"addNewFabric\" for\n     * the peer connection associated with this instance.\n     * @return {boolean} true if the call was successful or false otherwise.\n     */\n    _addNewFabric() {\n        logger.info('addNewFabric', this.remoteUserID);\n        try {\n            const fabricAttributes = {\n                remoteEndpointType:\n                    this.tpc.isP2P\n                        ? CallStats.backend.endpointType.peer\n                        : CallStats.backend.endpointType.server\n            };\n            const ret\n                = CallStats.backend.addNewFabric(\n                    this.peerconnection,\n                    this.remoteUserID,\n                    CallStats.backend.fabricUsage.multiplex,\n                    this.confID,\n                    fabricAttributes,\n                    CallStats._addNewFabricCallback);\n\n            this.hasFabric = true;\n\n            const success = ret.status === 'success';\n\n            if (!success) {\n                logger.error('callstats fabric not initilized', ret.message);\n            }\n\n            return success;\n\n        } catch (error) {\n            GlobalOnErrorHandler.callErrorHandler(error);\n\n            return false;\n        }\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     * Lets CallStats module know where is given SSRC rendered by providing\n     * renderer tag ID.\n     * If the lib is not initialized yet queue the call for later, when it's\n     * ready.\n     * @param {number} ssrc the SSRC of the stream\n     * @param {boolean} isLocal indicates whether this the stream is local\n     * @param {string|null} streamEndpointId if the stream is not local the it\n     * needs to contain the stream owner's ID\n     * @param {string} usageLabel meaningful usage label of this stream like\n     *        'microphone', 'camera' or 'screen'.\n     * @param {string} containerId  the id of media 'audio' or 'video' tag which\n     *        renders the stream.\n     */\n    associateStreamWithVideoTag(\n            ssrc,\n            isLocal,\n            streamEndpointId,\n            usageLabel,\n            containerId) {\n        if (!CallStats.backend) {\n            return;\n        }\n\n        const callStatsId = isLocal ? CallStats.userID : streamEndpointId;\n\n        if (CallStats.backendInitialized) {\n            CallStats.backend.associateMstWithUserID(\n                this.peerconnection,\n                callStatsId,\n                this.confID,\n                ssrc,\n                usageLabel,\n                containerId);\n        } else {\n            CallStats.reportsQueue.push({\n                type: reportType.MST_WITH_USERID,\n                pc: this.peerconnection,\n                data: {\n                    callStatsId,\n                    containerId,\n                    ssrc,\n                    usageLabel\n                }\n            });\n        }\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Notifies CallStats that we are the new dominant speaker in the\n     * conference.\n     */\n    sendDominantSpeakerEvent() {\n        CallStats._reportEvent(this, fabricEvent.dominantSpeaker);\n    }\n\n    /**\n     * Notifies CallStats that the fabric for the underlying peerconnection was\n     * closed and no evens should be reported, after this call.\n     */\n    sendTerminateEvent() {\n        if (CallStats.backendInitialized) {\n            CallStats.backend.sendFabricEvent(\n                this.peerconnection,\n                CallStats.backend.fabricEvent.fabricTerminated,\n                this.confID);\n        }\n        CallStats.fabrics.delete(this);\n    }\n\n    /**\n     * Notifies CallStats for ice connection failed\n     */\n    sendIceConnectionFailedEvent() {\n        CallStats._reportError(\n            this,\n            wrtcFuncNames.iceConnectionFailure,\n            null,\n            this.peerconnection);\n    }\n\n    /**\n     * Notifies CallStats that peer connection failed to create offer.\n     *\n     * @param {Error} e error to send\n     */\n    sendCreateOfferFailed(e) {\n        CallStats._reportError(\n            this, wrtcFuncNames.createOffer, e, this.peerconnection);\n    }\n\n    /**\n     * Notifies CallStats that peer connection failed to create answer.\n     *\n     * @param {Error} e error to send\n     */\n    sendCreateAnswerFailed(e) {\n        CallStats._reportError(\n            this, wrtcFuncNames.createAnswer, e, this.peerconnection);\n    }\n\n    /**\n     * Sends either resume or hold event for the fabric associated with\n     * the underlying peerconnection.\n     * @param {boolean} isResume true to resume or false to hold\n     */\n    sendResumeOrHoldEvent(isResume) {\n        CallStats._reportEvent(\n            this,\n            isResume ? fabricEvent.fabricResume : fabricEvent.fabricHold);\n    }\n\n    /**\n     * Notifies CallStats for screen sharing events\n     * @param {boolean} start true for starting screen sharing and\n     * false for not stopping\n     * @param {string|null} ssrc - optional ssrc value, used only when\n     * starting screen sharing.\n     */\n    sendScreenSharingEvent(start, ssrc) {\n        let eventData;\n\n        if (ssrc) {\n            eventData = { ssrc };\n        }\n\n        CallStats._reportEvent(\n            this,\n            start ? fabricEvent.screenShareStart : fabricEvent.screenShareStop,\n            eventData);\n    }\n\n    /**\n     * Notifies CallStats that peer connection failed to set local description.\n     *\n     * @param {Error} e error to send\n     */\n    sendSetLocalDescFailed(e) {\n        CallStats._reportError(\n            this, wrtcFuncNames.setLocalDescription, e, this.peerconnection);\n    }\n\n    /**\n     * Notifies CallStats that peer connection failed to set remote description.\n     *\n     * @param {Error} e error to send\n     */\n    sendSetRemoteDescFailed(e) {\n        CallStats._reportError(\n            this, wrtcFuncNames.setRemoteDescription, e, this.peerconnection);\n    }\n\n    /**\n     * Notifies CallStats that peer connection failed to add ICE candidate.\n     *\n     * @param {Error} e error to send\n     */\n    sendAddIceCandidateFailed(e) {\n        CallStats._reportError(\n            this, wrtcFuncNames.addIceCandidate, e, this.peerconnection);\n    }\n}\n\n/**\n * The CallStats API backend instance\n * @type {callstats}\n */\nCallStats.backend = null;\n\n// some errors/events may happen before CallStats init\n// in this case we accumulate them in this array\n// and send them to callstats on init\nCallStats.reportsQueue = [];\n\n/**\n * Whether the library was successfully initialized(the backend) using its\n * initialize method.\n * @type {boolean}\n */\nCallStats.backendInitialized = false;\n\n/**\n * Part of the CallStats credentials - application ID\n * @type {string}\n */\nCallStats.callStatsID = null;\n\n/**\n * Part of the CallStats credentials - application secret\n * @type {string}\n */\nCallStats.callStatsSecret = null;\n\n/**\n * Local CallStats user ID structure. Can be set only once when\n * {@link backend} is initialized, so it's static for the time being.\n * See CallStats API for more info:\n * https://www.callstats.io/api/#userid\n * @type {object}\n */\nCallStats.userID = null;\n","/**\n * @const\n */\nconst ALPHANUM\n    = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n\n/**\n * Hexadecimal digits.\n * @const\n */\nconst HEX_DIGITS = '0123456789abcdef';\n\n/**\n * Generates random int within the range [min, max]\n * @param min the minimum value for the generated number\n * @param max the maximum value for the generated number\n * @returns random int number\n */\nfunction randomInt(min, max) {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\n/**\n * Get random element from array or string.\n * @param {Array|string} arr source\n * @returns array element or string character\n */\nfunction randomElement(arr) {\n    return arr[randomInt(0, arr.length - 1)];\n}\n\n/**\n * Generate random alphanumeric string.\n * @param {number} length expected string length\n * @returns {string} random string of specified length\n */\nfunction randomAlphanumStr(length) {\n    let result = '';\n\n    for (let i = 0; i < length; i += 1) {\n        result += randomElement(ALPHANUM);\n    }\n\n    return result;\n}\n\n/**\n * Exported interface.\n */\nconst RandomUtil = {\n    /**\n     * Returns a random hex digit.\n     * @returns {*}\n     */\n    randomHexDigit() {\n        return randomElement(HEX_DIGITS);\n    },\n\n    /**\n     * Returns a random string of hex digits with length 'len'.\n     * @param len the length.\n     */\n    randomHexString(len) {\n        let ret = '';\n\n        while (len--) { // eslint-disable-line no-param-reassign\n            ret += this.randomHexDigit();\n        }\n\n        return ret;\n    },\n    randomElement,\n    randomAlphanumStr,\n    randomInt\n};\n\nmodule.exports = RandomUtil;\n","import Listenable from '../util/Listenable';\n\n/**\n * Creates ConnectionPlugin class that extends the passed class.\n * @param {Class} base the definition of the class that will be extended by\n * ConnectionPlugin\n */\nfunction getConnectionPluginDefinition(base = class {}) {\n    /**\n     * Base class for strophe connection plugins.\n     */\n    return class extends base {\n        /**\n         *\n         */\n        constructor(...args) {\n            super(...args);\n            this.connection = null;\n        }\n\n        /**\n         *\n         * @param connection\n         */\n        init(connection) {\n            this.connection = connection;\n        }\n    };\n}\n\n/**\n * ConnectionPlugin class.\n */\nexport default getConnectionPluginDefinition();\n\n/**\n * ConnectionPlugin class that extends Listenable.\n */\nexport const ConnectionPluginListenable\n    = getConnectionPluginDefinition(Listenable);\n","/* global $ */\n\nimport { getLogger } from 'jitsi-meet-logger';\nimport { $msg, Strophe } from 'strophe.js';\nimport 'strophejs-plugin-disco';\n\nimport RandomUtil from '../util/RandomUtil';\nimport * as JitsiConnectionErrors from '../../JitsiConnectionErrors';\nimport * as JitsiConnectionEvents from '../../JitsiConnectionEvents';\nimport browser from '../browser';\nimport initEmuc from './strophe.emuc';\nimport initJingle from './strophe.jingle';\nimport initStropheUtil from './strophe.util';\nimport initPing from './strophe.ping';\nimport initRayo from './strophe.rayo';\nimport initStropheLogger from './strophe.logger';\nimport LastSuccessTracker from './StropheBoshLastSuccess';\nimport Listenable from '../util/Listenable';\nimport Caps from './Caps';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\n\nconst logger = getLogger(__filename);\n\n/**\n *\n * @param token\n * @param bosh\n */\nfunction createConnection(token, bosh = '/http-bind') {\n    // Append token as URL param\n    if (token) {\n        // eslint-disable-next-line no-param-reassign\n        bosh += `${bosh.indexOf('?') === -1 ? '?' : '&'}token=${token}`;\n    }\n\n    const conn = new Strophe.Connection(bosh);\n\n    // The default maxRetries is 5, which is too long.\n    conn.maxRetries = 3;\n\n    return conn;\n}\n\n// FIXME: remove once we have a default config template. -saghul\n/**\n * A list of ice servers to use by default for P2P.\n */\nexport const DEFAULT_STUN_SERVERS = [\n    { urls: 'stun:stun.l.google.com:19302' },\n    { urls: 'stun:stun1.l.google.com:19302' },\n    { urls: 'stun:stun2.l.google.com:19302' }\n];\n\n/**\n * The name of the field used to recognize a chat message as carrying a JSON\n * payload from another endpoint.\n * If the json-message of a chat message contains a valid JSON object, and\n * the JSON has this key, then it is a valid json-message to be sent.\n */\nexport const JITSI_MEET_MUC_TYPE = 'type';\n\n/**\n *\n */\nexport default class XMPP extends Listenable {\n    /**\n     * FIXME describe all options\n     * @param {Object} options\n     * @param {Array<Object>} options.p2pStunServers see\n     * {@link JingleConnectionPlugin} for more details.\n     * @param token\n     */\n    constructor(options, token) {\n        super();\n        this.connection = null;\n        this.disconnectInProgress = false;\n        this.connectionTimes = {};\n        this.options = options;\n        this.token = token;\n        this.authenticatedUser = false;\n        this._initStrophePlugins(this);\n\n        this.connection = createConnection(token, options.bosh);\n\n        this._lastSuccessTracker = new LastSuccessTracker();\n        this._lastSuccessTracker.startTracking(this.connection);\n\n        this.caps = new Caps(this.connection, this.options.clientNode);\n\n        // Initialize features advertised in disco-info\n        this.initFeaturesList();\n\n        // Setup a disconnect on unload as a way to facilitate API consumers. It\n        // sounds like they would want that. A problem for them though may be if\n        // they wanted to utilize the connected connection in an unload handler\n        // of their own. However, it should be fairly easy for them to do that\n        // by registering their unload handler before us.\n        $(window).on('beforeunload unload', ev => {\n            this.disconnect(ev).catch(() => {\n                // ignore errors in order to not brake the unload.\n            });\n        });\n    }\n\n    /**\n     * Initializes the list of feature advertised through the disco-info\n     * mechanism.\n     */\n    initFeaturesList() {\n        // http://xmpp.org/extensions/xep-0167.html#support\n        // http://xmpp.org/extensions/xep-0176.html#support\n        this.caps.addFeature('urn:xmpp:jingle:1');\n        this.caps.addFeature('urn:xmpp:jingle:apps:rtp:1');\n        this.caps.addFeature('urn:xmpp:jingle:transports:ice-udp:1');\n        this.caps.addFeature('urn:xmpp:jingle:apps:dtls:0');\n        this.caps.addFeature('urn:xmpp:jingle:transports:dtls-sctp:1');\n        this.caps.addFeature('urn:xmpp:jingle:apps:rtp:audio');\n        this.caps.addFeature('urn:xmpp:jingle:apps:rtp:video');\n\n        if (!this.options.disableRtx && browser.supportsRtx()) {\n            this.caps.addFeature('urn:ietf:rfc:4588');\n        }\n\n        // this is dealt with by SDP O/A so we don't need to announce this\n        // XEP-0293\n        // this.caps.addFeature('urn:xmpp:jingle:apps:rtp:rtcp-fb:0');\n        // XEP-0294\n        // this.caps.addFeature('urn:xmpp:jingle:apps:rtp:rtp-hdrext:0');\n\n        this.caps.addFeature('urn:ietf:rfc:5761'); // rtcp-mux\n        this.caps.addFeature('urn:ietf:rfc:5888'); // a=group, e.g. bundle\n\n        // this.caps.addFeature('urn:ietf:rfc:5576'); // a=ssrc\n\n        // Enable Lipsync ?\n        if (browser.isChrome() && this.options.enableLipSync !== false) {\n            logger.info('Lip-sync enabled !');\n            this.caps.addFeature('http://jitsi.org/meet/lipsync');\n        }\n\n        if (this.connection.rayo) {\n            this.caps.addFeature('urn:xmpp:rayo:client:1');\n        }\n    }\n\n    /**\n     * Returns {@code true} if the PING functionality is supported by the server\n     * or {@code false} otherwise.\n     * @returns {boolean}\n     */\n    isPingSupported() {\n        return this._pingSupported !== false;\n    }\n\n    /**\n     *\n     */\n    getConnection() {\n        return this.connection;\n    }\n\n    /**\n     * Receive connection status changes and handles them.\n     *\n     * @param {Object} credentials\n     * @param {string} credentials.jid - The user's XMPP ID passed to the\n     * connect method. For example, 'user@xmpp.com'.\n     * @param {string} credentials.password - The password passed to the connect\n     * method.\n     * @param {string} status - One of Strophe's connection status strings.\n     * @param {string} [msg] - The connection error message provided by Strophe.\n     */\n    connectionHandler(credentials = {}, status, msg) {\n        const now = window.performance.now();\n        const statusStr = Strophe.getStatusString(status).toLowerCase();\n\n        this.connectionTimes[statusStr] = now;\n        logger.log(\n            `(TIME) Strophe ${statusStr}${msg ? `[${msg}]` : ''}:\\t`,\n            now);\n\n        this.eventEmitter.emit(XMPPEvents.CONNECTION_STATUS_CHANGED, credentials, status, msg);\n        if (status === Strophe.Status.CONNECTED\n            || status === Strophe.Status.ATTACHED) {\n            if (this.options.useStunTurn\n                || (this.options.p2p && this.options.p2p.useStunTurn)) {\n                this.connection.jingle.getStunAndTurnCredentials();\n            }\n\n            logger.info(`My Jabber ID: ${this.connection.jid}`);\n\n            // Schedule ping ?\n            const pingJid = this.connection.domain;\n\n            this.caps.getFeaturesAndIdentities(pingJid)\n                .then(({ features, identities }) => {\n                    if (features.has(Strophe.NS.PING)) {\n                        this._pingSupported = true;\n                        this.connection.ping.startInterval(pingJid);\n                    } else {\n                        logger.warn(`Ping NOT supported by ${pingJid}`);\n                    }\n\n                    // check for speakerstats\n                    identities.forEach(identity => {\n                        if (identity.type === 'speakerstats') {\n                            this.speakerStatsComponentAddress = identity.name;\n\n                            this.connection.addHandler(\n                                this._onPrivateMessage.bind(this), null,\n                                'message', null, null);\n                        }\n                    });\n                })\n                .catch(error => {\n                    const errmsg = 'Feature discovery error';\n\n                    GlobalOnErrorHandler.callErrorHandler(\n                        new Error(`${errmsg}: ${error}`));\n                    logger.error(errmsg, error);\n                });\n\n            if (credentials.password) {\n                this.authenticatedUser = true;\n            }\n            if (this.connection && this.connection.connected\n                && Strophe.getResourceFromJid(this.connection.jid)) {\n                // .connected is true while connecting?\n                // this.connection.send($pres());\n                this.eventEmitter.emit(\n                    JitsiConnectionEvents.CONNECTION_ESTABLISHED,\n                    Strophe.getResourceFromJid(this.connection.jid));\n            }\n        } else if (status === Strophe.Status.CONNFAIL) {\n            if (msg === 'x-strophe-bad-non-anon-jid') {\n                this.anonymousConnectionFailed = true;\n            } else {\n                this.connectionFailed = true;\n            }\n            this.lastErrorMsg = msg;\n            if (msg === 'giving-up') {\n                this.eventEmitter.emit(\n                    JitsiConnectionEvents.CONNECTION_FAILED,\n                    JitsiConnectionErrors.OTHER_ERROR, msg);\n            }\n        } else if (status === Strophe.Status.DISCONNECTED) {\n            // Stop ping interval\n            this.connection.ping.stopInterval();\n            const wasIntentionalDisconnect = this.disconnectInProgress;\n            const errMsg = msg || this.lastErrorMsg;\n\n            this.disconnectInProgress = false;\n            if (this.anonymousConnectionFailed) {\n                // prompt user for username and password\n                this.eventEmitter.emit(\n                    JitsiConnectionEvents.CONNECTION_FAILED,\n                    JitsiConnectionErrors.PASSWORD_REQUIRED);\n            } else if (this.connectionFailed) {\n                this.eventEmitter.emit(\n                    JitsiConnectionEvents.CONNECTION_FAILED,\n                    JitsiConnectionErrors.OTHER_ERROR,\n                    errMsg,\n                    undefined, /* credentials */\n                    this._getConnectionFailedReasonDetails());\n            } else if (wasIntentionalDisconnect) {\n                this.eventEmitter.emit(\n                    JitsiConnectionEvents.CONNECTION_DISCONNECTED, errMsg);\n            } else {\n                // XXX if Strophe drops the connection while not being asked to,\n                // it means that most likely some serious error has occurred.\n                // One currently known case is when a BOSH request fails for\n                // more than 4 times. The connection is dropped without\n                // supplying a reason(error message/event) through the API.\n                logger.error('XMPP connection dropped!');\n\n                // XXX if the last request error is within 5xx range it means it\n                // was a server failure\n                const lastErrorStatus = Strophe.getLastErrorStatus();\n\n                if (lastErrorStatus >= 500 && lastErrorStatus < 600) {\n                    this.eventEmitter.emit(\n                        JitsiConnectionEvents.CONNECTION_FAILED,\n                        JitsiConnectionErrors.SERVER_ERROR,\n                        errMsg || 'server-error',\n                        /* credentials */ undefined,\n                        this._getConnectionFailedReasonDetails());\n                } else {\n                    this.eventEmitter.emit(\n                        JitsiConnectionEvents.CONNECTION_FAILED,\n                        JitsiConnectionErrors.CONNECTION_DROPPED_ERROR,\n                        errMsg || 'connection-dropped-error',\n                        /* credentials */ undefined,\n                        this._getConnectionFailedReasonDetails());\n                }\n            }\n        } else if (status === Strophe.Status.AUTHFAIL) {\n            // wrong password or username, prompt user\n            this.eventEmitter.emit(\n                JitsiConnectionEvents.CONNECTION_FAILED,\n                JitsiConnectionErrors.PASSWORD_REQUIRED,\n                msg,\n                credentials);\n        }\n    }\n\n    /**\n     *\n     * @param jid\n     * @param password\n     */\n    _connect(jid, password) {\n        // connection.connect() starts the connection process.\n        //\n        // As the connection process proceeds, the user supplied callback will\n        // be triggered multiple times with status updates. The callback should\n        // take two arguments - the status code and the error condition.\n        //\n        // The status code will be one of the values in the Strophe.Status\n        // constants. The error condition will be one of the conditions defined\n        // in RFC 3920 or the condition ‘strophe-parsererror’.\n        //\n        // The Parameters wait, hold and route are optional and only relevant\n        // for BOSH connections. Please see XEP 124 for a more detailed\n        // explanation of the optional parameters.\n        //\n        // Connection status constants for use by the connection handler\n        // callback.\n        //\n        //  Status.ERROR - An error has occurred (websockets specific)\n        //  Status.CONNECTING - The connection is currently being made\n        //  Status.CONNFAIL - The connection attempt failed\n        //  Status.AUTHENTICATING - The connection is authenticating\n        //  Status.AUTHFAIL - The authentication attempt failed\n        //  Status.CONNECTED - The connection has succeeded\n        //  Status.DISCONNECTED - The connection has been terminated\n        //  Status.DISCONNECTING - The connection is currently being terminated\n        //  Status.ATTACHED - The connection has been attached\n\n        this.anonymousConnectionFailed = false;\n        this.connectionFailed = false;\n        this.lastErrorMsg = undefined;\n        this.connection.connect(\n            jid,\n            password,\n            this.connectionHandler.bind(this, {\n                jid,\n                password\n            }));\n    }\n\n    /**\n     * Attach to existing connection. Can be used for optimizations. For\n     * example: if the connection is created on the server we can attach to it\n     * and start using it.\n     *\n     * @param options {object} connecting options - rid, sid, jid and password.\n     */\n    attach(options) {\n        const now = this.connectionTimes.attaching = window.performance.now();\n\n        logger.log(`(TIME) Strophe Attaching\\t:${now}`);\n        this.connection.attach(options.jid, options.sid,\n            parseInt(options.rid, 10) + 1,\n            this.connectionHandler.bind(this, {\n                jid: options.jid,\n                password: options.password\n            }));\n    }\n\n    /**\n     *\n     * @param jid\n     * @param password\n     */\n    connect(jid, password) {\n        if (!jid) {\n            const { anonymousdomain, domain } = this.options.hosts;\n            let configDomain = anonymousdomain || domain;\n\n            // Force authenticated domain if room is appended with '?login=true'\n            // or if we're joining with the token\n\n            // FIXME Do not rely on window.location because (1) React Native\n            // does not have a window.location by default and (2) here we cannot\n            // know for sure that query/search has not be stripped from\n            // window.location by the time the following executes.\n            const { location } = window;\n\n            if (anonymousdomain) {\n                const search = location && location.search;\n\n                if ((search && search.indexOf('login=true') !== -1)\n                        || this.token) {\n                    configDomain = domain;\n                }\n            }\n\n            // eslint-disable-next-line no-param-reassign\n            jid = configDomain || (location && location.hostname);\n        }\n\n        return this._connect(jid, password);\n    }\n\n    /**\n     * Joins or creates a muc with the provided jid, created from the passed\n     * in room name and muc host and onCreateResource result.\n     *\n     * @param {string} roomName - The name of the muc to join.\n     * @param {Object} options - Configuration for how to join the muc.\n     * @param {Function} [onCreateResource] - Callback to invoke when a resource\n     * is to be added to the jid.\n     * @returns {Promise} Resolves with an instance of a strophe muc.\n     */\n    createRoom(roomName, options, onCreateResource) {\n        let roomjid = `${roomName}@${this.options.hosts.muc}/`;\n\n        const mucNickname = onCreateResource\n            ? onCreateResource(this.connection.jid, this.authenticatedUser)\n            : RandomUtil.randomHexString(8).toLowerCase();\n\n        logger.info(`JID ${this.connection.jid} using MUC nickname ${mucNickname}`);\n        roomjid += mucNickname;\n\n        return this.connection.emuc.createRoom(roomjid, null, options);\n    }\n\n    /**\n     * Returns the jid of the participant associated with the Strophe connection.\n     *\n     * @returns {string} The jid of the participant.\n     */\n    getJid() {\n        return this.connection.jid;\n    }\n\n    /**\n     * Returns the logs from strophe.jingle.\n     * @returns {Object}\n     */\n    getJingleLog() {\n        const jingle = this.connection.jingle;\n\n\n        return jingle ? jingle.getLog() : {};\n    }\n\n    /**\n     * Returns the logs from strophe.\n     */\n    getXmppLog() {\n        return (this.connection.logger || {}).log || null;\n    }\n\n    /**\n     *\n     */\n    dial(...args) {\n        this.connection.rayo.dial(...args);\n    }\n\n    /**\n     * Pings the server. Remember to check {@link isPingSupported} before using\n     * this method.\n     * @param timeout how many ms before a timeout should occur.\n     * @returns {Promise} resolved on ping success and reject on an error or\n     * a timeout.\n     */\n    ping(timeout) {\n        return new Promise((resolve, reject) => {\n            if (this.isPingSupported()) {\n                this.connection.ping\n                    .ping(this.connection.domain, resolve, reject, timeout);\n            } else {\n                reject('PING operation is not supported by the server');\n            }\n        });\n    }\n\n    /**\n     *\n     */\n    getSessions() {\n        return this.connection.jingle.sessions;\n    }\n\n    /**\n     * Disconnects this from the XMPP server (if this is connected).\n     *\n     * @param {Object} ev - Optionally, the event which triggered the necessity to\n     * disconnect from the XMPP server (e.g. beforeunload, unload).\n     * @returns {Promise} - Resolves when the disconnect process is finished or rejects with an error.\n     */\n    disconnect(ev) {\n        if (this.disconnectInProgress || !this.connection) {\n            this.eventEmitter.emit(JitsiConnectionEvents.WRONG_STATE);\n\n            return Promise.reject(new Error('Wrong connection state!'));\n        }\n\n        this.disconnectInProgress = true;\n\n        return new Promise(resolve => {\n            const disconnectListener = (credentials, status) => {\n                if (status === Strophe.Status.DISCONNECTED) {\n                    resolve();\n                    this.eventEmitter.removeListener(XMPPEvents.CONNECTION_STATUS_CHANGED, disconnectListener);\n                }\n            };\n\n            this.eventEmitter.on(XMPPEvents.CONNECTION_STATUS_CHANGED, disconnectListener);\n\n            // XXX Strophe is asynchronously sending by default. Unfortunately, that\n            // means that there may not be enough time to send an unavailable\n            // presence or disconnect at all. Switching Strophe to synchronous\n            // sending is not much of an option because it may lead to a noticeable\n            // delay in navigating away from the current location. As a compromise,\n            // we will try to increase the chances of sending an unavailable\n            // presence and/or disconecting within the short time span that we have\n            // upon unloading by invoking flush() on the connection. We flush() once\n            // before disconnect() in order to attemtp to have its unavailable\n            // presence at the top of the send queue. We flush() once more after\n            // disconnect() in order to attempt to have its unavailable presence\n            // sent as soon as possible.\n            this.connection.flush();\n\n            if (ev !== null && typeof ev !== 'undefined') {\n                const evType = ev.type;\n\n                if (evType === 'beforeunload' || evType === 'unload') {\n                    // XXX Whatever we said above, synchronous sending is the best\n                    // (known) way to properly disconnect from the XMPP server.\n                    // Consequently, it may be fine to have the source code and\n                    // comment it in or out depending on whether we want to run with\n                    // it for some time.\n                    this.connection.options.sync = true;\n                }\n            }\n\n            this.connection.disconnect();\n\n            if (this.connection.options.sync !== true) {\n                this.connection.flush();\n            }\n        });\n    }\n\n    /**\n     *\n     */\n    _initStrophePlugins() {\n        const iceConfig = {\n            jvb: { iceServers: [ ] },\n            p2p: { iceServers: [ ] }\n        };\n\n        const p2pStunServers = (this.options.p2p\n            && this.options.p2p.stunServers) || DEFAULT_STUN_SERVERS;\n\n        if (Array.isArray(p2pStunServers)) {\n            logger.info('P2P STUN servers: ', p2pStunServers);\n            iceConfig.p2p.iceServers = p2pStunServers;\n        }\n\n        if (this.options.p2p && this.options.p2p.iceTransportPolicy) {\n            logger.info('P2P ICE transport policy: ',\n                this.options.p2p.iceTransportPolicy);\n\n            iceConfig.p2p.iceTransportPolicy\n                = this.options.p2p.iceTransportPolicy;\n        }\n\n        initEmuc(this);\n        initJingle(this, this.eventEmitter, iceConfig);\n        initStropheUtil();\n        initPing(this);\n        initRayo();\n        initStropheLogger();\n    }\n\n    /**\n     * Returns details about connection failure. Shard change or is it after\n     * suspend.\n     * @returns {object} contains details about a connection failure.\n     * @private\n     */\n    _getConnectionFailedReasonDetails() {\n        const details = {};\n\n        // check for moving between shard if information is available\n        if (this.options.deploymentInfo\n            && this.options.deploymentInfo.shard\n            && this.connection._proto\n            && this.connection._proto.lastResponseHeaders) {\n\n            // split headers by line\n            const headersArr = this.connection._proto.lastResponseHeaders\n                .trim().split(/[\\r\\n]+/);\n            const headers = {};\n\n            headersArr.forEach(line => {\n                const parts = line.split(': ');\n                const header = parts.shift();\n                const value = parts.join(': ');\n\n                headers[header] = value;\n            });\n\n            /* eslint-disable camelcase */\n            details.shard_changed\n                = this.options.deploymentInfo.shard\n                    !== headers['x-jitsi-shard'];\n            /* eslint-enable camelcase */\n        }\n\n        /* eslint-disable camelcase */\n        // check for possible suspend\n        details.suspend_time = this.connection.ping.getPingSuspendTime();\n        details.time_since_last_success = this._lastSuccessTracker.getTimeSinceLastSuccess();\n        /* eslint-enable camelcase */\n\n        return details;\n    }\n\n    /**\n     * Notifies speaker stats component if available that we are the new\n     * dominant speaker in the conference.\n     * @param {String} roomJid - The room jid where the speaker event occurred.\n     */\n    sendDominantSpeakerEvent(roomJid) {\n        // no speaker stats component advertised\n        if (!this.speakerStatsComponentAddress || !roomJid) {\n            return;\n        }\n\n        const msg = $msg({ to: this.speakerStatsComponentAddress });\n\n        msg.c('speakerstats', {\n            xmlns: 'http://jitsi.org/jitmeet',\n            room: roomJid })\n            .up();\n\n        this.connection.send(msg);\n    }\n\n    /**\n     * Check if the given argument is a valid JSON ENDPOINT_MESSAGE string by\n     * parsing it and checking if it has a field called 'type'.\n     *\n     * @param {string} jsonString check if this string is a valid json string\n     * and contains the special structure.\n     * @returns {boolean, object} if given object is a valid JSON string, return\n     * the json object. Otherwise, returns false.\n     */\n    tryParseJSONAndVerify(jsonString) {\n        try {\n            const json = JSON.parse(jsonString);\n\n            // Handle non-exception-throwing cases:\n            // Neither JSON.parse(false) or JSON.parse(1234) throw errors,\n            // hence the type-checking,\n            // but... JSON.parse(null) returns null, and\n            // typeof null === \"object\",\n            // so we must check for that, too.\n            // Thankfully, null is falsey, so this suffices:\n            if (json && typeof json === 'object') {\n                const type = json[JITSI_MEET_MUC_TYPE];\n\n                if (typeof type !== 'undefined') {\n                    return json;\n                }\n\n                logger.debug('parsing valid json but does not have correct '\n                    + 'structure', 'topic: ', type);\n            }\n        } catch (e) {\n            return false;\n        }\n\n        return false;\n    }\n\n    /**\n     * A private message is received, message that is not addressed to the muc.\n     * We expect private message coming from speaker stats component if it is\n     * enabled and running.\n     *\n     * @param {string} msg - The message.\n     */\n    _onPrivateMessage(msg) {\n        const from = msg.getAttribute('from');\n\n        if (!this.speakerStatsComponentAddress\n            || from !== this.speakerStatsComponentAddress) {\n            return;\n        }\n\n        const jsonMessage = $(msg).find('>json-message')\n            .text();\n        const parsedJson = this.tryParseJSONAndVerify(jsonMessage);\n\n        if (parsedJson\n            && parsedJson[JITSI_MEET_MUC_TYPE] === 'speakerstats'\n            && parsedJson.users) {\n            this.eventEmitter.emit(\n                XMPPEvents.SPEAKER_STATS_RECEIVED, parsedJson.users);\n        }\n\n        return true;\n    }\n}\n","/**\n * The errors for the connection.\n */\n\n/**\n * Indicates that the connection was dropped with an error which was most likely\n * caused by some networking issues. The dropped term in this context means that\n * the connection was closed unexpectedly (not on user's request).\n *\n * One example is 'item-not-found' error thrown by Prosody when the BOSH session\n * times out after 60 seconds of inactivity. On the other hand 'item-not-found'\n * could also happen when BOSH request is sent to the server with the session-id\n * that is not know to the server. But this should not happen in lib-jitsi-meet\n * case as long as the service is configured correctly (there is no bug).\n */\nexport const CONNECTION_DROPPED_ERROR = 'connection.droppedError';\n\n/**\n * Not specified errors.\n */\nexport const OTHER_ERROR = 'connection.otherError';\n\n/**\n * Indicates that a password is required in order to join the conference.\n */\nexport const PASSWORD_REQUIRED = 'connection.passwordRequired';\n\n/**\n * Indicates that the connection was dropped, because of too many 5xx HTTP\n * errors on BOSH requests.\n */\nexport const SERVER_ERROR = 'connection.serverError';\n","/**\n * Event triggered when participant's muted status changes.\n * @param {string} endpointId the track owner's identifier (MUC nickname)\n * @param {MediaType} mediaType \"audio\" or \"video\"\n * @param {boolean} isMuted the new muted state\n */\nexport const PEER_MUTED_CHANGED = 'signaling.peerMuted';\n\n/**\n * Event triggered when participant's video type changes.\n * @param {string} endpointId the video owner's ID (MUC nickname)\n * @param {VideoType} videoType the new value\n */\nexport const PEER_VIDEO_TYPE_CHANGED = 'signaling.peerVideoType';\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n /* eslint-env node */\n'use strict';\n\nvar logDisabled_ = true;\nvar deprecationWarnings_ = true;\n\n// Utility methods.\nvar utils = {\n  disableLog: function(bool) {\n    if (typeof bool !== 'boolean') {\n      return new Error('Argument type: ' + typeof bool +\n          '. Please use a boolean.');\n    }\n    logDisabled_ = bool;\n    return (bool) ? 'adapter.js logging disabled' :\n        'adapter.js logging enabled';\n  },\n\n  /**\n   * Disable or enable deprecation warnings\n   * @param {!boolean} bool set to true to disable warnings.\n   */\n  disableWarnings: function(bool) {\n    if (typeof bool !== 'boolean') {\n      return new Error('Argument type: ' + typeof bool +\n          '. Please use a boolean.');\n    }\n    deprecationWarnings_ = !bool;\n    return 'adapter.js deprecation warnings ' + (bool ? 'disabled' : 'enabled');\n  },\n\n  log: function() {\n    if (typeof window === 'object') {\n      if (logDisabled_) {\n        return;\n      }\n      if (typeof console !== 'undefined' && typeof console.log === 'function') {\n        console.log.apply(console, arguments);\n      }\n    }\n  },\n\n  /**\n   * Shows a deprecation warning suggesting the modern and spec-compatible API.\n   */\n  deprecated: function(oldMethod, newMethod) {\n    if (!deprecationWarnings_) {\n      return;\n    }\n    console.warn(oldMethod + ' is deprecated, please use ' + newMethod +\n        ' instead.');\n  },\n\n  /**\n   * Extract browser version out of the provided user agent string.\n   *\n   * @param {!string} uastring userAgent string.\n   * @param {!string} expr Regular expression used as match criteria.\n   * @param {!number} pos position in the version string to be returned.\n   * @return {!number} browser version.\n   */\n  extractVersion: function(uastring, expr, pos) {\n    var match = uastring.match(expr);\n    return match && match.length >= pos && parseInt(match[pos], 10);\n  },\n\n  /**\n   * Browser detector.\n   *\n   * @return {object} result containing browser and version\n   *     properties.\n   */\n  detectBrowser: function(window) {\n    var navigator = window && window.navigator;\n\n    // Returned result object.\n    var result = {};\n    result.browser = null;\n    result.version = null;\n\n    // Fail early if it's not a browser\n    if (typeof window === 'undefined' || !window.navigator) {\n      result.browser = 'Not a browser.';\n      return result;\n    }\n\n    // Firefox.\n    if (navigator.mozGetUserMedia) {\n      result.browser = 'firefox';\n      result.version = this.extractVersion(navigator.userAgent,\n          /Firefox\\/(\\d+)\\./, 1);\n    } else if (navigator.webkitGetUserMedia) {\n      // Chrome, Chromium, Webview, Opera, all use the chrome shim for now\n      if (window.webkitRTCPeerConnection) {\n        result.browser = 'chrome';\n        result.version = this.extractVersion(navigator.userAgent,\n          /Chrom(e|ium)\\/(\\d+)\\./, 2);\n      } else { // Safari (in an unpublished version) or unknown webkit-based.\n        if (navigator.userAgent.match(/Version\\/(\\d+).(\\d+)/)) {\n          result.browser = 'safari';\n          result.version = this.extractVersion(navigator.userAgent,\n            /AppleWebKit\\/(\\d+)\\./, 1);\n        } else { // unknown webkit-based browser.\n          result.browser = 'Unsupported webkit-based browser ' +\n              'with GUM support but no WebRTC support.';\n          return result;\n        }\n      }\n    } else if (navigator.mediaDevices &&\n        navigator.userAgent.match(/Edge\\/(\\d+).(\\d+)$/)) { // Edge.\n      result.browser = 'edge';\n      result.version = this.extractVersion(navigator.userAgent,\n          /Edge\\/(\\d+).(\\d+)$/, 2);\n    } else if (navigator.mediaDevices &&\n        navigator.userAgent.match(/AppleWebKit\\/(\\d+)\\./)) {\n        // Safari, with webkitGetUserMedia removed.\n      result.browser = 'safari';\n      result.version = this.extractVersion(navigator.userAgent,\n          /AppleWebKit\\/(\\d+)\\./, 1);\n    } else { // Default fallthrough: not supported.\n      result.browser = 'Not a supported browser.';\n      return result;\n    }\n\n    return result;\n  },\n\n};\n\n// Export.\nmodule.exports = {\n  log: utils.log,\n  deprecated: utils.deprecated,\n  disableLog: utils.disableLog,\n  disableWarnings: utils.disableWarnings,\n  extractVersion: utils.extractVersion,\n  shimCreateObjectURL: utils.shimCreateObjectURL,\n  detectBrowser: utils.detectBrowser.bind(utils)\n};\n","/**\n * The possible camera facing modes. For now support only 'user' and\n * 'environment' because 'left' and 'right' are not used anywhere in our\n * projects at the time of this writing. For more information please refer to\n * https://w3c.github.io/mediacapture-main/getusermedia.html\n * #def-constraint-facingMode.\n *\n * @enum {string}\n */\nconst CameraFacingMode = {\n    /**\n     * The mode which specifies the environment-facing camera.\n     */\n    ENVIRONMENT: 'environment',\n\n    /**\n     * The mode which specifies the user-facing camera.\n     */\n    USER: 'user'\n};\n\nmodule.exports = CameraFacingMode;\n","/* global chrome, $, alert */\n\nimport JitsiTrackError from '../../JitsiTrackError';\nimport * as JitsiTrackErrors from '../../JitsiTrackErrors';\nimport browser from '../browser';\n\nconst logger = require('jitsi-meet-logger').getLogger(__filename);\nconst GlobalOnErrorHandler = require('../util/GlobalOnErrorHandler');\n\n/**\n * Indicates whether the Chrome desktop sharing extension is installed.\n * @type {boolean}\n */\nlet chromeExtInstalled = false;\n\n/**\n * Indicates whether an update of the Chrome desktop sharing extension is\n * required.\n * @type {boolean}\n */\nlet chromeExtUpdateRequired = false;\n\nlet gumFunction = null;\n\n/**\n * The error message returned by chrome when the extension is installed.\n */\nconst CHROME_NO_EXTENSION_ERROR_MSG // eslint-disable-line no-unused-vars\n    = 'Could not establish connection. Receiving end does not exist.';\n\n/**\n * Handles obtaining a stream from a screen capture on different browsers.\n */\nconst ScreenObtainer = {\n    /**\n     * If not <tt>null</tt> it means that the initialization process is still in\n     * progress. It is used to make desktop stream request wait and continue\n     * after it's done.\n     * {@type Promise|null}\n     */\n    intChromeExtPromise: null,\n\n    obtainStream: null,\n\n    /**\n     * Initializes the function used to obtain a screen capture\n     * (this.obtainStream).\n     *\n     * @param {object} options\n     * @param {boolean} [options.desktopSharingChromeDisabled]\n     * @param {boolean} [options.desktopSharingChromeExtId]\n     * @param {boolean} [options.desktopSharingFirefoxDisabled]\n     * @param {Function} gum GUM method\n     */\n    init(options = {\n        desktopSharingChromeDisabled: false,\n        desktopSharingChromeExtId: null,\n        desktopSharingFirefoxDisabled: false\n    }, gum) {\n        this.options = options;\n        gumFunction = gum;\n\n        this.obtainStream = this._createObtainStreamMethod(options);\n\n        if (!this.obtainStream) {\n            logger.info('Desktop sharing disabled');\n        }\n    },\n\n    /**\n     * Returns a method which will be used to obtain the screen sharing stream\n     * (based on the browser type).\n     *\n     * @param {object} options passed from {@link init} - check description\n     * there\n     * @returns {Function}\n     * @private\n     */\n    _createObtainStreamMethod(options) {\n        if (browser.isNWJS()) {\n            return (_, onSuccess, onFailure) => {\n                window.JitsiMeetNW.obtainDesktopStream(\n                    onSuccess,\n                    (error, constraints) => {\n                        let jitsiError;\n\n                        // FIXME:\n                        // This is very very dirty fix for recognising that the\n                        // user have clicked the cancel button from the Desktop\n                        // sharing pick window. The proper solution would be to\n                        // detect this in the NWJS application by checking the\n                        // streamId === \"\". Even better solution would be to\n                        // stop calling GUM from the NWJS app and just pass the\n                        // streamId to lib-jitsi-meet. This way the desktop\n                        // sharing implementation for NWJS and chrome extension\n                        // will be the same and lib-jitsi-meet will be able to\n                        // control the constraints, check the streamId, etc.\n                        //\n                        // I cannot find documentation about \"InvalidStateError\"\n                        // but this is what we are receiving from GUM when the\n                        // streamId for the desktop sharing is \"\".\n\n                        if (error && error.name === 'InvalidStateError') {\n                            jitsiError = new JitsiTrackError(\n                                JitsiTrackErrors.CHROME_EXTENSION_USER_CANCELED\n                            );\n                        } else {\n                            jitsiError = new JitsiTrackError(\n                                error, constraints, [ 'desktop' ]);\n                        }\n                        (typeof onFailure === 'function')\n                            && onFailure(jitsiError);\n                    });\n            };\n        } else if (browser.isElectron()) {\n            return this.obtainScreenOnElectron;\n        } else if (browser.isChrome() || browser.isOpera()) {\n            if (browser.supportsGetDisplayMedia()\n                    && !options.desktopSharingChromeDisabled) {\n\n                return this.obtainScreenFromGetDisplayMedia;\n            } else if (options.desktopSharingChromeDisabled\n                || !options.desktopSharingChromeExtId) {\n\n                return null;\n            }\n\n            logger.info('Using Chrome extension for desktop sharing');\n            this.intChromeExtPromise\n                = initChromeExtension(options).then(() => {\n                    this.intChromeExtPromise = null;\n                });\n\n            return this.obtainScreenFromExtension;\n        } else if (browser.isFirefox()) {\n            if (options.desktopSharingFirefoxDisabled) {\n                return null;\n            } else if (browser.supportsGetDisplayMedia()) {\n                // Firefox 66 support getDisplayMedia\n                return this.obtainScreenFromGetDisplayMedia;\n            }\n\n            // Legacy Firefox\n            return this.obtainScreenOnFirefox;\n        } else if (browser.isEdge() && browser.supportsGetDisplayMedia()) {\n            return this.obtainScreenFromGetDisplayMedia;\n        }\n\n        logger.log(\n            'Screen sharing not supported by the current browser: ',\n            browser.getName());\n\n        return null;\n    },\n\n    /**\n     * Checks whether obtaining a screen capture is supported in the current\n     * environment.\n     * @returns {boolean}\n     */\n    isSupported() {\n        return this.obtainStream !== null;\n    },\n\n    /**\n     * Obtains a screen capture stream on Firefox.\n     * @param callback\n     * @param errorCallback\n     */\n    obtainScreenOnFirefox(options, callback, errorCallback) {\n        obtainWebRTCScreen(options.gumOptions, callback, errorCallback);\n    },\n\n    /**\n     * Obtains a screen capture stream on Electron.\n     *\n     * @param {Object} [options] - Screen sharing options.\n     * @param {Array<string>} [options.desktopSharingSources] - Array with the\n     * sources that have to be displayed in the desktop picker window ('screen',\n     * 'window', etc.).\n     * @param onSuccess - Success callback.\n     * @param onFailure - Failure callback.\n     */\n    obtainScreenOnElectron(options = {}, onSuccess, onFailure) {\n        if (window.JitsiMeetScreenObtainer\n            && window.JitsiMeetScreenObtainer.openDesktopPicker) {\n            const { desktopSharingSources, gumOptions } = options;\n\n            window.JitsiMeetScreenObtainer.openDesktopPicker(\n                {\n                    desktopSharingSources: desktopSharingSources\n                        || this.options.desktopSharingChromeSources\n                },\n                (streamId, streamType) =>\n                    onGetStreamResponse(\n                        {\n                            response: {\n                                streamId,\n                                streamType\n                            },\n                            gumOptions\n                        },\n                        onSuccess,\n                        onFailure\n                    ),\n                err => onFailure(new JitsiTrackError(\n                    JitsiTrackErrors.ELECTRON_DESKTOP_PICKER_ERROR,\n                    err\n                ))\n            );\n        } else {\n            onFailure(new JitsiTrackError(\n                JitsiTrackErrors.ELECTRON_DESKTOP_PICKER_NOT_FOUND));\n        }\n    },\n\n    /**\n     * Asks Chrome extension to call chooseDesktopMedia and gets chrome\n     * 'desktop' stream for returned stream token.\n     */\n    obtainScreenFromExtension(options, streamCallback, failCallback) {\n        if (this.intChromeExtPromise !== null) {\n            this.intChromeExtPromise.then(() => {\n                this.obtainScreenFromExtension(\n                    options, streamCallback, failCallback);\n            });\n\n            return;\n        }\n\n        const {\n            desktopSharingChromeExtId,\n            desktopSharingChromeSources\n        } = this.options;\n\n        const {\n            gumOptions\n        } = options;\n\n        const doGetStreamFromExtensionOptions = {\n            desktopSharingChromeExtId,\n            desktopSharingChromeSources:\n                options.desktopSharingSources || desktopSharingChromeSources,\n            gumOptions\n        };\n\n        if (chromeExtInstalled) {\n            doGetStreamFromExtension(\n                doGetStreamFromExtensionOptions,\n                streamCallback,\n                failCallback);\n        } else {\n            if (chromeExtUpdateRequired) {\n                /* eslint-disable no-alert */\n                alert(\n                    'Jitsi Desktop Streamer requires update. '\n                    + 'Changes will take effect after next Chrome restart.');\n\n                /* eslint-enable no-alert */\n            }\n\n            this.handleExternalInstall(options, streamCallback,\n                failCallback);\n        }\n    },\n\n    /* eslint-disable max-params */\n\n    handleExternalInstall(options, streamCallback, failCallback, e) {\n        const webStoreInstallUrl = getWebStoreInstallUrl(this.options);\n\n        options.listener('waitingForExtension', webStoreInstallUrl);\n        this.checkForChromeExtensionOnInterval(options, streamCallback,\n            failCallback, e);\n    },\n\n    /* eslint-enable max-params */\n\n    checkForChromeExtensionOnInterval(options, streamCallback, failCallback) {\n        if (options.checkAgain() === false) {\n            failCallback(new JitsiTrackError(\n                JitsiTrackErrors.CHROME_EXTENSION_INSTALLATION_ERROR));\n\n            return;\n        }\n        waitForExtensionAfterInstall(this.options, options.interval, 1)\n            .then(() => {\n                chromeExtInstalled = true;\n                options.listener('extensionFound');\n                this.obtainScreenFromExtension(options,\n                    streamCallback, failCallback);\n            })\n            .catch(() => {\n                this.checkForChromeExtensionOnInterval(options,\n                    streamCallback, failCallback);\n            });\n    },\n\n    /**\n     * Obtains a screen capture stream using getDisplayMedia.\n     *\n     * @param callback - The success callback.\n     * @param errorCallback - The error callback.\n     */\n    obtainScreenFromGetDisplayMedia(options, callback, errorCallback) {\n        logger.info('Using getDisplayMedia for screen sharing');\n\n        let getDisplayMedia;\n\n        if (navigator.getDisplayMedia) {\n            getDisplayMedia = navigator.getDisplayMedia.bind(navigator);\n        } else {\n            // eslint-disable-next-line max-len\n            getDisplayMedia = navigator.mediaDevices.getDisplayMedia.bind(navigator.mediaDevices);\n        }\n\n        getDisplayMedia({ video: true })\n            .then(stream => {\n                let applyConstraintsPromise;\n\n                if (stream\n                    && stream.getTracks()\n                    && stream.getTracks().length > 0) {\n                    applyConstraintsPromise = stream.getTracks()[0]\n                        .applyConstraints(options.trackOptions);\n                } else {\n                    applyConstraintsPromise = Promise.resolve();\n                }\n\n                applyConstraintsPromise.then(() =>\n                    callback({\n                        stream,\n                        sourceId: stream.id\n                    }));\n            })\n            .catch(() =>\n                errorCallback(new JitsiTrackError(JitsiTrackErrors\n                    .CHROME_EXTENSION_USER_CANCELED)));\n    }\n};\n\n/**\n * Obtains a desktop stream using getUserMedia.\n * For this to work on Chrome, the\n * 'chrome://flags/#enable-usermedia-screen-capture' flag must be enabled.\n *\n * On firefox, the document's domain must be white-listed in the\n * 'media.getusermedia.screensharing.allowed_domains' preference in\n * 'about:config'.\n */\nfunction obtainWebRTCScreen(options, streamCallback, failCallback) {\n    gumFunction([ 'screen' ], options)\n        .then(stream => streamCallback({ stream }), failCallback);\n}\n\n/**\n * Constructs inline install URL for Chrome desktop streaming extension.\n * The 'chromeExtensionId' must be defined in options parameter.\n * @param options supports \"desktopSharingChromeExtId\"\n * @returns {string}\n */\nfunction getWebStoreInstallUrl(options) {\n    return (\n        `https://chrome.google.com/webstore/detail/${\n            options.desktopSharingChromeExtId}`);\n}\n\n/**\n * Checks whether an update of the Chrome extension is required.\n * @param minVersion minimal required version\n * @param extVersion current extension version\n * @returns {boolean}\n */\nfunction isUpdateRequired(minVersion, extVersion) {\n    try {\n        const s1 = minVersion.split('.');\n        const s2 = extVersion.split('.');\n\n        const len = Math.max(s1.length, s2.length);\n\n        for (let i = 0; i < len; i++) {\n            let n1 = 0,\n                n2 = 0;\n\n            if (i < s1.length) {\n                n1 = parseInt(s1[i], 10);\n            }\n            if (i < s2.length) {\n                n2 = parseInt(s2[i], 10);\n            }\n\n            if (isNaN(n1) || isNaN(n2)) {\n                return true;\n            } else if (n1 !== n2) {\n                return n1 > n2;\n            }\n        }\n\n        // will happen if both versions have identical numbers in\n        // their components (even if one of them is longer, has more components)\n        return false;\n    } catch (e) {\n        GlobalOnErrorHandler.callErrorHandler(e);\n        logger.error('Failed to parse extension version', e);\n\n        return true;\n    }\n}\n\n/**\n *\n * @param callback\n * @param options\n */\nfunction checkChromeExtInstalled(callback, options) {\n    if (typeof chrome === 'undefined' || !chrome || !chrome.runtime) {\n        // No API, so no extension for sure\n        callback(false, false);\n\n        return;\n    }\n    chrome.runtime.sendMessage(\n        options.desktopSharingChromeExtId,\n        { getVersion: true },\n        response => {\n            if (!response || !response.version) {\n                // Communication failure - assume that no endpoint exists\n                logger.warn(\n                    'Extension not installed?: ', chrome.runtime.lastError);\n                callback(false, false);\n\n                return;\n            }\n\n            // Check installed extension version\n            const extVersion = response.version;\n\n            logger.log(`Extension version is: ${extVersion}`);\n            const updateRequired\n                = isUpdateRequired(\n                    options.desktopSharingChromeMinExtVersion,\n                    extVersion);\n\n            callback(!updateRequired, updateRequired);\n        }\n    );\n}\n\n/**\n *\n * @param options\n * @param streamCallback\n * @param failCallback\n */\nfunction doGetStreamFromExtension(options, streamCallback, failCallback) {\n    const {\n        desktopSharingChromeSources,\n        desktopSharingChromeExtId,\n        gumOptions\n    } = options;\n\n    // Sends 'getStream' msg to the extension.\n    // Extension id must be defined in the config.\n    chrome.runtime.sendMessage(\n        desktopSharingChromeExtId,\n        {\n            getStream: true,\n            sources: desktopSharingChromeSources\n        },\n        response => {\n            if (!response) {\n                // possibly re-wraping error message to make code consistent\n                const lastError = chrome.runtime.lastError;\n\n                failCallback(lastError instanceof Error\n                    ? lastError\n                    : new JitsiTrackError(\n                        JitsiTrackErrors.CHROME_EXTENSION_GENERIC_ERROR,\n                        lastError));\n\n                return;\n            }\n            logger.log('Response from extension: ', response);\n            onGetStreamResponse(\n                {\n                    response,\n                    gumOptions\n                },\n                streamCallback,\n                failCallback\n            );\n        }\n    );\n}\n\n/**\n * Initializes <link rel=chrome-webstore-item /> with extension id set in\n * config.js to support inline installs. Host site must be selected as main\n * website of published extension.\n * @param options supports \"desktopSharingChromeExtId\"\n */\nfunction initInlineInstalls(options) {\n    if ($('link[rel=chrome-webstore-item]').length === 0) {\n        $('head').append('<link rel=\"chrome-webstore-item\">');\n    }\n    $('link[rel=chrome-webstore-item]').attr('href',\n        getWebStoreInstallUrl(options));\n}\n\n/**\n *\n * @param options\n *\n * @return {Promise} - a Promise resolved once the initialization process is\n * finished.\n */\nfunction initChromeExtension(options) {\n    // Initialize Chrome extension inline installs\n    initInlineInstalls(options);\n\n    return new Promise(resolve => {\n        // Check if extension is installed\n        checkChromeExtInstalled((installed, updateRequired) => {\n            chromeExtInstalled = installed;\n            chromeExtUpdateRequired = updateRequired;\n            logger.info(\n                `Chrome extension installed: ${\n                    chromeExtInstalled} updateRequired: ${\n                    chromeExtUpdateRequired}`);\n            resolve();\n        }, options);\n    });\n}\n\n/**\n * Checks \"retries\" times on every \"waitInterval\"ms whether the ext is alive.\n * @param {Object} options the options passed to ScreanObtainer.obtainStream\n * @param {int} waitInterval the number of ms between retries\n * @param {int} retries the number of retries\n * @returns {Promise} returns promise that will be resolved when the extension\n * is alive and rejected if the extension is not alive even after \"retries\"\n * checks\n */\nfunction waitForExtensionAfterInstall(options, waitInterval, retries) {\n    if (retries === 0) {\n        return Promise.reject();\n    }\n\n    return new Promise((resolve, reject) => {\n        let currentRetries = retries;\n        const interval = window.setInterval(() => {\n            checkChromeExtInstalled(installed => {\n                if (installed) {\n                    window.clearInterval(interval);\n                    resolve();\n                } else {\n                    currentRetries--;\n                    if (currentRetries === 0) {\n                        reject();\n                        window.clearInterval(interval);\n                    }\n                }\n            }, options);\n        }, waitInterval);\n    });\n}\n\n/**\n * Handles response from external application / extension and calls GUM to\n * receive the desktop streams or reports error.\n * @param {object} options\n * @param {object} options.response\n * @param {string} options.response.streamId - the streamId for the desktop\n * stream.\n * @param {string} options.response.error - error to be reported.\n * @param {object} options.gumOptions - options passed to GUM.\n * @param {Function} onSuccess - callback for success.\n * @param {Function} onFailure - callback for failure.\n * @param {object} gumOptions - options passed to GUM.\n */\nfunction onGetStreamResponse(\n        options = {\n            response: {},\n            gumOptions: {}\n        },\n        onSuccess,\n        onFailure) {\n    const { streamId, streamType, error } = options.response || {};\n\n    if (streamId) {\n        const gumOptions = {\n            desktopStream: streamId,\n            ...options.gumOptions\n        };\n\n        gumFunction([ 'desktop' ], gumOptions)\n            .then(stream => onSuccess({\n                stream,\n                sourceId: streamId,\n                sourceType: streamType\n            }), onFailure);\n    } else {\n        // As noted in Chrome Desktop Capture API:\n        // If user didn't select any source (i.e. canceled the prompt)\n        // then the callback is called with an empty streamId.\n        if (streamId === '') {\n            onFailure(new JitsiTrackError(\n                JitsiTrackErrors.CHROME_EXTENSION_USER_CANCELED));\n\n            return;\n        }\n\n        onFailure(new JitsiTrackError(\n            JitsiTrackErrors.CHROME_EXTENSION_GENERIC_ERROR,\n            error));\n    }\n}\n\nexport default ScreenObtainer;\n","/* global __filename */\nimport { getLogger } from 'jitsi-meet-logger';\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport * as JitsiTrackEvents from '../../JitsiTrackEvents';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport browser from '../browser';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport Statistics from '../statistics/statistics';\nimport { createParticipantConnectionStatusEvent } from '../../service/statistics/AnalyticsEvents';\n\nconst logger = getLogger(__filename);\n\n/**\n * Default value of 500 milliseconds for\n * {@link ParticipantConnectionStatus.outOfLastNTimeout}.\n *\n * @type {number}\n */\nconst DEFAULT_NOT_IN_LAST_N_TIMEOUT = 500;\n\n/**\n * Default value of 2000 milliseconds for\n * {@link ParticipantConnectionStatus.rtcMuteTimeout}.\n *\n * @type {number}\n */\nconst DEFAULT_RTC_MUTE_TIMEOUT = 10000;\n\n/**\n * The time to wait a track to be restored. Track which was out of lastN\n * should be inactive and when entering lastN it becomes restoring and when\n * data is received from bridge it will become active, but if no data is\n * received for some time we set status of that participant connection to\n * interrupted.\n * @type {number}\n */\nconst DEFAULT_RESTORING_TIMEOUT = 10000;\n\n/**\n * Participant connection statuses.\n *\n * @type {{\n *      ACTIVE: string,\n *      INACTIVE: string,\n *      INTERRUPTED: string,\n *      RESTORING: string\n * }}\n */\nexport const ParticipantConnectionStatus = {\n    /**\n     * Status indicating that connection is currently active.\n     */\n    ACTIVE: 'active',\n\n    /**\n     * Status indicating that connection is currently inactive.\n     * Inactive means the connection was stopped on purpose from the bridge,\n     * like exiting lastN or adaptivity decided to drop video because of not\n     * enough bandwidth.\n     */\n    INACTIVE: 'inactive',\n\n    /**\n     * Status indicating that connection is currently interrupted.\n     */\n    INTERRUPTED: 'interrupted',\n\n    /**\n     * Status indicating that connection is currently restoring.\n     */\n    RESTORING: 'restoring'\n};\n\n/**\n * Class is responsible for emitting\n * JitsiConferenceEvents.PARTICIPANT_CONN_STATUS_CHANGED events.\n */\nexport default class ParticipantConnectionStatusHandler {\n    /* eslint-disable max-params*/\n    /**\n     * Calculates the new {@link ParticipantConnectionStatus} based on\n     * the values given for some specific remote user. It is assumed that\n     * the conference is currently in the JVB mode (in contrary to the P2P mode)\n     * @param {boolean} isConnectionActiveByJvb true if the JVB did not get any\n     * data from the user for the last 15 seconds.\n     * @param {boolean} isInLastN indicates whether the user is in the last N\n     * set. When set to false it means that JVB is not sending any video for\n     * the user.\n     * @param {boolean} isRestoringTimedout if true it means that the user has\n     * been outside of last N too long to be considered\n     * {@link ParticipantConnectionStatus.RESTORING}.\n     * @param {boolean} isVideoMuted true if the user is video muted and we\n     * should not expect to receive any video.\n     * @param {boolean} isVideoTrackFrozen if the current browser support video\n     * frozen detection then it will be set to true when the video track is\n     * frozen. If the current browser does not support frozen detection the it's\n     * always false.\n     * @return {ParticipantConnectionStatus} the new connection status for\n     * the user for whom the values above were provided.\n     * @private\n     */\n    static _getNewStateForJvbMode(\n            isConnectionActiveByJvb,\n            isInLastN,\n            isRestoringTimedout,\n            isVideoMuted,\n            isVideoTrackFrozen) {\n        if (!isConnectionActiveByJvb) {\n            // when there is a connection problem signaled from jvb\n            // it means no media was flowing for at least 15secs, so both audio\n            // and video are most likely interrupted\n            return ParticipantConnectionStatus.INTERRUPTED;\n        } else if (isVideoMuted) {\n            // If the connection is active according to JVB and the user is\n            // video muted there is no way for the connection to be inactive,\n            // because the detection logic below only makes sense for video.\n            return ParticipantConnectionStatus.ACTIVE;\n        }\n\n        // Logic when isVideoTrackFrozen is supported\n        if (browser.supportsVideoMuteOnConnInterrupted()) {\n            if (!isVideoTrackFrozen) {\n                // If the video is playing we're good\n                return ParticipantConnectionStatus.ACTIVE;\n            } else if (isInLastN) {\n                return isRestoringTimedout\n                    ? ParticipantConnectionStatus.INTERRUPTED\n                    : ParticipantConnectionStatus.RESTORING;\n            }\n\n            return ParticipantConnectionStatus.INACTIVE;\n        }\n\n        // Because this browser is incapable of detecting frozen video we must\n        // rely on the lastN value\n        return isInLastN\n            ? ParticipantConnectionStatus.ACTIVE\n            : ParticipantConnectionStatus.INACTIVE;\n    }\n\n    /* eslint-enable max-params*/\n\n    /**\n     * In P2P mode we don't care about any values coming from the JVB and\n     * the connection status can be only active or interrupted.\n     * @param {boolean} isVideoMuted the user if video muted\n     * @param {boolean} isVideoTrackFrozen true if the video track for\n     * the remote user is currently frozen. If the current browser does not\n     * support video frozen detection then it's always false.\n     * @return {ParticipantConnectionStatus}\n     * @private\n     */\n    static _getNewStateForP2PMode(isVideoMuted, isVideoTrackFrozen) {\n        if (!browser.supportsVideoMuteOnConnInterrupted()) {\n            // There's no way to detect problems in P2P when there's no video\n            // track frozen detection...\n            return ParticipantConnectionStatus.ACTIVE;\n        }\n\n        return isVideoMuted || !isVideoTrackFrozen\n            ? ParticipantConnectionStatus.ACTIVE\n            : ParticipantConnectionStatus.INTERRUPTED;\n    }\n\n    /**\n     * Creates new instance of <tt>ParticipantConnectionStatus</tt>.\n     *\n     * @constructor\n     * @param {RTC} rtc the RTC service instance\n     * @param {JitsiConference} conference parent conference instance\n     * @param {Object} options\n     * @param {number} [options.rtcMuteTimeout=2000] custom value for\n     * {@link ParticipantConnectionStatus.rtcMuteTimeout}.\n     * @param {number} [options.outOfLastNTimeout=500] custom value for\n     * {@link ParticipantConnectionStatus.outOfLastNTimeout}.\n     */\n    constructor(rtc, conference, options) {\n        this.rtc = rtc;\n        this.conference = conference;\n\n        /**\n         * A map of the \"endpoint ID\"(which corresponds to the resource part\n         * of MUC JID(nickname)) to the timeout callback IDs scheduled using\n         * window.setTimeout.\n         * @type {Object.<string, number>}\n         */\n        this.trackTimers = {};\n\n        /**\n         * This map holds the endpoint connection status received from the JVB\n         * (as it might be different than the one stored in JitsiParticipant).\n         * Required for getting back in sync when remote video track is removed.\n         * @type {Object.<string, boolean>}\n         */\n        this.connStatusFromJvb = { };\n\n        /**\n         * If video track frozen detection through RTC mute event is supported,\n         * we wait some time until video track is considered frozen. But because\n         * when the user falls out of last N it is expected for the video to\n         * freeze this timeout must be significantly reduced in \"out of last N\"\n         * case.\n         *\n         * Basically this value is used instead of {@link rtcMuteTimeout} when\n         * user is not in last N.\n         * @type {number}\n         */\n        this.outOfLastNTimeout\n            = typeof options.outOfLastNTimeout === 'number'\n                ? options.outOfLastNTimeout : DEFAULT_NOT_IN_LAST_N_TIMEOUT;\n\n        /**\n         * How long we're going to wait after the RTC video track muted event\n         * for the corresponding signalling mute event, before the connection\n         * interrupted is fired. The default value is\n         * {@link DEFAULT_RTC_MUTE_TIMEOUT}.\n         *\n         * @type {number} amount of time in milliseconds\n         */\n        this.rtcMuteTimeout\n            = typeof options.rtcMuteTimeout === 'number'\n                ? options.rtcMuteTimeout : DEFAULT_RTC_MUTE_TIMEOUT;\n\n        /**\n         * This map holds a timestamp indicating  when participant's video track\n         * was RTC muted (it is assumed that each participant can have only 1\n         * video track at a time). The purpose of storing the timestamp is to\n         * avoid the transition to disconnected status in case of legitimate\n         * video mute operation where the signalling video muted event can\n         * arrive shortly after RTC muted event.\n         *\n         * The key is participant's ID which is the same as endpoint id in\n         * the Colibri conference allocated on the JVB.\n         *\n         * The value is a timestamp measured in milliseconds obtained with\n         * <tt>Date.now()</tt>.\n         *\n         * FIXME merge this logic with NO_DATA_FROM_SOURCE event\n         *       implemented in JitsiLocalTrack by extending the event to\n         *       the remote track and allowing to set different timeout for\n         *       local and remote tracks.\n         *\n         * @type {Object.<string, number>}\n         */\n        this.rtcMutedTimestamp = { };\n        logger.info(`RtcMuteTimeout set to: ${this.rtcMuteTimeout}`);\n\n        /**\n         * This map holds the timestamps indicating when participant's video\n         * entered lastN set. Participants entering lastN will have connection\n         * status restoring and when we start receiving video will become\n         * active, but if video is not received for certain time\n         * {@link DEFAULT_RESTORING_TIMEOUT} that participant connection status\n         * will become interrupted.\n         *\n         * @type {Map<string, number>}\n         */\n        this.enteredLastNTimestamp = new Map();\n\n        /**\n         * A map of the \"endpoint ID\"(which corresponds to the resource part\n         * of MUC JID(nickname)) to the restoring timeout callback IDs\n         * scheduled using window.setTimeout.\n         *\n         * @type {Map<string, number>}\n         */\n        this.restoringTimers = new Map();\n\n        /**\n         * A map that holds the current connection status (along with all the internal events that happen\n         * while in that state).\n         *\n         * The goal is to send this information to the analytics backend for post-mortem analysis.\n         */\n        this.connectionStatusMap = new Map();\n    }\n\n    /**\n     * Gets the video frozen timeout for given user.\n     * @param {string} id endpoint/participant ID\n     * @return {number} how long are we going to wait since RTC video muted\n     * even, before a video track is considered frozen.\n     * @private\n     */\n    _getVideoFrozenTimeout(id) {\n        return this.rtc.isInLastN(id)\n            ? this.rtcMuteTimeout : this.outOfLastNTimeout;\n    }\n\n    /**\n     * Initializes <tt>ParticipantConnectionStatus</tt> and bind required event\n     * listeners.\n     */\n    init() {\n\n        this._onEndpointConnStatusChanged\n            = this.onEndpointConnStatusChanged.bind(this);\n\n        this.rtc.addListener(\n            RTCEvents.ENDPOINT_CONN_STATUS_CHANGED,\n            this._onEndpointConnStatusChanged);\n\n        // Handles P2P status changes\n        this._onP2PStatus = this.refreshConnectionStatusForAll.bind(this);\n        this.conference.on(JitsiConferenceEvents.P2P_STATUS, this._onP2PStatus);\n\n        // Used to send analytics events for the participant that left the call.\n        this._onUserLeft = this.onUserLeft.bind(this);\n        this.conference.on(JitsiConferenceEvents.USER_LEFT, this._onUserLeft);\n\n        // On some browsers MediaStreamTrack trigger \"onmute\"/\"onunmute\"\n        // events for video type tracks when they stop receiving data which is\n        // often a sign that remote user is having connectivity issues\n        if (browser.supportsVideoMuteOnConnInterrupted()) {\n\n            this._onTrackRtcMuted = this.onTrackRtcMuted.bind(this);\n            this.rtc.addListener(\n                RTCEvents.REMOTE_TRACK_MUTE, this._onTrackRtcMuted);\n\n            this._onTrackRtcUnmuted = this.onTrackRtcUnmuted.bind(this);\n            this.rtc.addListener(\n                RTCEvents.REMOTE_TRACK_UNMUTE, this._onTrackRtcUnmuted);\n\n            // Track added/removed listeners are used to bind \"mute\"/\"unmute\"\n            // event handlers\n            this._onRemoteTrackAdded = this.onRemoteTrackAdded.bind(this);\n            this.conference.on(\n                JitsiConferenceEvents.TRACK_ADDED,\n                this._onRemoteTrackAdded);\n\n            this._onRemoteTrackRemoved = this.onRemoteTrackRemoved.bind(this);\n            this.conference.on(\n                JitsiConferenceEvents.TRACK_REMOVED,\n                this._onRemoteTrackRemoved);\n\n            // Listened which will be bound to JitsiRemoteTrack to listen for\n            // signalling mute/unmute events.\n            this._onSignallingMuteChanged\n                = this.onSignallingMuteChanged.bind(this);\n\n            // Used to send an analytics event when the video type changes.\n            this._onTrackVideoTypeChanged\n                = this.onTrackVideoTypeChanged.bind(this);\n        }\n\n        this._onLastNChanged = this._onLastNChanged.bind(this);\n        this.conference.on(\n            JitsiConferenceEvents.LAST_N_ENDPOINTS_CHANGED,\n            this._onLastNChanged);\n\n        this._onLastNValueChanged\n            = this.refreshConnectionStatusForAll.bind(this);\n        this.rtc.on(\n            RTCEvents.LASTN_VALUE_CHANGED, this._onLastNValueChanged);\n    }\n\n    /**\n     * Removes all event listeners and disposes of all resources held by this\n     * instance.\n     */\n    dispose() {\n\n        this.rtc.removeListener(\n            RTCEvents.ENDPOINT_CONN_STATUS_CHANGED,\n            this._onEndpointConnStatusChanged);\n\n        if (browser.supportsVideoMuteOnConnInterrupted()) {\n            this.rtc.removeListener(\n                RTCEvents.REMOTE_TRACK_MUTE,\n                this._onTrackRtcMuted);\n            this.rtc.removeListener(\n                RTCEvents.REMOTE_TRACK_UNMUTE,\n                this._onTrackRtcUnmuted);\n\n            this.conference.off(\n                JitsiConferenceEvents.TRACK_ADDED,\n                this._onRemoteTrackAdded);\n            this.conference.off(\n                JitsiConferenceEvents.TRACK_REMOVED,\n                this._onRemoteTrackRemoved);\n        }\n\n        this.conference.off(\n            JitsiConferenceEvents.LAST_N_ENDPOINTS_CHANGED,\n            this._onLastNChanged);\n\n        this.rtc.removeListener(\n            RTCEvents.LASTN_VALUE_CHANGED, this._onLastNValueChanged);\n\n        this.conference.off(\n            JitsiConferenceEvents.P2P_STATUS, this._onP2PStatus);\n\n        this.conference.off(\n            JitsiConferenceEvents.USER_LEFT, this._onUserLeft);\n\n        const participantIds = Object.keys(this.trackTimers);\n\n        for (const participantId of participantIds) {\n            this.clearTimeout(participantId);\n            this.clearRtcMutedTimestamp(participantId);\n        }\n\n        for (const id in this.connectionStatusMap) {\n            if (this.connectionStatusMap.hasOwnProperty(id)) {\n                this.onUserLeft(id);\n            }\n        }\n\n        // Clear RTC connection status cache\n        this.connStatusFromJvb = {};\n    }\n\n    /**\n     * Handles RTCEvents.ENDPOINT_CONN_STATUS_CHANGED triggered when we receive\n     * notification over the data channel from the bridge about endpoint's\n     * connection status update.\n     * @param {string} endpointId - The endpoint ID(MUC nickname/resource JID).\n     * @param {boolean} isActive - true if the connection is OK or false otherwise.\n     */\n    onEndpointConnStatusChanged(endpointId, isActive) {\n\n        logger.debug(\n            `Detector RTCEvents.ENDPOINT_CONN_STATUS_CHANGED(${Date.now()}): ${\n                endpointId}: ${isActive}`);\n\n        // Filter out events for the local JID for now\n        if (endpointId !== this.conference.myUserId()) {\n            // Store the status received over the data channels\n            this.connStatusFromJvb[endpointId] = isActive;\n            this.figureOutConnectionStatus(endpointId);\n        }\n    }\n\n    /**\n     * Changes connection status.\n     * @param {JitsiParticipant} participant\n     * @param newStatus\n     */\n    _changeConnectionStatus(participant, newStatus) {\n        if (participant.getConnectionStatus() !== newStatus) {\n\n            const endpointId = participant.getId();\n\n            participant._setConnectionStatus(newStatus);\n\n            logger.debug(\n                `Emit endpoint conn status(${Date.now()}) ${endpointId}: ${\n                    newStatus}`);\n\n            // Log the event on CallStats\n            Statistics.sendLog(\n                JSON.stringify({\n                    id: 'peer.conn.status',\n                    participant: endpointId,\n                    status: newStatus\n                }));\n\n\n            this.conference.eventEmitter.emit(\n                JitsiConferenceEvents.PARTICIPANT_CONN_STATUS_CHANGED,\n                endpointId, newStatus);\n        }\n    }\n\n    /**\n     * Reset the postponed \"connection interrupted\" event which was previously\n     * scheduled as a timeout on RTC 'onmute' event.\n     *\n     * @param {string} participantId - The participant for which the \"connection\n     * interrupted\" timeout was scheduled.\n     */\n    clearTimeout(participantId) {\n        if (this.trackTimers[participantId]) {\n            window.clearTimeout(this.trackTimers[participantId]);\n            this.trackTimers[participantId] = null;\n        }\n    }\n\n    /**\n     * Clears the timestamp of the RTC muted event for participant's video track\n     * @param {string} participantId the id of the conference participant which\n     * is the same as the Colibri endpoint ID of the video channel allocated for\n     * the user on the videobridge.\n     */\n    clearRtcMutedTimestamp(participantId) {\n        this.rtcMutedTimestamp[participantId] = null;\n    }\n\n    /**\n     * Bind signalling mute event listeners for video {JitsiRemoteTrack} when\n     * a new one is added to the conference.\n     *\n     * @param {JitsiTrack} remoteTrack - The {JitsiTrack} which is being added to\n     * the conference.\n     */\n    onRemoteTrackAdded(remoteTrack) {\n        if (!remoteTrack.isLocal()\n                && remoteTrack.getType() === MediaType.VIDEO) {\n\n            logger.debug(\n                `Detector on remote track added for: ${\n                    remoteTrack.getParticipantId()}`);\n\n            remoteTrack.on(\n                JitsiTrackEvents.TRACK_MUTE_CHANGED,\n                this._onSignallingMuteChanged);\n            remoteTrack.on(\n                JitsiTrackEvents.TRACK_VIDEOTYPE_CHANGED,\n                videoType => this._onTrackVideoTypeChanged(remoteTrack, videoType));\n        }\n    }\n\n    /**\n     * Removes all event listeners bound to the remote video track and clears\n     * any related timeouts.\n     *\n     * @param {JitsiRemoteTrack} remoteTrack - The remote track which is being\n     * removed from the conference.\n     */\n    onRemoteTrackRemoved(remoteTrack) {\n        if (!remoteTrack.isLocal()\n                && remoteTrack.getType() === MediaType.VIDEO) {\n\n            const endpointId = remoteTrack.getParticipantId();\n\n            logger.debug(`Detector on remote track removed: ${endpointId}`);\n\n            remoteTrack.off(\n                JitsiTrackEvents.TRACK_MUTE_CHANGED,\n                this._onSignallingMuteChanged);\n\n            this.clearTimeout(endpointId);\n            this.clearRtcMutedTimestamp(endpointId);\n\n            this.figureOutConnectionStatus(endpointId);\n        }\n    }\n\n    /**\n     * Checks if given participant's video is considered frozen.\n     * @param {JitsiParticipant} participant - The participant.\n     * @return {boolean} <tt>true</tt> if the video has frozen for given\n     * participant or <tt>false</tt> when it's either not considered frozen\n     * (yet) or if freeze detection is not supported by the current browser.\n     *\n     * FIXME merge this logic with NO_DATA_FROM_SOURCE event\n     *       implemented in JitsiLocalTrack by extending the event to\n     *       the remote track and allowing to set different timeout for\n     *       local and remote tracks.\n     *\n     */\n    isVideoTrackFrozen(participant) {\n        if (!browser.supportsVideoMuteOnConnInterrupted()) {\n            return false;\n        }\n\n        const id = participant.getId();\n        const hasAnyVideoRTCMuted = participant.hasAnyVideoTrackWebRTCMuted();\n        const rtcMutedTimestamp = this.rtcMutedTimestamp[id];\n        const timeout = this._getVideoFrozenTimeout(id);\n\n        return hasAnyVideoRTCMuted\n            && typeof rtcMutedTimestamp === 'number'\n            && (Date.now() - rtcMutedTimestamp) >= timeout;\n    }\n\n    /**\n     * Goes over every participant and updates connectivity status.\n     * Should be called when a parameter which affects all of the participants\n     * is changed (P2P for example).\n     */\n    refreshConnectionStatusForAll() {\n        const participants = this.conference.getParticipants();\n\n        for (const participant of participants) {\n            this.figureOutConnectionStatus(participant.getId());\n        }\n    }\n\n    /**\n     * Figures out (and updates) the current connectivity status for\n     * the participant identified by the given id.\n     *\n     * @param {string} id - The participant's id (MUC nickname or Colibri endpoint ID).\n     */\n    figureOutConnectionStatus(id) {\n        const participant = this.conference.getParticipantById(id);\n\n        if (!participant) {\n            // Probably the participant is no longer in the conference\n            // (at the time of writing this code, participant is\n            // detached from the conference and TRACK_REMOVED events are\n            // fired),\n            // so we don't care, but let's print a log message for debugging purposes.\n            logger.debug(`figure out conn status - no participant for: ${id}`);\n\n            return;\n        }\n\n        const inP2PMode = this.conference.isP2PActive();\n        const isRestoringTimedOut = this._isRestoringTimedout(id);\n        const audioOnlyMode = this.rtc.getLastN() === 0;\n\n        // NOTE Overriding videoMuted to true for audioOnlyMode should disable\n        // any detection based on video playback or the last N.\n        const isVideoMuted = participant.isVideoMuted() || audioOnlyMode;\n        const isVideoTrackFrozen = this.isVideoTrackFrozen(participant);\n        const isInLastN = this.rtc.isInLastN(id);\n        let isConnActiveByJvb = this.connStatusFromJvb[id];\n\n        if (typeof isConnActiveByJvb !== 'boolean') {\n            // If no status was received from the JVB it means that it's active\n            // (the bridge does not send notification unless there is a problem)\n            logger.debug('Assuming connection active by JVB - no notification');\n            isConnActiveByJvb = true;\n        }\n\n        const newState\n            = inP2PMode\n                ? ParticipantConnectionStatusHandler._getNewStateForP2PMode(\n                    isVideoMuted,\n                    isVideoTrackFrozen)\n                : ParticipantConnectionStatusHandler._getNewStateForJvbMode(\n                    isConnActiveByJvb,\n                    isInLastN,\n                    isRestoringTimedOut,\n                    isVideoMuted,\n                    isVideoTrackFrozen);\n\n        // if the new state is not restoring clear timers and timestamps\n        // that we use to track the restoring state\n        if (newState !== ParticipantConnectionStatus.RESTORING) {\n            this._clearRestoringTimer(id);\n        }\n\n        logger.debug(\n            `Figure out conn status for ${id}, is video muted: ${\n                isVideoMuted} is active(jvb): ${\n                isConnActiveByJvb} video track frozen: ${\n                isVideoTrackFrozen} p2p mode: ${\n                inP2PMode} is in last N: ${\n                isInLastN} currentStatus => newStatus: ${\n                participant.getConnectionStatus()} => ${newState}`);\n\n        const oldConnectionStatus = this.connectionStatusMap[id] || {};\n\n        // Send an analytics event (guard on either the p2p flag or the connection status has changed\n        // since the last time this code block run).\n        if (!('p2p' in oldConnectionStatus)\n            || !('connectionStatus' in oldConnectionStatus)\n            || oldConnectionStatus.p2p !== inP2PMode\n            || oldConnectionStatus.connectionStatus !== newState) {\n\n            const nowMs = Date.now();\n\n            this.maybeSendParticipantConnectionStatusEvent(id, nowMs);\n\n            this.connectionStatusMap[id] = {\n                ...oldConnectionStatus,\n                connectionStatus: newState,\n                p2p: inP2PMode,\n                startedMs: nowMs\n            };\n\n            // sometimes (always?) we're late to hook the TRACK_VIDEOTYPE_CHANGED event and the\n            // video type is not in oldConnectionStatus.\n            if (!('videoType' in this.connectionStatusMap[id])) {\n                const videoTracks = participant.getTracksByMediaType(MediaType.VIDEO);\n\n                if (Array.isArray(videoTracks) && videoTracks.length !== 0) {\n                    this.connectionStatusMap[id].videoType = videoTracks[0].videoType;\n                }\n            }\n        }\n        this._changeConnectionStatus(participant, newState);\n    }\n\n    /**\n     * Computes the duration of the current connection status for the participant with the specified id (i.e. 15 seconds\n     * in the INTERRUPTED state) and sends a participant connection status event.\n     * @param {string} id - The jid of the participant.\n     * @param {Number} nowMs - The current time (in millis).\n     * @returns {void}\n     */\n    maybeSendParticipantConnectionStatusEvent(id, nowMs) {\n        const participantConnectionStatus = this.connectionStatusMap[id];\n\n        if (participantConnectionStatus\n            && 'startedMs' in participantConnectionStatus\n            && 'videoType' in participantConnectionStatus\n            && 'connectionStatus' in participantConnectionStatus\n            && 'p2p' in participantConnectionStatus) {\n            participantConnectionStatus.value = nowMs - participantConnectionStatus.startedMs;\n            Statistics.sendAnalytics(\n                createParticipantConnectionStatusEvent(participantConnectionStatus));\n        }\n    }\n\n    /**\n     * On change in Last N set check all leaving and entering participants to\n     * change their corresponding statuses.\n     *\n     * @param {Array<string>} leavingLastN - The array of ids leaving lastN.\n     * @param {Array<string>} enteringLastN - The array of ids entering lastN.\n     * @private\n     */\n    _onLastNChanged(leavingLastN = [], enteringLastN = []) {\n        const now = Date.now();\n\n        logger.debug(\n            'leaving/entering lastN', leavingLastN, enteringLastN, now);\n\n        for (const id of leavingLastN) {\n            this.enteredLastNTimestamp.delete(id);\n            this._clearRestoringTimer(id);\n            this.figureOutConnectionStatus(id);\n        }\n        for (const id of enteringLastN) {\n            // store the timestamp this id is entering lastN\n            this.enteredLastNTimestamp.set(id, now);\n            this.figureOutConnectionStatus(id);\n        }\n    }\n\n    /**\n     * Clears the restoring timer for participant's video track and the\n     * timestamp for entering lastN.\n     *\n     * @param {string} participantId - The id of the conference participant which\n     * is the same as the Colibri endpoint ID of the video channel allocated for\n     * the user on the videobridge.\n     */\n    _clearRestoringTimer(participantId) {\n        const rTimer = this.restoringTimers.get(participantId);\n\n        if (rTimer) {\n            clearTimeout(rTimer);\n            this.restoringTimers.delete(participantId);\n        }\n    }\n\n    /**\n     * Checks whether a track had stayed enough in restoring state, compares\n     * current time and the time the track entered in lastN. If it hasn't\n     * timedout and there is no timer added, add new timer in order to give it\n     * more time to become active or mark it as interrupted on next check.\n     *\n     * @param {string} participantId - The id of the conference participant which\n     * is the same as the Colibri endpoint ID of the video channel allocated for\n     * the user on the videobridge.\n     * @returns {boolean} <tt>true</tt> if the track was in restoring state\n     * more than the timeout ({@link DEFAULT_RESTORING_TIMEOUT}.) in order to\n     * set its status to interrupted.\n     * @private\n     */\n    _isRestoringTimedout(participantId) {\n        const enteredLastNTimestamp\n            = this.enteredLastNTimestamp.get(participantId);\n\n        if (enteredLastNTimestamp\n            && (Date.now() - enteredLastNTimestamp)\n                >= DEFAULT_RESTORING_TIMEOUT) {\n            return true;\n        }\n\n        // still haven't reached timeout, if there is no timer scheduled,\n        // schedule one so we can track the restoring state and change it after\n        // reaching the timeout\n        const rTimer = this.restoringTimers.get(participantId);\n\n        if (!rTimer) {\n            this.restoringTimers.set(participantId, setTimeout(\n                () => this.figureOutConnectionStatus(participantId),\n                DEFAULT_RESTORING_TIMEOUT));\n        }\n\n        return false;\n    }\n\n    /**\n     * Sends a last/final participant connection status event for the participant that left the conference.\n     * @param {string} id - The id of the participant that left the conference.\n     * @returns {void}\n     */\n    onUserLeft(id) {\n        this.maybeSendParticipantConnectionStatusEvent(id, Date.now());\n        delete this.connectionStatusMap[id];\n    }\n\n    /**\n     * Handles RTC 'onmute' event for the video track.\n     *\n     * @param {JitsiRemoteTrack} track - The video track for which 'onmute' event\n     * will be processed.\n     */\n    onTrackRtcMuted(track) {\n        const participantId = track.getParticipantId();\n        const participant = this.conference.getParticipantById(participantId);\n\n        logger.debug(`Detector track RTC muted: ${participantId}`, Date.now());\n        if (!participant) {\n            logger.error(`No participant for id: ${participantId}`);\n\n            return;\n        }\n        this.rtcMutedTimestamp[participantId] = Date.now();\n        if (!participant.isVideoMuted()) {\n            // If the user is not muted according to the signalling we'll give\n            // it some time, before the connection interrupted event is\n            // triggered.\n            this.clearTimeout(participantId);\n\n            // The timeout is reduced when user is not in the last N\n            const timeout = this._getVideoFrozenTimeout(participantId);\n\n            this.trackTimers[participantId] = window.setTimeout(() => {\n                logger.debug(\n                    `Set RTC mute timeout for: ${participantId}\\\n                     of ${timeout} ms`);\n                this.clearTimeout(participantId);\n                this.figureOutConnectionStatus(participantId);\n            }, timeout);\n        }\n    }\n\n    /**\n     * Handles RTC 'onunmute' event for the video track.\n     *\n     * @param {JitsiRemoteTrack} track - The video track for which 'onunmute'\n     * event will be processed.\n     */\n    onTrackRtcUnmuted(track) {\n        const participantId = track.getParticipantId();\n\n        logger.debug(\n            `Detector track RTC unmuted: ${participantId}`, Date.now());\n\n        this.clearTimeout(participantId);\n        this.clearRtcMutedTimestamp(participantId);\n\n        this.figureOutConnectionStatus(participantId);\n    }\n\n    /**\n     * Here the signalling \"mute\"/\"unmute\" events are processed.\n     *\n     * @param {JitsiRemoteTrack} track - The remote video track for which\n     * the signalling mute/unmute event will be processed.\n     */\n    onSignallingMuteChanged(track) {\n        const participantId = track.getParticipantId();\n\n        logger.debug(\n            `Detector on track signalling mute changed: ${participantId}`,\n            track.isMuted());\n\n        this.figureOutConnectionStatus(participantId);\n    }\n\n    /**\n     * Sends a participant connection status event as a result of the video type\n     * changing.\n     * @param {JitsiRemoteTrack} track - The track.\n     * @param {VideoType} type - The video type.\n     * @returns {void}\n     */\n    onTrackVideoTypeChanged(track, type) {\n        const id = track.getParticipantId();\n        const nowMs = Date.now();\n\n        this.maybeSendParticipantConnectionStatusEvent(id, nowMs);\n\n        this.connectionStatusMap[id] = {\n            ...this.connectionStatusMap[id] || {},\n            videoType: type,\n            startedMs: nowMs\n        };\n    }\n}\n","/**\n * A collection of utility functions for taking in XML and parsing it to return\n * certain values.\n */\nexport default {\n    /**\n     * Parses the presence update of the focus and returns an object with the\n     * statuses related to recording.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {Object} The current presence values related to recording.\n     */\n    getFocusRecordingUpdate(presence) {\n        const jibriStatus = presence\n            && presence.getElementsByTagName('jibri-recording-status')[0];\n\n        if (!jibriStatus) {\n            return;\n        }\n\n        return {\n            error: jibriStatus.getAttribute('failure_reason'),\n            recordingMode: jibriStatus.getAttribute('recording_mode'),\n            sessionID: jibriStatus.getAttribute('session_id'),\n            status: jibriStatus.getAttribute('status')\n        };\n    },\n\n    /**\n     * Parses the presence update from a hidden domain participant and returns\n     * an object with the statuses related to recording.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {Object} The current presence values related to recording.\n     */\n    getHiddenDomainUpdate(presence) {\n        const liveStreamViewURLContainer\n            = presence.getElementsByTagName('live-stream-view-url')[0];\n        const liveStreamViewURL = liveStreamViewURLContainer\n            && liveStreamViewURLContainer.textContent;\n        const modeContainer\n            = presence.getElementsByTagName('mode')[0];\n        const mode = modeContainer\n            && modeContainer.textContent\n            && modeContainer.textContent.toLowerCase();\n        const sessionIDContainer\n            = presence.getElementsByTagName('session_id')[0];\n        const sessionID\n            = sessionIDContainer && sessionIDContainer.textContent;\n\n        return {\n            liveStreamViewURL,\n            mode,\n            sessionID\n        };\n    },\n\n    /**\n     * Returns the recording session ID from a successful IQ.\n     *\n     * @param {Node} response - The response from the IQ.\n     * @returns {string} The session ID of the recording session.\n     */\n    getSessionIdFromIq(response) {\n        const jibri = response && response.getElementsByTagName('jibri')[0];\n\n        return jibri && jibri.getAttribute('session_id');\n    },\n\n    /**\n     * Returns the recording session ID from a presence, if it exists.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {string|undefined} The session ID of the recording session.\n     */\n    getSessionId(presence) {\n        const sessionIdContainer\n            = presence.getElementsByTagName('session_id')[0];\n        const sessionId = sessionIdContainer && sessionIdContainer.textContent;\n\n        return sessionId;\n    },\n\n    /**\n     * Returns whether or not a presence is from the focus.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {boolean} True if the presence is from the focus.\n     */\n    isFromFocus(presence) {\n        return presence.getAttribute('from').includes('focus');\n    }\n};\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","/* global __filename, $ */\n\nimport {\n    ICE_DURATION,\n    ICE_STATE_CHANGED\n} from '../../service/statistics/AnalyticsEvents';\nimport { getLogger } from 'jitsi-meet-logger';\nimport { $iq, Strophe } from 'strophe.js';\nimport { integerHash } from '../util/StringUtils';\n\nimport JingleSession from './JingleSession';\nimport * as JingleSessionState from './JingleSessionState';\nimport SDP from './SDP';\nimport SDPDiffer from './SDPDiffer';\nimport SDPUtil from './SDPUtil';\nimport SignalingLayerImpl from './SignalingLayerImpl';\n\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport Statistics from '../statistics/statistics';\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\nimport AsyncQueue from '../util/AsyncQueue';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\n\nconst logger = getLogger(__filename);\n\n/**\n * Constant tells how long we're going to wait for IQ response, before timeout\n * error is  triggered.\n * @type {number}\n */\nconst IQ_TIMEOUT = 10000;\n\n/*\n * The default number of samples (per stat) to keep when webrtc stats gathering\n * is enabled in TraceablePeerConnection.\n */\nconst DEFAULT_MAX_STATS = 300;\n\n/**\n * @typedef {Object} JingleSessionPCOptions\n * @property {Object} abTesting - A/B testing related options (ask George).\n * @property {boolean} abTesting.enableSuspendVideoTest - enables the suspend\n * video test ?(ask George).\n * @property {boolean} disableH264 - Described in the config.js[1].\n * @property {boolean} disableRtx - Described in the config.js[1].\n * @property {boolean} disableSimulcast - Described in the config.js[1].\n * @property {boolean} enableLayerSuspension - Described in the config.js[1].\n * @property {boolean} failICE - it's an option used in the tests. Set to\n * <tt>true</tt> to block any real candidates and make the ICE fail.\n * @property {boolean} gatherStats - Described in the config.js[1].\n * @property {object} p2p - Peer to peer related options (FIXME those could be\n * fetched from config.p2p on the upper level).\n * @property {boolean} p2p.disableH264 - Described in the config.js[1].\n * @property {boolean} p2p.preferH264 - Described in the config.js[1].\n * @property {boolean} preferH264 - Described in the config.js[1].\n * @property {Object} testing - Testing and/or experimental options.\n * @property {boolean} testing.enableFirefoxSimulcast - Described in the\n * config.js[1].\n * @property {boolean} webrtcIceUdpDisable - Described in the config.js[1].\n * @property {boolean} webrtcIceTcpDisable - Described in the config.js[1].\n *\n * [1]: https://github.com/jitsi/jitsi-meet/blob/master/config.js\n */\n/**\n *\n */\nexport default class JingleSessionPC extends JingleSession {\n    /**\n     * Parses 'senders' attribute of the video content.\n     * @param {jQuery} jingleContents\n     * @return {string|null} one of the values of content \"senders\" attribute\n     * defined by Jingle. If there is no \"senders\" attribute or if the value is\n     * invalid then <tt>null</tt> will be returned.\n     * @private\n     */\n    static parseVideoSenders(jingleContents) {\n        const videoContents = jingleContents.find('>content[name=\"video\"]');\n\n        if (videoContents.length) {\n            const senders = videoContents[0].getAttribute('senders');\n\n            if (senders === 'both'\n                || senders === 'initiator'\n                || senders === 'responder'\n                || senders === 'none') {\n                return senders;\n            }\n        }\n\n        return null;\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     * Creates new <tt>JingleSessionPC</tt>\n     * @param {string} sid the Jingle Session ID - random string which\n     * identifies the session\n     * @param {string} localJid our JID\n     * @param {string} remoteJid remote peer JID\n     * @param {Strophe.Connection} connection Strophe XMPP connection instance\n     * used to send packets.\n     * @param mediaConstraints the media constraints object passed to\n     * createOffer/Answer, as defined by the WebRTC standard\n     * @param iceConfig the ICE servers config object as defined by the WebRTC\n     * standard.\n     * @param {boolean} isP2P indicates whether this instance is\n     * meant to be used in a direct, peer to peer connection or <tt>false</tt>\n     * if it's a JVB connection.\n     * @param {boolean} isInitiator indicates if it will be the side which\n     * initiates the session.\n     * @constructor\n     *\n     * @implements {SignalingLayer}\n     */\n    constructor(\n            sid,\n            localJid,\n            remoteJid,\n            connection,\n            mediaConstraints,\n            iceConfig,\n            isP2P,\n            isInitiator) {\n        super(\n            sid,\n            localJid,\n            remoteJid, connection, mediaConstraints, iceConfig, isInitiator);\n\n        /**\n         * The bridge session's identifier. One Jingle session can during\n         * it's lifetime participate in multiple bridge sessions managed by\n         * Jicofo. A new bridge session is started whenever Jicofo sends\n         * 'session-initiate' or 'transport-replace'.\n         *\n         * @type {?string}\n         * @private\n         */\n        this._bridgeSessionId = null;\n\n        /**\n         * Stores result of {@link window.performance.now()} at the time when\n         * ICE enters 'checking' state.\n         * @type {number|null} null if no value has been stored yet\n         * @private\n         */\n        this._iceCheckingStartedTimestamp = null;\n\n        /**\n         * Stores result of {@link window.performance.now()} at the time when\n         * first ICE candidate is spawned by the peerconnection to mark when\n         * ICE gathering started. That's, because ICE gathering state changed\n         * events are not supported by most of the browsers, so we try something\n         * that will work everywhere. It may not be as accurate, but given that\n         * 'host' candidate usually comes first, the delay should be minimal.\n         * @type {number|null} null if no value has been stored yet\n         * @private\n         */\n        this._gatheringStartedTimestamp = null;\n\n        /**\n         * Indicates whether or not this session is willing to send/receive\n         * video media. When set to <tt>false</tt> the underlying peer\n         * connection will disable local video transfer and the remote peer will\n         * be will be asked to stop sending video via 'content-modify' IQ\n         * (the senders attribute of video contents will be adjusted\n         * accordingly). Note that this notification is sent only in P2P\n         * session, because Jicofo does not support it yet. Obviously when\n         * the value is changed from <tt>false</tt> to <tt>true</tt> another\n         * notification will be sent to resume video transfer on the remote\n         * side.\n         * @type {boolean}\n         * @private\n         */\n        this._localVideoActive = true;\n\n        /**\n         * Indicates whether or not the remote peer has video transfer active.\n         * When set to <tt>true</tt> it means that remote peer is neither\n         * sending nor willing to receive video. In such case we'll ask\n         * our peerconnection to stop sending video by calling\n         * {@link TraceablePeerConnection.setVideoTransferActive} with\n         * <tt>false</tt>.\n         * @type {boolean}\n         * @private\n         */\n        this._remoteVideoActive = true;\n\n        /**\n         * Marks that ICE gathering duration has been reported already. That\n         * prevents reporting it again, after eventual 'transport-replace' (JVB\n         * conference migration/ICE restart).\n         * @type {boolean}\n         * @private\n         */\n        this._gatheringReported = false;\n\n        this.lasticecandidate = false;\n        this.closed = false;\n\n        /**\n         * Indicates whether or not this <tt>JingleSessionPC</tt> is used in\n         * a peer to peer type of session.\n         * @type {boolean} <tt>true</tt> if it's a peer to peer\n         * session or <tt>false</tt> if it's a JVB session\n         */\n        this.isP2P = isP2P;\n\n        /**\n         * The signaling layer implementation.\n         * @type {SignalingLayerImpl}\n         */\n        this.signalingLayer = new SignalingLayerImpl();\n\n        /**\n         * The queue used to serialize operations done on the peerconnection.\n         *\n         * @type {AsyncQueue}\n         */\n        this.modificationQueue = new AsyncQueue();\n\n        /**\n         * Flag used to guarantee that the connection established event is\n         * triggered just once.\n         * @type {boolean}\n         */\n        this.wasConnected = false;\n\n        /**\n         * Keeps track of how long (in ms) it took from ICE start to ICE\n         * connect.\n         *\n         * @type {number}\n         */\n        this.establishmentDuration = undefined;\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Checks whether or not this session instance is still operational.\n     * @private\n     * @returns {boolean} {@code true} if operation or {@code false} otherwise.\n     */\n    _assertNotEnded() {\n        return this.state !== JingleSessionState.ENDED;\n    }\n\n    /**\n     * @inheritDoc\n     * @param {JingleSessionPCOptions} options  - a set of config options.\n     */\n    doInitialize(options) {\n        this.failICE = Boolean(options.failICE);\n        this.lasticecandidate = false;\n        this.options = options;\n\n        /**\n         * {@code true} if reconnect is in progress.\n         * @type {boolean}\n         */\n        this.isReconnect = false;\n\n        /**\n         * Set to {@code true} if the connection was ever stable\n         * @type {boolean}\n         */\n        this.wasstable = false;\n        this.webrtcIceUdpDisable = Boolean(options.webrtcIceUdpDisable);\n        this.webrtcIceTcpDisable = Boolean(options.webrtcIceTcpDisable);\n\n        const pcOptions = { disableRtx: options.disableRtx };\n\n        if (options.gatherStats) {\n            pcOptions.maxstats = DEFAULT_MAX_STATS;\n        }\n\n        if (this.isP2P) {\n            // simulcast needs to be disabled for P2P (121) calls\n            pcOptions.disableSimulcast = true;\n            pcOptions.disableH264 = options.p2p && options.p2p.disableH264;\n            pcOptions.preferH264 = options.p2p && options.p2p.preferH264;\n\n            const abtestSuspendVideo = this._abtestSuspendVideoEnabled(options);\n\n            if (typeof abtestSuspendVideo !== 'undefined') {\n                pcOptions.abtestSuspendVideo = abtestSuspendVideo;\n            }\n        } else {\n            // H264 does not support simulcast, so it needs to be disabled.\n            pcOptions.disableSimulcast\n                = options.disableSimulcast\n                    || (options.preferH264 && !options.disableH264);\n            pcOptions.preferH264 = options.preferH264;\n            pcOptions.enableFirefoxSimulcast\n                = options.testing && options.testing.enableFirefoxSimulcast;\n            pcOptions.enableLayerSuspension = options.enableLayerSuspension;\n        }\n\n        if (options.startSilent) {\n            pcOptions.startSilent = true;\n        }\n\n        this.peerconnection\n            = this.rtc.createPeerConnection(\n                    this.signalingLayer,\n                    this.iceConfig,\n                    this.isP2P,\n                    pcOptions);\n\n        this.peerconnection.onicecandidate = ev => {\n            if (!ev) {\n                // There was an incomplete check for ev before which left\n                // the last line of the function unprotected from a potential\n                // throw of an exception. Consequently, it may be argued that\n                // the check is unnecessary. Anyway, I'm leaving it and making\n                // the check complete.\n                return;\n            }\n\n            // XXX this is broken, candidate is not parsed.\n            const candidate = ev.candidate;\n            const now = window.performance.now();\n\n            if (candidate) {\n                if (this._gatheringStartedTimestamp === null) {\n                    this._gatheringStartedTimestamp = now;\n                }\n\n                // Discard candidates of disabled protocols.\n                let protocol = candidate.protocol;\n\n                if (typeof protocol === 'string') {\n                    protocol = protocol.toLowerCase();\n                    if (protocol === 'tcp' || protocol === 'ssltcp') {\n                        if (this.webrtcIceTcpDisable) {\n                            return;\n                        }\n                    } else if (protocol === 'udp') {\n                        if (this.webrtcIceUdpDisable) {\n                            return;\n                        }\n                    }\n                }\n            } else if (!this._gatheringReported) {\n                // End of gathering\n                Statistics.sendAnalytics(\n                    ICE_DURATION,\n                    {\n                        phase: 'gathering',\n                        value: now - this._gatheringStartedTimestamp,\n                        p2p: this.isP2P,\n                        initiator: this.isInitiator\n                    });\n                this._gatheringReported = true;\n            }\n            this.sendIceCandidate(candidate);\n        };\n\n        // Note there is a change in the spec about closed:\n        // This value moved into the RTCPeerConnectionState enum in\n        // the May 13, 2016 draft of the specification, as it reflects the state\n        // of the RTCPeerConnection, not the signaling connection. You now\n        // detect a closed connection by checking for connectionState to be\n        // \"closed\" instead.\n        // I suppose at some point this will be moved to onconnectionstatechange\n        this.peerconnection.onsignalingstatechange = () => {\n            if (this.peerconnection.signalingState === 'stable') {\n                this.wasstable = true;\n            } else if (this.peerconnection.signalingState === 'closed'\n                || this.peerconnection.connectionState === 'closed') {\n                this.room.eventEmitter.emit(XMPPEvents.SUSPEND_DETECTED, this);\n            }\n        };\n\n        /**\n         * The oniceconnectionstatechange event handler contains the code to\n         * execute when the iceconnectionstatechange event, of type Event,\n         * is received by this RTCPeerConnection. Such an event is sent when\n         * the value of RTCPeerConnection.iceConnectionState changes.\n         */\n        this.peerconnection.oniceconnectionstatechange = () => {\n            const now = window.performance.now();\n\n            if (!this.isP2P) {\n                this.room.connectionTimes[\n                    `ice.state.${this.peerconnection.iceConnectionState}`]\n                    = now;\n            }\n            logger.log(\n                `(TIME) ICE ${this.peerconnection.iceConnectionState}`\n                    + ` P2P? ${this.isP2P}:\\t`,\n                now);\n\n            Statistics.sendAnalytics(\n                ICE_STATE_CHANGED,\n                {\n                    p2p: this.isP2P,\n                    state: this.peerconnection.iceConnectionState,\n                    'signaling_state': this.peerconnection.signalingState,\n                    reconnect: this.isReconnect,\n                    value: now\n                });\n\n            this.room.eventEmitter.emit(\n                XMPPEvents.ICE_CONNECTION_STATE_CHANGED,\n                this,\n                this.peerconnection.iceConnectionState);\n            switch (this.peerconnection.iceConnectionState) {\n            case 'checking':\n                this._iceCheckingStartedTimestamp = now;\n                break;\n            case 'connected':\n                // Informs interested parties that the connection has been\n                // restored.\n                if (this.peerconnection.signalingState === 'stable') {\n                    if (this.isReconnect) {\n                        this.room.eventEmitter.emit(\n                            XMPPEvents.CONNECTION_RESTORED, this);\n                    }\n                }\n\n                if (!this.wasConnected && this.wasstable) {\n\n                    Statistics.sendAnalytics(\n                        ICE_DURATION,\n                        {\n                            phase: 'checking',\n                            value: now - this._iceCheckingStartedTimestamp,\n                            p2p: this.isP2P,\n                            initiator: this.isInitiator\n                        });\n\n                    // Switch between ICE gathering and ICE checking whichever\n                    // started first (scenarios are different for initiator\n                    // vs responder)\n                    const iceStarted\n                        = Math.min(\n                            this._iceCheckingStartedTimestamp,\n                            this._gatheringStartedTimestamp);\n\n                    this.establishmentDuration = now - iceStarted;\n\n                    Statistics.sendAnalytics(\n                        ICE_DURATION,\n                        {\n                            phase: 'establishment',\n                            value: this.establishmentDuration,\n                            p2p: this.isP2P,\n                            initiator: this.isInitiator\n                        });\n\n                    this.wasConnected = true;\n                    this.room.eventEmitter.emit(\n                        XMPPEvents.CONNECTION_ESTABLISHED, this);\n                }\n                this.isReconnect = false;\n                break;\n            case 'disconnected':\n                this.isReconnect = true;\n\n                // Informs interested parties that the connection has been\n                // interrupted.\n                if (this.wasstable) {\n                    this.room.eventEmitter.emit(\n                        XMPPEvents.CONNECTION_INTERRUPTED, this);\n                }\n                break;\n            case 'failed':\n                this.room.eventEmitter.emit(\n                    XMPPEvents.CONNECTION_ICE_FAILED, this);\n                break;\n            }\n        };\n        this.peerconnection.onnegotiationneeded = () => {\n            this.room.eventEmitter.emit(XMPPEvents.PEERCONNECTION_READY, this);\n        };\n\n        // The signaling layer will bind it's listeners at this point\n        this.signalingLayer.setChatRoom(this.room);\n\n        if (!this.isP2P && options.enableLayerSuspension) {\n            // If this is the bridge session, we'll listen for\n            // IS_SELECTED_CHANGED events and notify the peer connection\n            this.rtc.addListener(RTCEvents.IS_SELECTED_CHANGED,\n                isSelected => {\n                    this.peerconnection.setIsSelected(isSelected);\n                    logger.info('Doing local O/A due to '\n                        + 'IS_SELECTED_CHANGED event');\n                    this.modificationQueue.push(finishedCallback => {\n                        this._renegotiate()\n                            .then(finishedCallback)\n                            .catch(finishedCallback);\n                    });\n                }\n            );\n        }\n    }\n\n    /**\n     * Sends given candidate in Jingle 'transport-info' message.\n     * @param {RTCIceCandidate} candidate the WebRTC ICE candidate instance\n     * @private\n     */\n    sendIceCandidate(candidate) {\n        const localSDP = new SDP(this.peerconnection.localDescription.sdp);\n\n        if (candidate && !this.lasticecandidate) {\n            const ice\n                = SDPUtil.iceparams(\n                    localSDP.media[candidate.sdpMLineIndex], localSDP.session);\n            const jcand = SDPUtil.candidateToJingle(candidate.candidate);\n\n            if (!(ice && jcand)) {\n                const errorMesssage = 'failed to get ice && jcand';\n\n                GlobalOnErrorHandler.callErrorHandler(new Error(errorMesssage));\n                logger.error(errorMesssage);\n\n                return;\n            }\n            ice.xmlns = 'urn:xmpp:jingle:transports:ice-udp:1';\n\n            if (this.usedrip) {\n                if (this.dripContainer.length === 0) {\n                    // start 20ms callout\n                    setTimeout(() => {\n                        if (this.dripContainer.length === 0) {\n                            return;\n                        }\n                        this.sendIceCandidates(this.dripContainer);\n                        this.dripContainer = [];\n                    }, 20);\n                }\n                this.dripContainer.push(candidate);\n            } else {\n                this.sendIceCandidates([ candidate ]);\n            }\n        } else {\n            logger.log('sendIceCandidate: last candidate.');\n\n            // FIXME: remember to re-think in ICE-restart\n            this.lasticecandidate = true;\n        }\n    }\n\n    /**\n     * Sends given candidates in Jingle 'transport-info' message.\n     * @param {Array<RTCIceCandidate>} candidates an array of the WebRTC ICE\n     * candidate instances\n     * @private\n     */\n    sendIceCandidates(candidates) {\n        if (!this._assertNotEnded('sendIceCandidates')) {\n\n            return;\n        }\n\n        logger.log('sendIceCandidates', candidates);\n        const cand = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', { xmlns: 'urn:xmpp:jingle:1',\n                action: 'transport-info',\n                initiator: this.initiatorJid,\n                sid: this.sid });\n\n        const localSDP = new SDP(this.peerconnection.localDescription.sdp);\n\n        for (let mid = 0; mid < localSDP.media.length; mid++) {\n            const cands = candidates.filter(el => el.sdpMLineIndex === mid);\n            const mline\n                = SDPUtil.parseMLine(localSDP.media[mid].split('\\r\\n')[0]);\n\n            if (cands.length > 0) {\n                const ice\n                    = SDPUtil.iceparams(localSDP.media[mid], localSDP.session);\n\n                ice.xmlns = 'urn:xmpp:jingle:transports:ice-udp:1';\n                cand.c('content', {\n                    creator: this.initiatorJid === this.localJid\n                        ? 'initiator' : 'responder',\n                    name: cands[0].sdpMid ? cands[0].sdpMid : mline.media\n                }).c('transport', ice);\n                for (let i = 0; i < cands.length; i++) {\n                    const candidate\n                        = SDPUtil.candidateToJingle(cands[i].candidate);\n\n                    // Mangle ICE candidate if 'failICE' test option is enabled\n\n                    if (this.failICE) {\n                        candidate.ip = '1.1.1.1';\n                    }\n                    cand.c('candidate', candidate).up();\n                }\n\n                // add fingerprint\n                const fingerprintLine\n                    = SDPUtil.findLine(\n                        localSDP.media[mid],\n                        'a=fingerprint:', localSDP.session);\n\n                if (fingerprintLine) {\n                    const tmp = SDPUtil.parseFingerprint(fingerprintLine);\n\n                    tmp.required = true;\n                    cand.c(\n                        'fingerprint',\n                        { xmlns: 'urn:xmpp:jingle:apps:dtls:0' })\n                        .t(tmp.fingerprint);\n                    delete tmp.fingerprint;\n                    cand.attrs(tmp);\n                    cand.up();\n                }\n                cand.up(); // transport\n                cand.up(); // content\n            }\n        }\n\n        // might merge last-candidate notification into this, but it is called\n        // a lot later. See webrtc issue #2340\n        // logger.log('was this the last candidate', this.lasticecandidate);\n        this.connection.sendIQ(\n            cand, null, this.newJingleErrorHandler(cand), IQ_TIMEOUT);\n    }\n\n    /**\n     * Sends Jingle 'session-info' message which includes custom Jitsi Meet\n     * 'ice-state' element with the text value 'failed' to let Jicofo know\n     * that the ICE connection has entered the failed state. It can then\n     * choose to re-create JVB channels and send 'transport-replace' to\n     * retry the connection.\n     */\n    sendIceFailedNotification() {\n        const sessionInfo\n            = $iq({\n                to: this.remoteJid,\n                type: 'set' })\n            .c('jingle', { xmlns: 'urn:xmpp:jingle:1',\n                action: 'session-info',\n                initiator: this.initiatorJid,\n                sid: this.sid })\n            .c('ice-state', { xmlns: 'http://jitsi.org/protocol/focus' })\n            .t('failed')\n            .up();\n\n        this._bridgeSessionId\n            && sessionInfo.c(\n                'bridge-session', {\n                    xmlns: 'http://jitsi.org/protocol/focus',\n                    id: this._bridgeSessionId\n                });\n\n        this.connection.sendIQ(\n            sessionInfo,\n            null,\n            this.newJingleErrorHandler(sessionInfo),\n            /*\n             * This message will be often sent when there are connectivity\n             * issues, so make it slightly longer than Prosody's default BOSH\n             * inactivity timeout of 60 seconds.\n             */ 65);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    addIceCandidates(elem) {\n        if (this.peerconnection.signalingState === 'closed') {\n            logger.warn('Ignored add ICE candidate when in closed state');\n\n            return;\n        }\n\n        const iceCandidates = [];\n\n        elem.find('>content>transport>candidate')\n            .each((idx, candidate) => {\n                let line = SDPUtil.candidateFromJingle(candidate);\n\n                line = line.replace('\\r\\n', '').replace('a=', '');\n\n                // FIXME this code does not care to handle\n                // non-bundle transport\n                const rtcCandidate = new RTCIceCandidate({\n                    sdpMLineIndex: 0,\n\n                    // FF comes up with more complex names like audio-23423,\n                    // Given that it works on both Chrome and FF without\n                    // providing it, let's leave it like this for the time\n                    // being...\n                    // sdpMid: 'audio',\n                    sdpMid: '',\n                    candidate: line\n                });\n\n                iceCandidates.push(rtcCandidate);\n            });\n\n        if (!iceCandidates.length) {\n            logger.error(\n                'No ICE candidates to add ?', elem[0] && elem[0].outerHTML);\n\n            return;\n        }\n\n        // We want to have this task queued, so that we know it is executed,\n        // after the initial sRD/sLD offer/answer cycle was done (based on\n        // the assumption that candidates are spawned after the offer/answer\n        // and XMPP preserves order).\n        const workFunction = finishedCallback => {\n            for (const iceCandidate of iceCandidates) {\n                this.peerconnection.addIceCandidate(iceCandidate)\n                    .then(\n                        () => logger.debug('addIceCandidate ok!'),\n                        err => logger.error('addIceCandidate failed!', err));\n            }\n\n            finishedCallback();\n        };\n\n        logger.debug(\n            `Queued add (${iceCandidates.length}) ICE candidates task...`);\n        this.modificationQueue.push(workFunction);\n    }\n\n    /**\n     *\n     * @param contents\n     */\n    readSsrcInfo(contents) {\n        const ssrcs\n            = $(contents).find(\n                '>description>'\n                    + 'source[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]');\n\n        ssrcs.each((i, ssrcElement) => {\n            const ssrc = Number(ssrcElement.getAttribute('ssrc'));\n\n            if (this.isP2P) {\n                // In P2P all SSRCs are owner by the remote peer\n                this.signalingLayer.setSSRCOwner(\n                    ssrc, Strophe.getResourceFromJid(this.remoteJid));\n            } else {\n                $(ssrcElement)\n                    .find('>ssrc-info[xmlns=\"http://jitsi.org/jitmeet\"]')\n                    .each((i3, ssrcInfoElement) => {\n                        const owner = ssrcInfoElement.getAttribute('owner');\n\n                        if (owner && owner.length) {\n                            if (isNaN(ssrc) || ssrc < 0) {\n                                logger.warn(\n                                    `Invalid SSRC ${ssrc} value received`\n                                        + ` for ${owner}`);\n                            } else {\n                                this.signalingLayer.setSSRCOwner(\n                                    ssrc,\n                                    Strophe.getResourceFromJid(owner));\n                            }\n                        }\n                    });\n            }\n        });\n    }\n\n    /**\n     * Makes the underlying TraceablePeerConnection generate new SSRC for\n     * the recvonly video stream.\n     * @deprecated\n     */\n    generateRecvonlySsrc() {\n        if (this.peerconnection) {\n            this.peerconnection.generateRecvonlySsrc();\n        } else {\n            logger.error(\n                'Unable to generate recvonly SSRC - no peerconnection');\n        }\n    }\n\n    /* eslint-disable max-params */\n    /**\n     * Accepts incoming Jingle 'session-initiate' and should send\n     * 'session-accept' in result.\n     * @param jingleOffer jQuery selector pointing to the jingle element of\n     * the offer IQ\n     * @param success callback called when we accept incoming session\n     * successfully and receive RESULT packet to 'session-accept' sent.\n     * @param failure function(error) called if for any reason we fail to accept\n     * the incoming offer. 'error' argument can be used to log some details\n     * about the error.\n     * @param {Array<JitsiLocalTrack>} [localTracks] the optional list of\n     * the local tracks that will be added, before the offer/answer cycle\n     * executes. We allow the localTracks to optionally be passed in so that\n     * the addition of the local tracks and the processing of the initial offer\n     * can all be done atomically. We want to make sure that any other\n     * operations which originate in the XMPP Jingle messages related with\n     * this session to be executed with an assumption that the initial\n     * offer/answer cycle has been executed already.\n     */\n    acceptOffer(jingleOffer, success, failure, localTracks) {\n        this.setOfferAnswerCycle(\n            jingleOffer,\n            () => {\n                // FIXME we may not care about RESULT packet for session-accept\n                // then we should either call 'success' here immediately or\n                // modify sendSessionAccept method to do that\n                this.sendSessionAccept(success, failure);\n            },\n            failure,\n            localTracks);\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Creates an offer and sends Jingle 'session-initiate' to the remote peer.\n     * @param {Array<JitsiLocalTrack>} localTracks the local tracks that will be\n     * added, before the offer/answer cycle executes (for the local track\n     * addition to be an atomic operation together with the offer/answer).\n     */\n    invite(localTracks) {\n        if (!this.isInitiator) {\n            throw new Error('Trying to invite from the responder session');\n        }\n        const workFunction = finishedCallback => {\n            for (const localTrack of localTracks) {\n                this.peerconnection.addTrack(localTrack);\n            }\n            this.peerconnection.createOffer(this.mediaConstraints)\n                .then(offerSdp => {\n                    this.peerconnection.setLocalDescription(offerSdp)\n                        .then(() => {\n                            // NOTE that the offer is obtained from\n                            // the localDescription getter as it needs to go\n                            // though the transformation chain.\n                            this.sendSessionInitiate(\n                                this.peerconnection.localDescription.sdp);\n                            finishedCallback();\n                        }, error => {\n                            logger.error(\n                                'Failed to set local SDP', error, offerSdp);\n                            finishedCallback(error);\n                        });\n                }, error => {\n                    logger.error(\n                        'Failed to create an offer',\n                        error,\n                        this.mediaConstraints);\n                    finishedCallback(error);\n                });\n        };\n\n        this.modificationQueue.push(\n            workFunction,\n            error => {\n                if (error) {\n                    logger.error('invite error', error);\n                } else {\n                    logger.debug('invite executed - OK');\n                }\n            });\n    }\n\n    /**\n     * Sends 'session-initiate' to the remote peer.\n     *\n     * NOTE this method is synchronous and we're not waiting for the RESULT\n     * response which would delay the startup process.\n     *\n     * @param {string} offerSdp  - The local session description which will be\n     * used to generate an offer.\n     * @private\n     */\n    sendSessionInitiate(offerSdp) {\n        let init = $iq({\n            to: this.remoteJid,\n            type: 'set'\n        }).c('jingle', {\n            xmlns: 'urn:xmpp:jingle:1',\n            action: 'session-initiate',\n            initiator: this.initiatorJid,\n            sid: this.sid\n        });\n\n        new SDP(offerSdp).toJingle(\n            init,\n            this.isInitiator ? 'initiator' : 'responder');\n        init = init.tree();\n        logger.info('Session-initiate: ', init);\n        this.connection.sendIQ(init,\n            () => {\n                logger.info('Got RESULT for \"session-initiate\"');\n            },\n            error => {\n                logger.error('\"session-initiate\" error', error);\n            },\n            IQ_TIMEOUT);\n    }\n\n    /**\n     * Sets the answer received from the remote peer.\n     * @param jingleAnswer\n     */\n    setAnswer(jingleAnswer) {\n        if (!this.isInitiator) {\n            throw new Error('Trying to set an answer on the responder session');\n        }\n        this.setOfferAnswerCycle(\n            jingleAnswer,\n            () => {\n                logger.info('setAnswer - succeeded');\n            },\n            error => {\n                logger.error('setAnswer failed: ', error);\n            });\n    }\n\n    /* eslint-disable max-params */\n    /**\n     * This is a setRemoteDescription/setLocalDescription cycle which starts at\n     * converting Strophe Jingle IQ into remote offer SDP. Once converted\n     * setRemoteDescription, createAnswer and setLocalDescription calls follow.\n     * @param jingleOfferAnswerIq jQuery selector pointing to the jingle element\n     *        of the offer (or answer) IQ\n     * @param success callback called when sRD/sLD cycle finishes successfully.\n     * @param failure callback called with an error object as an argument if we\n     *        fail at any point during setRD, createAnswer, setLD.\n     * @param {Array<JitsiLocalTrack>} [localTracks] the optional list of\n     * the local tracks that will be added, before the offer/answer cycle\n     * executes (for the local track addition to be an atomic operation together\n     * with the offer/answer).\n     */\n    setOfferAnswerCycle(jingleOfferAnswerIq, success, failure, localTracks) {\n        const workFunction = finishedCallback => {\n\n            if (localTracks) {\n                for (const track of localTracks) {\n                    this.peerconnection.addTrack(track);\n                }\n            }\n\n            const newRemoteSdp\n                = this._processNewJingleOfferIq(jingleOfferAnswerIq);\n            const oldLocalSdp\n                = this.peerconnection.localDescription.sdp;\n\n            const bridgeSession\n                = $(jingleOfferAnswerIq)\n                    .find('>bridge-session['\n                        + 'xmlns=\"http://jitsi.org/protocol/focus\"]');\n            const bridgeSessionId = bridgeSession.attr('id');\n\n            if (bridgeSessionId !== this._bridgeSessionId) {\n                this._bridgeSessionId = bridgeSessionId;\n            }\n\n            this._renegotiate(newRemoteSdp.raw)\n                .then(() => {\n                    if (this.state === JingleSessionState.PENDING) {\n                        this.state = JingleSessionState.ACTIVE;\n\n                        // Sync up video transfer active/inactive only after\n                        // the initial O/A cycle. We want to adjust the video\n                        // media direction only in the local SDP and the Jingle\n                        // contents direction included in the initial\n                        // offer/answer is mapped to the remote SDP. Jingle\n                        // 'content-modify' IQ is processed in a way that it\n                        // will only modify local SDP when remote peer is no\n                        // longer interested in receiving video content.\n                        // Changing media direction in the remote SDP will mess\n                        // up our SDP translation chain (simulcast, video mute,\n                        // RTX etc.)\n                        if (this.isP2P && !this._localVideoActive) {\n                            this.sendContentModify(this._localVideoActive);\n                        }\n                    }\n\n                    // Old local SDP will be available when we're setting answer\n                    // for the first time, but not when offer and it's fine\n                    // since we're generating an answer now it will contain all\n                    // our SSRCs\n                    if (oldLocalSdp) {\n                        const newLocalSdp\n                            = new SDP(this.peerconnection.localDescription.sdp);\n\n                        this.notifyMySSRCUpdate(\n                            new SDP(oldLocalSdp), newLocalSdp);\n                    }\n\n                    finishedCallback();\n                }, error => {\n                    logger.error(\n                        `Error renegotiating after setting new remote ${\n                            this.isInitiator ? 'answer: ' : 'offer: '}${error}`,\n                        newRemoteSdp);\n\n                    finishedCallback(error);\n                });\n        };\n\n        this.modificationQueue.push(\n            workFunction,\n            error => {\n                error ? failure(error) : success();\n            });\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Although it states \"replace transport\" it does accept full Jingle offer\n     * which should contain new ICE transport details.\n     * @param jingleOfferElem an element Jingle IQ that contains new offer and\n     *        transport info.\n     * @param success callback called when we succeed to accept new offer.\n     * @param failure function(error) called when we fail to accept new offer.\n     */\n    replaceTransport(jingleOfferElem, success, failure) {\n        this.room.eventEmitter.emit(XMPPEvents.ICE_RESTARTING, this);\n\n        // We need to first reject the 'data' section to have the SCTP stack\n        // cleaned up to signal the known data channel is now invalid. After\n        // that the original offer is set to have the SCTP connection\n        // established with the new bridge.\n        const originalOffer = jingleOfferElem.clone();\n\n        jingleOfferElem\n            .find('>content[name=\\'data\\']')\n            .attr('senders', 'rejected');\n\n        // Remove all remote sources in order to reset the client's state\n        // for the remote MediaStreams. When a conference is moved to\n        // another bridge it will start streaming with a sequence number\n        // that is not in sync with the most recently seen by the client.\n        // The symptoms include frozen or black video and lots of \"failed to\n        // unprotect SRTP packets\" in Chrome logs.\n        jingleOfferElem\n            .find('>content>description>source')\n            .remove();\n        jingleOfferElem\n            .find('>content>description>ssrc-group')\n            .remove();\n\n        // On the JVB it's not a real ICE restart and all layers are re-initialized from scratch as Jicofo does\n        // the restart by re-allocating new channels. Chrome (or WebRTC stack) needs to have the DTLS transport layer\n        // reset to start a new handshake with fresh DTLS transport on the bridge. Make it think that the DTLS\n        // fingerprint has changed by setting an all zeros key.\n        const newFingerprint = jingleOfferElem.find('>content>transport>fingerprint');\n\n        newFingerprint.attr('hash', 'sha-1');\n        newFingerprint.text('00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00:00');\n\n        // First set an offer with a rejected 'data' section\n        this.setOfferAnswerCycle(\n            jingleOfferElem,\n            () => {\n                // Now set the original offer(with the 'data' section)\n                this.setOfferAnswerCycle(\n                    originalOffer,\n                    () => {\n                        const localSDP\n                            = new SDP(this.peerconnection.localDescription.sdp);\n\n                        this.sendTransportAccept(localSDP, success, failure);\n\n                        this.room.eventEmitter.emit(\n                            XMPPEvents.ICE_RESTART_SUCCESS,\n                            this,\n                            originalOffer);\n                    },\n                    failure);\n            },\n            failure\n        );\n    }\n\n    /**\n     * Sends Jingle 'session-accept' message.\n     * @param {function()} success callback called when we receive 'RESULT'\n     *        packet for the 'session-accept'\n     * @param {function(error)} failure called when we receive an error response\n     *        or when the request has timed out.\n     * @private\n     */\n    sendSessionAccept(success, failure) {\n        // NOTE: since we're just reading from it, we don't need to be within\n        //  the modification queue to access the local description\n        const localSDP = new SDP(this.peerconnection.localDescription.sdp);\n        let accept = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', { xmlns: 'urn:xmpp:jingle:1',\n                action: 'session-accept',\n                initiator: this.initiatorJid,\n                responder: this.responderJid,\n                sid: this.sid });\n\n        if (this.webrtcIceTcpDisable) {\n            localSDP.removeTcpCandidates = true;\n        }\n        if (this.webrtcIceUdpDisable) {\n            localSDP.removeUdpCandidates = true;\n        }\n        if (this.failICE) {\n            localSDP.failICE = true;\n        }\n        localSDP.toJingle(\n            accept,\n            this.initiatorJid === this.localJid ? 'initiator' : 'responder',\n            null);\n\n        // Calling tree() to print something useful\n        accept = accept.tree();\n        logger.info('Sending session-accept', accept);\n        this.connection.sendIQ(accept,\n            success,\n            this.newJingleErrorHandler(accept, error => {\n                failure(error);\n\n                // 'session-accept' is a critical timeout and we'll\n                // have to restart\n                this.room.eventEmitter.emit(\n                    XMPPEvents.SESSION_ACCEPT_TIMEOUT, this);\n            }),\n            IQ_TIMEOUT);\n\n        // XXX Videobridge needs WebRTC's answer (ICE ufrag and pwd, DTLS\n        // fingerprint and setup) ASAP in order to start the connection\n        // establishment.\n        //\n        // FIXME Flushing the connection at this point triggers an issue with\n        // BOSH request handling in Prosody on slow connections.\n        //\n        // The problem is that this request will be quite large and it may take\n        // time before it reaches Prosody. In the meantime Strophe may decide\n        // to send the next one. And it was observed that a small request with\n        // 'transport-info' usually follows this one. It does reach Prosody\n        // before the previous one was completely received. 'rid' on the server\n        // is increased and Prosody ignores the request with 'session-accept'.\n        // It will never reach Jicofo and everything in the request table is\n        // lost. Removing the flush does not guarantee it will never happen, but\n        // makes it much less likely('transport-info' is bundled with\n        // 'session-accept' and any immediate requests).\n        //\n        // this.connection.flush();\n    }\n\n    /**\n     * Will send 'content-modify' IQ in order to ask the remote peer to\n     * either stop or resume sending video media.\n     * @param {boolean} videoTransferActive <tt>false</tt> to let the other peer\n     * know that we're not sending nor interested in receiving video contents.\n     * When set to <tt>true</tt> remote peer will be asked to resume video\n     * transfer.\n     * @private\n     */\n    sendContentModify(videoTransferActive) {\n        const newSendersValue = videoTransferActive ? 'both' : 'none';\n\n        const sessionModify\n            = $iq({\n                to: this.remoteJid,\n                type: 'set'\n            })\n                .c('jingle', {\n                    xmlns: 'urn:xmpp:jingle:1',\n                    action: 'content-modify',\n                    initiator: this.initiatorJid,\n                    sid: this.sid\n                })\n                .c('content', {\n                    name: 'video',\n                    senders: newSendersValue\n                });\n\n        logger.info(\n            `Sending content-modify, video senders: ${newSendersValue}`);\n\n        this.connection.sendIQ(\n            sessionModify,\n            null,\n            this.newJingleErrorHandler(sessionModify),\n            IQ_TIMEOUT);\n    }\n\n    /**\n     * Sends Jingle 'transport-accept' message which is a response to\n     * 'transport-replace'.\n     * @param localSDP the 'SDP' object with local session description\n     * @param success callback called when we receive 'RESULT' packet for\n     *        'transport-replace'\n     * @param failure function(error) called when we receive an error response\n     *        or when the request has timed out.\n     * @private\n     */\n    sendTransportAccept(localSDP, success, failure) {\n        let transportAccept = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', {\n                xmlns: 'urn:xmpp:jingle:1',\n                action: 'transport-accept',\n                initiator: this.initiatorJid,\n                sid: this.sid\n            });\n\n        localSDP.media.forEach((medialines, idx) => {\n            const mline = SDPUtil.parseMLine(medialines.split('\\r\\n')[0]);\n\n            transportAccept.c('content',\n                {\n                    creator:\n                        this.initiatorJid === this.localJid\n                            ? 'initiator'\n                            : 'responder',\n                    name: mline.media\n                }\n            );\n            localSDP.transportToJingle(idx, transportAccept);\n            transportAccept.up();\n        });\n\n        // Calling tree() to print something useful to the logger\n        transportAccept = transportAccept.tree();\n        logger.info('Sending transport-accept: ', transportAccept);\n\n        this.connection.sendIQ(transportAccept,\n            success,\n            this.newJingleErrorHandler(transportAccept, failure),\n            IQ_TIMEOUT);\n    }\n\n    /**\n     * Sends Jingle 'transport-reject' message which is a response to\n     * 'transport-replace'.\n     * @param success callback called when we receive 'RESULT' packet for\n     *        'transport-replace'\n     * @param failure function(error) called when we receive an error response\n     *        or when the request has timed out.\n     *\n     * FIXME method should be marked as private, but there's some spaghetti that\n     *       needs to be fixed prior doing that\n     */\n    sendTransportReject(success, failure) {\n        // Send 'transport-reject', so that the focus will\n        // know that we've failed\n        let transportReject = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', {\n                xmlns: 'urn:xmpp:jingle:1',\n                action: 'transport-reject',\n                initiator: this.initiatorJid,\n                sid: this.sid\n            });\n\n        transportReject = transportReject.tree();\n        logger.info('Sending \\'transport-reject', transportReject);\n\n        this.connection.sendIQ(transportReject,\n            success,\n            this.newJingleErrorHandler(transportReject, failure),\n            IQ_TIMEOUT);\n    }\n\n    /**\n     * @inheritDoc\n     */\n    terminate(success, failure, options) {\n        if (this.state === JingleSessionState.ENDED) {\n            return;\n        }\n\n        if (!options || Boolean(options.sendSessionTerminate)) {\n            let sessionTerminate\n                = $iq({\n                    to: this.remoteJid,\n                    type: 'set'\n                })\n                    .c('jingle', {\n                        xmlns: 'urn:xmpp:jingle:1',\n                        action: 'session-terminate',\n                        initiator: this.initiatorJid,\n                        sid: this.sid\n                    })\n                    .c('reason')\n                    .c((options && options.reason) || 'success');\n\n            if (options && options.reasonDescription) {\n                sessionTerminate.up()\n                    .c('text')\n                    .t(options.reasonDescription);\n            }\n\n            // Calling tree() to print something useful\n            sessionTerminate = sessionTerminate.tree();\n            logger.info('Sending session-terminate', sessionTerminate);\n            this.connection.sendIQ(\n                sessionTerminate,\n                success,\n                this.newJingleErrorHandler(sessionTerminate, failure),\n                IQ_TIMEOUT);\n        } else {\n            logger.info(`Skipped sending session-terminate for ${this}`);\n        }\n\n        // this should result in 'onTerminated' being called by strope.jingle.js\n        this.connection.jingle.terminate(this.sid);\n    }\n\n    /**\n     *\n     * @param reasonCondition\n     * @param reasonText\n     */\n    onTerminated(reasonCondition, reasonText) {\n        // Do something with reason and reasonCondition when we start to care\n        // this.reasonCondition = reasonCondition;\n        // this.reasonText = reasonText;\n        logger.info(`Session terminated ${this}`, reasonCondition, reasonText);\n\n        this.close();\n    }\n\n    /**\n     * Parse the information from the xml sourceAddElem and translate it\n     *  into sdp lines\n     * @param {jquery xml element} sourceAddElem the source-add\n     *  element from jingle\n     * @param {SDP object} currentRemoteSdp the current remote\n     *  sdp (as of this new source-add)\n     * @returns {list} a list of SDP line strings that should\n     *  be added to the remote SDP\n     */\n    _parseSsrcInfoFromSourceAdd(sourceAddElem, currentRemoteSdp) {\n        const addSsrcInfo = [];\n\n        $(sourceAddElem).each((i1, content) => {\n            const name = $(content).attr('name');\n            let lines = '';\n\n            $(content)\n                .find('ssrc-group[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]')\n                .each(function() {\n                    // eslint-disable-next-line no-invalid-this\n                    const semantics = this.getAttribute('semantics');\n                    const ssrcs\n                        = $(this) // eslint-disable-line no-invalid-this\n                            .find('>source')\n                            .map(function() {\n                                // eslint-disable-next-line no-invalid-this\n                                return this.getAttribute('ssrc');\n                            })\n                            .get();\n\n                    if (ssrcs.length) {\n                        lines\n                            += `a=ssrc-group:${semantics} ${\n                                ssrcs.join(' ')}\\r\\n`;\n                    }\n                });\n\n            // handles both >source and >description>source\n            const tmp\n                = $(content).find(\n                    'source[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]');\n\n            /* eslint-disable no-invalid-this */\n            tmp.each(function() {\n                const ssrc = $(this).attr('ssrc');\n\n                if (currentRemoteSdp.containsSSRC(ssrc)) {\n                    logger.warn(\n                        `Source-add request for existing SSRC: ${ssrc}`);\n\n                    return;\n                }\n\n                // eslint-disable-next-line newline-per-chained-call\n                $(this).find('>parameter').each(function() {\n                    lines += `a=ssrc:${ssrc} ${$(this).attr('name')}`;\n                    if ($(this).attr('value') && $(this).attr('value').length) {\n                        lines += `:${$(this).attr('value')}`;\n                    }\n                    lines += '\\r\\n';\n                });\n            });\n\n            /* eslint-enable no-invalid-this */\n            currentRemoteSdp.media.forEach((media, i2) => {\n                if (!SDPUtil.findLine(media, `a=mid:${name}`)) {\n                    return;\n                }\n                if (!addSsrcInfo[i2]) {\n                    addSsrcInfo[i2] = '';\n                }\n                addSsrcInfo[i2] += lines;\n            });\n        });\n\n        return addSsrcInfo;\n    }\n\n    /**\n     * Handles a Jingle source-add message for this Jingle session.\n     * @param elem An array of Jingle \"content\" elements.\n     */\n    addRemoteStream(elem) {\n        this._addOrRemoveRemoteStream(true /* add */, elem);\n    }\n\n    /**\n     * Handles a Jingle source-remove message for this Jingle session.\n     * @param elem An array of Jingle \"content\" elements.\n     */\n    removeRemoteStream(elem) {\n        this._addOrRemoveRemoteStream(false /* remove */, elem);\n    }\n\n    /**\n     * Handles either Jingle 'source-add' or 'source-remove' message for this\n     * Jingle session.\n     * @param {boolean} isAdd <tt>true</tt> for 'source-add' or <tt>false</tt>\n     * otherwise.\n     * @param {Array<Element>} elem an array of Jingle \"content\" elements.\n     * @private\n     */\n    _addOrRemoveRemoteStream(isAdd, elem) {\n        const logPrefix = isAdd ? 'addRemoteStream' : 'removeRemoteStream';\n\n        if (isAdd) {\n            this.readSsrcInfo(elem);\n        }\n\n        const workFunction = finishedCallback => {\n            if (!this.peerconnection.localDescription\n                || !this.peerconnection.localDescription.sdp) {\n                const errMsg = `${logPrefix} - localDescription not ready yet`;\n\n                logger.error(errMsg);\n                finishedCallback(errMsg);\n\n                return;\n            }\n\n            logger.log(`Processing ${logPrefix}`);\n            logger.log(\n                'ICE connection state: ',\n                this.peerconnection.iceConnectionState);\n\n            const oldLocalSdp\n                = new SDP(this.peerconnection.localDescription.sdp);\n            const sdp = new SDP(this.peerconnection.remoteDescription.sdp);\n            const addOrRemoveSsrcInfo\n                = isAdd\n                    ? this._parseSsrcInfoFromSourceAdd(elem, sdp)\n                    : this._parseSsrcInfoFromSourceRemove(elem, sdp);\n            const newRemoteSdp\n                = isAdd\n                    ? this._processRemoteAddSource(addOrRemoveSsrcInfo)\n                    : this._processRemoteRemoveSource(addOrRemoveSsrcInfo);\n\n            this._renegotiate(newRemoteSdp.raw)\n                .then(() => {\n                    const newLocalSdp\n                        = new SDP(this.peerconnection.localDescription.sdp);\n\n                    logger.log(\n                        `${logPrefix} - OK, SDPs: `, oldLocalSdp, newLocalSdp);\n                    this.notifyMySSRCUpdate(oldLocalSdp, newLocalSdp);\n                    finishedCallback();\n                }, error => {\n                    logger.error(`${logPrefix} failed:`, error);\n                    finishedCallback(error);\n                });\n        };\n\n        // Queue and execute\n        this.modificationQueue.push(workFunction);\n    }\n\n    /**\n     * Takes in a jingle offer iq, returns the new sdp offer\n     * @param {jquery xml element} offerIq the incoming offer\n     * @returns {SDP object} the jingle offer translated to SDP\n     */\n    _processNewJingleOfferIq(offerIq) {\n        const remoteSdp = new SDP('');\n\n        if (this.webrtcIceTcpDisable) {\n            remoteSdp.removeTcpCandidates = true;\n        }\n        if (this.webrtcIceUdpDisable) {\n            remoteSdp.removeUdpCandidates = true;\n        }\n        if (this.failICE) {\n            remoteSdp.failICE = true;\n        }\n\n        remoteSdp.fromJingle(offerIq);\n        this.readSsrcInfo($(offerIq).find('>content'));\n\n        return remoteSdp;\n    }\n\n    /**\n     * Remove the given ssrc lines from the current remote sdp\n     * @param {list} removeSsrcInfo a list of SDP line strings that\n     *  should be removed from the remote SDP\n     * @returns type {SDP Object} the new remote SDP (after removing the lines\n     *  in removeSsrcInfo\n     */\n    _processRemoteRemoveSource(removeSsrcInfo) {\n        const remoteSdp = new SDP(this.peerconnection.remoteDescription.sdp);\n\n        removeSsrcInfo.forEach((lines, idx) => {\n            // eslint-disable-next-line no-param-reassign\n            lines = lines.split('\\r\\n');\n            lines.pop(); // remove empty last element;\n            lines.forEach(line => {\n                remoteSdp.media[idx]\n                    = remoteSdp.media[idx].replace(`${line}\\r\\n`, '');\n            });\n        });\n        remoteSdp.raw = remoteSdp.session + remoteSdp.media.join('');\n\n        return remoteSdp;\n    }\n\n    /**\n     * Add the given ssrc lines to the current remote sdp\n     * @param {list} addSsrcInfo a list of SDP line strings that\n     *  should be added to the remote SDP\n     * @returns type {SDP Object} the new remote SDP (after removing the lines\n     *  in removeSsrcInfo\n     */\n    _processRemoteAddSource(addSsrcInfo) {\n        const remoteSdp = new SDP(this.peerconnection.remoteDescription.sdp);\n\n        addSsrcInfo.forEach((lines, idx) => {\n            remoteSdp.media[idx] += lines;\n        });\n        remoteSdp.raw = remoteSdp.session + remoteSdp.media.join('');\n\n        return remoteSdp;\n    }\n\n    /**\n     * Do a new o/a flow using the existing remote description\n     * @param {string} [optionalRemoteSdp] optional, raw remote sdp\n     *  to use.  If not provided, the remote sdp from the\n     *  peerconnection will be used\n     * @returns {Promise} promise which resolves when the\n     *  o/a flow is complete with no arguments or\n     *  rejects with an error {string}\n     */\n    _renegotiate(optionalRemoteSdp) {\n        if (this.peerconnection.signalingState === 'closed') {\n            const error = new Error('Attempted to renegotiate in state closed');\n\n            this.room.eventEmitter.emit(XMPPEvents.RENEGOTIATION_FAILED, error, this);\n\n            return Promise.reject(error);\n        }\n\n        const remoteSdp\n            = optionalRemoteSdp || this.peerconnection.remoteDescription.sdp;\n\n        if (!remoteSdp) {\n            const error = new Error(`Can not renegotiate without remote description, current state: ${this.state}`);\n\n            this.room.eventEmitter.emit(XMPPEvents.RENEGOTIATION_FAILED, error, this);\n\n            return Promise.reject(error);\n        }\n\n        const remoteDescription = new RTCSessionDescription({\n            type: this.isInitiator ? 'answer' : 'offer',\n            sdp: remoteSdp\n        });\n\n        if (this.isInitiator) {\n            return this._initiatorRenegotiate(remoteDescription);\n        }\n\n        return this._responderRenegotiate(remoteDescription);\n    }\n\n    /**\n     * Renegotiate cycle implementation for the responder case.\n     * @param {object} remoteDescription the SDP object as defined by the WebRTC\n     * which will be used as remote description in the cycle.\n     * @private\n     */\n    _responderRenegotiate(remoteDescription) {\n        logger.debug('Renegotiate: setting remote description');\n\n        return this.peerconnection.setRemoteDescription(remoteDescription)\n            .then(() => {\n                logger.debug('Renegotiate: creating answer');\n\n                return this.peerconnection.createAnswer(this.mediaConstraints)\n                    .then(answer => {\n                        logger.debug('Renegotiate: setting local description');\n\n                        return this.peerconnection.setLocalDescription(answer);\n                    });\n            });\n    }\n\n    /**\n     * Renegotiate cycle implementation for the initiator's case.\n     * @param {object} remoteDescription the SDP object as defined by the WebRTC\n     * which will be used as remote description in the cycle.\n     * @private\n     */\n    _initiatorRenegotiate(remoteDescription) {\n        if (this.peerconnection.signalingState === 'have-local-offer') {\n            // Skip createOffer and setLocalDescription or FF will fail\n            logger.debug(\n                'Renegotiate: setting remote description');\n\n            /* eslint-disable arrow-body-style */\n\n            return this.peerconnection.setRemoteDescription(remoteDescription)\n                .then(() => {\n                    // In case when the answer is being set for the first time,\n                    // full sRD/sLD cycle is required to have the local\n                    // description updated and SSRCs synchronized correctly.\n                    // Otherwise SSRCs for streams added after invite, but\n                    // before the answer was accepted will not be detected.\n                    // The reason for that is that renegotiate can not be called\n                    // when adding tracks and they will not be reflected in\n                    // the local SDP.\n                    return this._initiatorRenegotiate(remoteDescription);\n                });\n            /* eslint-enable arrow-body-style */\n        }\n\n        logger.debug('Renegotiate: creating offer');\n\n        return this.peerconnection.createOffer(this.mediaConstraints)\n            .then(offer => {\n                logger.debug('Renegotiate: setting local description');\n\n                return this.peerconnection.setLocalDescription(offer)\n                    .then(() => {\n                        logger.debug(\n                            'Renegotiate: setting remote description');\n\n                        // eslint-disable-next-line max-len\n                        return this.peerconnection.setRemoteDescription(remoteDescription);\n                    });\n            });\n    }\n\n    /**\n     * Replaces <tt>oldTrack</tt> with <tt>newTrack</tt> and performs a single\n     * offer/answer cycle after both operations are done. Either\n     * <tt>oldTrack</tt> or <tt>newTrack</tt> can be null; replacing a valid\n     * <tt>oldTrack</tt> with a null <tt>newTrack</tt> effectively just removes\n     * <tt>oldTrack</tt>\n     * @param {JitsiLocalTrack|null} oldTrack the current track in use to be\n     * replaced\n     * @param {JitsiLocalTrack|null} newTrack the new track to use\n     * @returns {Promise} which resolves once the replacement is complete\n     *  with no arguments or rejects with an error {string}\n     */\n    replaceTrack(oldTrack, newTrack) {\n        const workFunction = finishedCallback => {\n            const oldLocalSdp = this.peerconnection.localDescription.sdp;\n\n            // NOTE the code below assumes that no more than 1 video track\n            // can be added to the peer connection.\n            // Transition from no video to video (possibly screen sharing)\n            if (!oldTrack && newTrack && newTrack.isVideoTrack()) {\n                // Clearing current primary SSRC will make\n                // the SdpConsistency generate a new one which will result\n                // with:\n                // 1. source-remove for the recvonly\n                // 2. source-add for the new video stream\n                this.peerconnection.clearRecvonlySsrc();\n\n            // Transition from video to no video\n            } else if (oldTrack && oldTrack.isVideoTrack() && !newTrack) {\n                // Clearing current primary SSRC and generating the recvonly\n                // will result in:\n                // 1. source-remove for the old video stream\n                // 2. source-add for the recvonly stream\n                this.peerconnection.clearRecvonlySsrc();\n                this.peerconnection.generateRecvonlySsrc();\n            }\n\n            this.peerconnection.replaceTrack(oldTrack, newTrack)\n            .then(shouldRenegotiate => {\n                if (shouldRenegotiate\n                    && (oldTrack || newTrack)\n                    && this.state === JingleSessionState.ACTIVE) {\n                    this._renegotiate()\n                        .then(() => {\n                            const newLocalSDP\n                                = new SDP(\n                                    this.peerconnection.localDescription.sdp);\n\n                            this.notifyMySSRCUpdate(\n                                new SDP(oldLocalSdp), newLocalSDP);\n                            finishedCallback();\n                        },\n                        finishedCallback /* will be called with en error */);\n                } else {\n                    finishedCallback();\n                }\n            });\n        };\n\n        return new Promise((resolve, reject) => {\n            this.modificationQueue.push(\n                workFunction,\n                error => {\n                    if (error) {\n                        logger.error('Replace track error:', error);\n                        reject(error);\n                    } else {\n                        logger.info('Replace track done!');\n                        resolve();\n                    }\n                });\n        });\n    }\n\n    /**\n     * Parse the information from the xml sourceRemoveElem and translate it\n     *  into sdp lines\n     * @param {jquery xml element} sourceRemoveElem the source-remove\n     *  element from jingle\n     * @param {SDP object} currentRemoteSdp the current remote\n     *  sdp (as of this new source-remove)\n     * @returns {list} a list of SDP line strings that should\n     *  be removed from the remote SDP\n     */\n    _parseSsrcInfoFromSourceRemove(sourceRemoveElem, currentRemoteSdp) {\n        const removeSsrcInfo = [];\n\n        $(sourceRemoveElem).each((i1, content) => {\n            const name = $(content).attr('name');\n            let lines = '';\n\n            $(content)\n                .find('ssrc-group[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]')\n                .each(function() {\n                    /* eslint-disable no-invalid-this */\n                    const semantics = this.getAttribute('semantics');\n                    const ssrcs\n                        = $(this)\n                            .find('>source')\n                            .map(function() {\n                                return this.getAttribute('ssrc');\n                            })\n                            .get();\n\n                    if (ssrcs.length) {\n                        lines\n                            += `a=ssrc-group:${semantics} ${\n                                ssrcs.join(' ')}\\r\\n`;\n                    }\n\n                    /* eslint-enable no-invalid-this */\n                });\n            const ssrcs = [];\n\n            // handles both >source and >description>source versions\n            const tmp\n                = $(content).find(\n                    'source[xmlns=\"urn:xmpp:jingle:apps:rtp:ssma:0\"]');\n\n            tmp.each(function() {\n                // eslint-disable-next-line no-invalid-this\n                const ssrc = $(this).attr('ssrc');\n\n                ssrcs.push(ssrc);\n            });\n            currentRemoteSdp.media.forEach((media, i2) => {\n                if (!SDPUtil.findLine(media, `a=mid:${name}`)) {\n                    return;\n                }\n                if (!removeSsrcInfo[i2]) {\n                    removeSsrcInfo[i2] = '';\n                }\n                ssrcs.forEach(ssrc => {\n                    const ssrcLines\n                        = SDPUtil.findLines(media, `a=ssrc:${ssrc}`);\n\n                    if (ssrcLines.length) {\n                        removeSsrcInfo[i2] += `${ssrcLines.join('\\r\\n')}\\r\\n`;\n                    }\n                });\n                removeSsrcInfo[i2] += lines;\n            });\n        });\n\n        return removeSsrcInfo;\n    }\n\n    /**\n     * Will print an error if there is any difference, between the SSRCs given\n     * in the <tt>oldSDP</tt> and the ones currently described in\n     * the peerconnection's local description.\n     * @param {string} operationName the operation's name which will be printed\n     * in the error message.\n     * @param {SDP} oldSDP the old local SDP which will be compared with\n     * the current one.\n     * @return {boolean} <tt>true</tt> if there was any change or <tt>false</tt>\n     * otherwise.\n     * @private\n     */\n    _verifyNoSSRCChanged(operationName, oldSDP) {\n        const currentLocalSDP\n            = new SDP(this.peerconnection.localDescription.sdp);\n        let sdpDiff = new SDPDiffer(oldSDP, currentLocalSDP);\n        const addedMedia = sdpDiff.getNewMedia();\n\n        if (Object.keys(addedMedia).length) {\n            logger.error(\n                `${this} - some SSRC were added on ${operationName}`,\n                addedMedia);\n\n            return false;\n        }\n\n        sdpDiff = new SDPDiffer(currentLocalSDP, oldSDP);\n        const removedMedia = sdpDiff.getNewMedia();\n\n        if (Object.keys(removedMedia).length) {\n            logger.error(\n                `${this} - some SSRCs were removed on ${operationName}`,\n                removedMedia);\n\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * Adds local track back to this session, as part of the unmute operation.\n     * @param {JitsiLocalTrack} track\n     * @return {Promise} a promise that will resolve once the local track is\n     * added back to this session and renegotiation succeeds. Will be rejected\n     * with a <tt>string</tt> that provides some error details in case something\n     * goes wrong.\n     */\n    addTrackAsUnmute(track) {\n        return this._addRemoveTrackAsMuteUnmute(\n            false /* add as unmute */, track);\n    }\n\n    /**\n     * Remove local track as part of the mute operation.\n     * @param {JitsiLocalTrack} track the local track to be removed\n     * @return {Promise} a promise which will be resolved once the local track\n     * is removed from this session and the renegotiation is performed.\n     * The promise will be rejected with a <tt>string</tt> that the describes\n     * the error if anything goes wrong.\n     */\n    removeTrackAsMute(track) {\n        return this._addRemoveTrackAsMuteUnmute(\n            true /* remove as mute */, track);\n    }\n\n    /**\n     * See {@link addTrackAsUnmute} and {@link removeTrackAsMute}.\n     * @param {boolean} isMute <tt>true</tt> for \"remove as mute\" or\n     * <tt>false</tt> for \"add as unmute\".\n     * @param {JitsiLocalTrack} track the track that will be added/removed\n     * @private\n     */\n    _addRemoveTrackAsMuteUnmute(isMute, track) {\n        if (!track) {\n            return Promise.reject('invalid \"track\" argument value');\n        }\n        const operationName = isMute ? 'removeTrackMute' : 'addTrackUnmute';\n        const workFunction = finishedCallback => {\n            const tpc = this.peerconnection;\n\n            if (!tpc) {\n                finishedCallback(\n                    `Error:  tried ${operationName} track with no active peer`\n                        + 'connection');\n\n                return;\n            }\n            const oldLocalSDP = tpc.localDescription.sdp;\n            const tpcOperation\n                = isMute\n                    ? tpc.removeTrackMute.bind(tpc, track)\n                    : tpc.addTrackUnmute.bind(tpc, track);\n\n            if (!tpcOperation()) {\n                finishedCallback(`${operationName} failed!`);\n            } else if (!oldLocalSDP || !tpc.remoteDescription.sdp) {\n                finishedCallback();\n            } else {\n                this._renegotiate()\n                    .then(() => {\n                        // The results are ignored, as this check failure is not\n                        // enough to fail the whole operation. It will log\n                        // an error inside.\n                        this._verifyNoSSRCChanged(\n                            operationName, new SDP(oldLocalSDP));\n                        finishedCallback();\n                    },\n                    finishedCallback /* will be called with an error */);\n            }\n        };\n\n        return new Promise((resolve, reject) => {\n            this.modificationQueue.push(\n                workFunction,\n                error => {\n                    if (error) {\n                        reject(error);\n                    } else {\n                        resolve();\n                    }\n                });\n        });\n    }\n\n    /**\n     * Resumes or suspends media transfer over the underlying peer connection.\n     * @param {boolean} audioActive <tt>true</tt> to enable audio media\n     * transfer or <tt>false</tt> to suspend audio media transmission.\n     * @param {boolean} videoActive <tt>true</tt> to enable video media\n     * transfer or <tt>false</tt> to suspend video media transmission.\n     * @return {Promise} a <tt>Promise</tt> which will resolve once\n     * the operation is done. It will be rejected with an error description as\n     * a string in case anything goes wrong.\n     */\n    setMediaTransferActive(audioActive, videoActive) {\n        if (!this.peerconnection) {\n            return Promise.reject(\n                'Can not modify transfer active state,'\n                    + ' before \"initialize\" is called');\n        }\n\n        const logAudioStr = audioActive ? 'audio active' : 'audio inactive';\n        const logVideoStr = videoActive ? 'video active' : 'video inactive';\n\n        logger.info(`Queued make ${logVideoStr}, ${logAudioStr} task...`);\n\n        const workFunction = finishedCallback => {\n            const isSessionActive = this.state === JingleSessionState.ACTIVE;\n\n            // Because the value is modified on the queue it's impossible to\n            // check it's final value reliably prior to submitting the task.\n            // The rule here is that the last submitted state counts.\n            // Check the values here to avoid unnecessary renegotiation cycle.\n            const audioActiveChanged\n                = this.peerconnection.setAudioTransferActive(audioActive);\n\n            if (this._localVideoActive !== videoActive) {\n                this._localVideoActive = videoActive;\n\n                // Do only for P2P - Jicofo will reply with 'bad-request'\n                // We don't want to send 'content-modify', before the initial\n                // O/A (state === JingleSessionState.ACTIVE), because that will\n                // mess up video media direction in the remote SDP.\n                // 'content-modify' when processed only affects the media\n                // direction in the local SDP. We're doing that, because setting\n                // 'inactive' on video media in remote SDP will mess up our SDP\n                // translation chain (simulcast, RTX, video mute etc.).\n                if (this.isP2P && isSessionActive) {\n                    this.sendContentModify(videoActive);\n                }\n            }\n\n            const pcVideoActiveChanged\n                = this.peerconnection.setVideoTransferActive(\n                    this._localVideoActive && this._remoteVideoActive);\n\n            // Will do the sRD/sLD cycle to update SDPs and adjust the media\n            // direction\n            if (isSessionActive\n                    && (audioActiveChanged || pcVideoActiveChanged)) {\n                this._renegotiate()\n                    .then(\n                        finishedCallback,\n                        finishedCallback /* will be called with an error */);\n            } else {\n                finishedCallback();\n            }\n        };\n\n        return new Promise((resolve, reject) => {\n            this.modificationQueue.push(\n                workFunction,\n                error => {\n                    if (error) {\n                        reject(error);\n                    } else {\n                        resolve();\n                    }\n                });\n        });\n    }\n\n    /**\n     * Will put and execute on the queue a session modify task. Currently it\n     * only checks the senders attribute of the video content in order to figure\n     * out if the remote peer has video in the inactive state (stored locally\n     * in {@link _remoteVideoActive} - see field description for more info).\n     * @param {jQuery} jingleContents jQuery selector pointing to the jingle\n     * element of the session modify IQ.\n     * @see {@link _remoteVideoActive}\n     * @see {@link _localVideoActive}\n     */\n    modifyContents(jingleContents) {\n        const newVideoSenders\n            = JingleSessionPC.parseVideoSenders(jingleContents);\n\n        if (newVideoSenders === null) {\n            logger.error(\n                `${this} - failed to parse video \"senders\" attribute in`\n                    + '\"content-modify\" action');\n\n            return;\n        }\n\n        const workFunction = finishedCallback => {\n            if (this._assertNotEnded('content-modify')\n                    && this._modifyRemoteVideoActive(newVideoSenders)) {\n                // Will do the sRD/sLD cycle to update SDPs and adjust\n                // the media direction\n                this._renegotiate()\n                    .then(finishedCallback, finishedCallback /* (error) */);\n            } else {\n                finishedCallback();\n            }\n        };\n\n        logger.debug(\n            `${this} queued \"content-modify\" task`\n                + `(video senders=\"${newVideoSenders}\")`);\n\n        this.modificationQueue.push(\n            workFunction,\n            error => {\n                if (error) {\n                    logger.error('\"content-modify\" failed', error);\n                }\n            });\n    }\n\n    /**\n     * Processes new value of remote video \"senders\" Jingle attribute and tries\n     * to apply it for {@link _remoteVideoActive}.\n     * @param {string} remoteVideoSenders the value of \"senders\" attribute of\n     * Jingle video content element advertised by remote peer.\n     * @return {boolean} <tt>true</tt> if the change affected state of\n     * the underlying peerconnection and renegotiation is required for\n     * the changes to take effect.\n     * @private\n     */\n    _modifyRemoteVideoActive(remoteVideoSenders) {\n        const isRemoteVideoActive\n            = remoteVideoSenders === 'both'\n                || (remoteVideoSenders === 'initiator' && this.isInitiator)\n                || (remoteVideoSenders === 'responder' && !this.isInitiator);\n\n        if (isRemoteVideoActive !== this._remoteVideoActive) {\n            logger.debug(\n                `${this} new remote video active: ${isRemoteVideoActive}`);\n            this._remoteVideoActive = isRemoteVideoActive;\n        }\n\n        return this.peerconnection.setVideoTransferActive(\n            this._localVideoActive && this._remoteVideoActive);\n    }\n\n    /**\n     * Figures out added/removed ssrcs and send update IQs.\n     * @param oldSDP SDP object for old description.\n     * @param newSDP SDP object for new description.\n     */\n    notifyMySSRCUpdate(oldSDP, newSDP) {\n\n        if (this.state !== JingleSessionState.ACTIVE) {\n            logger.warn(`Skipping SSRC update in '${this.state} ' state.`);\n\n            return;\n        }\n\n        // send source-remove IQ.\n        let sdpDiffer = new SDPDiffer(newSDP, oldSDP);\n        const remove = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', {\n                xmlns: 'urn:xmpp:jingle:1',\n                action: 'source-remove',\n                initiator: this.initiatorJid,\n                sid: this.sid\n            }\n            );\n        const removedAnySSRCs = sdpDiffer.toJingle(remove);\n\n        if (removedAnySSRCs) {\n            logger.info('Sending source-remove', remove.tree());\n            this.connection.sendIQ(\n                remove, null,\n                this.newJingleErrorHandler(remove), IQ_TIMEOUT);\n        } else {\n            logger.log('removal not necessary');\n        }\n\n        // send source-add IQ.\n        sdpDiffer = new SDPDiffer(oldSDP, newSDP);\n        const add = $iq({ to: this.remoteJid,\n            type: 'set' })\n            .c('jingle', {\n                xmlns: 'urn:xmpp:jingle:1',\n                action: 'source-add',\n                initiator: this.initiatorJid,\n                sid: this.sid\n            }\n            );\n\n        const containsNewSSRCs = sdpDiffer.toJingle(add);\n\n        if (containsNewSSRCs) {\n            logger.info('Sending source-add', add.tree());\n            this.connection.sendIQ(\n                add, null, this.newJingleErrorHandler(add), IQ_TIMEOUT);\n        } else {\n            logger.log('addition not necessary');\n        }\n    }\n\n    /**\n     * Method returns function(errorResponse) which is a callback to be passed\n     * to Strophe connection.sendIQ method. An 'error' structure is created that\n     * is passed as 1st argument to given <tt>failureCb</tt>. The format of this\n     * structure is as follows:\n     * {\n     *  code: {XMPP error response code}\n     *  reason: {the name of XMPP error reason element or 'timeout' if the\n      *          request has timed out within <tt>IQ_TIMEOUT</tt> milliseconds}\n     *  source: {request.tree() that provides original request}\n     *  session: {this JingleSessionPC.toString()}\n     * }\n     * @param request Strophe IQ instance which is the request to be dumped into\n     *        the error structure\n     * @param failureCb function(error) called when error response was returned\n     *        or when a timeout has occurred.\n     * @returns {function(this:JingleSessionPC)}\n     */\n    newJingleErrorHandler(request, failureCb) {\n        return errResponse => {\n\n            const error = {};\n\n            // Get XMPP error code and condition(reason)\n            const errorElSel = $(errResponse).find('error');\n\n            if (errorElSel.length) {\n                error.code = errorElSel.attr('code');\n                const errorReasonSel = $(errResponse).find('error :first');\n\n                if (errorReasonSel.length) {\n                    error.reason = errorReasonSel[0].tagName;\n                }\n\n                const errorMsgSel = errorElSel.find('>text');\n\n                if (errorMsgSel.length) {\n                    error.msg = errorMsgSel.text();\n                }\n            }\n\n            if (!errResponse) {\n                error.reason = 'timeout';\n            }\n\n            error.session = this.toString();\n\n            if (failureCb) {\n                failureCb(error);\n            } else if (this.state === JingleSessionState.ENDED\n                        && error.reason === 'item-not-found') {\n                // When remote peer decides to terminate the session, but it\n                // still have few messages on the queue for processing,\n                // it will first send us 'session-terminate' (we enter ENDED)\n                // and then follow with 'item-not-found' for the queued requests\n                // We don't want to have that logged on error level.\n                logger.debug(`Jingle error: ${JSON.stringify(error)}`);\n            } else {\n                GlobalOnErrorHandler.callErrorHandler(\n                    new Error(\n                        `Jingle error: ${JSON.stringify(error)}`));\n            }\n        };\n    }\n\n    /**\n     * Returns the ice connection state for the peer connection.\n     * @returns the ice connection state for the peer connection.\n     */\n    getIceConnectionState() {\n        return this.peerconnection.iceConnectionState;\n    }\n\n    /**\n     * Closes the peerconnection.\n     */\n    close() {\n        this.state = JingleSessionState.ENDED;\n        this.establishmentDuration = undefined;\n\n        this.peerconnection.onicecandidate = null;\n        this.peerconnection.oniceconnectionstatechange = null;\n        this.peerconnection.onnegotiationneeded = null;\n        this.peerconnection.onsignalingstatechange = null;\n\n        // Remove any pending tasks from the queue\n        this.modificationQueue.clear();\n\n        this.modificationQueue.push(finishCallback => {\n            // The signaling layer will remove it's listeners\n            this.signalingLayer.setChatRoom(null);\n\n            // do not try to close if already closed.\n            this.peerconnection && this.peerconnection.close();\n            finishCallback();\n        });\n\n        // No more tasks can go in after the close task\n        this.modificationQueue.shutdown();\n    }\n\n    /**\n     * Converts to string with minor summary.\n     * @return {string}\n     */\n    toString() {\n        return `JingleSessionPC[p2p=${this.isP2P},`\n                    + `initiator=${this.isInitiator},sid=${this.sid}]`;\n    }\n\n    /**\n     * If the A/B test for suspend video is disabled according to the room's\n     * configuration, returns undefined. Otherwise returns a boolean which\n     * indicates whether the suspend video option should be enabled or disabled.\n     * @param {JingleSessionPCOptions} options - The config options.\n     */\n    _abtestSuspendVideoEnabled({ abTesting }) {\n        if (!abTesting || !abTesting.enableSuspendVideoTest) {\n            return;\n        }\n\n        // We want the two participants in a P2P call to agree on the value of\n        // the \"suspend\" option. We use the JID of the initiator, because it is\n        // both randomly selected and agreed upon by both participants.\n        const jid = this._getInitiatorJid();\n\n        return integerHash(jid) % 2 === 0;\n    }\n}\n","/**\n * The events for the media devices.\n */\n\n/**\n * Indicates that the list of available media devices has been changed. The\n * event provides the following parameters to its listeners:\n *\n * @param {MediaDeviceInfo[]} devices - array of MediaDeviceInfo or\n *  MediaDeviceInfo-like objects that are currently connected.\n *  @see https://developer.mozilla.org/en-US/docs/Web/API/MediaDeviceInfo\n */\nexport const DEVICE_LIST_CHANGED = 'mediaDevices.devicechange';\n\n/**\n * Indicates that the environment is currently showing permission prompt to\n * access camera and/or microphone. The event provides the following\n * parameters to its listeners:\n *\n * @param {'chrome'|'opera'|'firefox'|'safari'|'nwjs'\n *  |'react-native'|'android'} environmentType - type of browser or\n *  other execution environment.\n */\nexport const PERMISSION_PROMPT_IS_SHOWN\n    = 'mediaDevices.permissionPromptIsShown';\n","/*!\n * Bowser - a browser detector\n * https://github.com/ded/bowser\n * MIT License | (c) Dustin Diaz 2015\n */\n\n!function (root, name, definition) {\n  if (typeof module != 'undefined' && module.exports) module.exports = definition()\n  else if (typeof define == 'function' && define.amd) define(name, definition)\n  else root[name] = definition()\n}(this, 'bowser', function () {\n  /**\n    * See useragents.js for examples of navigator.userAgent\n    */\n\n  var t = true\n\n  function detect(ua) {\n\n    function getFirstMatch(regex) {\n      var match = ua.match(regex);\n      return (match && match.length > 1 && match[1]) || '';\n    }\n\n    function getSecondMatch(regex) {\n      var match = ua.match(regex);\n      return (match && match.length > 1 && match[2]) || '';\n    }\n\n    var iosdevice = getFirstMatch(/(ipod|iphone|ipad)/i).toLowerCase()\n      , likeAndroid = /like android/i.test(ua)\n      , android = !likeAndroid && /android/i.test(ua)\n      , nexusMobile = /nexus\\s*[0-6]\\s*/i.test(ua)\n      , nexusTablet = !nexusMobile && /nexus\\s*[0-9]+/i.test(ua)\n      , chromeos = /CrOS/.test(ua)\n      , silk = /silk/i.test(ua)\n      , sailfish = /sailfish/i.test(ua)\n      , tizen = /tizen/i.test(ua)\n      , webos = /(web|hpw)os/i.test(ua)\n      , windowsphone = /windows phone/i.test(ua)\n      , samsungBrowser = /SamsungBrowser/i.test(ua)\n      , windows = !windowsphone && /windows/i.test(ua)\n      , mac = !iosdevice && !silk && /macintosh/i.test(ua)\n      , linux = !android && !sailfish && !tizen && !webos && /linux/i.test(ua)\n      , edgeVersion = getSecondMatch(/edg([ea]|ios)\\/(\\d+(\\.\\d+)?)/i)\n      , versionIdentifier = getFirstMatch(/version\\/(\\d+(\\.\\d+)?)/i)\n      , tablet = /tablet/i.test(ua) && !/tablet pc/i.test(ua)\n      , mobile = !tablet && /[^-]mobi/i.test(ua)\n      , xbox = /xbox/i.test(ua)\n      , result\n\n    if (/opera/i.test(ua)) {\n      //  an old Opera\n      result = {\n        name: 'Opera'\n      , opera: t\n      , version: versionIdentifier || getFirstMatch(/(?:opera|opr|opios)[\\s\\/](\\d+(\\.\\d+)?)/i)\n      }\n    } else if (/opr\\/|opios/i.test(ua)) {\n      // a new Opera\n      result = {\n        name: 'Opera'\n        , opera: t\n        , version: getFirstMatch(/(?:opr|opios)[\\s\\/](\\d+(\\.\\d+)?)/i) || versionIdentifier\n      }\n    }\n    else if (/SamsungBrowser/i.test(ua)) {\n      result = {\n        name: 'Samsung Internet for Android'\n        , samsungBrowser: t\n        , version: versionIdentifier || getFirstMatch(/(?:SamsungBrowser)[\\s\\/](\\d+(\\.\\d+)?)/i)\n      }\n    }\n    else if (/coast/i.test(ua)) {\n      result = {\n        name: 'Opera Coast'\n        , coast: t\n        , version: versionIdentifier || getFirstMatch(/(?:coast)[\\s\\/](\\d+(\\.\\d+)?)/i)\n      }\n    }\n    else if (/yabrowser/i.test(ua)) {\n      result = {\n        name: 'Yandex Browser'\n      , yandexbrowser: t\n      , version: versionIdentifier || getFirstMatch(/(?:yabrowser)[\\s\\/](\\d+(\\.\\d+)?)/i)\n      }\n    }\n    else if (/ucbrowser/i.test(ua)) {\n      result = {\n          name: 'UC Browser'\n        , ucbrowser: t\n        , version: getFirstMatch(/(?:ucbrowser)[\\s\\/](\\d+(?:\\.\\d+)+)/i)\n      }\n    }\n    else if (/mxios/i.test(ua)) {\n      result = {\n        name: 'Maxthon'\n        , maxthon: t\n        , version: getFirstMatch(/(?:mxios)[\\s\\/](\\d+(?:\\.\\d+)+)/i)\n      }\n    }\n    else if (/epiphany/i.test(ua)) {\n      result = {\n        name: 'Epiphany'\n        , epiphany: t\n        , version: getFirstMatch(/(?:epiphany)[\\s\\/](\\d+(?:\\.\\d+)+)/i)\n      }\n    }\n    else if (/puffin/i.test(ua)) {\n      result = {\n        name: 'Puffin'\n        , puffin: t\n        , version: getFirstMatch(/(?:puffin)[\\s\\/](\\d+(?:\\.\\d+)?)/i)\n      }\n    }\n    else if (/sleipnir/i.test(ua)) {\n      result = {\n        name: 'Sleipnir'\n        , sleipnir: t\n        , version: getFirstMatch(/(?:sleipnir)[\\s\\/](\\d+(?:\\.\\d+)+)/i)\n      }\n    }\n    else if (/k-meleon/i.test(ua)) {\n      result = {\n        name: 'K-Meleon'\n        , kMeleon: t\n        , version: getFirstMatch(/(?:k-meleon)[\\s\\/](\\d+(?:\\.\\d+)+)/i)\n      }\n    }\n    else if (windowsphone) {\n      result = {\n        name: 'Windows Phone'\n      , osname: 'Windows Phone'\n      , windowsphone: t\n      }\n      if (edgeVersion) {\n        result.msedge = t\n        result.version = edgeVersion\n      }\n      else {\n        result.msie = t\n        result.version = getFirstMatch(/iemobile\\/(\\d+(\\.\\d+)?)/i)\n      }\n    }\n    else if (/msie|trident/i.test(ua)) {\n      result = {\n        name: 'Internet Explorer'\n      , msie: t\n      , version: getFirstMatch(/(?:msie |rv:)(\\d+(\\.\\d+)?)/i)\n      }\n    } else if (chromeos) {\n      result = {\n        name: 'Chrome'\n      , osname: 'Chrome OS'\n      , chromeos: t\n      , chromeBook: t\n      , chrome: t\n      , version: getFirstMatch(/(?:chrome|crios|crmo)\\/(\\d+(\\.\\d+)?)/i)\n      }\n    } else if (/edg([ea]|ios)/i.test(ua)) {\n      result = {\n        name: 'Microsoft Edge'\n      , msedge: t\n      , version: edgeVersion\n      }\n    }\n    else if (/vivaldi/i.test(ua)) {\n      result = {\n        name: 'Vivaldi'\n        , vivaldi: t\n        , version: getFirstMatch(/vivaldi\\/(\\d+(\\.\\d+)?)/i) || versionIdentifier\n      }\n    }\n    else if (sailfish) {\n      result = {\n        name: 'Sailfish'\n      , osname: 'Sailfish OS'\n      , sailfish: t\n      , version: getFirstMatch(/sailfish\\s?browser\\/(\\d+(\\.\\d+)?)/i)\n      }\n    }\n    else if (/seamonkey\\//i.test(ua)) {\n      result = {\n        name: 'SeaMonkey'\n      , seamonkey: t\n      , version: getFirstMatch(/seamonkey\\/(\\d+(\\.\\d+)?)/i)\n      }\n    }\n    else if (/firefox|iceweasel|fxios/i.test(ua)) {\n      result = {\n        name: 'Firefox'\n      , firefox: t\n      , version: getFirstMatch(/(?:firefox|iceweasel|fxios)[ \\/](\\d+(\\.\\d+)?)/i)\n      }\n      if (/\\((mobile|tablet);[^\\)]*rv:[\\d\\.]+\\)/i.test(ua)) {\n        result.firefoxos = t\n        result.osname = 'Firefox OS'\n      }\n    }\n    else if (silk) {\n      result =  {\n        name: 'Amazon Silk'\n      , silk: t\n      , version : getFirstMatch(/silk\\/(\\d+(\\.\\d+)?)/i)\n      }\n    }\n    else if (/phantom/i.test(ua)) {\n      result = {\n        name: 'PhantomJS'\n      , phantom: t\n      , version: getFirstMatch(/phantomjs\\/(\\d+(\\.\\d+)?)/i)\n      }\n    }\n    else if (/slimerjs/i.test(ua)) {\n      result = {\n        name: 'SlimerJS'\n        , slimer: t\n        , version: getFirstMatch(/slimerjs\\/(\\d+(\\.\\d+)?)/i)\n      }\n    }\n    else if (/blackberry|\\bbb\\d+/i.test(ua) || /rim\\stablet/i.test(ua)) {\n      result = {\n        name: 'BlackBerry'\n      , osname: 'BlackBerry OS'\n      , blackberry: t\n      , version: versionIdentifier || getFirstMatch(/blackberry[\\d]+\\/(\\d+(\\.\\d+)?)/i)\n      }\n    }\n    else if (webos) {\n      result = {\n        name: 'WebOS'\n      , osname: 'WebOS'\n      , webos: t\n      , version: versionIdentifier || getFirstMatch(/w(?:eb)?osbrowser\\/(\\d+(\\.\\d+)?)/i)\n      };\n      /touchpad\\//i.test(ua) && (result.touchpad = t)\n    }\n    else if (/bada/i.test(ua)) {\n      result = {\n        name: 'Bada'\n      , osname: 'Bada'\n      , bada: t\n      , version: getFirstMatch(/dolfin\\/(\\d+(\\.\\d+)?)/i)\n      };\n    }\n    else if (tizen) {\n      result = {\n        name: 'Tizen'\n      , osname: 'Tizen'\n      , tizen: t\n      , version: getFirstMatch(/(?:tizen\\s?)?browser\\/(\\d+(\\.\\d+)?)/i) || versionIdentifier\n      };\n    }\n    else if (/qupzilla/i.test(ua)) {\n      result = {\n        name: 'QupZilla'\n        , qupzilla: t\n        , version: getFirstMatch(/(?:qupzilla)[\\s\\/](\\d+(?:\\.\\d+)+)/i) || versionIdentifier\n      }\n    }\n    else if (/chromium/i.test(ua)) {\n      result = {\n        name: 'Chromium'\n        , chromium: t\n        , version: getFirstMatch(/(?:chromium)[\\s\\/](\\d+(?:\\.\\d+)?)/i) || versionIdentifier\n      }\n    }\n    else if (/chrome|crios|crmo/i.test(ua)) {\n      result = {\n        name: 'Chrome'\n        , chrome: t\n        , version: getFirstMatch(/(?:chrome|crios|crmo)\\/(\\d+(\\.\\d+)?)/i)\n      }\n    }\n    else if (android) {\n      result = {\n        name: 'Android'\n        , version: versionIdentifier\n      }\n    }\n    else if (/safari|applewebkit/i.test(ua)) {\n      result = {\n        name: 'Safari'\n      , safari: t\n      }\n      if (versionIdentifier) {\n        result.version = versionIdentifier\n      }\n    }\n    else if (iosdevice) {\n      result = {\n        name : iosdevice == 'iphone' ? 'iPhone' : iosdevice == 'ipad' ? 'iPad' : 'iPod'\n      }\n      // WTF: version is not part of user agent in web apps\n      if (versionIdentifier) {\n        result.version = versionIdentifier\n      }\n    }\n    else if(/googlebot/i.test(ua)) {\n      result = {\n        name: 'Googlebot'\n      , googlebot: t\n      , version: getFirstMatch(/googlebot\\/(\\d+(\\.\\d+))/i) || versionIdentifier\n      }\n    }\n    else {\n      result = {\n        name: getFirstMatch(/^(.*)\\/(.*) /),\n        version: getSecondMatch(/^(.*)\\/(.*) /)\n     };\n   }\n\n    // set webkit or gecko flag for browsers based on these engines\n    if (!result.msedge && /(apple)?webkit/i.test(ua)) {\n      if (/(apple)?webkit\\/537\\.36/i.test(ua)) {\n        result.name = result.name || \"Blink\"\n        result.blink = t\n      } else {\n        result.name = result.name || \"Webkit\"\n        result.webkit = t\n      }\n      if (!result.version && versionIdentifier) {\n        result.version = versionIdentifier\n      }\n    } else if (!result.opera && /gecko\\//i.test(ua)) {\n      result.name = result.name || \"Gecko\"\n      result.gecko = t\n      result.version = result.version || getFirstMatch(/gecko\\/(\\d+(\\.\\d+)?)/i)\n    }\n\n    // set OS flags for platforms that have multiple browsers\n    if (!result.windowsphone && (android || result.silk)) {\n      result.android = t\n      result.osname = 'Android'\n    } else if (!result.windowsphone && iosdevice) {\n      result[iosdevice] = t\n      result.ios = t\n      result.osname = 'iOS'\n    } else if (mac) {\n      result.mac = t\n      result.osname = 'macOS'\n    } else if (xbox) {\n      result.xbox = t\n      result.osname = 'Xbox'\n    } else if (windows) {\n      result.windows = t\n      result.osname = 'Windows'\n    } else if (linux) {\n      result.linux = t\n      result.osname = 'Linux'\n    }\n\n    function getWindowsVersion (s) {\n      switch (s) {\n        case 'NT': return 'NT'\n        case 'XP': return 'XP'\n        case 'NT 5.0': return '2000'\n        case 'NT 5.1': return 'XP'\n        case 'NT 5.2': return '2003'\n        case 'NT 6.0': return 'Vista'\n        case 'NT 6.1': return '7'\n        case 'NT 6.2': return '8'\n        case 'NT 6.3': return '8.1'\n        case 'NT 10.0': return '10'\n        default: return undefined\n      }\n    }\n\n    // OS version extraction\n    var osVersion = '';\n    if (result.windows) {\n      osVersion = getWindowsVersion(getFirstMatch(/Windows ((NT|XP)( \\d\\d?.\\d)?)/i))\n    } else if (result.windowsphone) {\n      osVersion = getFirstMatch(/windows phone (?:os)?\\s?(\\d+(\\.\\d+)*)/i);\n    } else if (result.mac) {\n      osVersion = getFirstMatch(/Mac OS X (\\d+([_\\.\\s]\\d+)*)/i);\n      osVersion = osVersion.replace(/[_\\s]/g, '.');\n    } else if (iosdevice) {\n      osVersion = getFirstMatch(/os (\\d+([_\\s]\\d+)*) like mac os x/i);\n      osVersion = osVersion.replace(/[_\\s]/g, '.');\n    } else if (android) {\n      osVersion = getFirstMatch(/android[ \\/-](\\d+(\\.\\d+)*)/i);\n    } else if (result.webos) {\n      osVersion = getFirstMatch(/(?:web|hpw)os\\/(\\d+(\\.\\d+)*)/i);\n    } else if (result.blackberry) {\n      osVersion = getFirstMatch(/rim\\stablet\\sos\\s(\\d+(\\.\\d+)*)/i);\n    } else if (result.bada) {\n      osVersion = getFirstMatch(/bada\\/(\\d+(\\.\\d+)*)/i);\n    } else if (result.tizen) {\n      osVersion = getFirstMatch(/tizen[\\/\\s](\\d+(\\.\\d+)*)/i);\n    }\n    if (osVersion) {\n      result.osversion = osVersion;\n    }\n\n    // device type extraction\n    var osMajorVersion = !result.windows && osVersion.split('.')[0];\n    if (\n         tablet\n      || nexusTablet\n      || iosdevice == 'ipad'\n      || (android && (osMajorVersion == 3 || (osMajorVersion >= 4 && !mobile)))\n      || result.silk\n    ) {\n      result.tablet = t\n    } else if (\n         mobile\n      || iosdevice == 'iphone'\n      || iosdevice == 'ipod'\n      || android\n      || nexusMobile\n      || result.blackberry\n      || result.webos\n      || result.bada\n    ) {\n      result.mobile = t\n    }\n\n    // Graded Browser Support\n    // http://developer.yahoo.com/yui/articles/gbs\n    if (result.msedge ||\n        (result.msie && result.version >= 10) ||\n        (result.yandexbrowser && result.version >= 15) ||\n\t\t    (result.vivaldi && result.version >= 1.0) ||\n        (result.chrome && result.version >= 20) ||\n        (result.samsungBrowser && result.version >= 4) ||\n        (result.firefox && result.version >= 20.0) ||\n        (result.safari && result.version >= 6) ||\n        (result.opera && result.version >= 10.0) ||\n        (result.ios && result.osversion && result.osversion.split(\".\")[0] >= 6) ||\n        (result.blackberry && result.version >= 10.1)\n        || (result.chromium && result.version >= 20)\n        ) {\n      result.a = t;\n    }\n    else if ((result.msie && result.version < 10) ||\n        (result.chrome && result.version < 20) ||\n        (result.firefox && result.version < 20.0) ||\n        (result.safari && result.version < 6) ||\n        (result.opera && result.version < 10.0) ||\n        (result.ios && result.osversion && result.osversion.split(\".\")[0] < 6)\n        || (result.chromium && result.version < 20)\n        ) {\n      result.c = t\n    } else result.x = t\n\n    return result\n  }\n\n  var bowser = detect(typeof navigator !== 'undefined' ? navigator.userAgent || '' : '')\n\n  bowser.test = function (browserList) {\n    for (var i = 0; i < browserList.length; ++i) {\n      var browserItem = browserList[i];\n      if (typeof browserItem=== 'string') {\n        if (browserItem in bowser) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Get version precisions count\n   *\n   * @example\n   *   getVersionPrecision(\"1.10.3\") // 3\n   *\n   * @param  {string} version\n   * @return {number}\n   */\n  function getVersionPrecision(version) {\n    return version.split(\".\").length;\n  }\n\n  /**\n   * Array::map polyfill\n   *\n   * @param  {Array} arr\n   * @param  {Function} iterator\n   * @return {Array}\n   */\n  function map(arr, iterator) {\n    var result = [], i;\n    if (Array.prototype.map) {\n      return Array.prototype.map.call(arr, iterator);\n    }\n    for (i = 0; i < arr.length; i++) {\n      result.push(iterator(arr[i]));\n    }\n    return result;\n  }\n\n  /**\n   * Calculate browser version weight\n   *\n   * @example\n   *   compareVersions(['1.10.2.1',  '1.8.2.1.90'])    // 1\n   *   compareVersions(['1.010.2.1', '1.09.2.1.90']);  // 1\n   *   compareVersions(['1.10.2.1',  '1.10.2.1']);     // 0\n   *   compareVersions(['1.10.2.1',  '1.0800.2']);     // -1\n   *\n   * @param  {Array<String>} versions versions to compare\n   * @return {Number} comparison result\n   */\n  function compareVersions(versions) {\n    // 1) get common precision for both versions, for example for \"10.0\" and \"9\" it should be 2\n    var precision = Math.max(getVersionPrecision(versions[0]), getVersionPrecision(versions[1]));\n    var chunks = map(versions, function (version) {\n      var delta = precision - getVersionPrecision(version);\n\n      // 2) \"9\" -> \"9.0\" (for precision = 2)\n      version = version + new Array(delta + 1).join(\".0\");\n\n      // 3) \"9.0\" -> [\"000000000\"\", \"000000009\"]\n      return map(version.split(\".\"), function (chunk) {\n        return new Array(20 - chunk.length).join(\"0\") + chunk;\n      }).reverse();\n    });\n\n    // iterate in reverse order by reversed chunks array\n    while (--precision >= 0) {\n      // 4) compare: \"000000009\" > \"000000010\" = false (but \"9\" > \"10\" = true)\n      if (chunks[0][precision] > chunks[1][precision]) {\n        return 1;\n      }\n      else if (chunks[0][precision] === chunks[1][precision]) {\n        if (precision === 0) {\n          // all version chunks are same\n          return 0;\n        }\n      }\n      else {\n        return -1;\n      }\n    }\n  }\n\n  /**\n   * Check if browser is unsupported\n   *\n   * @example\n   *   bowser.isUnsupportedBrowser({\n   *     msie: \"10\",\n   *     firefox: \"23\",\n   *     chrome: \"29\",\n   *     safari: \"5.1\",\n   *     opera: \"16\",\n   *     phantom: \"534\"\n   *   });\n   *\n   * @param  {Object}  minVersions map of minimal version to browser\n   * @param  {Boolean} [strictMode = false] flag to return false if browser wasn't found in map\n   * @param  {String}  [ua] user agent string\n   * @return {Boolean}\n   */\n  function isUnsupportedBrowser(minVersions, strictMode, ua) {\n    var _bowser = bowser;\n\n    // make strictMode param optional with ua param usage\n    if (typeof strictMode === 'string') {\n      ua = strictMode;\n      strictMode = void(0);\n    }\n\n    if (strictMode === void(0)) {\n      strictMode = false;\n    }\n    if (ua) {\n      _bowser = detect(ua);\n    }\n\n    var version = \"\" + _bowser.version;\n    for (var browser in minVersions) {\n      if (minVersions.hasOwnProperty(browser)) {\n        if (_bowser[browser]) {\n          if (typeof minVersions[browser] !== 'string') {\n            throw new Error('Browser version in the minVersion map should be a string: ' + browser + ': ' + String(minVersions));\n          }\n\n          // browser version and min supported version.\n          return compareVersions([version, minVersions[browser]]) < 0;\n        }\n      }\n    }\n\n    return strictMode; // not found\n  }\n\n  /**\n   * Check if browser is supported\n   *\n   * @param  {Object} minVersions map of minimal version to browser\n   * @param  {Boolean} [strictMode = false] flag to return false if browser wasn't found in map\n   * @param  {String}  [ua] user agent string\n   * @return {Boolean}\n   */\n  function check(minVersions, strictMode, ua) {\n    return !isUnsupportedBrowser(minVersions, strictMode, ua);\n  }\n\n  bowser.isUnsupportedBrowser = isUnsupportedBrowser;\n  bowser.compareVersions = compareVersions;\n  bowser.check = check;\n\n  /*\n   * Set our detect method to the main bowser object so we can\n   * reuse it to test other user agents.\n   * This is needed to implement future tests.\n   */\n  bowser._detect = detect;\n\n  /*\n   * Set our detect public method to the main bowser object\n   * This is needed to implement bowser in server side\n   */\n  bowser.detect = detect;\n  return bowser\n});\n","import SDPUtil from './SDPUtil';\n\n// this could be useful in Array.prototype.\n/**\n *\n * @param array1\n * @param array2\n */\nfunction arrayEquals(array1, array2) {\n    // if the other array is a falsy value, return\n    if (!array2) {\n        return false;\n    }\n\n    // compare lengths - can save a lot of time\n    if (array1.length !== array2.length) {\n        return false;\n    }\n\n    for (let i = 0, l = array1.length; i < l; i++) {\n        // Check if we have nested arrays\n        if (array1[i] instanceof Array && array2[i] instanceof Array) {\n            // recurse into the nested arrays\n            if (!array1[i].equals(array2[i])) {\n                return false;\n            }\n        } else if (array1[i] !== array2[i]) {\n            // Warning - two different object instances will never be\n            // equal: {x:20} != {x:20}\n            return false;\n        }\n    }\n\n    return true;\n}\n\n/**\n *\n * @param mySDP\n * @param otherSDP\n */\nexport default function SDPDiffer(mySDP, otherSDP) {\n    this.mySDP = mySDP;\n    this.otherSDP = otherSDP;\n    if (!mySDP) {\n        throw new Error('\"mySDP\" is undefined!');\n    } else if (!otherSDP) {\n        throw new Error('\"otherSDP\" is undefined!');\n    }\n}\n\n/**\n * Returns map of MediaChannel that contains media contained in\n * 'mySDP', but not contained in 'otherSdp'. Mapped by channel idx.\n */\nSDPDiffer.prototype.getNewMedia = function() {\n\n    const myMedias = this.mySDP.getMediaSsrcMap();\n    const othersMedias = this.otherSDP.getMediaSsrcMap();\n    const newMedia = {};\n\n    Object.keys(othersMedias).forEach(othersMediaIdx => {\n        const myMedia = myMedias[othersMediaIdx];\n        const othersMedia = othersMedias[othersMediaIdx];\n\n        if (!myMedia && othersMedia) {\n            // Add whole channel\n            newMedia[othersMediaIdx] = othersMedia;\n\n            return;\n        }\n\n        // Look for new ssrcs across the channel\n        Object.keys(othersMedia.ssrcs).forEach(ssrc => {\n            if (Object.keys(myMedia.ssrcs).indexOf(ssrc) === -1) {\n                // Allocate channel if we've found ssrc that doesn't exist in\n                // our channel\n                if (!newMedia[othersMediaIdx]) {\n                    newMedia[othersMediaIdx] = {\n                        mediaindex: othersMedia.mediaindex,\n                        mid: othersMedia.mid,\n                        ssrcs: {},\n                        ssrcGroups: []\n                    };\n                }\n                newMedia[othersMediaIdx].ssrcs[ssrc] = othersMedia.ssrcs[ssrc];\n            } else if (othersMedia.ssrcs[ssrc].lines\n                        && myMedia.ssrcs[ssrc].lines) {\n                // we want to detect just changes in adding/removing msid\n                const myContainMsid = myMedia.ssrcs[ssrc].lines.find(\n                    line => line.indexOf('msid') !== -1) !== undefined;\n                const newContainMsid = othersMedia.ssrcs[ssrc].lines.find(\n                    line => line.indexOf('msid') !== -1) !== undefined;\n\n                if (myContainMsid !== newContainMsid) {\n                    if (!newMedia[othersMediaIdx]) {\n                        newMedia[othersMediaIdx] = {\n                            mediaindex: othersMedia.mediaindex,\n                            mid: othersMedia.mid,\n                            ssrcs: {},\n                            ssrcGroups: []\n                        };\n                    }\n                    newMedia[othersMediaIdx].ssrcs[ssrc]\n                        = othersMedia.ssrcs[ssrc];\n                }\n            }\n        });\n\n        // Look for new ssrc groups across the channels\n        othersMedia.ssrcGroups.forEach(otherSsrcGroup => {\n\n            // try to match the other ssrc-group with an ssrc-group of ours\n            let matched = false;\n\n            for (let i = 0; i < myMedia.ssrcGroups.length; i++) {\n                const mySsrcGroup = myMedia.ssrcGroups[i];\n\n                if (otherSsrcGroup.semantics === mySsrcGroup.semantics\n                    && arrayEquals(otherSsrcGroup.ssrcs, mySsrcGroup.ssrcs)) {\n\n                    matched = true;\n                    break;\n                }\n            }\n\n            if (!matched) {\n                // Allocate channel if we've found an ssrc-group that doesn't\n                // exist in our channel\n\n                if (!newMedia[othersMediaIdx]) {\n                    newMedia[othersMediaIdx] = {\n                        mediaindex: othersMedia.mediaindex,\n                        mid: othersMedia.mid,\n                        ssrcs: {},\n                        ssrcGroups: []\n                    };\n                }\n                newMedia[othersMediaIdx].ssrcGroups.push(otherSsrcGroup);\n            }\n        });\n    });\n\n    return newMedia;\n};\n\n/**\n * TODO: document!\n */\nSDPDiffer.prototype.toJingle = function(modify) {\n    const sdpMediaSsrcs = this.getNewMedia();\n\n    let modified = false;\n\n    Object.keys(sdpMediaSsrcs).forEach(mediaindex => {\n        modified = true;\n        const media = sdpMediaSsrcs[mediaindex];\n\n        modify.c('content', { name: media.mid });\n\n        modify.c('description',\n            { xmlns: 'urn:xmpp:jingle:apps:rtp:1',\n                media: media.mid });\n\n        // FIXME: not completely sure this operates on blocks and / or handles\n        // different ssrcs correctly\n        // generate sources from lines\n        Object.keys(media.ssrcs).forEach(ssrcNum => {\n            const mediaSsrc = media.ssrcs[ssrcNum];\n\n            modify.c('source', { xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0' });\n            modify.attrs({ ssrc: mediaSsrc.ssrc });\n\n            // iterate over ssrc lines\n            mediaSsrc.lines.forEach(line => {\n                const idx = line.indexOf(' ');\n                const kv = line.substr(idx + 1);\n\n                modify.c('parameter');\n                if (kv.indexOf(':') === -1) {\n                    modify.attrs({ name: kv });\n                } else {\n                    const nv = kv.split(':', 2);\n                    const name = nv[0];\n                    const value = SDPUtil.filterSpecialChars(nv[1]);\n\n                    modify.attrs({ name });\n                    modify.attrs({ value });\n                }\n                modify.up(); // end of parameter\n            });\n            modify.up(); // end of source\n        });\n\n        // generate source groups from lines\n        media.ssrcGroups.forEach(ssrcGroup => {\n            if (ssrcGroup.ssrcs.length) {\n\n                modify.c('ssrc-group', {\n                    semantics: ssrcGroup.semantics,\n                    xmlns: 'urn:xmpp:jingle:apps:rtp:ssma:0'\n                });\n\n                ssrcGroup.ssrcs.forEach(ssrc => {\n                    modify.c('source', { ssrc })\n                        .up(); // end of source\n                });\n                modify.up(); // end of ssrc-group\n            }\n        });\n\n        modify.up(); // end of description\n        modify.up(); // end of content\n    });\n\n    return modified;\n};\n","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","/**\n * Indicates that the end-to-end round-trip-time for a participant has changed.\n */\nexport const E2E_RTT_CHANGED = 'e2eping.e2e_rtt_changed';\n","/**\n * Provides statistics for the local stream.\n */\n\n/**\n * Size of the webaudio analyzer buffer.\n * @type {number}\n */\nconst WEBAUDIO_ANALYZER_FFT_SIZE = 2048;\n\n/**\n * Value of the webaudio analyzer smoothing time parameter.\n * @type {number}\n */\nconst WEBAUDIO_ANALYZER_SMOOTING_TIME = 0.8;\n\nwindow.AudioContext = window.AudioContext || window.webkitAudioContext;\n\nlet context = null;\n\nif (window.AudioContext) {\n    context = new AudioContext();\n\n    // XXX Not all browsers define a suspend method on AudioContext. As the\n    // invocation is at the (ES6 module) global execution level, it breaks the\n    // loading of the lib-jitsi-meet library in such browsers and, consequently,\n    // the loading of the very Web app that uses the lib-jitsi-meet library. For\n    // example, Google Chrome 40 on Android does not define the method but we\n    // still want to be able to load the lib-jitsi-meet library there and\n    // display a page which notifies the user that the Web app is not supported\n    // there.\n    context.suspend && context.suspend();\n}\n\n/**\n * Converts time domain data array to audio level.\n * @param samples the time domain data array.\n * @returns {number} the audio level\n */\nfunction timeDomainDataToAudioLevel(samples) {\n\n    let maxVolume = 0;\n\n    const length = samples.length;\n\n    for (let i = 0; i < length; i++) {\n        if (maxVolume < samples[i]) {\n            maxVolume = samples[i];\n        }\n    }\n\n    return parseFloat(((maxVolume - 127) / 128).toFixed(3));\n}\n\n/**\n * Animates audio level change\n * @param newLevel the new audio level\n * @param lastLevel the last audio level\n * @returns {Number} the audio level to be set\n */\nfunction animateLevel(newLevel, lastLevel) {\n    let value = 0;\n    const diff = lastLevel - newLevel;\n\n    if (diff > 0.2) {\n        value = lastLevel - 0.2;\n    } else if (diff < -0.4) {\n        value = lastLevel + 0.4;\n    } else {\n        value = newLevel;\n    }\n\n    return parseFloat(value.toFixed(3));\n}\n\n\n/**\n * <tt>LocalStatsCollector</tt> calculates statistics for the local stream.\n *\n * @param stream the local stream\n * @param interval stats refresh interval given in ms.\n * @param callback function that receives the audio levels.\n * @constructor\n */\nexport default function LocalStatsCollector(stream, interval, callback) {\n    this.stream = stream;\n    this.intervalId = null;\n    this.intervalMilis = interval;\n    this.audioLevel = 0;\n    this.callback = callback;\n}\n\n/**\n * Starts the collecting the statistics.\n */\nLocalStatsCollector.prototype.start = function() {\n    if (!LocalStatsCollector.isLocalStatsSupported()) {\n        return;\n    }\n    context.resume();\n    const analyser = context.createAnalyser();\n\n    analyser.smoothingTimeConstant = WEBAUDIO_ANALYZER_SMOOTING_TIME;\n    analyser.fftSize = WEBAUDIO_ANALYZER_FFT_SIZE;\n\n    const source = context.createMediaStreamSource(this.stream);\n\n    source.connect(analyser);\n\n\n    const self = this;\n\n    this.intervalId = setInterval(\n        () => {\n            const array = new Uint8Array(analyser.frequencyBinCount);\n\n            analyser.getByteTimeDomainData(array);\n            const audioLevel = timeDomainDataToAudioLevel(array);\n\n            if (audioLevel !== self.audioLevel) {\n                self.audioLevel = animateLevel(audioLevel, self.audioLevel);\n                self.callback(self.audioLevel);\n            }\n        },\n        this.intervalMilis\n    );\n};\n\n/**\n * Stops collecting the statistics.\n */\nLocalStatsCollector.prototype.stop = function() {\n    if (this.intervalId) {\n        clearInterval(this.intervalId);\n        this.intervalId = null;\n    }\n};\n\n/**\n * Checks if the environment has the necessary conditions to support\n * collecting stats from local streams.\n *\n * @returns {boolean}\n */\nLocalStatsCollector.isLocalStatsSupported = function() {\n    return Boolean(context);\n};\n","const currentExecutingScript = require('current-executing-script');\n\n/* eslint-disable max-params */\n\n/**\n * Implements utility functions which facilitate the dealing with scripts such\n * as the download and execution of a JavaScript file.\n */\nconst ScriptUtil = {\n    /**\n     * Loads a script from a specific source.\n     *\n     * @param src the source from the which the script is to be (down)loaded\n     * @param async true to asynchronously load the script or false to\n     * synchronously load the script\n     * @param prepend true to schedule the loading of the script as soon as\n     * possible or false to schedule the loading of the script at the end of the\n     * scripts known at the time\n     * @param relativeURL whether we need load the library from url relative\n     * to the url that lib-jitsi-meet was loaded. Useful when sourcing the\n     * library from different location than the app that is using it\n     * @param loadCallback on load callback function\n     * @param errorCallback callback to be called on error loading the script\n     */\n    loadScript(\n            src,\n            async,\n            prepend,\n            relativeURL,\n            loadCallback,\n            errorCallback) {\n        const d = document;\n        const tagName = 'script';\n        const script = d.createElement(tagName);\n        const referenceNode = d.getElementsByTagName(tagName)[0];\n\n        script.async = async;\n\n        if (relativeURL) {\n            // finds the src url of the current loaded script\n            // and use it as base of the src supplied argument\n            const scriptEl = currentExecutingScript();\n\n            if (scriptEl) {\n                const scriptSrc = scriptEl.src;\n                const baseScriptSrc\n                    = scriptSrc.substring(0, scriptSrc.lastIndexOf('/') + 1);\n\n                if (scriptSrc && baseScriptSrc) {\n                    // eslint-disable-next-line no-param-reassign\n                    src = baseScriptSrc + src;\n                }\n            }\n        }\n\n        if (loadCallback) {\n            script.onload = loadCallback;\n        }\n        if (errorCallback) {\n            script.onerror = errorCallback;\n        }\n\n        script.src = src;\n        if (prepend) {\n            referenceNode.parentNode.insertBefore(script, referenceNode);\n        } else {\n            referenceNode.parentNode.appendChild(script);\n        }\n    }\n};\n\n/* eslint-enable max-params */\n\nmodule.exports = ScriptUtil;\n","/**\n * The transciption is on.\n *\n * @type {String}\n */\nexport const ON = 'on';\n\n/**\n * The transciption is off.\n *\n * @type {String}\n */\nexport const OFF = 'off';\n","/* global __filename, module */\nimport EventEmitter from 'events';\nimport { getLogger } from 'jitsi-meet-logger';\nimport * as JitsiTrackEvents from '../../JitsiTrackEvents';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport RTCUtils from './RTCUtils';\n\nconst logger = getLogger(__filename);\n\n/**\n * Maps our handler types to MediaStreamTrack properties.\n */\nconst trackHandler2Prop = {\n    'track_mute': 'onmute', // Not supported on FF\n    'track_unmute': 'onunmute',\n    'track_ended': 'onended'\n};\n\n/**\n * Adds onended/oninactive handler to a MediaStream.\n * @param mediaStream a MediaStream to attach onended/oninactive handler\n * @param handler the handler\n */\nfunction addMediaStreamInactiveHandler(mediaStream, handler) {\n    mediaStream.oninactive = handler;\n}\n\n/**\n * Represents a single media track (either audio or video).\n */\nexport default class JitsiTrack extends EventEmitter {\n    /* eslint-disable max-params */\n    /**\n     * Represents a single media track (either audio or video).\n     * @constructor\n     * @param conference the rtc instance\n     * @param stream the WebRTC MediaStream instance\n     * @param track the WebRTC MediaStreamTrack instance, must be part of\n     * the given <tt>stream</tt>.\n     * @param streamInactiveHandler the function that will handle\n     *        onended/oninactive events of the stream.\n     * @param trackMediaType the media type of the JitsiTrack\n     * @param videoType the VideoType for this track if any\n     */\n    constructor(\n            conference,\n            stream,\n            track,\n            streamInactiveHandler,\n            trackMediaType,\n            videoType) {\n        super();\n\n        // aliases for addListener/removeListener\n        this.addEventListener = this.addListener;\n        this.removeEventListener = this.off = this.removeListener;\n\n        /**\n         * Array with the HTML elements that are displaying the streams.\n         * @type {Array}\n         */\n        this.containers = [];\n        this.conference = conference;\n        this.audioLevel = -1;\n        this.type = trackMediaType;\n        this.track = track;\n        this.videoType = videoType;\n        this.handlers = new Map();\n\n        /**\n         * Indicates whether this JitsiTrack has been disposed. If true, this\n         * JitsiTrack is to be considered unusable and operations involving it\n         * are to fail (e.g. {@link JitsiConference#addTrack(JitsiTrack)},\n         * {@link JitsiConference#removeTrack(JitsiTrack)}).\n         * @type {boolean}\n         */\n        this.disposed = false;\n\n        /**\n         * The inactive handler which will be triggered when the underlying\n         * <tt>MediaStream</tt> ends.\n         *\n         * @private\n         * @type {Function}\n         */\n        this._streamInactiveHandler = streamInactiveHandler;\n\n        this._setStream(stream);\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Sets handler to the WebRTC MediaStream or MediaStreamTrack object\n     * depending on the passed type.\n     * @param {string} type the type of the handler that is going to be set\n     * @param {Function} handler the handler.\n     */\n    _setHandler(type, handler) {\n        if (!trackHandler2Prop.hasOwnProperty(type)) {\n            logger.error(`Invalid handler type ${type}`);\n\n            return;\n        }\n        if (handler) {\n            this.handlers.set(type, handler);\n        } else {\n            this.handlers.delete(type);\n        }\n\n        if (this.stream) {\n            for (const track of this.stream.getTracks()) {\n                track[trackHandler2Prop[type]] = handler;\n            }\n        }\n    }\n\n    /**\n     * Unregisters all event handlers bound to the underlying media stream/track\n     * @private\n     */\n    _unregisterHandlers() {\n        if (!this.stream) {\n            logger.warn(\n                `${this}: unable to unregister handlers - no stream object`);\n\n            return;\n        }\n\n        for (const type of this.handlers.keys()) {\n            // FIXME Why only video tracks?\n            for (const videoTrack of this.stream.getVideoTracks()) {\n                videoTrack[trackHandler2Prop[type]] = undefined;\n            }\n        }\n        if (this._streamInactiveHandler) {\n            addMediaStreamInactiveHandler(this.stream, undefined);\n        }\n    }\n\n    /**\n     * Sets the stream property of JitsiTrack object and sets all stored\n     * handlers to it.\n     *\n     * @param {MediaStream} stream the new stream.\n     * @protected\n     */\n    _setStream(stream) {\n        if (this.stream === stream) {\n            return;\n        }\n\n        this.stream = stream;\n\n        // TODO Practically, that's like the opposite of _unregisterHandlers\n        // i.e. may be abstracted into a function/method called\n        // _registerHandlers for clarity and easing the maintenance of the two\n        // pieces of source code.\n        if (this.stream) {\n            for (const type of this.handlers.keys()) {\n                this._setHandler(type, this.handlers.get(type));\n            }\n            if (this._streamInactiveHandler) {\n                addMediaStreamInactiveHandler(\n                    this.stream, this._streamInactiveHandler);\n            }\n        }\n    }\n\n    /**\n     * Returns the type (audio or video) of this track.\n     */\n    getType() {\n        return this.type;\n    }\n\n    /**\n     * Check if this is an audio track.\n     */\n    isAudioTrack() {\n        return this.getType() === MediaType.AUDIO;\n    }\n\n    /**\n     * Checks whether the underlying WebRTC <tt>MediaStreamTrack</tt> is muted\n     * according to it's 'muted' field status.\n     * @return {boolean} <tt>true</tt> if the underlying\n     * <tt>MediaStreamTrack</tt> is muted or <tt>false</tt> otherwise.\n     */\n    isWebRTCTrackMuted() {\n        return this.track && this.track.muted;\n    }\n\n    /**\n     * Check if this is a video track.\n     */\n    isVideoTrack() {\n        return this.getType() === MediaType.VIDEO;\n    }\n\n    /**\n     * Checks whether this is a local track.\n     * @abstract\n     * @return {boolean} 'true' if it's a local track or 'false' otherwise.\n     */\n    isLocal() {\n        throw new Error('Not implemented by subclass');\n    }\n\n    /**\n     * Returns the WebRTC MediaStream instance.\n     */\n    getOriginalStream() {\n        return this.stream;\n    }\n\n    /**\n     * Returns the ID of the underlying WebRTC Media Stream(if any)\n     * @returns {String|null}\n     */\n    getStreamId() {\n        return this.stream ? this.stream.id : null;\n    }\n\n    /**\n     * Return the underlying WebRTC MediaStreamTrack\n     * @returns {MediaStreamTrack}\n     */\n    getTrack() {\n        return this.track;\n    }\n\n    /**\n     * Returns the ID of the underlying WebRTC MediaStreamTrack(if any)\n     * @returns {String|null}\n     */\n    getTrackId() {\n        return this.track ? this.track.id : null;\n    }\n\n    /**\n     * Return meaningful usage label for this track depending on it's media and\n     * eventual video type.\n     * @returns {string}\n     */\n    getUsageLabel() {\n        if (this.isAudioTrack()) {\n            return 'mic';\n        }\n\n        return this.videoType ? this.videoType : 'default';\n    }\n\n    /**\n     * Eventually will trigger RTCEvents.TRACK_ATTACHED event.\n     * @param container the video/audio container to which this stream is\n     *        attached and for which event will be fired.\n     * @private\n     */\n    _maybeFireTrackAttached(container) {\n        if (this.conference && container) {\n            this.conference._onTrackAttach(this, container);\n        }\n    }\n\n    /**\n     * Attaches the MediaStream of this track to an HTML container.\n     * Adds the container to the list of containers that are displaying the\n     * track.\n     *\n     * @param container the HTML container which can be 'video' or 'audio'\n     * element.\n     *\n     * @returns {void}\n     */\n    attach(container) {\n        if (this.stream) {\n            this._onTrackAttach(container);\n            RTCUtils.attachMediaStream(container, this.stream);\n        }\n        this.containers.push(container);\n        this._maybeFireTrackAttached(container);\n        this._attachTTFMTracker(container);\n    }\n\n    /**\n     * Removes this JitsiTrack from the passed HTML container.\n     *\n     * @param container the HTML container to detach from this JitsiTrack. If\n     * <tt>null</tt> or <tt>undefined</tt>, all containers are removed. A\n     * container can be a 'video', 'audio' or 'object' HTML element instance to\n     * which this JitsiTrack is currently attached.\n     */\n    detach(container) {\n        for (let cs = this.containers, i = cs.length - 1; i >= 0; --i) {\n            const c = cs[i];\n\n            if (!container) {\n                this._onTrackDetach(c);\n                RTCUtils.attachMediaStream(c, null);\n            }\n            if (!container || c === container) {\n                cs.splice(i, 1);\n            }\n        }\n\n        if (container) {\n            this._onTrackDetach(container);\n            RTCUtils.attachMediaStream(container, null);\n        }\n    }\n\n    /**\n     * Called when the track has been attached to a new container.\n     *\n     * @param {HTMLElement} container the HTML container which can be 'video' or\n     * 'audio' element.\n     * @private\n     */\n    _onTrackAttach(container) { // eslint-disable-line no-unused-vars\n        // Should be defined by the classes that are extending JitsiTrack\n    }\n\n    /**\n     * Called when the track has been detached from a container.\n     *\n     * @param {HTMLElement} container the HTML container which can be 'video' or\n     * 'audio' element.\n     * @private\n     */\n    _onTrackDetach(container) { // eslint-disable-line no-unused-vars\n        // Should be defined by the classes that are extending JitsiTrack\n    }\n\n    /**\n     * Attach time to first media tracker only if there is conference and only\n     * for the first element.\n     *\n     * @param {HTMLElement} container the HTML container which can be 'video' or\n     * 'audio' element.\n     * @private\n     */\n    _attachTTFMTracker(container) { // eslint-disable-line no-unused-vars\n        // Should be defined by the classes that are extending JitsiTrack\n    }\n\n    /**\n     * Removes attached event listeners.\n     *\n     * @returns {Promise}\n     */\n    dispose() {\n        this.removeAllListeners();\n\n        this.disposed = true;\n\n        return Promise.resolve();\n    }\n\n    /**\n     * Returns true if this is a video track and the source of the video is a\n     * screen capture as opposed to a camera.\n     */\n    isScreenSharing() {\n        // FIXME: Should be fixed or removed.\n    }\n\n    /**\n     * Returns id of the track.\n     * @returns {string|null} id of the track or null if this is fake track.\n     */\n    getId() {\n        if (this.stream) {\n            return RTCUtils.getStreamID(this.stream);\n        }\n\n        return null;\n    }\n\n    /**\n     * Checks whether the MediaStream is active/not ended.\n     * When there is no check for active we don't have information and so\n     * will return that stream is active (in case of FF).\n     * @returns {boolean} whether MediaStream is active.\n     */\n    isActive() {\n        if (typeof this.stream.active !== 'undefined') {\n            return this.stream.active;\n        }\n\n        return true;\n    }\n\n    /**\n     * Sets the audio level for the stream\n     * @param {number} audioLevel value between 0 and 1\n     * @param {TraceablePeerConnection} [tpc] the peerconnection instance which\n     * is source for the audio level. It can be <tt>undefined</tt> for\n     * a local track if the audio level was measured outside of the\n     * peerconnection (see /modules/statistics/LocalStatsCollector.js).\n     */\n    setAudioLevel(audioLevel, tpc) {\n        if (this.audioLevel !== audioLevel) {\n            this.audioLevel = audioLevel;\n            this.emit(\n                JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED,\n                audioLevel,\n                tpc);\n        }\n    }\n\n    /**\n     * Returns the msid of the stream attached to the JitsiTrack object or null\n     * if no stream is attached.\n     */\n    getMSID() {\n        const streamId = this.getStreamId();\n        const trackId = this.getTrackId();\n\n        return streamId && trackId ? `${streamId} ${trackId}` : null;\n    }\n\n    /**\n     * Sets new audio output device for track's DOM elements. Video tracks are\n     * ignored.\n     * @param {string} audioOutputDeviceId - id of 'audiooutput' device from\n     *      navigator.mediaDevices.enumerateDevices(), '' for default device\n     * @emits JitsiTrackEvents.TRACK_AUDIO_OUTPUT_CHANGED\n     * @returns {Promise}\n     */\n    setAudioOutput(audioOutputDeviceId) {\n        if (!RTCUtils.isDeviceChangeAvailable('output')) {\n            return Promise.reject(\n                new Error('Audio output device change is not supported'));\n        }\n\n        // All audio communication is done through audio tracks, so ignore\n        // changing audio output for video tracks at all.\n        if (this.isVideoTrack()) {\n            return Promise.resolve();\n        }\n\n        return (\n            Promise.all(\n                this.containers.map(\n                    element =>\n                        element.setSinkId(audioOutputDeviceId)\n                            .catch(error => {\n                                logger.warn(\n                                    'Failed to change audio output device on'\n                                        + ' element. Default or previously set'\n                                        + ' audio output device will be used.',\n                                    element,\n                                    error);\n                                throw error;\n                            }))\n            )\n                .then(() => {\n                    this.emit(\n                        JitsiTrackEvents.TRACK_AUDIO_OUTPUT_CHANGED,\n                        audioOutputDeviceId);\n                }));\n    }\n}\n","\n\n/**\n * The method will increase the given number by 1. If the given counter is equal\n * or greater to {@link Number.MAX_SAFE_INTEGER} then it will be rolled back to\n * 1.\n * @param {number} number - An integer counter value to be incremented.\n * @return {number} the next counter value increased by 1 (see the description\n * above for exception).\n */\nexport function safeCounterIncrement(number) {\n    let nextValue = number;\n\n    if (number >= Number.MAX_SAFE_INTEGER) {\n        nextValue = 0;\n    }\n\n    return nextValue + 1;\n}\n","/**\n * A model for keeping track of each user's total\n * time as a dominant speaker. The model also\n * keeps track of the user's last known name\n * in case the user has left the meeting,\n * which is also tracked.\n */\nclass SpeakerStats {\n    /**\n     * Initializes a new SpeakerStats instance.\n     *\n     * @constructor\n     * @param {string} userId - The id of the user being tracked.\n     * @param {string} displayName - The name of the user being tracked.\n     * @param {boolean} isLocalStats - True if the stats model tracks\n     * the local user.\n     * @returns {void}\n     */\n    constructor(userId, displayName, isLocalStats) {\n        this._userId = userId;\n        this.setDisplayName(displayName);\n        this._isLocalStats = isLocalStats || false;\n        this.setDominantSpeaker(false);\n        this.totalDominantSpeakerTime = 0;\n        this._dominantSpeakerStart = 0;\n        this._hasLeft = false;\n    }\n\n    /**\n     * Get the user id being tracked.\n     *\n     * @returns {string} The user id.\n     */\n    getUserId() {\n        return this._userId;\n    }\n\n    /**\n     * Get the name of the user being tracked.\n     *\n     * @returns {string} The user name.\n     */\n    getDisplayName() {\n        return this.displayName;\n    }\n\n    /**\n     * Updates the last known name of the user being tracked.\n     *\n     * @param {string} - The user name.\n     * @returns {void}\n     */\n    setDisplayName(newName) {\n        this.displayName = newName;\n    }\n\n    /**\n     * Returns true if the stats are tracking the local user.\n     *\n     * @returns {boolean}\n     */\n    isLocalStats() {\n        return this._isLocalStats;\n    }\n\n    /**\n     * Returns true if the tracked user is currently a dominant speaker.\n     *\n     * @returns {boolean}\n     */\n    isDominantSpeaker() {\n        return this._dominantSpeakerStart > 0;\n    }\n\n    /**\n     * Returns true if the tracked user is currently a dominant speaker.\n     *\n     * @param {boolean} - If true, the user will being accumulating time\n     * as dominant speaker. If false, the user will not accumulate time\n     * and will record any time accumulated since starting as dominant speaker.\n     * @returns {void}\n     */\n    setDominantSpeaker(isNowDominantSpeaker) {\n        if (!this.isDominantSpeaker() && isNowDominantSpeaker) {\n            this._dominantSpeakerStart = Date.now();\n        } else if (this.isDominantSpeaker() && !isNowDominantSpeaker) {\n            const now = Date.now();\n            const timeElapsed = now - this._dominantSpeakerStart;\n\n            this.totalDominantSpeakerTime += timeElapsed;\n            this._dominantSpeakerStart = 0;\n        }\n    }\n\n    /**\n     * Get how long the tracked user has been dominant speaker.\n     *\n     * @returns {number} - The speaker time in milliseconds.\n     */\n    getTotalDominantSpeakerTime() {\n        let total = this.totalDominantSpeakerTime;\n\n        if (this.isDominantSpeaker()) {\n            total += Date.now() - this._dominantSpeakerStart;\n        }\n\n        return total;\n    }\n\n    /**\n     * Get whether or not the user is still in the meeting.\n     *\n     * @returns {boolean} True if the user is no longer in the meeting.\n     */\n    hasLeft() {\n        return this._hasLeft;\n    }\n\n    /**\n     * Set the user as having left the meeting.\n     *\n     * @returns {void}\n     */\n    markAsHasLeft() {\n        this._hasLeft = true;\n        this.setDominantSpeaker(false);\n    }\n}\n\nmodule.exports = SpeakerStats;\n","const AuthenticationEvents = {\n    /**\n     * Event callback arguments:\n     * function(authenticationEnabled, userIdentity)\n     * authenticationEnabled - indicates whether authentication has been enabled\n     *                         in this session\n     * userIdentity - if user has been logged in then it contains user name. If\n     *                contains 'null' or 'undefined' then user is not logged in.\n     */\n    IDENTITY_UPDATED: 'authentication.identity_updated'\n};\n\nmodule.exports = AuthenticationEvents;\n","/* global __filename, Promise */\n\nimport { getLogger } from 'jitsi-meet-logger';\nimport JitsiTrack from './JitsiTrack';\nimport JitsiTrackError from '../../JitsiTrackError';\nimport {\n    TRACK_IS_DISPOSED,\n    TRACK_NO_STREAM_FOUND\n} from '../../JitsiTrackErrors';\nimport {\n    LOCAL_TRACK_STOPPED,\n    NO_DATA_FROM_SOURCE,\n    TRACK_MUTE_CHANGED\n} from '../../JitsiTrackEvents';\nimport browser from '../browser';\nimport RTCUtils from './RTCUtils';\nimport CameraFacingMode from '../../service/RTC/CameraFacingMode';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport VideoType from '../../service/RTC/VideoType';\nimport {\n    NO_BYTES_SENT,\n    TRACK_UNMUTED,\n    createNoDataFromSourceEvent\n} from '../../service/statistics/AnalyticsEvents';\nimport Statistics from '../statistics/statistics';\n\nconst logger = getLogger(__filename);\n\n/**\n * Represents a single media track(either audio or video).\n * One <tt>JitsiLocalTrack</tt> corresponds to one WebRTC MediaStreamTrack.\n */\nexport default class JitsiLocalTrack extends JitsiTrack {\n    /**\n     * Constructs new JitsiLocalTrack instance.\n     *\n     * @constructor\n     * @param {Object} trackInfo\n     * @param {number} trackInfo.rtcId the ID assigned by the RTC module\n     * @param trackInfo.stream WebRTC MediaStream, parent of the track\n     * @param trackInfo.track underlying WebRTC MediaStreamTrack for new\n     * JitsiRemoteTrack\n     * @param trackInfo.mediaType the MediaType of the JitsiRemoteTrack\n     * @param trackInfo.videoType the VideoType of the JitsiRemoteTrack\n     * @param trackInfo.effects the effects array contains the effect instance to use\n     * @param trackInfo.resolution the video resolution if it's a video track\n     * @param trackInfo.deviceId the ID of the local device for this track\n     * @param trackInfo.facingMode the camera facing mode used in getUserMedia\n     * call\n     * @param {sourceId} trackInfo.sourceId - The id of the desktop sharing\n     * source. NOTE: defined for desktop sharing tracks only.\n     */\n    constructor({\n        deviceId,\n        facingMode,\n        mediaType,\n        resolution,\n        rtcId,\n        sourceId,\n        sourceType,\n        stream,\n        track,\n        videoType,\n        effects = []\n    }) {\n        super(\n            /* conference */ null,\n            stream,\n            track,\n            /* streamInactiveHandler */ () => this.emit(LOCAL_TRACK_STOPPED),\n            mediaType,\n            videoType);\n\n        this._setEffectInProgress = false;\n        const effect = effects.find(e => e.isEnabled(this));\n\n        if (effect) {\n            this._startStreamEffect(effect);\n        }\n\n        /**\n         * The ID assigned by the RTC module on instance creation.\n         *\n         * @type {number}\n         */\n        this.rtcId = rtcId;\n        this.sourceId = sourceId;\n        this.sourceType = sourceType;\n\n        if (browser.usesNewGumFlow()) {\n            // Get the resolution from the track itself because it cannot be\n            // certain which resolution webrtc has fallen back to using.\n            this.resolution = track.getSettings().height;\n\n            // Cache the constraints of the track in case of any this track\n            // model needs to call getUserMedia again, such as when unmuting.\n            this._constraints = track.getConstraints();\n        } else {\n            // FIXME Currently, Firefox is ignoring our constraints about\n            // resolutions so we do not store it, to avoid wrong reporting of\n            // local track resolution.\n            this.resolution = browser.isFirefox() ? null : resolution;\n        }\n\n        this.deviceId = deviceId;\n\n        /**\n         * The <tt>Promise</tt> which represents the progress of a previously\n         * queued/scheduled {@link _setMuted} (from the point of view of\n         * {@link _queueSetMuted}).\n         *\n         * @private\n         * @type {Promise}\n         */\n        this._prevSetMuted = Promise.resolve();\n\n        /**\n         * The facing mode of the camera from which this JitsiLocalTrack\n         * instance was obtained.\n         *\n         * @private\n         * @type {CameraFacingMode|undefined}\n         */\n        this._facingMode = facingMode;\n\n        // Currently there is no way to know the MediaStreamTrack ended due to\n        // to device disconnect in Firefox through e.g. \"readyState\" property.\n        // Instead we will compare current track's label with device labels from\n        // enumerateDevices() list.\n        this._trackEnded = false;\n\n        /**\n         * Indicates whether data has been sent or not.\n         */\n        this._hasSentData = false;\n\n        /**\n         * Used only for detection of audio problems. We want to check only once\n         * whether the track is sending data ot not. This flag is set to false\n         * after the check.\n         */\n        this._testDataSent = true;\n\n        // Currently there is no way to determine with what device track was\n        // created (until getConstraints() support), however we can associate\n        // tracks with real devices obtained from enumerateDevices() call as\n        // soon as it's called.\n        // NOTE: this.deviceId corresponds to the device id specified in GUM constraints and this._realDeviceId seems to\n        // correspond to the id of a matching device from the available device list.\n        this._realDeviceId = this.deviceId === '' ? undefined : this.deviceId;\n\n        this._trackMutedTS = 0;\n\n        this._onDeviceListWillChange = devices => {\n            const oldRealDeviceId = this._realDeviceId;\n\n            this._setRealDeviceIdFromDeviceList(devices);\n\n            if (\n                // Mark track as ended for those browsers that do not support\n                // \"readyState\" property. We do not touch tracks created with\n                // default device ID \"\".\n                (typeof this.getTrack().readyState === 'undefined'\n                    && typeof this._realDeviceId !== 'undefined'\n                    && !devices.find(d => d.deviceId === this._realDeviceId))\n\n                // If there was an associated realDeviceID and after the device change the realDeviceId is undefined\n                // then the associated device has been disconnected and the _trackEnded flag needs to be set. In\n                // addition on some Chrome versions the readyState property is set after the device change event is\n                // triggered which causes issues in jitsi-meet with the selection of a new device because we don't\n                // detect that the old one was removed.\n                || (typeof oldRealDeviceId !== 'undefined' && typeof this._realDeviceId === 'undefined')\n            ) {\n                this._trackEnded = true;\n            }\n        };\n\n        // Subscribe each created local audio track to\n        // RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED event. This is different from\n        // handling this event for remote tracks (which are handled in RTC.js),\n        // because there might be local tracks not attached to a conference.\n        if (this.isAudioTrack() && RTCUtils.isDeviceChangeAvailable('output')) {\n            this._onAudioOutputDeviceChanged = this.setAudioOutput.bind(this);\n            RTCUtils.addListener(\n                RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED,\n                this._onAudioOutputDeviceChanged);\n        }\n\n        RTCUtils.addListener(RTCEvents.DEVICE_LIST_WILL_CHANGE, this._onDeviceListWillChange);\n\n        this._initNoDataFromSourceHandlers();\n    }\n\n    /**\n     * Returns if associated MediaStreamTrack is in the 'ended' state\n     *\n     * @returns {boolean}\n     */\n    isEnded() {\n        if (this.isVideoTrack() && this.isMuted()) {\n            // If a video track is muted the readyState will be ended, that's why we need to rely only on the\n            // _trackEnded flag.\n            return this._trackEnded;\n        }\n\n        return this.getTrack().readyState === 'ended' || this._trackEnded;\n    }\n\n    /**\n     * Sets handlers to the MediaStreamTrack object that will detect camera\n     * issues.\n     */\n    _initNoDataFromSourceHandlers() {\n        if (!this._isNoDataFromSourceEventsEnabled()) {\n            return;\n        }\n\n        this._setHandler('track_mute', () => {\n            this._trackMutedTS = window.performance.now();\n            this._fireNoDataFromSourceEvent();\n        });\n\n        this._setHandler('track_unmute', () => {\n            this._fireNoDataFromSourceEvent();\n            Statistics.sendAnalyticsAndLog(\n                TRACK_UNMUTED,\n                {\n                    'media_type': this.getType(),\n                    'track_type': 'local',\n                    value: window.performance.now() - this._trackMutedTS\n                });\n        });\n\n        if (this.isVideoTrack() && this.videoType === VideoType.CAMERA) {\n            this._setHandler('track_ended', () => {\n                if (!this.isReceivingData()) {\n                    this._fireNoDataFromSourceEvent();\n                }\n            });\n        }\n    }\n\n    /**\n     * Returns true if no data from source events are enabled for this JitsiLocalTrack and false otherwise.\n     *\n     * @returns {boolean} - True if no data from source events are enabled for this JitsiLocalTrack and false otherwise.\n     */\n    _isNoDataFromSourceEventsEnabled() {\n        // Disable the events for screen sharing.\n        return !this.isVideoTrack() || this.videoType !== VideoType.DESKTOP;\n    }\n\n    /**\n     * Fires NO_DATA_FROM_SOURCE event and logs it to analytics and callstats.\n     */\n    _fireNoDataFromSourceEvent() {\n        const value = !this.isReceivingData();\n\n        this.emit(NO_DATA_FROM_SOURCE, value);\n\n        // FIXME: Should we report all of those events\n        Statistics.sendAnalytics(createNoDataFromSourceEvent(this.getType(), value));\n        Statistics.sendLog(JSON.stringify({\n            name: NO_DATA_FROM_SOURCE,\n            log: value\n        }));\n    }\n\n    /**\n     * Sets real device ID by comparing track information with device\n     * information. This is temporary solution until getConstraints() method\n     * will be implemented in browsers.\n     *\n     * @param {MediaDeviceInfo[]} devices - list of devices obtained from\n     * enumerateDevices() call\n     */\n    _setRealDeviceIdFromDeviceList(devices) {\n        const track = this.getTrack();\n        const kind = `${track.kind}input`;\n        let device = devices.find(d => d.kind === kind && d.label === track.label);\n\n        if (!device && this._realDeviceId === 'default') { // the default device has been changed.\n            // If the default device was 'A' and the default device is changed to 'B' the label for the track will\n            // remain 'Default - A' but the label for the device in the device list will be updated to 'A'. That's\n            // why in order to match it we need to remove the 'Default - ' part.\n            const label = (track.label || '').replace('Default - ', '');\n\n            device = devices.find(d => d.kind === kind && d.label === label);\n        }\n\n        if (device) {\n            this._realDeviceId = device.deviceId;\n        } else {\n            this._realDeviceId = undefined;\n        }\n    }\n\n    /**\n     * Sets the stream property of JitsiLocalTrack object and sets all stored\n     * handlers to it.\n     *\n     * @param {MediaStream} stream the new stream.\n     * @protected\n     */\n    _setStream(stream) {\n        super._setStream(stream);\n\n        if (stream) {\n            // Store the MSID for video mute/unmute purposes.\n            this.storedMSID = this.getMSID();\n            logger.debug(`Setting new MSID: ${this.storedMSID} on ${this}`);\n        } else {\n            logger.debug(`Setting 'null' stream on ${this}`);\n        }\n    }\n\n    /**\n     * Starts the effect process and returns the modified stream.\n     *\n     * @private\n     * @param {*} effect - Represents effect instance\n     * @returns {void}\n     */\n    _startStreamEffect(effect) {\n        this._streamEffect = effect;\n        this._originalStream = this.stream;\n        this._setStream(this._streamEffect.startEffect(this._originalStream));\n    }\n\n    /**\n     * Stops the effect process and returns the original stream.\n     *\n     * @private\n     * @returns {void}\n     */\n    _stopStreamEffect() {\n        if (this._streamEffect) {\n            this._streamEffect.stopEffect();\n            this._setStream(this._originalStream);\n            this._originalStream = undefined;\n        }\n    }\n\n    /**\n     * Stops the currently used effect (if there is one) and starts the passed effect (if there is one).\n     *\n     * @param {Object|undefined} effect - The new effect to be set.\n     */\n    _switchStreamEffect(effect) {\n        if (this._streamEffect) {\n            this._stopStreamEffect();\n            this._streamEffect = undefined;\n        }\n        if (effect) {\n            this._startStreamEffect(effect);\n        }\n    }\n\n    /**\n     * Sets the effect and switches between the modified stream and original one.\n     *\n     * @param {Object} effect - Represents the effect instance to be used.\n     * @returns {Promise}\n     */\n    setEffect(effect) {\n        if (typeof this._streamEffect === 'undefined' && typeof effect === 'undefined') {\n            return Promise.resolve();\n        }\n\n        if (typeof effect !== 'undefined' && !effect.isEnabled(this)) {\n            return Promise.reject(new Error('Incompatible effect instance!'));\n        }\n\n        if (this._setEffectInProgress === true) {\n            return Promise.reject(new Error('setEffect already in progress!'));\n        }\n\n        if (this.isMuted()) {\n            this._streamEffect = effect;\n\n            return Promise.resolve();\n        }\n\n        const conference = this.conference;\n\n        if (!conference) {\n            this._switchStreamEffect(effect);\n\n            return Promise.resolve();\n        }\n\n        this._setEffectInProgress = true;\n\n        // TODO: Create new JingleSessionPC method for replacing a stream in JitsiLocalTrack without offer answer.\n        return conference.removeTrack(this)\n            .then(() => {\n                this._switchStreamEffect(effect);\n                if (this.isVideoTrack()) {\n                    this.containers.forEach(cont => RTCUtils.attachMediaStream(cont, this.stream));\n                }\n\n                return conference.addTrack(this);\n            })\n            .then(() => {\n                this._setEffectInProgress = false;\n            })\n            .catch(error => {\n                // Any error will be not recovarable and will trigger CONFERENCE_FAILED event. But let's try to cleanup\n                // everyhting related to the effect functionality.\n                this._setEffectInProgress = false;\n                this._switchStreamEffect();\n                logger.error('Failed to switch to the new stream!', error);\n                throw error;\n            });\n    }\n\n    /**\n     * Asynchronously mutes this track.\n     *\n     * @returns {Promise}\n     */\n    mute() {\n        return this._queueSetMuted(true);\n    }\n\n    /**\n     * Asynchronously unmutes this track.\n     *\n     * @returns {Promise}\n     */\n    unmute() {\n        return this._queueSetMuted(false);\n    }\n\n    /**\n     * Initializes a new Promise to execute {@link #_setMuted}. May be called\n     * multiple times in a row and the invocations of {@link #_setMuted} and,\n     * consequently, {@link #mute} and/or {@link #unmute} will be resolved in a\n     * serialized fashion.\n     *\n     * @param {boolean} muted - The value to invoke <tt>_setMuted</tt> with.\n     * @returns {Promise}\n     */\n    _queueSetMuted(muted) {\n        const setMuted = this._setMuted.bind(this, muted);\n\n        this._prevSetMuted = this._prevSetMuted.then(setMuted, setMuted);\n\n        return this._prevSetMuted;\n    }\n\n    /**\n     * Mutes / unmutes this track.\n     *\n     * @param {boolean} muted - If <tt>true</tt>, this track will be muted;\n     * otherwise, this track will be unmuted.\n     * @private\n     * @returns {Promise}\n     */\n    _setMuted(muted) {\n        if (this.isMuted() === muted) {\n            return Promise.resolve();\n        }\n\n        if (this.disposed) {\n            return Promise.reject(new JitsiTrackError(TRACK_IS_DISPOSED));\n        }\n\n        let promise = Promise.resolve();\n\n        // A function that will print info about muted status transition\n        const logMuteInfo = () => logger.info(`Mute ${this}: ${muted}`);\n\n        if (this.isAudioTrack()\n                || this.videoType === VideoType.DESKTOP\n                || !browser.doesVideoMuteByStreamRemove()) {\n            logMuteInfo();\n            if (this.track) {\n                this.track.enabled = !muted;\n            }\n        } else if (muted) {\n            promise = new Promise((resolve, reject) => {\n                logMuteInfo();\n                this._removeStreamFromConferenceAsMute(\n                    () => {\n                        if (this._streamEffect) {\n                            this._stopStreamEffect();\n                        }\n\n                        // FIXME: Maybe here we should set the SRC for the\n                        // containers to something\n                        // We don't want any events to be fired on this stream\n                        this._unregisterHandlers();\n                        this.stopStream();\n                        this._setStream(null);\n                        resolve();\n                    },\n                    reject);\n            });\n        } else {\n            logMuteInfo();\n\n            // This path is only for camera.\n            const streamOptions = {\n                cameraDeviceId: this.getDeviceId(),\n                devices: [ MediaType.VIDEO ],\n                effects: this._streamEffect ? [ this._streamEffect ] : [],\n                facingMode: this.getCameraFacingMode()\n            };\n\n            if (browser.usesNewGumFlow()) {\n                promise\n                    = RTCUtils.newObtainAudioAndVideoPermissions(Object.assign(\n                        {},\n                        streamOptions,\n                        { constraints: { video: this._constraints } }));\n            } else {\n                if (this.resolution) {\n                    streamOptions.resolution = this.resolution;\n                }\n\n                promise\n                    = RTCUtils.obtainAudioAndVideoPermissions(streamOptions);\n            }\n\n            promise.then(streamsInfo => {\n                const mediaType = this.getType();\n                const streamInfo\n                    = browser.usesNewGumFlow()\n                        ? streamsInfo.find(\n                            info => info.track.kind === mediaType)\n                        : streamsInfo.find(\n                            info => info.mediaType === mediaType);\n\n                if (streamInfo) {\n                    this._setStream(streamInfo.stream);\n                    this.track = streamInfo.track;\n\n                    // This is not good when video type changes after\n                    // unmute, but let's not crash here\n                    if (this.videoType !== streamInfo.videoType) {\n                        logger.warn(\n                            `${this}: video type has changed after unmute!`,\n                            this.videoType, streamInfo.videoType);\n                        this.videoType = streamInfo.videoType;\n                    }\n                } else {\n                    throw new JitsiTrackError(TRACK_NO_STREAM_FOUND);\n                }\n\n                if (this._streamEffect) {\n                    this._startStreamEffect(this._streamEffect);\n                }\n\n                this.containers.map(\n                    cont => RTCUtils.attachMediaStream(cont, this.stream));\n\n                return this._addStreamToConferenceAsUnmute();\n            });\n        }\n\n        return promise\n            .then(() => this._sendMuteStatus(muted))\n            .then(() => this.emit(TRACK_MUTE_CHANGED, this));\n    }\n\n    /**\n     * Adds stream to conference and marks it as \"unmute\" operation.\n     *\n     * @private\n     * @returns {Promise}\n     */\n    _addStreamToConferenceAsUnmute() {\n        if (!this.conference) {\n            return Promise.resolve();\n        }\n\n        // FIXME it would be good to not included conference as part of this\n        // process. Only TraceablePeerConnections to which the track is attached\n        // should care about this action. The TPCs to which the track is not\n        // attached can sync up when track is re-attached.\n        // A problem with that is that the \"modify sources\" queue is part of\n        // the JingleSessionPC and it would be excluded from the process. One\n        // solution would be to extract class between TPC and JingleSessionPC\n        // which would contain the queue and would notify the signaling layer\n        // when local SSRCs are changed. This would help to separate XMPP from\n        // the RTC module.\n        return new Promise((resolve, reject) => {\n            this.conference._addLocalTrackAsUnmute(this)\n                .then(resolve, error => reject(new Error(error)));\n        });\n    }\n\n    /**\n     * Removes stream from conference and marks it as \"mute\" operation.\n     *\n     * @param {Function} successCallback will be called on success\n     * @param {Function} errorCallback will be called on error\n     * @private\n     */\n    _removeStreamFromConferenceAsMute(successCallback, errorCallback) {\n        if (!this.conference) {\n            successCallback();\n\n            return;\n        }\n        this.conference._removeLocalTrackAsMute(this).then(\n            successCallback,\n            error => errorCallback(new Error(error)));\n    }\n\n    /**\n     * Sends mute status for a track to conference if any.\n     *\n     * @param {boolean} mute - If track is muted.\n     * @private\n     * @returns {Promise}\n     */\n    _sendMuteStatus(mute) {\n        if (!this.conference || !this.conference.room) {\n            return Promise.resolve();\n        }\n\n        return new Promise(resolve => {\n            this.conference.room[\n                this.isAudioTrack()\n                    ? 'setAudioMute'\n                    : 'setVideoMute'](mute, resolve);\n        });\n    }\n\n    /**\n     * @inheritdoc\n     *\n     * Stops sending the media track. And removes it from the HTML.\n     * NOTE: Works for local tracks only.\n     *\n     * @extends JitsiTrack#dispose\n     * @returns {Promise}\n     */\n    dispose() {\n        this._switchStreamEffect();\n\n        let promise = Promise.resolve();\n\n        if (this.conference) {\n            promise = this.conference.removeTrack(this);\n        }\n\n        if (this.stream) {\n            this.stopStream();\n            this.detach();\n        }\n\n        RTCUtils.removeListener(RTCEvents.DEVICE_LIST_WILL_CHANGE, this._onDeviceListWillChange);\n\n        if (this._onAudioOutputDeviceChanged) {\n            RTCUtils.removeListener(RTCEvents.AUDIO_OUTPUT_DEVICE_CHANGED,\n                this._onAudioOutputDeviceChanged);\n        }\n\n        return promise.then(() => super.dispose());\n    }\n\n    /**\n     * Returns <tt>true</tt> - if the stream is muted and <tt>false</tt>\n     * otherwise.\n     *\n     * @returns {boolean} <tt>true</tt> - if the stream is muted and\n     * <tt>false</tt> otherwise.\n     */\n    isMuted() {\n        // this.stream will be null when we mute local video on Chrome\n        if (!this.stream) {\n            return true;\n        }\n        if (this.isVideoTrack() && !this.isActive()) {\n            return true;\n        }\n\n        return !this.track || !this.track.enabled;\n    }\n\n    /**\n     * Sets the JitsiConference object associated with the track. This is temp\n     * solution.\n     *\n     * @param conference the JitsiConference object\n     */\n    _setConference(conference) {\n        this.conference = conference;\n\n        // We want to keep up with postponed events which should have been fired\n        // on \"attach\" call, but for local track we not always have the\n        // conference before attaching. However this may result in duplicated\n        // events if they have been triggered on \"attach\" already.\n        for (let i = 0; i < this.containers.length; i++) {\n            this._maybeFireTrackAttached(this.containers[i]);\n        }\n    }\n\n    /**\n     * Returns <tt>true</tt>.\n     *\n     * @returns {boolean} <tt>true</tt>\n     */\n    isLocal() {\n        return true;\n    }\n\n    /**\n     * Returns device id associated with track.\n     *\n     * @returns {string}\n     */\n    getDeviceId() {\n        return this._realDeviceId || this.deviceId;\n    }\n\n    /**\n     * Returns the participant id which owns the track.\n     *\n     * @returns {string} the id of the participants. It corresponds to the\n     * Colibri endpoint id/MUC nickname in case of Jitsi-meet.\n     */\n    getParticipantId() {\n        return this.conference && this.conference.myUserId();\n    }\n\n    /**\n     * Handles bytes sent statistics.\n     *\n     * @param {TraceablePeerConnection} tpc the source of the \"bytes sent\" stat\n     * @param {number} bytesSent the new value\n     * NOTE: used only for audio tracks to detect audio issues.\n     */\n    _onByteSentStatsReceived(tpc, bytesSent) {\n        if (bytesSent > 0) {\n            this._hasSentData = true;\n        }\n        const iceConnectionState = tpc.getConnectionState();\n\n        if (this._testDataSent && iceConnectionState === 'connected') {\n            setTimeout(() => {\n                if (!this._hasSentData) {\n                    logger.warn(`${this} 'bytes sent' <= 0: \\\n                        ${bytesSent}`);\n\n                    Statistics.analytics.sendEvent(NO_BYTES_SENT, { 'media_type': this.getType() });\n                }\n            }, 3000);\n            this._testDataSent = false;\n        }\n    }\n\n    /**\n     * Returns facing mode for video track from camera. For other cases (e.g.\n     * audio track or 'desktop' video track) returns undefined.\n     *\n     * @returns {CameraFacingMode|undefined}\n     */\n    getCameraFacingMode() {\n        if (this.isVideoTrack() && this.videoType === VideoType.CAMERA) {\n            // MediaStreamTrack#getSettings() is not implemented in many\n            // browsers, so we need feature checking here. Progress on the\n            // respective browser's implementation can be tracked at\n            // https://bugs.chromium.org/p/webrtc/issues/detail?id=2481 for\n            // Chromium and https://bugzilla.mozilla.org/show_bug.cgi?id=1213517\n            // for Firefox. Even if a browser implements getSettings() already,\n            // it might still not return anything for 'facingMode'.\n            let trackSettings;\n\n            try {\n                trackSettings = this.track.getSettings();\n            } catch (e) {\n                // XXX React-native-webrtc, for example, defines\n                // MediaStreamTrack#getSettings() but the implementation throws\n                // a \"Not implemented\" Error.\n            }\n            if (trackSettings && 'facingMode' in trackSettings) {\n                return trackSettings.facingMode;\n            }\n\n            if (typeof this._facingMode !== 'undefined') {\n                return this._facingMode;\n            }\n\n            // In most cases we are showing a webcam. So if we've gotten here,\n            // it should be relatively safe to assume that we are probably\n            // showing the user-facing camera.\n            return CameraFacingMode.USER;\n        }\n\n        return undefined;\n    }\n\n    /**\n     * Stops the associated MediaStream.\n     */\n    stopStream() {\n        /**\n         * Indicates that we are executing {@link #stopStream} i.e.\n         * {@link RTCUtils#stopMediaStream} for the <tt>MediaStream</tt>\n         * associated with this <tt>JitsiTrack</tt> instance.\n         *\n         * @private\n         * @type {boolean}\n         */\n        this._stopStreamInProgress = true;\n\n        try {\n            RTCUtils.stopMediaStream(this.stream);\n        } finally {\n            this._stopStreamInProgress = false;\n        }\n    }\n\n    /**\n     * Switches the camera facing mode if the WebRTC implementation supports the\n     * custom MediaStreamTrack._switchCamera method. Currently, the method in\n     * question is implemented in react-native-webrtc only. When such a WebRTC\n     * implementation is executing, the method is the preferred way to switch\n     * between the front/user-facing and the back/environment-facing cameras\n     * because it will likely be (as is the case of react-native-webrtc)\n     * noticeably faster that creating a new MediaStreamTrack via a new\n     * getUserMedia call with the switched facingMode constraint value.\n     * Moreover, the approach with a new getUserMedia call may not even work:\n     * WebRTC on Android and iOS is either very slow to open the camera a second\n     * time or plainly freezes attempting to do that.\n     */\n    _switchCamera() {\n        if (this.isVideoTrack()\n                && this.videoType === VideoType.CAMERA\n                && typeof this.track._switchCamera === 'function') {\n            this.track._switchCamera();\n\n            this._facingMode\n                = this._facingMode === CameraFacingMode.ENVIRONMENT\n                    ? CameraFacingMode.USER\n                    : CameraFacingMode.ENVIRONMENT;\n        }\n    }\n\n    /**\n     * Checks whether the attached MediaStream is receiving data from source or\n     * not. If the stream property is null(because of mute or another reason)\n     * this method will return false.\n     * NOTE: This method doesn't indicate problem with the streams directly.\n     * For example in case of video mute the method will return false or if the\n     * user has disposed the track.\n     *\n     * @returns {boolean} true if the stream is receiving data and false\n     * this otherwise.\n     */\n    isReceivingData() {\n        if (this.isVideoTrack()\n            && (this.isMuted() || this._stopStreamInProgress || this.videoType === VideoType.DESKTOP)) {\n            return true;\n        }\n\n        if (!this.stream) {\n            return false;\n        }\n\n        // In older version of the spec there is no muted property and\n        // readyState can have value muted. In the latest versions\n        // readyState can have values \"live\" and \"ended\" and there is\n        // muted boolean property. If the stream is muted that means that\n        // we aren't receiving any data from the source. We want to notify\n        // the users for error if the stream is muted or ended on it's\n        // creation.\n\n        // For video blur enabled use the original video stream\n        const stream = this._effectEnabled ? this._originalStream : this.stream;\n\n        return stream.getTracks().some(track =>\n            (!('readyState' in track) || track.readyState === 'live')\n                && (!('muted' in track) || track.muted !== true));\n    }\n\n    /**\n     * Creates a text representation of this local track instance.\n     *\n     * @return {string}\n     */\n    toString() {\n        return `LocalTrack[${this.rtcId},${this.getType()}]`;\n    }\n}\n","import { $iq } from 'strophe.js';\n\nimport recordingXMLUtils from './recordingXMLUtils';\n\n/**\n * Represents a recording session.\n */\nexport default class JibriSession {\n    /**\n     * Initializes a new JibriSession instance.\n     *\n     * @constructor\n     */\n    constructor(options = {}) {\n        this._connection = options.connection;\n        this._mode = options.mode;\n\n        this._setSessionID(options.sessionID);\n        this.setStatus(options.status);\n    }\n\n    /**\n     * Returns the error related to the session instance, if any.\n     *\n     * @returns {string|undefined}\n     */\n    getError() {\n        return this._error;\n    }\n\n    /**\n     * Returns the session ID of the session instance.\n     *\n     * @returns {string|undefined}\n     */\n    getID() {\n        return this._sessionID;\n    }\n\n    /**\n     * Returns the streaming URL of the session.\n     *\n     * @returns {string|undefined}\n     */\n    getLiveStreamViewURL() {\n        return this._liveStreamViewURL;\n    }\n\n    /**\n     * Returns the current status of the session.\n     *\n     * @returns {string|undefined}\n     */\n    getStatus() {\n        return this._status;\n    }\n\n    /**\n     * Returns the current recording mode of the session, such as \"file\".\n     *\n     * @returns {string}\n     */\n    getMode() {\n        return this._mode;\n    }\n\n    /**\n     * Sets the last known error message related to the session.\n     *\n     * @param {string} error - The error string explaining why the session\n     * entered an error state.\n     * @returns {void}\n     */\n    setError(error) {\n        this._error = error;\n    }\n\n    /**\n     * Sets the last live stream URL for the session instance. Usually this is\n     * a YouTube URL and usually this is only set for \"stream\" sessions.\n     *\n     * @param {string} url - The live stream URL associated with the session.\n     * @returns {void}\n     */\n    setLiveStreamViewURL(url) {\n        this._liveStreamViewURL = url;\n    }\n\n    /**\n     * Sets the last known status for this recording session.\n     *\n     * @param {string} status - The new status to set.\n     * @returns {void}\n     */\n    setStatus(status) {\n        this._status = status;\n    }\n\n    /**\n     * Sends a message to start the actual recording.\n     *\n     * @param {Object} options - Additional arguments for starting the\n     * recording.\n     * @param {string} [options.appData] - Data specific to the app/service that\n     * the result file will be uploaded.\n     * @param {string} [options.broadcastId] - The broadcast ID of an\n     * associated YouTube stream, used for knowing the URL from which the stream\n     * can be viewed.\n     * @param {string} options.focusMucJid - The JID of the focus participant\n     * that controls recording.\n     * @param {streamId} options.streamId - Necessary for live streaming, this\n     * is the the stream key needed to start a live streaming session with the\n     * streaming service provider.\n     * @returns Promise\n     */\n    start({ appData, broadcastId, focusMucJid, streamId }) {\n        return new Promise((resolve, reject) => {\n            this._connection.sendIQ(\n                this._createIQ({\n                    action: 'start',\n                    appData,\n                    focusMucJid,\n                    broadcastId,\n                    streamId\n                }),\n                result => {\n                    // All users will eventually receive the 'pending' status\n                    // from the backend, but for the user initiating the session\n                    // it's better to give some instant feedback that recording\n                    // is starting so fire 'pending' here manually.\n                    this.setStatus('pending');\n                    this._setSessionID(\n                        recordingXMLUtils.getSessionIdFromIq(result));\n\n                    resolve();\n                },\n                error => {\n                    this._setErrorFromIq(error);\n\n                    reject(error);\n                });\n        });\n    }\n\n    /**\n     * Sends a message to actually stop the recording session.\n     *\n     * @param {Object} options - Additional arguments for stopping the\n     * recording.\n     * @param {Object} options.focusMucJid - The JID of the focus participant\n     * that controls recording.\n     * @returns Promise\n     */\n    stop({ focusMucJid }) {\n        return new Promise((resolve, reject) => {\n            this._connection.sendIQ(\n                this._createIQ({\n                    action: 'stop',\n                    focusMucJid\n                }),\n                resolve,\n                reject);\n        });\n    }\n\n    /**\n     * Generates the message to change the status of the recording session.\n     *\n     * @param {string} status - The new status to which the recording session\n     * should transition.\n     * @param {string} [options.appData] - Data specific to the app/service that\n     * the result file will be uploaded.\n     * @param {string} [options.broadcastId] - The broadcast ID of an\n     * associated YouTube stream, used for knowing the URL from which the stream\n     * can be viewed.\n     * @param {string} options.focusMucJid - The JID of the focus participant\n     * that controls recording.\n     * @param {streamId} options.streamId - Necessary for live streaming, this\n     * is the the stream key needed to start a live streaming session with the\n     * streaming service provider.\n     * @returns Object - The XMPP IQ message.\n     */\n    _createIQ({ action, appData, broadcastId, focusMucJid, streamId }) {\n        return $iq({\n            to: focusMucJid,\n            type: 'set'\n        })\n        .c('jibri', {\n            'xmlns': 'http://jitsi.org/protocol/jibri',\n            'action': action,\n            'app_data': appData,\n            'recording_mode': this._mode,\n            'streamid': streamId,\n            'you_tube_broadcast_id': broadcastId\n        })\n        .up();\n    }\n\n    /**\n     * Handles the error from an iq and stores the error.\n     *\n     * @param {Node} errorIq - The error response from an Iq.\n     * @private\n     * @returns {void}\n     */\n    _setErrorFromIq(errorIq) {\n        const error = errorIq.getElementsByTagName('error')[0];\n\n        this.setError(error.children[0].tagName);\n    }\n\n    /**\n     * Sets the known session ID for this recording session.\n     *\n     * @param {string} sessionID\n     * @private\n     * @returns {void}\n     */\n    _setSessionID(sessionID) {\n        this._sessionID = sessionID;\n    }\n}\n","import EventEmitter from 'events';\n\nimport * as MediaType from './service/RTC/MediaType';\nimport browser from './modules/browser';\nimport RTC from './modules/RTC/RTC';\nimport RTCEvents from './service/RTC/RTCEvents';\nimport Statistics from './modules/statistics/statistics';\n\nimport * as JitsiMediaDevicesEvents from './JitsiMediaDevicesEvents';\n\nconst AUDIO_PERMISSION_NAME = 'microphone';\nconst PERMISSION_GRANTED_STATUS = 'granted';\nconst VIDEO_PERMISSION_NAME = 'camera';\n\n/**\n * Media devices utilities for Jitsi.\n */\nclass JitsiMediaDevices {\n    /**\n     * Initializes a {@code JitsiMediaDevices} object. There will be a single\n     * instance of this class.\n     */\n    constructor() {\n        this._eventEmitter = new EventEmitter();\n        this._grantedPermissions = {};\n\n        RTC.addListener(\n            RTCEvents.DEVICE_LIST_CHANGED,\n            devices =>\n                this._eventEmitter.emit(\n                    JitsiMediaDevicesEvents.DEVICE_LIST_CHANGED,\n                    devices));\n        RTC.addListener(\n            RTCEvents.DEVICE_LIST_AVAILABLE,\n            devices =>\n                this._logOutputDevice(\n                    this.getAudioOutputDevice(),\n                    devices));\n        RTC.addListener(\n            RTCEvents.GRANTED_PERMISSIONS,\n            grantedPermissions =>\n                this._handleGrantedPermissions(grantedPermissions));\n\n        // Test if the W3C Permissions API is implemented and the 'camera' and\n        // 'microphone' permissions are implemented. (Testing for at least one\n        // of them seems sufficient).\n        this._permissionsApiSupported = new Promise(resolve => {\n            if (!navigator.permissions) {\n                resolve(false);\n\n                return;\n            }\n\n            navigator.permissions.query({ name: VIDEO_PERMISSION_NAME })\n                .then(() => resolve(true), () => resolve(false));\n        });\n    }\n\n    /**\n     * Updated the local granted permissions cache. A permissions might be\n     * granted, denied, or undefined. This is represented by having its media\n     * type key set to {@code true} or {@code false} respectively.\n     *\n     * @param {Object} grantedPermissions - Array with the permissions\n     * which were granted.\n     */\n    _handleGrantedPermissions(grantedPermissions) {\n        this._grantedPermissions = {\n            ...this._grantedPermissions,\n            ...grantedPermissions\n        };\n    }\n\n    /**\n     * Gathers data and sends it to statistics.\n     * @param deviceID the device id to log\n     * @param devices list of devices\n     */\n    _logOutputDevice(deviceID, devices) {\n        const device\n            = devices.find(\n                d => d.kind === 'audiooutput' && d.deviceId === deviceID);\n\n        if (device) {\n            Statistics.sendActiveDeviceListEvent(\n                RTC.getEventDataForActiveDevice(device));\n        }\n    }\n\n    /**\n     * Executes callback with list of media devices connected.\n     * @param {function} callback\n     */\n    enumerateDevices(callback) {\n        RTC.enumerateDevices(callback);\n    }\n\n    /**\n     * Checks if its possible to enumerate available cameras/micropones.\n     * @returns {Promise<boolean>} a Promise which will be resolved only once\n     * the WebRTC stack is ready, either with true if the device listing is\n     * available available or with false otherwise.\n     */\n    isDeviceListAvailable() {\n        return RTC.isDeviceListAvailable();\n    }\n\n    /**\n     * Returns true if changing the input (camera / microphone) or output\n     * (audio) device is supported and false if not.\n     * @param {string} [deviceType] - type of device to change. Default is\n     *      undefined or 'input', 'output' - for audio output device change.\n     * @returns {boolean} true if available, false otherwise.\n     */\n    isDeviceChangeAvailable(deviceType) {\n        return RTC.isDeviceChangeAvailable(deviceType);\n    }\n\n    /**\n     * Checks if the permission for the given device was granted.\n     *\n     * @param {'audio'|'video'} [type] - type of devices to check,\n     *      undefined stands for both 'audio' and 'video' together\n     * @returns {Promise<boolean>}\n     */\n    isDevicePermissionGranted(type) {\n        return new Promise(resolve => {\n            // Shortcut: first check if we already know the permission was\n            // granted.\n            if (type in this._grantedPermissions) {\n                resolve(this._grantedPermissions[type]);\n\n                return;\n            }\n\n            // Check using the Permissions API.\n            this._permissionsApiSupported.then(supported => {\n                if (!supported) {\n                    resolve(false);\n\n                    return;\n                }\n\n                const promises = [];\n\n                switch (type) {\n                case MediaType.VIDEO:\n                    promises.push(\n                        navigator.permissions.query({\n                            name: VIDEO_PERMISSION_NAME\n                        }));\n                    break;\n                case MediaType.AUDIO:\n                    promises.push(\n                        navigator.permissions.query({\n                            name: AUDIO_PERMISSION_NAME\n                        }));\n                    break;\n                default:\n                    promises.push(\n                        navigator.permissions.query({\n                            name: VIDEO_PERMISSION_NAME\n                        }));\n                    promises.push(\n                        navigator.permissions.query({\n                            name: AUDIO_PERMISSION_NAME\n                        }));\n                }\n\n                Promise.all(promises).then(\n                    results => resolve(results.every(permissionStatus => {\n                        // The status attribute is deprecated, and state\n                        // should be used instead, but check both for now\n                        // for backwards compatibility.\n                        const grantStatus = permissionStatus.state\n                            || permissionStatus.status;\n\n                        return grantStatus === PERMISSION_GRANTED_STATUS;\n                    })),\n                    () => resolve(false)\n                );\n            });\n        });\n    }\n\n    /**\n     * Returns true if it is possible to be simultaneously capturing audio\n     * from more than one device.\n     *\n     * @returns {boolean}\n     */\n    isMultipleAudioInputSupported() {\n        return !browser.isFirefox();\n    }\n\n    /**\n     * Returns currently used audio output device id, 'default' stands\n     * for default device\n     * @returns {string}\n     */\n    getAudioOutputDevice() {\n        return RTC.getAudioOutputDevice();\n    }\n\n    /**\n     * Sets current audio output device.\n     * @param {string} deviceId - id of 'audiooutput' device from\n     *      navigator.mediaDevices.enumerateDevices(), 'default' is for\n     *      default device\n     * @returns {Promise} - resolves when audio output is changed, is rejected\n     *      otherwise\n     */\n    setAudioOutputDevice(deviceId) {\n        const availableDevices = RTC.getCurrentlyAvailableMediaDevices();\n\n        if (availableDevices && availableDevices.length > 0) {\n            // if we have devices info report device to stats\n            // normally this will not happen on startup as this method is called\n            // too early. This will happen only on user selection of new device\n            this._logOutputDevice(\n                deviceId, RTC.getCurrentlyAvailableMediaDevices());\n        }\n\n        return RTC.setAudioOutputDevice(deviceId);\n    }\n\n    /**\n     * Adds an event handler.\n     * @param {string} event - event name\n     * @param {function} handler - event handler\n     */\n    addEventListener(event, handler) {\n        this._eventEmitter.addListener(event, handler);\n    }\n\n    /**\n     * Removes event handler.\n     * @param {string} event - event name\n     * @param {function} handler - event handler\n     */\n    removeEventListener(event, handler) {\n        this._eventEmitter.removeListener(event, handler);\n    }\n\n    /**\n     * Emits an event.\n     * @param {string} event - event name\n     */\n    emitEvent(event, ...args) {\n        this._eventEmitter.emit(event, ...args);\n    }\n\n    /**\n     * Returns whether or not the current browser can support capturing video,\n     * be it camera or desktop, and displaying received video.\n     *\n     * @returns {boolean}\n     */\n    supportsVideo() {\n        // Defer to the browser capabilities to allow exposure of the api to the\n        // consumer but prevent other files from having to import\n        // JitsiMediaDevices.\n        return browser.supportsVideo();\n    }\n}\n\nexport default new JitsiMediaDevices();\n","/* Copyright @ 2015-present 8x8, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Ordered log levels.\n */\nvar levels = {\n    \"trace\": 0,\n    \"debug\": 1,\n    \"info\": 2,\n    \"log\": 3,\n    \"warn\": 4,\n    \"error\": 5\n};\n\n/**\n * The default transport - console\n * @type LoggerTransport\n */\nLogger.consoleTransport = console;\n\n/**\n * The array which stores currently registered global transports.\n * @type {[LoggerTransport]}\n */\nvar globalTransports = [ Logger.consoleTransport ];\n\n/**\n * Adds given {@link LoggerTransport} instance to the list of global\n * transports which means that it'll be used by all {@link Logger}s\n * @param {LoggerTransport} transport\n */\nLogger.addGlobalTransport = function(transport) {\n    if (globalTransports.indexOf(transport) === -1) {\n        globalTransports.push(transport);\n    }\n};\n\n/**\n * Removes given {@link LoggerTransport} instance from the list of global\n * transports\n * @param {LoggerTransport} transport\n */\nLogger.removeGlobalTransport = function(transport) {\n    var transportIdx = globalTransports.indexOf(transport);\n    if (transportIdx !== -1) {\n        globalTransports.splice(transportIdx, 1);\n    }\n};\n\n/**\n * The global configuration options.\n */\nvar globalOptions = {};\n\n/**\n * Sets global options which will be used by all loggers. Changing these works\n * even after other loggers are created.\n */\nLogger.setGlobalOptions = function(options) {\n    globalOptions = options || {};\n}\n\n/**\n * Parses Error's object stack trace and extracts information about the last\n * caller before the log method was called.\n * @returns JS object with info about the caller - method name, file location,\n * line and column.\n */\nfunction getCallerInfo() {\n    var callerInfo = {\n        methodName: \"\",\n        fileLocation: \"\",\n        line: null,\n        column: null\n    };\n    //gets the part of the stack without the logger wrappers\n    var error = new Error();\n    var stack = error.stack? error.stack.split(\"\\n\") : [];\n    if(!stack || stack.length < 1) {\n        return callerInfo;\n    }\n    var m = null;\n    if(stack[3]) {\n        m = stack[3].match(/\\s*at\\s*(.+?)\\s*\\((\\S*)\\s*:(\\d*)\\s*:(\\d*)\\)/);\n    }\n    if(!m || m.length <= 4) {\n        //Firefox && Safari\n        if(stack[2].indexOf(\"log@\") === 0){\n            //Safari\n            callerInfo.methodName = stack[3].substr(0, stack[3].indexOf(\"@\"));\n        } else {\n            //Firefox\n            callerInfo.methodName = stack[2].substr(0, stack[2].indexOf(\"@\"));\n        }\n        return callerInfo;\n    }\n\n    callerInfo.methodName = m[1];\n    callerInfo.fileLocation = m[2];\n    callerInfo.line = m[3];\n    callerInfo.column = m[4];\n    return callerInfo;\n}\n\n/**\n * Logs messages using the transports and level from the logger.\n * @param logger a logger instance.\n * @param level the log level of the message. See the levels variable.\n * @param arguments array with arguments that will be logged.\n */\nfunction log() {\n    var logger = arguments[0], level = arguments[1],\n        args = Array.prototype.slice.call(arguments, 2);\n    if(levels[level] < logger.level) {\n        return;\n    }\n\n    var callerInfo\n        = !(logger.options.disableCallerInfo\n            || globalOptions.disableCallerInfo) && getCallerInfo();\n    var transports = globalTransports.concat(logger.transports);\n    for(var i = 0; i < transports.length; i++) {\n        var t = transports[i];\n        var l = t[level];\n        if(l && typeof(l) === \"function\") {\n            var logPrefixes = [];\n\n            if (logger.id) {\n                logPrefixes.push(\"[\" + logger.id + \"]\");\n            }\n\n            if (callerInfo && callerInfo.methodName.length > 1) {\n                logPrefixes.push(\"<\" + callerInfo.methodName + \">: \");\n            }\n\n            var fullLogParts = logPrefixes.concat(args);\n\n            l.bind(t).apply(t, fullLogParts);\n        }\n    }\n}\n\n/**\n *\n * Constructs new logger object.\n * @param level the logging level for the new logger\n * @param id optional identifier for the logger instance.\n * @param {LoggerTransport} transports optional list of handlers(objects) for\n * the logs. The handlers must support - log, warn, error, debug, info, trace.\n * @param options optional configuration file for how the logger should behave.\n * @param {boolean} options.disableCallerInfo Whether the call site of a logger\n * method invocation should be included in the log. Defaults to false, so the\n * call site will be included.\n */\nfunction Logger(level, id, transports, options) {\n    this.id = id;\n    this.options = options || {};\n    this.transports = transports;\n    if(!this.transports) {\n        this.transports = [];\n    }\n    this.level = levels[level];\n    var methods = Object.keys(levels);\n    for(var i = 0; i < methods.length; i++){\n        this[methods[i]] =\n            log.bind(null, this, methods[i]);\n    }\n}\n\n/**\n * Sets the log level for the logger.\n * @param level the new log level.\n */\nLogger.prototype.setLevel = function (level) {\n    this.level = levels[level];\n};\nmodule.exports = Logger;\n\n/**\n * Enum for the supported log levels.\n */\nLogger.levels = {\n    TRACE: \"trace\",\n    DEBUG: \"debug\",\n    INFO: \"info\",\n    LOG: \"log\",\n    WARN: \"warn\",\n    ERROR: \"error\"\n};\n"," /* eslint-env node */\n'use strict';\n\n// SDP helpers.\nvar SDPUtils = {};\n\n// Generate an alphanumeric identifier for cname or mids.\n// TODO: use UUIDs instead? https://gist.github.com/jed/982883\nSDPUtils.generateIdentifier = function() {\n  return Math.random().toString(36).substr(2, 10);\n};\n\n// The RTCP CNAME used by all peerconnections from the same JS.\nSDPUtils.localCName = SDPUtils.generateIdentifier();\n\n// Splits SDP into lines, dealing with both CRLF and LF.\nSDPUtils.splitLines = function(blob) {\n  return blob.trim().split('\\n').map(function(line) {\n    return line.trim();\n  });\n};\n// Splits SDP into sessionpart and mediasections. Ensures CRLF.\nSDPUtils.splitSections = function(blob) {\n  var parts = blob.split('\\nm=');\n  return parts.map(function(part, index) {\n    return (index > 0 ? 'm=' + part : part).trim() + '\\r\\n';\n  });\n};\n\n// returns the session description.\nSDPUtils.getDescription = function(blob) {\n  var sections = SDPUtils.splitSections(blob);\n  return sections && sections[0];\n};\n\n// returns the individual media sections.\nSDPUtils.getMediaSections = function(blob) {\n  var sections = SDPUtils.splitSections(blob);\n  sections.shift();\n  return sections;\n};\n\n// Returns lines that start with a certain prefix.\nSDPUtils.matchPrefix = function(blob, prefix) {\n  return SDPUtils.splitLines(blob).filter(function(line) {\n    return line.indexOf(prefix) === 0;\n  });\n};\n\n// Parses an ICE candidate line. Sample input:\n// candidate:702786350 2 udp 41819902 8.8.8.8 60769 typ relay raddr 8.8.8.8\n// rport 55996\"\nSDPUtils.parseCandidate = function(line) {\n  var parts;\n  // Parse both variants.\n  if (line.indexOf('a=candidate:') === 0) {\n    parts = line.substring(12).split(' ');\n  } else {\n    parts = line.substring(10).split(' ');\n  }\n\n  var candidate = {\n    foundation: parts[0],\n    component: parseInt(parts[1], 10),\n    protocol: parts[2].toLowerCase(),\n    priority: parseInt(parts[3], 10),\n    ip: parts[4],\n    port: parseInt(parts[5], 10),\n    // skip parts[6] == 'typ'\n    type: parts[7]\n  };\n\n  for (var i = 8; i < parts.length; i += 2) {\n    switch (parts[i]) {\n      case 'raddr':\n        candidate.relatedAddress = parts[i + 1];\n        break;\n      case 'rport':\n        candidate.relatedPort = parseInt(parts[i + 1], 10);\n        break;\n      case 'tcptype':\n        candidate.tcpType = parts[i + 1];\n        break;\n      case 'ufrag':\n        candidate.ufrag = parts[i + 1]; // for backward compability.\n        candidate.usernameFragment = parts[i + 1];\n        break;\n      default: // extension handling, in particular ufrag\n        candidate[parts[i]] = parts[i + 1];\n        break;\n    }\n  }\n  return candidate;\n};\n\n// Translates a candidate object into SDP candidate attribute.\nSDPUtils.writeCandidate = function(candidate) {\n  var sdp = [];\n  sdp.push(candidate.foundation);\n  sdp.push(candidate.component);\n  sdp.push(candidate.protocol.toUpperCase());\n  sdp.push(candidate.priority);\n  sdp.push(candidate.ip);\n  sdp.push(candidate.port);\n\n  var type = candidate.type;\n  sdp.push('typ');\n  sdp.push(type);\n  if (type !== 'host' && candidate.relatedAddress &&\n      candidate.relatedPort) {\n    sdp.push('raddr');\n    sdp.push(candidate.relatedAddress); // was: relAddr\n    sdp.push('rport');\n    sdp.push(candidate.relatedPort); // was: relPort\n  }\n  if (candidate.tcpType && candidate.protocol.toLowerCase() === 'tcp') {\n    sdp.push('tcptype');\n    sdp.push(candidate.tcpType);\n  }\n  if (candidate.ufrag) {\n    sdp.push('ufrag');\n    sdp.push(candidate.ufrag);\n  }\n  return 'candidate:' + sdp.join(' ');\n};\n\n// Parses an ice-options line, returns an array of option tags.\n// a=ice-options:foo bar\nSDPUtils.parseIceOptions = function(line) {\n  return line.substr(14).split(' ');\n}\n\n// Parses an rtpmap line, returns RTCRtpCoddecParameters. Sample input:\n// a=rtpmap:111 opus/48000/2\nSDPUtils.parseRtpMap = function(line) {\n  var parts = line.substr(9).split(' ');\n  var parsed = {\n    payloadType: parseInt(parts.shift(), 10) // was: id\n  };\n\n  parts = parts[0].split('/');\n\n  parsed.name = parts[0];\n  parsed.clockRate = parseInt(parts[1], 10); // was: clockrate\n  // was: channels\n  parsed.numChannels = parts.length === 3 ? parseInt(parts[2], 10) : 1;\n  return parsed;\n};\n\n// Generate an a=rtpmap line from RTCRtpCodecCapability or\n// RTCRtpCodecParameters.\nSDPUtils.writeRtpMap = function(codec) {\n  var pt = codec.payloadType;\n  if (codec.preferredPayloadType !== undefined) {\n    pt = codec.preferredPayloadType;\n  }\n  return 'a=rtpmap:' + pt + ' ' + codec.name + '/' + codec.clockRate +\n      (codec.numChannels !== 1 ? '/' + codec.numChannels : '') + '\\r\\n';\n};\n\n// Parses an a=extmap line (headerextension from RFC 5285). Sample input:\n// a=extmap:2 urn:ietf:params:rtp-hdrext:toffset\n// a=extmap:2/sendonly urn:ietf:params:rtp-hdrext:toffset\nSDPUtils.parseExtmap = function(line) {\n  var parts = line.substr(9).split(' ');\n  return {\n    id: parseInt(parts[0], 10),\n    direction: parts[0].indexOf('/') > 0 ? parts[0].split('/')[1] : 'sendrecv',\n    uri: parts[1]\n  };\n};\n\n// Generates a=extmap line from RTCRtpHeaderExtensionParameters or\n// RTCRtpHeaderExtension.\nSDPUtils.writeExtmap = function(headerExtension) {\n  return 'a=extmap:' + (headerExtension.id || headerExtension.preferredId) +\n      (headerExtension.direction && headerExtension.direction !== 'sendrecv'\n          ? '/' + headerExtension.direction\n          : '') +\n      ' ' + headerExtension.uri + '\\r\\n';\n};\n\n// Parses an ftmp line, returns dictionary. Sample input:\n// a=fmtp:96 vbr=on;cng=on\n// Also deals with vbr=on; cng=on\nSDPUtils.parseFmtp = function(line) {\n  var parsed = {};\n  var kv;\n  var parts = line.substr(line.indexOf(' ') + 1).split(';');\n  for (var j = 0; j < parts.length; j++) {\n    kv = parts[j].trim().split('=');\n    parsed[kv[0].trim()] = kv[1];\n  }\n  return parsed;\n};\n\n// Generates an a=ftmp line from RTCRtpCodecCapability or RTCRtpCodecParameters.\nSDPUtils.writeFmtp = function(codec) {\n  var line = '';\n  var pt = codec.payloadType;\n  if (codec.preferredPayloadType !== undefined) {\n    pt = codec.preferredPayloadType;\n  }\n  if (codec.parameters && Object.keys(codec.parameters).length) {\n    var params = [];\n    Object.keys(codec.parameters).forEach(function(param) {\n      params.push(param + '=' + codec.parameters[param]);\n    });\n    line += 'a=fmtp:' + pt + ' ' + params.join(';') + '\\r\\n';\n  }\n  return line;\n};\n\n// Parses an rtcp-fb line, returns RTCPRtcpFeedback object. Sample input:\n// a=rtcp-fb:98 nack rpsi\nSDPUtils.parseRtcpFb = function(line) {\n  var parts = line.substr(line.indexOf(' ') + 1).split(' ');\n  return {\n    type: parts.shift(),\n    parameter: parts.join(' ')\n  };\n};\n// Generate a=rtcp-fb lines from RTCRtpCodecCapability or RTCRtpCodecParameters.\nSDPUtils.writeRtcpFb = function(codec) {\n  var lines = '';\n  var pt = codec.payloadType;\n  if (codec.preferredPayloadType !== undefined) {\n    pt = codec.preferredPayloadType;\n  }\n  if (codec.rtcpFeedback && codec.rtcpFeedback.length) {\n    // FIXME: special handling for trr-int?\n    codec.rtcpFeedback.forEach(function(fb) {\n      lines += 'a=rtcp-fb:' + pt + ' ' + fb.type +\n      (fb.parameter && fb.parameter.length ? ' ' + fb.parameter : '') +\n          '\\r\\n';\n    });\n  }\n  return lines;\n};\n\n// Parses an RFC 5576 ssrc media attribute. Sample input:\n// a=ssrc:3735928559 cname:something\nSDPUtils.parseSsrcMedia = function(line) {\n  var sp = line.indexOf(' ');\n  var parts = {\n    ssrc: parseInt(line.substr(7, sp - 7), 10)\n  };\n  var colon = line.indexOf(':', sp);\n  if (colon > -1) {\n    parts.attribute = line.substr(sp + 1, colon - sp - 1);\n    parts.value = line.substr(colon + 1);\n  } else {\n    parts.attribute = line.substr(sp + 1);\n  }\n  return parts;\n};\n\n// Extracts the MID (RFC 5888) from a media section.\n// returns the MID or undefined if no mid line was found.\nSDPUtils.getMid = function(mediaSection) {\n  var mid = SDPUtils.matchPrefix(mediaSection, 'a=mid:')[0];\n  if (mid) {\n    return mid.substr(6);\n  }\n}\n\nSDPUtils.parseFingerprint = function(line) {\n  var parts = line.substr(14).split(' ');\n  return {\n    algorithm: parts[0].toLowerCase(), // algorithm is case-sensitive in Edge.\n    value: parts[1]\n  };\n};\n\n// Extracts DTLS parameters from SDP media section or sessionpart.\n// FIXME: for consistency with other functions this should only\n//   get the fingerprint line as input. See also getIceParameters.\nSDPUtils.getDtlsParameters = function(mediaSection, sessionpart) {\n  var lines = SDPUtils.matchPrefix(mediaSection + sessionpart,\n      'a=fingerprint:');\n  // Note: a=setup line is ignored since we use the 'auto' role.\n  // Note2: 'algorithm' is not case sensitive except in Edge.\n  return {\n    role: 'auto',\n    fingerprints: lines.map(SDPUtils.parseFingerprint)\n  };\n};\n\n// Serializes DTLS parameters to SDP.\nSDPUtils.writeDtlsParameters = function(params, setupType) {\n  var sdp = 'a=setup:' + setupType + '\\r\\n';\n  params.fingerprints.forEach(function(fp) {\n    sdp += 'a=fingerprint:' + fp.algorithm + ' ' + fp.value + '\\r\\n';\n  });\n  return sdp;\n};\n// Parses ICE information from SDP media section or sessionpart.\n// FIXME: for consistency with other functions this should only\n//   get the ice-ufrag and ice-pwd lines as input.\nSDPUtils.getIceParameters = function(mediaSection, sessionpart) {\n  var lines = SDPUtils.splitLines(mediaSection);\n  // Search in session part, too.\n  lines = lines.concat(SDPUtils.splitLines(sessionpart));\n  var iceParameters = {\n    usernameFragment: lines.filter(function(line) {\n      return line.indexOf('a=ice-ufrag:') === 0;\n    })[0].substr(12),\n    password: lines.filter(function(line) {\n      return line.indexOf('a=ice-pwd:') === 0;\n    })[0].substr(10)\n  };\n  return iceParameters;\n};\n\n// Serializes ICE parameters to SDP.\nSDPUtils.writeIceParameters = function(params) {\n  return 'a=ice-ufrag:' + params.usernameFragment + '\\r\\n' +\n      'a=ice-pwd:' + params.password + '\\r\\n';\n};\n\n// Parses the SDP media section and returns RTCRtpParameters.\nSDPUtils.parseRtpParameters = function(mediaSection) {\n  var description = {\n    codecs: [],\n    headerExtensions: [],\n    fecMechanisms: [],\n    rtcp: []\n  };\n  var lines = SDPUtils.splitLines(mediaSection);\n  var mline = lines[0].split(' ');\n  for (var i = 3; i < mline.length; i++) { // find all codecs from mline[3..]\n    var pt = mline[i];\n    var rtpmapline = SDPUtils.matchPrefix(\n        mediaSection, 'a=rtpmap:' + pt + ' ')[0];\n    if (rtpmapline) {\n      var codec = SDPUtils.parseRtpMap(rtpmapline);\n      var fmtps = SDPUtils.matchPrefix(\n          mediaSection, 'a=fmtp:' + pt + ' ');\n      // Only the first a=fmtp:<pt> is considered.\n      codec.parameters = fmtps.length ? SDPUtils.parseFmtp(fmtps[0]) : {};\n      codec.rtcpFeedback = SDPUtils.matchPrefix(\n          mediaSection, 'a=rtcp-fb:' + pt + ' ')\n        .map(SDPUtils.parseRtcpFb);\n      description.codecs.push(codec);\n      // parse FEC mechanisms from rtpmap lines.\n      switch (codec.name.toUpperCase()) {\n        case 'RED':\n        case 'ULPFEC':\n          description.fecMechanisms.push(codec.name.toUpperCase());\n          break;\n        default: // only RED and ULPFEC are recognized as FEC mechanisms.\n          break;\n      }\n    }\n  }\n  SDPUtils.matchPrefix(mediaSection, 'a=extmap:').forEach(function(line) {\n    description.headerExtensions.push(SDPUtils.parseExtmap(line));\n  });\n  // FIXME: parse rtcp.\n  return description;\n};\n\n// Generates parts of the SDP media section describing the capabilities /\n// parameters.\nSDPUtils.writeRtpDescription = function(kind, caps) {\n  var sdp = '';\n\n  // Build the mline.\n  sdp += 'm=' + kind + ' ';\n  sdp += caps.codecs.length > 0 ? '9' : '0'; // reject if no codecs.\n  sdp += ' UDP/TLS/RTP/SAVPF ';\n  sdp += caps.codecs.map(function(codec) {\n    if (codec.preferredPayloadType !== undefined) {\n      return codec.preferredPayloadType;\n    }\n    return codec.payloadType;\n  }).join(' ') + '\\r\\n';\n\n  sdp += 'c=IN IP4 0.0.0.0\\r\\n';\n  sdp += 'a=rtcp:9 IN IP4 0.0.0.0\\r\\n';\n\n  // Add a=rtpmap lines for each codec. Also fmtp and rtcp-fb.\n  caps.codecs.forEach(function(codec) {\n    sdp += SDPUtils.writeRtpMap(codec);\n    sdp += SDPUtils.writeFmtp(codec);\n    sdp += SDPUtils.writeRtcpFb(codec);\n  });\n  var maxptime = 0;\n  caps.codecs.forEach(function(codec) {\n    if (codec.maxptime > maxptime) {\n      maxptime = codec.maxptime;\n    }\n  });\n  if (maxptime > 0) {\n    sdp += 'a=maxptime:' + maxptime + '\\r\\n';\n  }\n  sdp += 'a=rtcp-mux\\r\\n';\n\n  caps.headerExtensions.forEach(function(extension) {\n    sdp += SDPUtils.writeExtmap(extension);\n  });\n  // FIXME: write fecMechanisms.\n  return sdp;\n};\n\n// Parses the SDP media section and returns an array of\n// RTCRtpEncodingParameters.\nSDPUtils.parseRtpEncodingParameters = function(mediaSection) {\n  var encodingParameters = [];\n  var description = SDPUtils.parseRtpParameters(mediaSection);\n  var hasRed = description.fecMechanisms.indexOf('RED') !== -1;\n  var hasUlpfec = description.fecMechanisms.indexOf('ULPFEC') !== -1;\n\n  // filter a=ssrc:... cname:, ignore PlanB-msid\n  var ssrcs = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')\n  .map(function(line) {\n    return SDPUtils.parseSsrcMedia(line);\n  })\n  .filter(function(parts) {\n    return parts.attribute === 'cname';\n  });\n  var primarySsrc = ssrcs.length > 0 && ssrcs[0].ssrc;\n  var secondarySsrc;\n\n  var flows = SDPUtils.matchPrefix(mediaSection, 'a=ssrc-group:FID')\n  .map(function(line) {\n    var parts = line.split(' ');\n    parts.shift();\n    return parts.map(function(part) {\n      return parseInt(part, 10);\n    });\n  });\n  if (flows.length > 0 && flows[0].length > 1 && flows[0][0] === primarySsrc) {\n    secondarySsrc = flows[0][1];\n  }\n\n  description.codecs.forEach(function(codec) {\n    if (codec.name.toUpperCase() === 'RTX' && codec.parameters.apt) {\n      var encParam = {\n        ssrc: primarySsrc,\n        codecPayloadType: parseInt(codec.parameters.apt, 10),\n        rtx: {\n          ssrc: secondarySsrc\n        }\n      };\n      encodingParameters.push(encParam);\n      if (hasRed) {\n        encParam = JSON.parse(JSON.stringify(encParam));\n        encParam.fec = {\n          ssrc: secondarySsrc,\n          mechanism: hasUlpfec ? 'red+ulpfec' : 'red'\n        };\n        encodingParameters.push(encParam);\n      }\n    }\n  });\n  if (encodingParameters.length === 0 && primarySsrc) {\n    encodingParameters.push({\n      ssrc: primarySsrc\n    });\n  }\n\n  // we support both b=AS and b=TIAS but interpret AS as TIAS.\n  var bandwidth = SDPUtils.matchPrefix(mediaSection, 'b=');\n  if (bandwidth.length) {\n    if (bandwidth[0].indexOf('b=TIAS:') === 0) {\n      bandwidth = parseInt(bandwidth[0].substr(7), 10);\n    } else if (bandwidth[0].indexOf('b=AS:') === 0) {\n      // use formula from JSEP to convert b=AS to TIAS value.\n      bandwidth = parseInt(bandwidth[0].substr(5), 10) * 1000 * 0.95\n          - (50 * 40 * 8);\n    } else {\n      bandwidth = undefined;\n    }\n    encodingParameters.forEach(function(params) {\n      params.maxBitrate = bandwidth;\n    });\n  }\n  return encodingParameters;\n};\n\n// parses http://draft.ortc.org/#rtcrtcpparameters*\nSDPUtils.parseRtcpParameters = function(mediaSection) {\n  var rtcpParameters = {};\n\n  var cname;\n  // Gets the first SSRC. Note that with RTX there might be multiple\n  // SSRCs.\n  var remoteSsrc = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')\n      .map(function(line) {\n        return SDPUtils.parseSsrcMedia(line);\n      })\n      .filter(function(obj) {\n        return obj.attribute === 'cname';\n      })[0];\n  if (remoteSsrc) {\n    rtcpParameters.cname = remoteSsrc.value;\n    rtcpParameters.ssrc = remoteSsrc.ssrc;\n  }\n\n  // Edge uses the compound attribute instead of reducedSize\n  // compound is !reducedSize\n  var rsize = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-rsize');\n  rtcpParameters.reducedSize = rsize.length > 0;\n  rtcpParameters.compound = rsize.length === 0;\n\n  // parses the rtcp-mux attrіbute.\n  // Note that Edge does not support unmuxed RTCP.\n  var mux = SDPUtils.matchPrefix(mediaSection, 'a=rtcp-mux');\n  rtcpParameters.mux = mux.length > 0;\n\n  return rtcpParameters;\n};\n\n// parses either a=msid: or a=ssrc:... msid lines and returns\n// the id of the MediaStream and MediaStreamTrack.\nSDPUtils.parseMsid = function(mediaSection) {\n  var parts;\n  var spec = SDPUtils.matchPrefix(mediaSection, 'a=msid:');\n  if (spec.length === 1) {\n    parts = spec[0].substr(7).split(' ');\n    return {stream: parts[0], track: parts[1]};\n  }\n  var planB = SDPUtils.matchPrefix(mediaSection, 'a=ssrc:')\n  .map(function(line) {\n    return SDPUtils.parseSsrcMedia(line);\n  })\n  .filter(function(parts) {\n    return parts.attribute === 'msid';\n  });\n  if (planB.length > 0) {\n    parts = planB[0].value.split(' ');\n    return {stream: parts[0], track: parts[1]};\n  }\n};\n\n// Generate a session ID for SDP.\n// https://tools.ietf.org/html/draft-ietf-rtcweb-jsep-20#section-5.2.1\n// recommends using a cryptographically random +ve 64-bit value\n// but right now this should be acceptable and within the right range\nSDPUtils.generateSessionId = function() {\n  return Math.random().toString().substr(2, 21);\n};\n\n// Write boilder plate for start of SDP\n// sessId argument is optional - if not supplied it will\n// be generated randomly\n// sessVersion is optional and defaults to 2\nSDPUtils.writeSessionBoilerplate = function(sessId, sessVer) {\n  var sessionId;\n  var version = sessVer !== undefined ? sessVer : 2;\n  if (sessId) {\n    sessionId = sessId;\n  } else {\n    sessionId = SDPUtils.generateSessionId();\n  }\n  // FIXME: sess-id should be an NTP timestamp.\n  return 'v=0\\r\\n' +\n      'o=thisisadapterortc ' + sessionId + ' ' + version + ' IN IP4 127.0.0.1\\r\\n' +\n      's=-\\r\\n' +\n      't=0 0\\r\\n';\n};\n\nSDPUtils.writeMediaSection = function(transceiver, caps, type, stream) {\n  var sdp = SDPUtils.writeRtpDescription(transceiver.kind, caps);\n\n  // Map ICE parameters (ufrag, pwd) to SDP.\n  sdp += SDPUtils.writeIceParameters(\n      transceiver.iceGatherer.getLocalParameters());\n\n  // Map DTLS parameters to SDP.\n  sdp += SDPUtils.writeDtlsParameters(\n      transceiver.dtlsTransport.getLocalParameters(),\n      type === 'offer' ? 'actpass' : 'active');\n\n  sdp += 'a=mid:' + transceiver.mid + '\\r\\n';\n\n  if (transceiver.direction) {\n    sdp += 'a=' + transceiver.direction + '\\r\\n';\n  } else if (transceiver.rtpSender && transceiver.rtpReceiver) {\n    sdp += 'a=sendrecv\\r\\n';\n  } else if (transceiver.rtpSender) {\n    sdp += 'a=sendonly\\r\\n';\n  } else if (transceiver.rtpReceiver) {\n    sdp += 'a=recvonly\\r\\n';\n  } else {\n    sdp += 'a=inactive\\r\\n';\n  }\n\n  if (transceiver.rtpSender) {\n    // spec.\n    var msid = 'msid:' + stream.id + ' ' +\n        transceiver.rtpSender.track.id + '\\r\\n';\n    sdp += 'a=' + msid;\n\n    // for Chrome.\n    sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].ssrc +\n        ' ' + msid;\n    if (transceiver.sendEncodingParameters[0].rtx) {\n      sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].rtx.ssrc +\n          ' ' + msid;\n      sdp += 'a=ssrc-group:FID ' +\n          transceiver.sendEncodingParameters[0].ssrc + ' ' +\n          transceiver.sendEncodingParameters[0].rtx.ssrc +\n          '\\r\\n';\n    }\n  }\n  // FIXME: this should be written by writeRtpDescription.\n  sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].ssrc +\n      ' cname:' + SDPUtils.localCName + '\\r\\n';\n  if (transceiver.rtpSender && transceiver.sendEncodingParameters[0].rtx) {\n    sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].rtx.ssrc +\n        ' cname:' + SDPUtils.localCName + '\\r\\n';\n  }\n  return sdp;\n};\n\n// Gets the direction from the mediaSection or the sessionpart.\nSDPUtils.getDirection = function(mediaSection, sessionpart) {\n  // Look for sendrecv, sendonly, recvonly, inactive, default to sendrecv.\n  var lines = SDPUtils.splitLines(mediaSection);\n  for (var i = 0; i < lines.length; i++) {\n    switch (lines[i]) {\n      case 'a=sendrecv':\n      case 'a=sendonly':\n      case 'a=recvonly':\n      case 'a=inactive':\n        return lines[i].substr(2);\n      default:\n        // FIXME: What should happen here?\n    }\n  }\n  if (sessionpart) {\n    return SDPUtils.getDirection(sessionpart);\n  }\n  return 'sendrecv';\n};\n\nSDPUtils.getKind = function(mediaSection) {\n  var lines = SDPUtils.splitLines(mediaSection);\n  var mline = lines[0].split(' ');\n  return mline[0].substr(2);\n};\n\nSDPUtils.isRejected = function(mediaSection) {\n  return mediaSection.split(' ', 2)[1] === '0';\n};\n\nSDPUtils.parseMLine = function(mediaSection) {\n  var lines = SDPUtils.splitLines(mediaSection);\n  var parts = lines[0].substr(2).split(' ');\n  return {\n    kind: parts[0],\n    port: parseInt(parts[1], 10),\n    protocol: parts[2],\n    fmt: parts.slice(3).join(' ')\n  };\n};\n\nSDPUtils.parseOLine = function(mediaSection) {\n  var line = SDPUtils.matchPrefix(mediaSection, 'o=')[0];\n  var parts = line.substr(2).split(' ');\n  return {\n    username: parts[0],\n    sessionId: parts[1],\n    sessionVersion: parseInt(parts[2], 10),\n    netType: parts[3],\n    addressType: parts[4],\n    address: parts[5],\n  };\n}\n\n// Expose public methods.\nif (typeof module === 'object') {\n  module.exports = SDPUtils;\n}\n","var grammar = module.exports = {\n  v: [{\n    name: 'version',\n    reg: /^(\\d*)$/\n  }],\n  o: [{ //o=- 20518 0 IN IP4 203.0.113.1\n    // NB: sessionId will be a String in most cases because it is huge\n    name: 'origin',\n    reg: /^(\\S*) (\\d*) (\\d*) (\\S*) IP(\\d) (\\S*)/,\n    names: ['username', 'sessionId', 'sessionVersion', 'netType', 'ipVer', 'address'],\n    format: '%s %s %d %s IP%d %s'\n  }],\n  // default parsing of these only (though some of these feel outdated)\n  s: [{ name: 'name' }],\n  i: [{ name: 'description' }],\n  u: [{ name: 'uri' }],\n  e: [{ name: 'email' }],\n  p: [{ name: 'phone' }],\n  z: [{ name: 'timezones' }], // TODO: this one can actually be parsed properly..\n  r: [{ name: 'repeats' }],   // TODO: this one can also be parsed properly\n  //k: [{}], // outdated thing ignored\n  t: [{ //t=0 0\n    name: 'timing',\n    reg: /^(\\d*) (\\d*)/,\n    names: ['start', 'stop'],\n    format: '%d %d'\n  }],\n  c: [{ //c=IN IP4 10.47.197.26\n    name: 'connection',\n    reg: /^IN IP(\\d) (\\S*)/,\n    names: ['version', 'ip'],\n    format: 'IN IP%d %s'\n  }],\n  b: [{ //b=AS:4000\n    push: 'bandwidth',\n    reg: /^(TIAS|AS|CT|RR|RS):(\\d*)/,\n    names: ['type', 'limit'],\n    format: '%s:%s'\n  }],\n  m: [{ //m=video 51744 RTP/AVP 126 97 98 34 31\n    // NB: special - pushes to session\n    // TODO: rtp/fmtp should be filtered by the payloads found here?\n    reg: /^(\\w*) (\\d*) ([\\w\\/]*)(?: (.*))?/,\n    names: ['type', 'port', 'protocol', 'payloads'],\n    format: '%s %d %s %s'\n  }],\n  a: [\n    { //a=rtpmap:110 opus/48000/2\n      push: 'rtp',\n      reg: /^rtpmap:(\\d*) ([\\w\\-\\.]*)(?:\\s*\\/(\\d*)(?:\\s*\\/(\\S*))?)?/,\n      names: ['payload', 'codec', 'rate', 'encoding'],\n      format: function (o) {\n        return (o.encoding) ?\n          'rtpmap:%d %s/%s/%s':\n          o.rate ?\n          'rtpmap:%d %s/%s':\n          'rtpmap:%d %s';\n      }\n    },\n    { //a=fmtp:108 profile-level-id=24;object=23;bitrate=64000\n      //a=fmtp:111 minptime=10; useinbandfec=1\n      push: 'fmtp',\n      reg: /^fmtp:(\\d*) ([\\S| ]*)/,\n      names: ['payload', 'config'],\n      format: 'fmtp:%d %s'\n    },\n    { //a=control:streamid=0\n      name: 'control',\n      reg: /^control:(.*)/,\n      format: 'control:%s'\n    },\n    { //a=rtcp:65179 IN IP4 193.84.77.194\n      name: 'rtcp',\n      reg: /^rtcp:(\\d*)(?: (\\S*) IP(\\d) (\\S*))?/,\n      names: ['port', 'netType', 'ipVer', 'address'],\n      format: function (o) {\n        return (o.address != null) ?\n          'rtcp:%d %s IP%d %s':\n          'rtcp:%d';\n      }\n    },\n    { //a=rtcp-fb:98 trr-int 100\n      push: 'rtcpFbTrrInt',\n      reg: /^rtcp-fb:(\\*|\\d*) trr-int (\\d*)/,\n      names: ['payload', 'value'],\n      format: 'rtcp-fb:%d trr-int %d'\n    },\n    { //a=rtcp-fb:98 nack rpsi\n      push: 'rtcpFb',\n      reg: /^rtcp-fb:(\\*|\\d*) ([\\w-_]*)(?: ([\\w-_]*))?/,\n      names: ['payload', 'type', 'subtype'],\n      format: function (o) {\n        return (o.subtype != null) ?\n          'rtcp-fb:%s %s %s':\n          'rtcp-fb:%s %s';\n      }\n    },\n    { //a=extmap:2 urn:ietf:params:rtp-hdrext:toffset\n      //a=extmap:1/recvonly URI-gps-string\n      push: 'ext',\n      reg: /^extmap:(\\d+)(?:\\/(\\w+))? (\\S*)(?: (\\S*))?/,\n      names: ['value', 'direction', 'uri', 'config'],\n      format: function (o) {\n        return 'extmap:%d' + (o.direction ? '/%s' : '%v') + ' %s' + (o.config ? ' %s' : '');\n      }\n    },\n    { //a=crypto:1 AES_CM_128_HMAC_SHA1_80 inline:PS1uQCVeeCFCanVmcjkpPywjNWhcYD0mXXtxaVBR|2^20|1:32\n      push: 'crypto',\n      reg: /^crypto:(\\d*) ([\\w_]*) (\\S*)(?: (\\S*))?/,\n      names: ['id', 'suite', 'config', 'sessionConfig'],\n      format: function (o) {\n        return (o.sessionConfig != null) ?\n          'crypto:%d %s %s %s':\n          'crypto:%d %s %s';\n      }\n    },\n    { //a=setup:actpass\n      name: 'setup',\n      reg: /^setup:(\\w*)/,\n      format: 'setup:%s'\n    },\n    { //a=mid:1\n      name: 'mid',\n      reg: /^mid:([^\\s]*)/,\n      format: 'mid:%s'\n    },\n    { //a=msid:0c8b064d-d807-43b4-b434-f92a889d8587 98178685-d409-46e0-8e16-7ef0db0db64a\n      name: 'msid',\n      reg: /^msid:(.*)/,\n      format: 'msid:%s'\n    },\n    { //a=ptime:20\n      name: 'ptime',\n      reg: /^ptime:(\\d*)/,\n      format: 'ptime:%d'\n    },\n    { //a=maxptime:60\n      name: 'maxptime',\n      reg: /^maxptime:(\\d*)/,\n      format: 'maxptime:%d'\n    },\n    { //a=sendrecv\n      name: 'direction',\n      reg: /^(sendrecv|recvonly|sendonly|inactive)/\n    },\n    { //a=ice-lite\n      name: 'icelite',\n      reg: /^(ice-lite)/\n    },\n    { //a=ice-ufrag:F7gI\n      name: 'iceUfrag',\n      reg: /^ice-ufrag:(\\S*)/,\n      format: 'ice-ufrag:%s'\n    },\n    { //a=ice-pwd:x9cml/YzichV2+XlhiMu8g\n      name: 'icePwd',\n      reg: /^ice-pwd:(\\S*)/,\n      format: 'ice-pwd:%s'\n    },\n    { //a=fingerprint:SHA-1 00:11:22:33:44:55:66:77:88:99:AA:BB:CC:DD:EE:FF:00:11:22:33\n      name: 'fingerprint',\n      reg: /^fingerprint:(\\S*) (\\S*)/,\n      names: ['type', 'hash'],\n      format: 'fingerprint:%s %s'\n    },\n    { //a=candidate:0 1 UDP 2113667327 203.0.113.1 54400 typ host\n      //a=candidate:1162875081 1 udp 2113937151 192.168.34.75 60017 typ host generation 0 network-id 3 network-cost 10\n      //a=candidate:3289912957 2 udp 1845501695 193.84.77.194 60017 typ srflx raddr 192.168.34.75 rport 60017 generation 0 network-id 3 network-cost 10\n      //a=candidate:229815620 1 tcp 1518280447 192.168.150.19 60017 typ host tcptype active generation 0 network-id 3 network-cost 10\n      //a=candidate:3289912957 2 tcp 1845501695 193.84.77.194 60017 typ srflx raddr 192.168.34.75 rport 60017 tcptype passive generation 0 network-id 3 network-cost 10\n      push:'candidates',\n      reg: /^candidate:(\\S*) (\\d*) (\\S*) (\\d*) (\\S*) (\\d*) typ (\\S*)(?: raddr (\\S*) rport (\\d*))?(?: tcptype (\\S*))?(?: generation (\\d*))?(?: network-id (\\d*))?(?: network-cost (\\d*))?/,\n      names: ['foundation', 'component', 'transport', 'priority', 'ip', 'port', 'type', 'raddr', 'rport', 'tcptype', 'generation', 'network-id', 'network-cost'],\n      format: function (o) {\n        var str = 'candidate:%s %d %s %d %s %d typ %s';\n\n        str += (o.raddr != null) ? ' raddr %s rport %d' : '%v%v';\n\n        // NB: candidate has three optional chunks, so %void middles one if it's missing\n        str += (o.tcptype != null) ? ' tcptype %s' : '%v';\n\n        if (o.generation != null) {\n          str += ' generation %d';\n        }\n\n        str += (o['network-id'] != null) ? ' network-id %d' : '%v';\n        str += (o['network-cost'] != null) ? ' network-cost %d' : '%v';\n        return str;\n      }\n    },\n    { //a=end-of-candidates (keep after the candidates line for readability)\n      name: 'endOfCandidates',\n      reg: /^(end-of-candidates)/\n    },\n    { //a=remote-candidates:1 203.0.113.1 54400 2 203.0.113.1 54401 ...\n      name: 'remoteCandidates',\n      reg: /^remote-candidates:(.*)/,\n      format: 'remote-candidates:%s'\n    },\n    { //a=ice-options:google-ice\n      name: 'iceOptions',\n      reg: /^ice-options:(\\S*)/,\n      format: 'ice-options:%s'\n    },\n    { //a=ssrc:2566107569 cname:t9YU8M1UxTF8Y1A1\n      push: 'ssrcs',\n      reg: /^ssrc:(\\d*) ([\\w_]*)(?::(.*))?/,\n      names: ['id', 'attribute', 'value'],\n      format: function (o) {\n        var str = 'ssrc:%d';\n        if (o.attribute != null) {\n          str += ' %s';\n          if (o.value != null) {\n            str += ':%s';\n          }\n        }\n        return str;\n      }\n    },\n    { //a=ssrc-group:FEC 1 2\n      //a=ssrc-group:FEC-FR 3004364195 1080772241\n      push: 'ssrcGroups',\n      // token-char = %x21 / %x23-27 / %x2A-2B / %x2D-2E / %x30-39 / %x41-5A / %x5E-7E\n      reg: /^ssrc-group:([\\x21\\x23\\x24\\x25\\x26\\x27\\x2A\\x2B\\x2D\\x2E\\w]*) (.*)/,\n      names: ['semantics', 'ssrcs'],\n      format: 'ssrc-group:%s %s'\n    },\n    { //a=msid-semantic: WMS Jvlam5X3SX1OP6pn20zWogvaKJz5Hjf9OnlV\n      name: 'msidSemantic',\n      reg: /^msid-semantic:\\s?(\\w*) (\\S*)/,\n      names: ['semantic', 'token'],\n      format: 'msid-semantic: %s %s' // space after ':' is not accidental\n    },\n    { //a=group:BUNDLE audio video\n      push: 'groups',\n      reg: /^group:(\\w*) (.*)/,\n      names: ['type', 'mids'],\n      format: 'group:%s %s'\n    },\n    { //a=rtcp-mux\n      name: 'rtcpMux',\n      reg: /^(rtcp-mux)/\n    },\n    { //a=rtcp-rsize\n      name: 'rtcpRsize',\n      reg: /^(rtcp-rsize)/\n    },\n    { //a=sctpmap:5000 webrtc-datachannel 1024\n      name: 'sctpmap',\n      reg: /^sctpmap:([\\w_\\/]*) (\\S*)(?: (\\S*))?/,\n      names: ['sctpmapNumber', 'app', 'maxMessageSize'],\n      format: function (o) {\n        return (o.maxMessageSize != null) ?\n          'sctpmap:%s %s %s' :\n          'sctpmap:%s %s';\n      }\n    },\n    { //a=x-google-flag:conference\n      name: 'xGoogleFlag',\n      reg: /^x-google-flag:([^\\s]*)/,\n      format: 'x-google-flag:%s'\n    },\n    { //a=rid:1 send max-width=1280;max-height=720;max-fps=30;depend=0\n      push: 'rids',\n      reg: /^rid:([\\d\\w]+) (\\w+)(?: ([\\S| ]*))?/,\n      names: ['id', 'direction', 'params'],\n      format: function (o) {\n        return (o.params) ? 'rid:%s %s %s' : 'rid:%s %s';\n      }\n    },\n    { //a=imageattr:97 send [x=800,y=640,sar=1.1,q=0.6] [x=480,y=320] recv [x=330,y=250]\n      //a=imageattr:* send [x=800,y=640] recv *\n      //a=imageattr:100 recv [x=320,y=240]\n      push: 'imageattrs',\n      reg: new RegExp(\n        //a=imageattr:97\n        '^imageattr:(\\\\d+|\\\\*)' +\n        //send [x=800,y=640,sar=1.1,q=0.6] [x=480,y=320]\n        '[\\\\s\\\\t]+(send|recv)[\\\\s\\\\t]+(\\\\*|\\\\[\\\\S+\\\\](?:[\\\\s\\\\t]+\\\\[\\\\S+\\\\])*)' +\n        //recv [x=330,y=250]\n        '(?:[\\\\s\\\\t]+(recv|send)[\\\\s\\\\t]+(\\\\*|\\\\[\\\\S+\\\\](?:[\\\\s\\\\t]+\\\\[\\\\S+\\\\])*))?'\n      ),\n      names: ['pt', 'dir1', 'attrs1', 'dir2', 'attrs2'],\n      format: function (o) {\n        return 'imageattr:%s %s %s' + (o.dir2 ? ' %s %s' : '');\n      }\n    },\n    { //a=simulcast:send 1,2,3;~4,~5 recv 6;~7,~8\n      //a=simulcast:recv 1;4,5 send 6;7\n      name: 'simulcast',\n      reg: new RegExp(\n        //a=simulcast:\n        '^simulcast:' +\n        //send 1,2,3;~4,~5\n        '(send|recv) ([a-zA-Z0-9\\\\-_~;,]+)' +\n        //space + recv 6;~7,~8\n        '(?:\\\\s?(send|recv) ([a-zA-Z0-9\\\\-_~;,]+))?' +\n        //end\n        '$'\n      ),\n      names: ['dir1', 'list1', 'dir2', 'list2'],\n      format: function (o) {\n        return 'simulcast:%s %s' + (o.dir2 ? ' %s %s' : '');\n      }\n    },\n    { //Old simulcast draft 03 (implemented by Firefox)\n      //  https://tools.ietf.org/html/draft-ietf-mmusic-sdp-simulcast-03\n      //a=simulcast: recv pt=97;98 send pt=97\n      //a=simulcast: send rid=5;6;7 paused=6,7\n      name: 'simulcast_03',\n      reg: /^simulcast:[\\s\\t]+([\\S+\\s\\t]+)$/,\n      names: ['value'],\n      format: 'simulcast: %s'\n    },\n    {\n      //a=framerate:25\n      //a=framerate:29.97\n      name: 'framerate',\n      reg: /^framerate:(\\d+(?:$|\\.\\d+))/,\n      format: 'framerate:%s'\n    },\n    { // any a= that we don't understand is kepts verbatim on media.invalid\n      push: 'invalid',\n      names: ['value']\n    }\n  ]\n};\n\n// set sensible defaults to avoid polluting the grammar with boring details\nObject.keys(grammar).forEach(function (key) {\n  var objs = grammar[key];\n  objs.forEach(function (obj) {\n    if (!obj.reg) {\n      obj.reg = /(.*)/;\n    }\n    if (!obj.format) {\n      obj.format = '%s';\n    }\n  });\n});\n","/* global MediaRecorder, MediaStream */\n\nconst RecordingResult = require('./recordingResult');\n\n/**\n * Possible audio formats MIME types\n */\nconst AUDIO_WEBM = 'audio/webm'; // Supported in chrome\nconst AUDIO_OGG = 'audio/ogg'; // Supported in firefox\n\n/**\n * A TrackRecorder object holds all the information needed for recording a\n * single JitsiTrack (either remote or local)\n * @param track The JitsiTrack the object is going to hold\n */\nconst TrackRecorder = function(track) {\n    // The JitsiTrack holding the stream\n    this.track = track;\n\n    // The MediaRecorder recording the stream\n    this.recorder = null;\n\n    // The array of data chunks recorded from the stream\n    // acts as a buffer until the data is stored on disk\n    this.data = null;\n\n    // the name of the person of the JitsiTrack. This can be undefined and/or\n    // not unique\n    this.name = null;\n\n    // the time of the start of the recording\n    this.startTime = null;\n};\n\n/**\n * Starts the recording of a JitsiTrack in a TrackRecorder object.\n * This will also define the timestamp and try to update the name\n * @param trackRecorder the TrackRecorder to start\n */\nfunction startRecorder(trackRecorder) {\n    if (trackRecorder.recorder === undefined) {\n        throw new Error('Passed an object to startRecorder which is not a '\n            + 'TrackRecorder object');\n    }\n    trackRecorder.recorder.start();\n    trackRecorder.startTime = new Date();\n}\n\n/**\n * Stops the recording of a JitsiTrack in a TrackRecorder object.\n * This will also try to update the name\n * @param trackRecorder the TrackRecorder to stop\n */\nfunction stopRecorder(trackRecorder) {\n    if (trackRecorder.recorder === undefined) {\n        throw new Error('Passed an object to stopRecorder which is not a '\n            + 'TrackRecorder object');\n    }\n    trackRecorder.recorder.stop();\n}\n\n/**\n * Determines which kind of audio recording the browser supports\n * chrome supports \"audio/webm\" and firefox supports \"audio/ogg\"\n */\nfunction determineCorrectFileType() {\n    if (MediaRecorder.isTypeSupported(AUDIO_WEBM)) {\n        return AUDIO_WEBM;\n    } else if (MediaRecorder.isTypeSupported(AUDIO_OGG)) {\n        return AUDIO_OGG;\n    }\n    throw new Error(\n        'unable to create a MediaRecorder with the right mimetype!');\n}\n\n/**\n * main exported object of the file, holding all\n * relevant functions and variables for the outside world\n * @param jitsiConference the jitsiConference which this object\n * is going to record\n */\nfunction AudioRecorder(jitsiConference) {\n    // array of TrackRecorders, where each trackRecorder\n    // holds the JitsiTrack, MediaRecorder and recorder data\n    this.recorders = [];\n\n    // get which file type is supported by the current browser\n    this.fileType = determineCorrectFileType();\n\n    // boolean flag for active recording\n    this.isRecording = false;\n\n    // the jitsiconference the object is recording\n    this.jitsiConference = jitsiConference;\n}\n\n/**\n * Add the the exported module so that it can be accessed by other files\n */\nAudioRecorder.determineCorrectFileType = determineCorrectFileType;\n\n/**\n * Adds a new TrackRecorder object to the array.\n *\n * @param track the track potentially holding an audio stream\n */\nAudioRecorder.prototype.addTrack = function(track) {\n    if (track.isAudioTrack()) {\n        // create the track recorder\n        const trackRecorder = this.instantiateTrackRecorder(track);\n\n        // push it to the local array of all recorders\n\n        this.recorders.push(trackRecorder);\n\n        // update the name of the trackRecorders\n        this.updateNames();\n\n        // If we're already recording, immediately start recording this new\n        // track.\n        if (this.isRecording) {\n            startRecorder(trackRecorder);\n        }\n    }\n};\n\n/**\n * Creates a TrackRecorder object. Also creates the MediaRecorder and\n * data array for the trackRecorder.\n * @param track the JitsiTrack holding the audio MediaStream(s)\n */\nAudioRecorder.prototype.instantiateTrackRecorder = function(track) {\n    const trackRecorder = new TrackRecorder(track);\n\n    // Create a new stream which only holds the audio track\n    const originalStream = trackRecorder.track.getOriginalStream();\n    const stream = createEmptyStream();\n\n    originalStream.getAudioTracks().forEach(t => stream.addTrack(t));\n\n    // Create the MediaRecorder\n    trackRecorder.recorder = new MediaRecorder(stream,\n        { mimeType: this.fileType });\n\n    // array for holding the recorder data. Resets it when\n    // audio already has been recorder once\n    trackRecorder.data = [];\n\n    // function handling a dataEvent, e.g the stream gets new data\n    trackRecorder.recorder.ondataavailable = function(dataEvent) {\n        if (dataEvent.data.size > 0) {\n            trackRecorder.data.push(dataEvent.data);\n        }\n    };\n\n    return trackRecorder;\n};\n\n/**\n * Notifies the module that a specific track has stopped, e.g participant left\n * the conference.\n * if the recording has not started yet, the TrackRecorder will be removed from\n * the array. If the recording has started, the recorder will stop recording\n * but not removed from the array so that the recorded stream can still be\n * accessed\n *\n * @param {JitsiTrack} track the JitsiTrack to remove from the recording session\n */\nAudioRecorder.prototype.removeTrack = function(track) {\n    if (track.isVideoTrack()) {\n        return;\n    }\n\n    const array = this.recorders;\n    let i;\n\n    for (i = 0; i < array.length; i++) {\n        if (array[i].track.getParticipantId() === track.getParticipantId()) {\n            const recorderToRemove = array[i];\n\n            if (this.isRecording) {\n                stopRecorder(recorderToRemove);\n            } else {\n                // remove the TrackRecorder from the array\n                array.splice(i, 1);\n            }\n        }\n    }\n\n    // make sure the names are up to date\n    this.updateNames();\n};\n\n/**\n * Tries to update the name value of all TrackRecorder in the array.\n * If it hasn't changed,it will keep the exiting name. If it changes to a\n * undefined value, the old value will also be kept.\n */\nAudioRecorder.prototype.updateNames = function() {\n    const conference = this.jitsiConference;\n\n    this.recorders.forEach(trackRecorder => {\n        if (trackRecorder.track.isLocal()) {\n            trackRecorder.name = 'the transcriber';\n        } else {\n            const id = trackRecorder.track.getParticipantId();\n            const participant = conference.getParticipantById(id);\n            const newName = participant.getDisplayName();\n\n            if (newName !== 'undefined') {\n                trackRecorder.name = newName;\n            }\n        }\n    });\n};\n\n/**\n * Starts the audio recording of every local and remote track\n */\nAudioRecorder.prototype.start = function() {\n    if (this.isRecording) {\n        throw new Error('audiorecorder is already recording');\n    }\n\n    // set boolean isRecording flag to true so if new participants join the\n    // conference, that track can instantly start recording as well\n    this.isRecording = true;\n\n    // start all the mediaRecorders\n    this.recorders.forEach(trackRecorder => startRecorder(trackRecorder));\n\n    // log that recording has started\n    console.log(\n        `Started the recording of the audio. There are currently ${\n            this.recorders.length} recorders active.`);\n};\n\n/**\n * Stops the audio recording of every local and remote track\n */\nAudioRecorder.prototype.stop = function() {\n    // set the boolean flag to false\n    this.isRecording = false;\n\n    // stop all recorders\n    this.recorders.forEach(trackRecorder => stopRecorder(trackRecorder));\n    console.log('stopped recording');\n};\n\n/**\n * link hacking to download all recorded audio streams\n */\nAudioRecorder.prototype.download = function() {\n    this.recorders.forEach(trackRecorder => {\n        const blob = new Blob(trackRecorder.data, { type: this.fileType });\n        const url = URL.createObjectURL(blob);\n        const a = document.createElement('a');\n\n        document.body.appendChild(a);\n        a.style = 'display: none';\n        a.href = url;\n        a.download = `test.${this.fileType.split('/')[1]}`;\n        a.click();\n        window.URL.revokeObjectURL(url);\n    });\n};\n\n/**\n * returns the audio files of all recorders as an array of objects,\n * which include the name of the owner of the track and the starting time stamp\n * @returns {Array} an array of RecordingResult objects\n */\nAudioRecorder.prototype.getRecordingResults = function() {\n    if (this.isRecording) {\n        throw new Error(\n            'cannot get blobs because the AudioRecorder is still recording!');\n    }\n\n    // make sure the names are up to date before sending them off\n    this.updateNames();\n\n    const array = [];\n\n    this.recorders.forEach(\n        recorder =>\n            array.push(\n                new RecordingResult(\n                    new Blob(recorder.data, { type: this.fileType }),\n                    recorder.name,\n                    recorder.startTime)));\n\n    return array;\n};\n\n/**\n * Gets the mime type of the recorder audio\n * @returns {String} the mime type of the recorder audio\n */\nAudioRecorder.prototype.getFileType = function() {\n    return this.fileType;\n};\n\n/**\n * Creates a empty MediaStream object which can be used\n * to add MediaStreamTracks to\n * @returns MediaStream\n */\nfunction createEmptyStream() {\n    if (typeof MediaStream !== 'undefined') {\n        return new MediaStream();\n    }\n    throw new Error('cannot create a clean mediaStream');\n}\n\n/**\n * export the main object AudioRecorder\n */\nmodule.exports = AudioRecorder;\n","const AuthUtil = {\n    /**\n     * Creates the URL pointing to JWT token authentication service. It is\n     * formatted from the 'urlPattern' argument which can contain the following\n     * constants:\n     * '{room}' - name of the conference room passed as <tt>roomName</tt>\n     * argument to this method.\n     * '{roleUpgrade}' - will contain 'true' if the URL will be used for\n     * the role upgrade scenario, where user connects from anonymous domain and\n     * then gets upgraded to the moderator by logging-in from the popup window.\n     *\n     * @param urlPattern a URL pattern pointing to the login service\n     * @param roomName the name of the conference room for which the user will\n     * be authenticated\n     * @param {bool} roleUpgrade <tt>true</tt> if the URL will be used for role\n     * upgrade scenario, where the user logs-in from the popup window in order\n     * to have the moderator rights granted\n     *\n     * @returns {string|null} the URL pointing to JWT login service or\n     * <tt>null</tt> if 'urlPattern' is not a string and the URL can not be\n     * constructed.\n     */\n    getTokenAuthUrl(urlPattern, roomName, roleUpgrade) {\n        const url = urlPattern;\n\n        if (typeof url !== 'string') {\n            return null;\n        }\n\n        return url.replace('{room}', roomName)\n            .replace('{roleUpgrade}', roleUpgrade === true);\n    }\n};\n\nmodule.exports = AuthUtil;\n","import {\n    CONNECTION_DISCONNECTED as ANALYTICS_CONNECTION_DISCONNECTED,\n    createConnectionFailedEvent\n} from './service/statistics/AnalyticsEvents';\nimport JitsiConference from './JitsiConference';\nimport * as JitsiConnectionEvents from './JitsiConnectionEvents';\nimport Statistics from './modules/statistics/statistics';\nimport XMPP from './modules/xmpp/xmpp';\n\n/**\n * Creates a new connection object for the Jitsi Meet server side video\n * conferencing service. Provides access to the JitsiConference interface.\n * @param appID identification for the provider of Jitsi Meet video conferencing\n * services.\n * @param token the JWT token used to authenticate with the server(optional)\n * @param options Object with properties / settings related to connection with\n * the server.\n * @constructor\n */\nexport default function JitsiConnection(appID, token, options) {\n    this.appID = appID;\n    this.token = token;\n    this.options = options;\n    this.xmpp = new XMPP(options, token);\n\n    /* eslint-disable max-params */\n    this.addEventListener(JitsiConnectionEvents.CONNECTION_FAILED,\n        (errType, msg, credentials, details) => {\n            Statistics.sendAnalyticsAndLog(\n                createConnectionFailedEvent(errType, msg, details));\n        });\n    /* eslint-enable max-params */\n\n    this.addEventListener(JitsiConnectionEvents.CONNECTION_DISCONNECTED,\n        msg => {\n            // we can see disconnects from normal tab closing of the browser\n            // and then there are no msgs, but we want to log only disconnects\n            // when there is real error\n            // XXX Do we need the difference in handling between the log and\n            // analytics event here?\n            if (msg) {\n                Statistics.sendAnalytics(\n                    ANALYTICS_CONNECTION_DISCONNECTED,\n                    { message: msg });\n            }\n            Statistics.sendLog(\n                JSON.stringify(\n                    {\n                        id: ANALYTICS_CONNECTION_DISCONNECTED,\n                        msg\n                    }));\n        });\n}\n\n/**\n * Connect the client with the server.\n * @param options {object} connecting options\n * (for example authentications parameters).\n */\nJitsiConnection.prototype.connect = function(options = {}) {\n    this.xmpp.connect(options.id, options.password);\n};\n\n/**\n * Attach to existing connection. Can be used for optimizations. For example:\n * if the connection is created on the server we can attach to it and start\n * using it.\n *\n * @param options {object} connecting options - rid, sid and jid.\n */\nJitsiConnection.prototype.attach = function(options) {\n    this.xmpp.attach(options);\n};\n\n/**\n * Disconnect the client from the server.\n * @returns {Promise} - Resolves when the disconnect process is finished or rejects with an error.\n */\nJitsiConnection.prototype.disconnect = function(...args) {\n    // XXX Forward any arguments passed to JitsiConnection.disconnect to\n    // XMPP.disconnect. For example, the caller of JitsiConnection.disconnect\n    // may optionally pass the event which triggered the disconnect in order to\n    // provide the implementation with finer-grained context.\n    return this.xmpp.disconnect(...args);\n};\n\n/**\n * Returns the jid of the participant associated with the XMPP connection.\n *\n * @returns {string} The jid of the participant.\n */\nJitsiConnection.prototype.getJid = function() {\n    return this.xmpp.getJid();\n};\n\n/**\n * This method allows renewal of the tokens if they are expiring.\n * @param token the new token.\n */\nJitsiConnection.prototype.setToken = function(token) {\n    this.token = token;\n};\n\n/**\n * Creates and joins new conference.\n * @param name the name of the conference; if null - a generated name will be\n * provided from the api\n * @param options Object with properties / settings related to the conference\n * that will be created.\n * @returns {JitsiConference} returns the new conference object.\n */\nJitsiConnection.prototype.initJitsiConference = function(name, options) {\n    return new JitsiConference({\n        name,\n        config: options,\n        connection: this\n    });\n};\n\n/**\n * Subscribes the passed listener to the event.\n * @param event {JitsiConnectionEvents} the connection event.\n * @param listener {Function} the function that will receive the event\n */\nJitsiConnection.prototype.addEventListener = function(event, listener) {\n    this.xmpp.addListener(event, listener);\n};\n\n/**\n * Unsubscribes the passed handler.\n * @param event {JitsiConnectionEvents} the connection event.\n * @param listener {Function} the function that will receive the event\n */\nJitsiConnection.prototype.removeEventListener = function(event, listener) {\n    this.xmpp.removeListener(event, listener);\n};\n\n/**\n * Returns measured connectionTimes.\n */\nJitsiConnection.prototype.getConnectionTimes = function() {\n    return this.xmpp.connectionTimes;\n};\n\n/**\n * Adds new feature to the list of supported features for the local\n * participant.\n * @param {String} feature the name of the feature.\n * @param {boolean} submit if true - the new list of features will be\n * immediately submitted to the others.\n */\nJitsiConnection.prototype.addFeature = function(feature, submit = false) {\n    return this.xmpp.caps.addFeature(feature, submit);\n};\n\n/**\n * Removes a feature from the list of supported features for the local\n * participant\n * @param {String} feature the name of the feature.\n * @param {boolean} submit if true - the new list of features will be\n * immediately submitted to the others.\n */\nJitsiConnection.prototype.removeFeature = function(feature, submit = false) {\n    return this.xmpp.caps.removeFeature(feature, submit);\n};\n","/* global __filename, $, Promise */\nimport { Strophe } from 'strophe.js';\n\nimport EventEmitter from 'events';\nimport { getLogger } from 'jitsi-meet-logger';\nimport isEqual from 'lodash.isequal';\n\nimport * as JitsiConferenceErrors from './JitsiConferenceErrors';\nimport JitsiConferenceEventManager from './JitsiConferenceEventManager';\nimport * as JitsiConferenceEvents from './JitsiConferenceEvents';\nimport JitsiParticipant from './JitsiParticipant';\nimport JitsiTrackError from './JitsiTrackError';\nimport * as JitsiTrackErrors from './JitsiTrackErrors';\nimport * as JitsiTrackEvents from './JitsiTrackEvents';\nimport authenticateAndUpgradeRole from './authenticateAndUpgradeRole';\nimport JitsiDTMFManager from './modules/DTMF/JitsiDTMFManager';\nimport P2PDominantSpeakerDetection from './modules/P2PDominantSpeakerDetection';\nimport RTC from './modules/RTC/RTC';\nimport TalkMutedDetection from './modules/TalkMutedDetection';\nimport browser from './modules/browser';\nimport ConnectionQuality from './modules/connectivity/ConnectionQuality';\nimport IceFailedNotification\n    from './modules/connectivity/IceFailedNotification';\nimport ParticipantConnectionStatusHandler\n    from './modules/connectivity/ParticipantConnectionStatus';\nimport E2ePing from './modules/e2eping/e2eping';\nimport Jvb121EventGenerator from './modules/event/Jvb121EventGenerator';\nimport RecordingManager from './modules/recording/RecordingManager';\nimport RttMonitor from './modules/rttmonitor/rttmonitor';\nimport AvgRTPStatsReporter from './modules/statistics/AvgRTPStatsReporter';\nimport AudioOutputProblemDetector from './modules/statistics/AudioOutputProblemDetector';\nimport SpeakerStatsCollector from './modules/statistics/SpeakerStatsCollector';\nimport Statistics from './modules/statistics/statistics';\nimport Transcriber from './modules/transcription/transcriber';\nimport GlobalOnErrorHandler from './modules/util/GlobalOnErrorHandler';\nimport RandomUtil from './modules/util/RandomUtil';\nimport ComponentsVersions from './modules/version/ComponentsVersions';\nimport VideoSIPGW from './modules/videosipgw/VideoSIPGW';\nimport * as VideoSIPGWConstants from './modules/videosipgw/VideoSIPGWConstants';\nimport { JITSI_MEET_MUC_TYPE } from './modules/xmpp/xmpp';\nimport * as MediaType from './service/RTC/MediaType';\nimport * as RTCEvents from './service/RTC/RTCEvents';\nimport VideoType from './service/RTC/VideoType';\nimport {\n    ACTION_JINGLE_RESTART,\n    ACTION_JINGLE_SI_RECEIVED,\n    ACTION_JINGLE_SI_TIMEOUT,\n    ACTION_JINGLE_TERMINATE,\n    ACTION_P2P_ESTABLISHED,\n    ACTION_P2P_FAILED,\n    ACTION_P2P_SWITCH_TO_JVB,\n    ICE_ESTABLISHMENT_DURATION_DIFF,\n    createJingleEvent,\n    createP2PEvent\n} from './service/statistics/AnalyticsEvents';\nimport * as XMPPEvents from './service/xmpp/XMPPEvents';\n\nconst logger = getLogger(__filename);\n\n/**\n * How long since Jicofo is supposed to send a session-initiate, before\n * {@link ACTION_JINGLE_SI_TIMEOUT} analytics event is sent (in ms).\n * @type {number}\n */\nconst JINGLE_SI_TIMEOUT = 5000;\n\n/**\n * Creates a JitsiConference object with the given name and properties.\n * Note: this constructor is not a part of the public API (objects should be\n * created using JitsiConnection.createConference).\n * @param options.config properties / settings related to the conference that\n * will be created.\n * @param options.name the name of the conference\n * @param options.connection the JitsiConnection object for this\n * JitsiConference.\n * @param {number} [options.config.avgRtpStatsN=15] how many samples are to be\n * collected by {@link AvgRTPStatsReporter}, before arithmetic mean is\n * calculated and submitted to the analytics module.\n * @param {boolean} [options.config.p2p.enabled] when set to <tt>true</tt>\n * the peer to peer mode will be enabled. It means that when there are only 2\n * participants in the conference an attempt to make direct connection will be\n * made. If the connection succeeds the conference will stop sending data\n * through the JVB connection and will use the direct one instead.\n * @param {number} [options.config.p2p.backToP2PDelay=5] a delay given in\n * seconds, before the conference switches back to P2P, after the 3rd\n * participant has left the room.\n * @param {number} [options.config.channelLastN=-1] The requested amount of\n * videos are going to be delivered after the value is in effect. Set to -1 for\n * unlimited or all available videos.\n * @param {number} [options.config.forceJVB121Ratio]\n * \"Math.random() < forceJVB121Ratio\" will determine whether a 2 people\n * conference should be moved to the JVB instead of P2P. The decision is made on\n * the responder side, after ICE succeeds on the P2P connection.\n * @param {*} [options.config.openBridgeChannel] Which kind of communication to\n * open with the videobridge. Values can be \"datachannel\", \"websocket\", true\n * (treat it as \"datachannel\"), undefined (treat it as \"datachannel\") and false\n * (don't open any channel).\n * @constructor\n *\n * FIXME Make all methods which are called from lib-internal classes\n *       to non-public (use _). To name a few:\n *       {@link JitsiConference.onLocalRoleChanged}\n *       {@link JitsiConference.onUserRoleChanged}\n *       {@link JitsiConference.onMemberLeft}\n *       and so on...\n */\nexport default function JitsiConference(options) {\n    if (!options.name || options.name.toLowerCase() !== options.name) {\n        const errmsg\n            = 'Invalid conference name (no conference name passed or it '\n                + 'contains invalid characters like capital letters)!';\n\n        logger.error(errmsg);\n        throw new Error(errmsg);\n    }\n    this.eventEmitter = new EventEmitter();\n    this.options = options;\n    this.eventManager = new JitsiConferenceEventManager(this);\n    this.participants = {};\n    this._init(options);\n    this.componentsVersions = new ComponentsVersions(this);\n\n    /**\n     * Jingle session instance for the JVB connection.\n     * @type {JingleSessionPC}\n     */\n    this.jvbJingleSession = null;\n    this.lastDominantSpeaker = null;\n    this.dtmfManager = null;\n    this.somebodySupportsDTMF = false;\n    this.authEnabled = false;\n    this.startAudioMuted = false;\n    this.startVideoMuted = false;\n    this.startMutedPolicy = {\n        audio: false,\n        video: false\n    };\n    this.isMutedByFocus = false;\n\n    // when muted by focus we receive the jid of the initiator of the mute\n    this.mutedByFocusActor = null;\n\n    // Flag indicates if the 'onCallEnded' method was ever called on this\n    // instance. Used to log extra analytics event for debugging purpose.\n    // We need to know if the potential issue happened before or after\n    // the restart.\n    this.wasStopped = false;\n\n    // Conference properties, maintained by jicofo.\n    this.properties = {};\n\n    /**\n     * The object which monitors local and remote connection statistics (e.g.\n     * sending bitrate) and calculates a number which represents the connection\n     * quality.\n     */\n    this.connectionQuality\n        = new ConnectionQuality(this, this.eventEmitter, options);\n\n    /**\n     * Reports average RTP statistics to the analytics module.\n     * @type {AvgRTPStatsReporter}\n     */\n    this.avgRtpStatsReporter\n        = new AvgRTPStatsReporter(this, options.config.avgRtpStatsN || 15);\n\n    /**\n     * Detects issues with the audio of remote participants.\n     * @type {AudioOutputProblemDetector}\n     */\n    this._audioOutputProblemDetector = new AudioOutputProblemDetector(this);\n\n    /**\n     * Indicates whether the connection is interrupted or not.\n     */\n    this.isJvbConnectionInterrupted = false;\n\n    /**\n     * The object which tracks active speaker times\n     */\n    this.speakerStatsCollector = new SpeakerStatsCollector(this);\n\n    /* P2P related fields below: */\n\n    /**\n     * Stores reference to deferred start P2P task. It's created when 3rd\n     * participant leaves the room in order to avoid ping pong effect (it\n     * could be just a page reload).\n     * @type {number|null}\n     */\n    this.deferredStartP2PTask = null;\n\n    const delay\n        = parseInt(options.config.p2p && options.config.p2p.backToP2PDelay, 10);\n\n    /**\n     * A delay given in seconds, before the conference switches back to P2P\n     * after the 3rd participant has left.\n     * @type {number}\n     */\n    this.backToP2PDelay = isNaN(delay) ? 5 : delay;\n    logger.info(`backToP2PDelay: ${this.backToP2PDelay}`);\n\n    /**\n     * If set to <tt>true</tt> it means the P2P ICE is no longer connected.\n     * When <tt>false</tt> it means that P2P ICE (media) connection is up\n     * and running.\n     * @type {boolean}\n     */\n    this.isP2PConnectionInterrupted = false;\n\n    /**\n     * Flag set to <tt>true</tt> when P2P session has been established\n     * (ICE has been connected) and this conference is currently in the peer to\n     * peer mode (P2P connection is the active one).\n     * @type {boolean}\n     */\n    this.p2p = false;\n\n    /**\n     * A JingleSession for the direct peer to peer connection.\n     * @type {JingleSessionPC}\n     */\n    this.p2pJingleSession = null;\n\n    this.videoSIPGWHandler = new VideoSIPGW(this.room);\n    this.recordingManager = new RecordingManager(this.room);\n}\n\n// FIXME convert JitsiConference to ES6 - ASAP !\nJitsiConference.prototype.constructor = JitsiConference;\n\n/**\n * Create a resource for the a jid. We use the room nickname (the resource part\n * of the occupant JID, see XEP-0045) as the endpoint ID in colibri. We require\n * endpoint IDs to be 8 hex digits because in some cases they get serialized\n * into a 32bit field.\n *\n * @param {string} jid - The id set onto the XMPP connection.\n * @param {boolean} isAuthenticatedUser - Whether or not the user has connected\n * to the XMPP service with a password.\n * @returns {string}\n * @static\n */\nJitsiConference.resourceCreator = function(jid, isAuthenticatedUser) {\n    let mucNickname;\n\n    if (isAuthenticatedUser) {\n        // For authenticated users generate a random ID.\n        mucNickname = RandomUtil.randomHexString(8).toLowerCase();\n    } else {\n        // We try to use the first part of the node (which for anonymous users\n        // on prosody is a UUID) to match the previous behavior (and maybe make\n        // debugging easier).\n        mucNickname = Strophe.getNodeFromJid(jid).substr(0, 8)\n            .toLowerCase();\n\n        // But if this doesn't have the required format we just generate a new\n        // random nickname.\n        const re = /[0-9a-f]{8}/g;\n\n        if (!re.test(mucNickname)) {\n            mucNickname = RandomUtil.randomHexString(8).toLowerCase();\n        }\n    }\n\n    return mucNickname;\n};\n\n/**\n * Initializes the conference object properties\n * @param options {object}\n * @param options.connection {JitsiConnection} overrides this.connection\n */\nJitsiConference.prototype._init = function(options = {}) {\n    // Override connection and xmpp properties (Useful if the connection\n    // reloaded)\n    if (options.connection) {\n        this.connection = options.connection;\n        this.xmpp = this.connection.xmpp;\n\n        // Setup XMPP events only if we have new connection object.\n        this.eventManager.setupXMPPListeners();\n    }\n\n    const { config } = this.options;\n\n    this.room = this.xmpp.createRoom(\n        this.options.name,\n        config,\n        JitsiConference.resourceCreator\n    );\n\n    // Connection interrupted/restored listeners\n    this._onIceConnectionInterrupted\n        = this._onIceConnectionInterrupted.bind(this);\n    this.room.addListener(\n        XMPPEvents.CONNECTION_INTERRUPTED, this._onIceConnectionInterrupted);\n\n    this._onIceConnectionRestored = this._onIceConnectionRestored.bind(this);\n    this.room.addListener(\n        XMPPEvents.CONNECTION_RESTORED, this._onIceConnectionRestored);\n\n    this._onIceConnectionEstablished\n        = this._onIceConnectionEstablished.bind(this);\n    this.room.addListener(\n        XMPPEvents.CONNECTION_ESTABLISHED, this._onIceConnectionEstablished);\n\n    this._updateProperties = this._updateProperties.bind(this);\n    this.room.addListener(XMPPEvents.CONFERENCE_PROPERTIES_CHANGED,\n        this._updateProperties);\n\n    this.rttMonitor = new RttMonitor(config.rttMonitor || {});\n\n    this.e2eping = new E2ePing(\n        this,\n        config,\n        (message, to) => {\n            try {\n                this.sendMessage(\n                    message, to, true /* sendThroughVideobridge */);\n            } catch (error) {\n                logger.warn('Failed to send a ping request or response.');\n            }\n        });\n\n    if (!this.rtc) {\n        this.rtc = new RTC(this, options);\n        this.eventManager.setupRTCListeners();\n    }\n\n    this.participantConnectionStatus\n        = new ParticipantConnectionStatusHandler(\n            this.rtc,\n            this,\n            {\n                // Both these options are not public API, leaving it here only\n                // as an entry point through config for tuning up purposes.\n                // Default values should be adjusted as soon as optimal values\n                // are discovered.\n                rtcMuteTimeout: config._peerConnStatusRtcMuteTimeout,\n                outOfLastNTimeout: config._peerConnStatusOutOfLastNTimeout\n            });\n    this.participantConnectionStatus.init();\n\n    if (!this.statistics) {\n        let callStatsAliasName = this.myUserId();\n\n        if (config.enableDisplayNameInStats && config.displayName) {\n            callStatsAliasName = config.displayName;\n        }\n\n        this.statistics = new Statistics(this.xmpp, {\n            callStatsAliasName,\n            callStatsConfIDNamespace: this.connection.options.hosts.domain,\n            confID: config.confID || `${this.connection.options.hosts.domain}/${this.options.name}`,\n            customScriptUrl: config.callStatsCustomScriptUrl,\n            callStatsID: config.callStatsID,\n            callStatsSecret: config.callStatsSecret,\n            roomName: this.options.name,\n            swapUserNameAndAlias: config.enableStatsID,\n            applicationName: config.applicationName,\n            getWiFiStatsMethod: config.getWiFiStatsMethod\n        });\n    }\n\n    this.eventManager.setupChatRoomListeners();\n\n    // Always add listeners because on reload we are executing leave and the\n    // listeners are removed from statistics module.\n    this.eventManager.setupStatisticsListeners();\n\n    if (config.enableTalkWhileMuted) {\n        // eslint-disable-next-line no-new\n        new TalkMutedDetection(\n            this,\n            () =>\n                this.eventEmitter.emit(JitsiConferenceEvents.TALK_WHILE_MUTED));\n    }\n\n    if ('channelLastN' in config) {\n        this.setLastN(config.channelLastN);\n    }\n\n    /**\n     * Emits {@link JitsiConferenceEvents.JVB121_STATUS}.\n     * @type {Jvb121EventGenerator}\n     */\n    this.jvb121Status = new Jvb121EventGenerator(this);\n\n    // creates dominant speaker detection that works only in p2p mode\n    this.p2pDominantSpeakerDetection = new P2PDominantSpeakerDetection(this);\n\n    if (config && config.deploymentInfo && config.deploymentInfo.userRegion) {\n        this.setLocalParticipantProperty(\n            'region', config.deploymentInfo.userRegion);\n    }\n};\n\n/**\n * Joins the conference.\n * @param password {string} the password\n */\nJitsiConference.prototype.join = function(password) {\n    if (this.room) {\n        this.room.join(password).then(() => this._maybeSetSITimeout());\n    }\n};\n\n/**\n * Authenticates and upgrades the role of the local participant/user.\n *\n * @returns {Object} A <tt>thenable</tt> which (1) settles when the process of\n * authenticating and upgrading the role of the local participant/user finishes\n * and (2) has a <tt>cancel</tt> method that allows the caller to interrupt the\n * process.\n */\nJitsiConference.prototype.authenticateAndUpgradeRole = function(options) {\n    return authenticateAndUpgradeRole.call(this, {\n        ...options,\n        onCreateResource: JitsiConference.resourceCreator\n    });\n};\n\n/**\n * Check if joined to the conference.\n */\nJitsiConference.prototype.isJoined = function() {\n    return this.room && this.room.joined;\n};\n\n/**\n * Tells whether or not the P2P mode is enabled in the configuration.\n * @return {boolean}\n */\nJitsiConference.prototype.isP2PEnabled = function() {\n    return Boolean(this.options.config.p2p && this.options.config.p2p.enabled)\n\n        // FIXME: remove once we have a default config template. -saghul\n        || typeof this.options.config.p2p === 'undefined';\n};\n\n/**\n * When in P2P test mode, the conference will not automatically switch to P2P\n * when there 2 participants.\n * @return {boolean}\n */\nJitsiConference.prototype.isP2PTestModeEnabled = function() {\n    return Boolean(this.options.config.testing\n        && this.options.config.testing.p2pTestMode);\n};\n\n/**\n * Leaves the conference.\n * @returns {Promise}\n */\nJitsiConference.prototype.leave = function() {\n    if (this.participantConnectionStatus) {\n        this.participantConnectionStatus.dispose();\n        this.participantConnectionStatus = null;\n    }\n    if (this.avgRtpStatsReporter) {\n        this.avgRtpStatsReporter.dispose();\n        this.avgRtpStatsReporter = null;\n    }\n\n    if (this._audioOutputProblemDetector) {\n        this._audioOutputProblemDetector.dispose();\n        this._audioOutputProblemDetector = null;\n    }\n\n    if (this.rttMonitor) {\n        this.rttMonitor.stop();\n        this.rttMonitor = null;\n    }\n\n    if (this.e2eping) {\n        this.e2eping.stop();\n        this.e2eping = null;\n    }\n\n    this.getLocalTracks().forEach(track => this.onLocalTrackRemoved(track));\n\n    this.rtc.closeBridgeChannel();\n    if (this.statistics) {\n        this.statistics.dispose();\n    }\n\n    this._delayedIceFailed && this._delayedIceFailed.cancel();\n\n    // Close both JVb and P2P JingleSessions\n    if (this.jvbJingleSession) {\n        this.jvbJingleSession.close();\n        this.jvbJingleSession = null;\n    }\n    if (this.p2pJingleSession) {\n        this.p2pJingleSession.close();\n        this.p2pJingleSession = null;\n    }\n\n    // leave the conference\n    if (this.room) {\n        const room = this.room;\n\n        // Unregister connection state listeners\n        room.removeListener(\n            XMPPEvents.CONNECTION_INTERRUPTED,\n            this._onIceConnectionInterrupted);\n        room.removeListener(\n            XMPPEvents.CONNECTION_RESTORED,\n            this._onIceConnectionRestored);\n        room.removeListener(\n            XMPPEvents.CONNECTION_ESTABLISHED,\n            this._onIceConnectionEstablished);\n\n        room.removeListener(\n            XMPPEvents.CONFERENCE_PROPERTIES_CHANGED,\n            this._updateProperties);\n\n        this.eventManager.removeXMPPListeners();\n\n        this.room = null;\n\n        return room.leave()\n            .then(() => {\n                if (this.rtc) {\n                    this.rtc.destroy();\n                }\n            })\n            .catch(error => {\n                // remove all participants because currently the conference\n                // won't be usable anyway. This is done on success automatically\n                // by the ChatRoom instance.\n                this.getParticipants().forEach(\n                    participant => this.onMemberLeft(participant.getJid()));\n\n                throw error;\n            });\n    }\n\n    // If this.room == null we are calling second time leave().\n    return Promise.reject(\n        new Error('The conference is has been already left'));\n};\n\n/**\n * Returns name of this conference.\n */\nJitsiConference.prototype.getName = function() {\n    return this.options.name;\n};\n\n/**\n * Returns the {@link JitsiConnection} used by this this conference.\n */\nJitsiConference.prototype.getConnection = function() {\n    return this.connection;\n};\n\n/**\n * Check if authentication is enabled for this conference.\n */\nJitsiConference.prototype.isAuthEnabled = function() {\n    return this.authEnabled;\n};\n\n/**\n * Check if user is logged in.\n */\nJitsiConference.prototype.isLoggedIn = function() {\n    return Boolean(this.authIdentity);\n};\n\n/**\n * Get authorized login.\n */\nJitsiConference.prototype.getAuthLogin = function() {\n    return this.authIdentity;\n};\n\n/**\n * Check if external authentication is enabled for this conference.\n */\nJitsiConference.prototype.isExternalAuthEnabled = function() {\n    return this.room && this.room.moderator.isExternalAuthEnabled();\n};\n\n/**\n * Get url for external authentication.\n * @param {boolean} [urlForPopup] if true then return url for login popup,\n *                                else url of login page.\n * @returns {Promise}\n */\nJitsiConference.prototype.getExternalAuthUrl = function(urlForPopup) {\n    return new Promise((resolve, reject) => {\n        if (!this.isExternalAuthEnabled()) {\n            reject();\n\n            return;\n        }\n        if (urlForPopup) {\n            this.room.moderator.getPopupLoginUrl(resolve, reject);\n        } else {\n            this.room.moderator.getLoginUrl(resolve, reject);\n        }\n    });\n};\n\n/**\n * Returns the local tracks of the given media type, or all local tracks if no\n * specific type is given.\n * @param {MediaType} [mediaType] Optional media type (audio or video).\n */\nJitsiConference.prototype.getLocalTracks = function(mediaType) {\n    let tracks = [];\n\n    if (this.rtc) {\n        tracks = this.rtc.getLocalTracks(mediaType);\n    }\n\n    return tracks;\n};\n\n/**\n * Obtains local audio track.\n * @return {JitsiLocalTrack|null}\n */\nJitsiConference.prototype.getLocalAudioTrack = function() {\n    return this.rtc ? this.rtc.getLocalAudioTrack() : null;\n};\n\n/**\n * Obtains local video track.\n * @return {JitsiLocalTrack|null}\n */\nJitsiConference.prototype.getLocalVideoTrack = function() {\n    return this.rtc ? this.rtc.getLocalVideoTrack() : null;\n};\n\n/**\n * Attaches a handler for events(For example - \"participant joined\".) in the\n * conference. All possible event are defined in JitsiConferenceEvents.\n * @param eventId the event ID.\n * @param handler handler for the event.\n *\n * Note: consider adding eventing functionality by extending an EventEmitter\n * impl, instead of rolling ourselves\n */\nJitsiConference.prototype.on = function(eventId, handler) {\n    if (this.eventEmitter) {\n        this.eventEmitter.on(eventId, handler);\n    }\n};\n\n/**\n * Removes event listener\n * @param eventId the event ID.\n * @param [handler] optional, the specific handler to unbind\n *\n * Note: consider adding eventing functionality by extending an EventEmitter\n * impl, instead of rolling ourselves\n */\nJitsiConference.prototype.off = function(eventId, handler) {\n    if (this.eventEmitter) {\n        this.eventEmitter.removeListener(eventId, handler);\n    }\n};\n\n// Common aliases for event emitter\nJitsiConference.prototype.addEventListener = JitsiConference.prototype.on;\nJitsiConference.prototype.removeEventListener = JitsiConference.prototype.off;\n\n/**\n * Receives notifications from other participants about commands / custom events\n * (sent by sendCommand or sendCommandOnce methods).\n * @param command {String} the name of the command\n * @param handler {Function} handler for the command\n */\nJitsiConference.prototype.addCommandListener = function(command, handler) {\n    if (this.room) {\n        this.room.addPresenceListener(command, handler);\n    }\n};\n\n/**\n  * Removes command  listener\n  * @param command {String} the name of the command\n  * @param handler {Function} handler to remove for the command\n  */\nJitsiConference.prototype.removeCommandListener = function(command, handler) {\n    if (this.room) {\n        this.room.removePresenceListener(command, handler);\n    }\n};\n\n/**\n * Sends text message to the other participants in the conference\n * @param message the text message.\n * @param elementName the element name to encapsulate the message.\n * @deprecated Use 'sendMessage' instead. TODO: this should be private.\n */\nJitsiConference.prototype.sendTextMessage = function(\n        message, elementName = 'body') {\n    if (this.room) {\n        const displayName = (this.room.getFromPresence('nick') || {}).value;\n\n        this.room.sendMessage(message, elementName, displayName);\n    }\n};\n\n/**\n * Send private text message to another participant of the conference\n * @param id the id of the participant to send a private message.\n * @param message the text message.\n * @param elementName the element name to encapsulate the message.\n * @deprecated Use 'sendMessage' instead. TODO: this should be private.\n */\nJitsiConference.prototype.sendPrivateTextMessage = function(\n        id, message, elementName = 'body') {\n    if (this.room) {\n        this.room.sendPrivateMessage(id, message, elementName);\n    }\n};\n\n/**\n * Send presence command.\n * @param name {String} the name of the command.\n * @param values {Object} with keys and values that will be sent.\n **/\nJitsiConference.prototype.sendCommand = function(name, values) {\n    if (this.room) {\n        this.room.addToPresence(name, values);\n        this.room.sendPresence();\n    } else {\n        logger.warn('Not sending a command, room not initialized.');\n    }\n\n};\n\n/**\n * Send presence command one time.\n * @param name {String} the name of the command.\n * @param values {Object} with keys and values that will be sent.\n **/\nJitsiConference.prototype.sendCommandOnce = function(name, values) {\n    this.sendCommand(name, values);\n    this.removeCommand(name);\n};\n\n/**\n * Removes presence command.\n * @param name {String} the name of the command.\n **/\nJitsiConference.prototype.removeCommand = function(name) {\n    if (this.room) {\n        this.room.removeFromPresence(name);\n    }\n};\n\n/**\n * Sets the display name for this conference.\n * @param name the display name to set\n */\nJitsiConference.prototype.setDisplayName = function(name) {\n    if (this.room) {\n        // remove previously set nickname\n        this.room.removeFromPresence('nick');\n\n        this.room.addToPresence('nick', {\n            attributes: { xmlns: 'http://jabber.org/protocol/nick' },\n            value: name\n        });\n        this.room.sendPresence();\n    }\n};\n\n/**\n * Set new subject for this conference. (available only for moderator)\n * @param {string} subject new subject\n */\nJitsiConference.prototype.setSubject = function(subject) {\n    if (this.room && this.isModerator()) {\n        this.room.setSubject(subject);\n    }\n};\n\n/**\n * Get a transcriber object for all current participants in this conference\n * @return {Transcriber} the transcriber object\n */\nJitsiConference.prototype.getTranscriber = function() {\n    if (this.transcriber === undefined) {\n        this.transcriber = new Transcriber();\n\n        // add all existing local audio tracks to the transcriber\n        const localAudioTracks = this.getLocalTracks(MediaType.AUDIO);\n\n        for (const localAudio of localAudioTracks) {\n            this.transcriber.addTrack(localAudio);\n        }\n\n        // and all remote audio tracks\n        const remoteAudioTracks = this.rtc.getRemoteTracks(MediaType.AUDIO);\n\n        for (const remoteTrack of remoteAudioTracks) {\n            this.transcriber.addTrack(remoteTrack);\n        }\n    }\n\n    return this.transcriber;\n};\n\n/**\n * Returns the transcription status.\n *\n * @returns {String} \"on\" or \"off\".\n */\nJitsiConference.prototype.getTranscriptionStatus = function() {\n    return this.room.transcriptionStatus;\n};\n\n/**\n * Adds JitsiLocalTrack object to the conference.\n * @param track the JitsiLocalTrack object.\n * @returns {Promise<JitsiLocalTrack>}\n * @throws {Error} if the specified track is a video track and there is already\n * another video track in the conference.\n */\nJitsiConference.prototype.addTrack = function(track) {\n    if (track.isVideoTrack()) {\n        // Ensure there's exactly 1 local video track in the conference.\n        const localVideoTrack = this.rtc.getLocalVideoTrack();\n\n        if (localVideoTrack) {\n            // Don't be excessively harsh and severe if the API client happens\n            // to attempt to add the same local video track twice.\n            if (track === localVideoTrack) {\n                return Promise.resolve(track);\n            }\n\n            return Promise.reject(new Error(\n                'cannot add second video track to the conference'));\n\n        }\n    }\n\n    return this.replaceTrack(null, track);\n};\n\n/**\n * Fires TRACK_AUDIO_LEVEL_CHANGED change conference event (for local tracks).\n * @param {number} audioLevel the audio level\n * @param {TraceablePeerConnection} [tpc]\n */\nJitsiConference.prototype._fireAudioLevelChangeEvent = function(\n        audioLevel,\n        tpc) {\n    const activeTpc = this.getActivePeerConnection();\n\n    // There will be no TraceablePeerConnection if audio levels do not come from\n    // a peerconnection. LocalStatsCollector.js measures audio levels using Web\n    // Audio Analyser API and emits local audio levels events through\n    // JitsiTrack.setAudioLevel, but does not provide TPC instance which is\n    // optional.\n    if (!tpc || activeTpc === tpc) {\n        this.eventEmitter.emit(\n            JitsiConferenceEvents.TRACK_AUDIO_LEVEL_CHANGED,\n            this.myUserId(), audioLevel);\n    }\n};\n\n/**\n * Fires TRACK_MUTE_CHANGED change conference event.\n * @param track the JitsiTrack object related to the event.\n */\nJitsiConference.prototype._fireMuteChangeEvent = function(track) {\n    // check if track was muted by focus and now is unmuted by user\n    if (this.isMutedByFocus && track.isAudioTrack() && !track.isMuted()) {\n        this.isMutedByFocus = false;\n\n        // unmute local user on server\n        this.room.muteParticipant(this.room.myroomjid, false);\n    }\n\n    let actorParticipant;\n\n    if (this.mutedByFocusActor) {\n        const actorId = Strophe.getResourceFromJid(this.mutedByFocusActor);\n\n        actorParticipant = this.participants[actorId];\n    }\n\n    this.eventEmitter.emit(JitsiConferenceEvents.TRACK_MUTE_CHANGED, track, actorParticipant);\n};\n\n/**\n * Clear JitsiLocalTrack properties and listeners.\n * @param track the JitsiLocalTrack object.\n */\nJitsiConference.prototype.onLocalTrackRemoved = function(track) {\n    track._setConference(null);\n    this.rtc.removeLocalTrack(track);\n    track.removeEventListener(JitsiTrackEvents.TRACK_MUTE_CHANGED,\n        track.muteHandler);\n    track.removeEventListener(JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED,\n        track.audioLevelHandler);\n\n    // send event for stopping screen sharing\n    // FIXME: we assume we have only one screen sharing track\n    // if we change this we need to fix this check\n    if (track.isVideoTrack() && track.videoType === VideoType.DESKTOP) {\n        this.statistics.sendScreenSharingEvent(false);\n    }\n\n    this.eventEmitter.emit(JitsiConferenceEvents.TRACK_REMOVED, track);\n};\n\n/**\n * Removes JitsiLocalTrack from the conference and performs\n * a new offer/answer cycle.\n * @param {JitsiLocalTrack} track\n * @returns {Promise}\n */\nJitsiConference.prototype.removeTrack = function(track) {\n    return this.replaceTrack(track, null);\n};\n\n/**\n * Replaces oldTrack with newTrack and performs a single offer/answer\n *  cycle after both operations are done.  Either oldTrack or newTrack\n *  can be null; replacing a valid 'oldTrack' with a null 'newTrack'\n *  effectively just removes 'oldTrack'\n * @param {JitsiLocalTrack} oldTrack the current stream in use to be replaced\n * @param {JitsiLocalTrack} newTrack the new stream to use\n * @returns {Promise} resolves when the replacement is finished\n */\nJitsiConference.prototype.replaceTrack = function(oldTrack, newTrack) {\n    // First do the removal of the oldTrack at the JitsiConference level\n    if (oldTrack) {\n        if (oldTrack.disposed) {\n            return Promise.reject(\n                new JitsiTrackError(JitsiTrackErrors.TRACK_IS_DISPOSED));\n        }\n    }\n    if (newTrack) {\n        if (newTrack.disposed) {\n            return Promise.reject(\n                new JitsiTrackError(JitsiTrackErrors.TRACK_IS_DISPOSED));\n        }\n    }\n\n    // Now replace the stream at the lower levels\n    return this._doReplaceTrack(oldTrack, newTrack)\n        .then(() => {\n            if (oldTrack) {\n                this.onLocalTrackRemoved(oldTrack);\n            }\n            if (newTrack) {\n                // Now handle the addition of the newTrack at the\n                // JitsiConference level\n                this._setupNewTrack(newTrack);\n            }\n\n            return Promise.resolve();\n        }, error => Promise.reject(new Error(error)));\n};\n\n/**\n * Replaces the tracks at the lower level by going through the Jingle session\n * and WebRTC peer connection. The method will resolve immediately if there is\n * currently no JingleSession started.\n * @param {JitsiLocalTrack|null} oldTrack the track to be removed during\n * the process or <tt>null</t> if the method should act as \"add track\"\n * @param {JitsiLocalTrack|null} newTrack the new track to be added or\n * <tt>null</tt> if the method should act as \"remove track\"\n * @return {Promise} resolved when the process is done or rejected with a string\n * which describes the error.\n * @private\n */\nJitsiConference.prototype._doReplaceTrack = function(oldTrack, newTrack) {\n    const replaceTrackPromises = [];\n\n    if (this.jvbJingleSession) {\n        replaceTrackPromises.push(\n            this.jvbJingleSession.replaceTrack(oldTrack, newTrack));\n    } else {\n        logger.info('_doReplaceTrack - no JVB JingleSession');\n    }\n\n    if (this.p2pJingleSession) {\n        replaceTrackPromises.push(\n            this.p2pJingleSession.replaceTrack(oldTrack, newTrack));\n    } else {\n        logger.info('_doReplaceTrack - no P2P JingleSession');\n    }\n\n    return Promise.all(replaceTrackPromises);\n};\n\n/**\n * Operations related to creating a new track\n * @param {JitsiLocalTrack} newTrack the new track being created\n */\nJitsiConference.prototype._setupNewTrack = function(newTrack) {\n    if (newTrack.isAudioTrack() || (newTrack.isVideoTrack()\n            && newTrack.videoType !== VideoType.DESKTOP)) {\n        // Report active device to statistics\n        const devices = RTC.getCurrentlyAvailableMediaDevices();\n        const device\n            = devices.find(\n                d =>\n                    d.kind === `${newTrack.getTrack().kind}input`\n                        && d.label === newTrack.getTrack().label);\n\n        if (device) {\n            Statistics.sendActiveDeviceListEvent(\n                RTC.getEventDataForActiveDevice(device));\n        }\n    }\n    if (newTrack.isVideoTrack()) {\n        this.removeCommand('videoType');\n        this.sendCommand('videoType', {\n            value: newTrack.videoType,\n            attributes: {\n                xmlns: 'http://jitsi.org/jitmeet/video'\n            }\n        });\n    }\n    this.rtc.addLocalTrack(newTrack);\n\n    // ensure that we're sharing proper \"is muted\" state\n    if (newTrack.isAudioTrack()) {\n        this.room.setAudioMute(newTrack.isMuted());\n    } else {\n        this.room.setVideoMute(newTrack.isMuted());\n    }\n\n    newTrack.muteHandler = this._fireMuteChangeEvent.bind(this, newTrack);\n    newTrack.audioLevelHandler = this._fireAudioLevelChangeEvent.bind(this);\n    newTrack.addEventListener(\n        JitsiTrackEvents.TRACK_MUTE_CHANGED,\n        newTrack.muteHandler);\n    newTrack.addEventListener(\n        JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED,\n        newTrack.audioLevelHandler);\n\n    newTrack._setConference(this);\n\n    this.eventEmitter.emit(JitsiConferenceEvents.TRACK_ADDED, newTrack);\n};\n\n/**\n * Method called by the {@link JitsiLocalTrack} (a video one) in order to add\n * back the underlying WebRTC MediaStream to the PeerConnection (which has\n * removed on video mute).\n * @param {JitsiLocalTrack} track the local track that will be added as part of\n * the unmute operation.\n * @return {Promise} resolved when the process is done or rejected with a string\n * which describes the error.\n */\nJitsiConference.prototype._addLocalTrackAsUnmute = function(track) {\n    const addAsUnmutePromises = [];\n\n    if (this.jvbJingleSession) {\n        addAsUnmutePromises.push(this.jvbJingleSession.addTrackAsUnmute(track));\n    } else {\n        logger.info(\n            'Add local MediaStream as unmute -'\n                + ' no JVB Jingle session started yet');\n    }\n\n    if (this.p2pJingleSession) {\n        addAsUnmutePromises.push(this.p2pJingleSession.addTrackAsUnmute(track));\n    } else {\n        logger.info(\n            'Add local MediaStream as unmute -'\n                + ' no P2P Jingle session started yet');\n    }\n\n    return Promise.all(addAsUnmutePromises);\n};\n\n/**\n * Method called by the {@link JitsiLocalTrack} (a video one) in order to remove\n * the underlying WebRTC MediaStream from the PeerConnection. The purpose of\n * that is to stop sending any data and turn off the HW camera device.\n * @param {JitsiLocalTrack} track the local track that will be removed.\n * @return {Promise}\n */\nJitsiConference.prototype._removeLocalTrackAsMute = function(track) {\n    const removeAsMutePromises = [];\n\n    if (this.jvbJingleSession) {\n        removeAsMutePromises.push(\n            this.jvbJingleSession.removeTrackAsMute(track));\n    } else {\n        logger.info(\n            'Remove local MediaStream - no JVB JingleSession started yet');\n    }\n    if (this.p2pJingleSession) {\n        removeAsMutePromises.push(\n            this.p2pJingleSession.removeTrackAsMute(track));\n    } else {\n        logger.info(\n            'Remove local MediaStream - no P2P JingleSession started yet');\n    }\n\n    return Promise.all(removeAsMutePromises);\n};\n\n/**\n * Get role of the local user.\n * @returns {string} user role: 'moderator' or 'none'\n */\nJitsiConference.prototype.getRole = function() {\n    return this.room.role;\n};\n\n/**\n * Returns whether or not the current conference has been joined as a hidden\n * user.\n *\n * @returns {boolean|null} True if hidden, false otherwise. Will return null if\n * no connection is active.\n */\nJitsiConference.prototype.isHidden = function() {\n    if (!this.connection) {\n        return null;\n    }\n\n    return Strophe.getDomainFromJid(this.connection.getJid())\n        === this.options.config.hiddenDomain;\n};\n\n/**\n * Check if local user is moderator.\n * @returns {boolean|null} true if local user is moderator, false otherwise. If\n * we're no longer in the conference room then <tt>null</tt> is returned.\n */\nJitsiConference.prototype.isModerator = function() {\n    return this.room ? this.room.isModerator() : null;\n};\n\n/**\n * Set password for the room.\n * @param {string} password new password for the room.\n * @returns {Promise}\n */\nJitsiConference.prototype.lock = function(password) {\n    if (!this.isModerator()) {\n        return Promise.reject(new Error('You are not moderator.'));\n    }\n\n    return new Promise((resolve, reject) => {\n        this.room.lockRoom(\n            password || '',\n            () => resolve(),\n            err => reject(err),\n            () => reject(JitsiConferenceErrors.PASSWORD_NOT_SUPPORTED));\n    });\n};\n\n/**\n * Remove password from the room.\n * @returns {Promise}\n */\nJitsiConference.prototype.unlock = function() {\n    return this.lock();\n};\n\n/**\n * Elects the participant with the given id to be the selected participant in\n * order to receive higher video quality (if simulcast is enabled).\n * Or cache it if channel is not created and send it once channel is available.\n * @param participantId the identifier of the participant\n * @throws NetworkError or InvalidStateError or Error if the operation fails.\n * @returns {void}\n */\nJitsiConference.prototype.selectParticipant = function(participantId) {\n    this.selectParticipants([ participantId ]);\n};\n\n/*\n * Elects participants with given ids to be the selected participants in order\n * to receive higher video quality (if simulcast is enabled). The argument\n * should be an array of participant id strings or an empty array; an error will\n * be thrown if a non-array is passed in. The error is thrown as a layer of\n * protection against passing an invalid argument, as the error will happen in\n * the bridge and may not be visible in the client.\n *\n * @param {Array<strings>} participantIds - An array of identifiers for\n * participants.\n * @returns {void}\n */\nJitsiConference.prototype.selectParticipants = function(participantIds) {\n    if (!Array.isArray(participantIds)) {\n        throw new Error('Invalid argument; participantIds must be an array.');\n    }\n\n    this.rtc.selectEndpoints(participantIds);\n};\n\n/**\n * Elects the participant with the given id to be the pinned participant in\n * order to always receive video for this participant (even when last n is\n * enabled).\n * @param participantId the identifier of the participant\n * @throws NetworkError or InvalidStateError or Error if the operation fails.\n */\nJitsiConference.prototype.pinParticipant = function(participantId) {\n    this.rtc.pinEndpoint(participantId);\n};\n\n/**\n * Obtains the current value for \"lastN\". See {@link setLastN} for more info.\n * @returns {number}\n */\nJitsiConference.prototype.getLastN = function() {\n    return this.rtc.getLastN();\n};\n\n/**\n * Selects a new value for \"lastN\". The requested amount of videos are going\n * to be delivered after the value is in effect. Set to -1 for unlimited or\n * all available videos.\n * @param lastN the new number of videos the user would like to receive.\n * @throws Error or RangeError if the given value is not a number or is smaller\n * than -1.\n */\nJitsiConference.prototype.setLastN = function(lastN) {\n    if (!Number.isInteger(lastN) && !Number.parseInt(lastN, 10)) {\n        throw new Error(`Invalid value for lastN: ${lastN}`);\n    }\n    const n = Number(lastN);\n\n    if (n < -1) {\n        throw new RangeError('lastN cannot be smaller than -1');\n    }\n    this.rtc.setLastN(n);\n\n    // If the P2P session is not fully established yet, we wait until it gets\n    // established.\n    if (this.p2pJingleSession) {\n        const isVideoActive = n !== 0;\n\n        this.p2pJingleSession\n            .setMediaTransferActive(true, isVideoActive)\n            .catch(error => {\n                logger.error(\n                    `Failed to adjust video transfer status (${isVideoActive})`,\n                    error);\n            });\n    }\n};\n\n/**\n * Checks if the participant given by participantId is currently included in\n * the last N.\n * @param {string} participantId the identifier of the participant we would\n * like to check.\n * @return {boolean} true if the participant with id is in the last N set or\n * if there's no last N set, false otherwise.\n * @deprecated this method should never be used to figure out the UI, but\n * {@link ParticipantConnectionStatus} should be used instead.\n */\nJitsiConference.prototype.isInLastN = function(participantId) {\n    return this.rtc.isInLastN(participantId);\n};\n\n/**\n * @return Array<JitsiParticipant> an array of all participants in this\n * conference.\n */\nJitsiConference.prototype.getParticipants = function() {\n    return Object.keys(this.participants).map(function(key) {\n        return this.participants[key];\n    }, this);\n};\n\n/**\n * Returns the number of participants in the conference, including the local\n * participant.\n * @param countHidden {boolean} Whether or not to include hidden participants\n * in the count. Default: false.\n **/\nJitsiConference.prototype.getParticipantCount\n    = function(countHidden = false) {\n\n        let participants = this.getParticipants();\n\n        if (!countHidden) {\n            participants = participants.filter(p => !p.isHidden());\n        }\n\n        // Add one for the local participant.\n        return participants.length + 1;\n    };\n\n/**\n * @returns {JitsiParticipant} the participant in this conference with the\n * specified id (or undefined if there isn't one).\n * @param id the id of the participant.\n */\nJitsiConference.prototype.getParticipantById = function(id) {\n    return this.participants[id];\n};\n\n/**\n * Kick participant from this conference.\n * @param {string} id id of the participant to kick\n */\nJitsiConference.prototype.kickParticipant = function(id) {\n    const participant = this.getParticipantById(id);\n\n    if (!participant) {\n        return;\n    }\n    this.room.kick(participant.getJid());\n};\n\n/**\n * Maybe clears the timeout which emits {@link ACTION_JINGLE_SI_TIMEOUT}\n * analytics event.\n * @private\n */\nJitsiConference.prototype._maybeClearSITimeout = function() {\n    if (this._sessionInitiateTimeout\n            && (this.jvbJingleSession || this.getParticipantCount() < 2)) {\n        window.clearTimeout(this._sessionInitiateTimeout);\n        this._sessionInitiateTimeout = null;\n    }\n};\n\n/**\n * Sets a timeout which will emit {@link ACTION_JINGLE_SI_TIMEOUT} analytics\n * event.\n * @private\n */\nJitsiConference.prototype._maybeSetSITimeout = function() {\n    // Jicofo is supposed to invite if there are at least 2 participants\n    if (!this.jvbJingleSession\n            && this.getParticipantCount() >= 2\n            && !this._sessionInitiateTimeout) {\n        this._sessionInitiateTimeout = window.setTimeout(() => {\n            this._sessionInitiateTimeout = null;\n            Statistics.sendAnalytics(createJingleEvent(\n                ACTION_JINGLE_SI_TIMEOUT,\n                {\n                    p2p: false,\n                    value: JINGLE_SI_TIMEOUT\n                }));\n        }, JINGLE_SI_TIMEOUT);\n    }\n};\n\n/**\n * Mutes a participant.\n * @param {string} id The id of the participant to mute.\n */\nJitsiConference.prototype.muteParticipant = function(id) {\n    const participant = this.getParticipantById(id);\n\n    if (!participant) {\n        return;\n    }\n    this.room.muteParticipant(participant.getJid(), true);\n};\n\n/* eslint-disable max-params */\n\n/**\n * Notifies this JitsiConference that a new member has joined its chat room.\n *\n * FIXME This should NOT be exposed!\n *\n * @param jid the jid of the participant in the MUC\n * @param nick the display name of the participant\n * @param role the role of the participant in the MUC\n * @param isHidden indicates if this is a hidden participant (system\n * participant for example a recorder).\n * @param statsID the participant statsID (optional)\n * @param status the initial status if any\n * @param identity the member identity, if any\n * @param botType the member botType, if any\n */\nJitsiConference.prototype.onMemberJoined = function(\n        jid, nick, role, isHidden, statsID, status, identity, botType) {\n    const id = Strophe.getResourceFromJid(jid);\n\n    if (id === 'focus' || this.myUserId() === id) {\n        return;\n    }\n\n    const participant\n        = new JitsiParticipant(jid, this, nick, isHidden, statsID, status, identity);\n\n    participant._role = role;\n    participant._botType = botType;\n    this.participants[id] = participant;\n    this.eventEmitter.emit(\n        JitsiConferenceEvents.USER_JOINED,\n        id,\n        participant);\n\n    this._updateFeatures(participant);\n\n    this._maybeStartOrStopP2P();\n    this._maybeSetSITimeout();\n};\n\n/* eslint-enable max-params */\n\n/**\n * Updates features for a participant.\n * @param {JitsiParticipant} participant - The participant to query for features.\n * @returns {void}\n * @private\n */\nJitsiConference.prototype._updateFeatures = function(participant) {\n    participant.getFeatures()\n        .then(features => {\n            participant._supportsDTMF = features.has('urn:xmpp:jingle:dtmf:0');\n            this.updateDTMFSupport();\n\n            if (features.has('http://jitsi.org/protocol/jigasi')) {\n                participant.setProperty('features_jigasi', true);\n            }\n        })\n        .catch(() => false);\n};\n\n/**\n * Get notified when member bot type had changed.\n * @param jid the member jid\n * @param botType the new botType value\n * @private\n */\nJitsiConference.prototype._onMemberBotTypeChanged = function(jid, botType) {\n\n    // find the participant and mark it as non bot, as the real one will join\n    // in a moment\n    const peers = this.getParticipants();\n    const botParticipant = peers.find(p => p.getJid() === jid);\n\n    if (botParticipant) {\n        botParticipant._botType = botType;\n        const id = Strophe.getResourceFromJid(jid);\n\n        this.eventEmitter.emit(\n            JitsiConferenceEvents.BOT_TYPE_CHANGED,\n            id,\n            botType);\n    }\n\n    // if botType changed to undefined, botType was removed, in case of\n    // poltergeist mode this is the moment when the poltergeist had exited and\n    // the real participant had already replaced it.\n    // In this case we can check and try p2p\n    if (!botParticipant._botType) {\n        this._maybeStartOrStopP2P();\n    }\n};\n\nJitsiConference.prototype.onMemberLeft = function(jid) {\n    const id = Strophe.getResourceFromJid(jid);\n\n    if (id === 'focus' || this.myUserId() === id) {\n        return;\n    }\n\n    const participant = this.participants[id];\n\n    delete this.participants[id];\n\n    const removedTracks = this.rtc.removeRemoteTracks(id);\n\n    removedTracks.forEach(\n        track =>\n            this.eventEmitter.emit(JitsiConferenceEvents.TRACK_REMOVED, track));\n\n    // there can be no participant in case the member that left is focus\n    if (participant) {\n        this.eventEmitter.emit(\n            JitsiConferenceEvents.USER_LEFT, id, participant);\n    }\n\n    this._maybeStartOrStopP2P(true /* triggered by user left event */);\n    this._maybeClearSITimeout();\n};\n\n/**\n * Designates an event indicating that we were kicked from the XMPP MUC.\n * @param {boolean} isSelfPresence - whether it is for local participant\n * or another participant.\n * @param {string} actorId - the id of the participant who was initiator\n * of the kick.\n * @param {string?} kickedParticipantId - when it is not a kick for local participant,\n * this is the id of the participant which was kicked.\n */\nJitsiConference.prototype.onMemberKicked = function(isSelfPresence, actorId, kickedParticipantId) {\n    const actorParticipant = this.participants[actorId];\n\n    if (isSelfPresence) {\n        this.eventEmitter.emit(\n            JitsiConferenceEvents.KICKED, actorParticipant);\n\n        this.leave();\n\n        return;\n    }\n\n    const kickedParticipant = this.participants[kickedParticipantId];\n\n    this.eventEmitter.emit(\n        JitsiConferenceEvents.PARTICIPANT_KICKED, actorParticipant, kickedParticipant);\n};\n\n/**\n * Method called on local MUC role change.\n * @param {string} role the name of new user's role as defined by XMPP MUC.\n */\nJitsiConference.prototype.onLocalRoleChanged = function(role) {\n    // Emit role changed for local  JID\n    this.eventEmitter.emit(\n        JitsiConferenceEvents.USER_ROLE_CHANGED, this.myUserId(), role);\n};\n\nJitsiConference.prototype.onUserRoleChanged = function(jid, role) {\n    const id = Strophe.getResourceFromJid(jid);\n    const participant = this.getParticipantById(id);\n\n    if (!participant) {\n        return;\n    }\n    participant._role = role;\n    this.eventEmitter.emit(JitsiConferenceEvents.USER_ROLE_CHANGED, id, role);\n};\n\nJitsiConference.prototype.onDisplayNameChanged = function(jid, displayName) {\n    const id = Strophe.getResourceFromJid(jid);\n    const participant = this.getParticipantById(id);\n\n    if (!participant) {\n        return;\n    }\n\n    if (participant._displayName === displayName) {\n        return;\n    }\n\n    participant._displayName = displayName;\n    this.eventEmitter.emit(\n        JitsiConferenceEvents.DISPLAY_NAME_CHANGED,\n        id,\n        displayName);\n};\n\n/**\n * Notifies this JitsiConference that a JitsiRemoteTrack was added into\n * the conference.\n *\n * @param {JitsiRemoteTrack} track the JitsiRemoteTrack which was added to this\n * JitsiConference\n */\nJitsiConference.prototype.onRemoteTrackAdded = function(track) {\n    if (track.isP2P && !this.isP2PActive()) {\n        logger.info(\n            'Trying to add remote P2P track, when not in P2P - IGNORED');\n\n        return;\n    } else if (!track.isP2P && this.isP2PActive()) {\n        logger.info(\n            'Trying to add remote JVB track, when in P2P - IGNORED');\n\n        return;\n    }\n\n    const id = track.getParticipantId();\n    const participant = this.getParticipantById(id);\n\n    if (!participant) {\n        logger.error(`No participant found for id: ${id}`);\n\n        return;\n    }\n\n    // Add track to JitsiParticipant.\n    participant._tracks.push(track);\n\n    if (this.transcriber) {\n        this.transcriber.addTrack(track);\n    }\n\n    const emitter = this.eventEmitter;\n\n    track.addEventListener(\n        JitsiTrackEvents.TRACK_MUTE_CHANGED,\n        () => emitter.emit(JitsiConferenceEvents.TRACK_MUTE_CHANGED, track));\n    track.addEventListener(\n        JitsiTrackEvents.TRACK_AUDIO_LEVEL_CHANGED,\n        (audioLevel, tpc) => {\n            const activeTPC = this.getActivePeerConnection();\n\n            if (activeTPC === tpc) {\n                emitter.emit(\n                    JitsiConferenceEvents.TRACK_AUDIO_LEVEL_CHANGED,\n                    id,\n                    audioLevel);\n            }\n        }\n    );\n\n    emitter.emit(JitsiConferenceEvents.TRACK_ADDED, track);\n};\n\n/**\n * Callback called by the Jingle plugin when 'session-answer' is received.\n * @param {JingleSessionPC} session the Jingle session for which an answer was\n * received.\n * @param {jQuery} answer a jQuery selector pointing to 'jingle' IQ element\n */\n// eslint-disable-next-line no-unused-vars\nJitsiConference.prototype.onCallAccepted = function(session, answer) {\n    if (this.p2pJingleSession === session) {\n        logger.info('P2P setAnswer');\n        this.p2pJingleSession.setAnswer(answer);\n    }\n};\n\n/**\n * Callback called by the Jingle plugin when 'transport-info' is received.\n * @param {JingleSessionPC} session the Jingle session for which the IQ was\n * received\n * @param {jQuery} transportInfo a jQuery selector pointing to 'jingle' IQ\n * element\n */\n// eslint-disable-next-line no-unused-vars\nJitsiConference.prototype.onTransportInfo = function(session, transportInfo) {\n    if (this.p2pJingleSession === session) {\n        logger.info('P2P addIceCandidates');\n        this.p2pJingleSession.addIceCandidates(transportInfo);\n    }\n};\n\n/**\n * Notifies this JitsiConference that a JitsiRemoteTrack was removed from\n * the conference.\n *\n * @param {JitsiRemoteTrack} removedTrack\n */\nJitsiConference.prototype.onRemoteTrackRemoved = function(removedTrack) {\n    this.getParticipants().forEach(participant => {\n        const tracks = participant.getTracks();\n\n        for (let i = 0; i < tracks.length; i++) {\n            if (tracks[i] === removedTrack) {\n                // Since the tracks have been compared and are\n                // considered equal the result of splice can be ignored.\n                participant._tracks.splice(i, 1);\n\n                this.eventEmitter.emit(\n                    JitsiConferenceEvents.TRACK_REMOVED, removedTrack);\n\n                if (this.transcriber) {\n                    this.transcriber.removeTrack(removedTrack);\n                }\n\n                break;\n            }\n        }\n    }, this);\n};\n\n/**\n * Handles an incoming call event for the P2P jingle session.\n */\nJitsiConference.prototype._onIncomingCallP2P = function(\n        jingleSession,\n        jingleOffer) {\n\n    let rejectReason;\n\n    if (!browser.supportsP2P()) {\n        rejectReason = {\n            reason: 'unsupported-applications',\n            reasonDescription: 'P2P not supported',\n            errorMsg: 'This client does not support P2P connections'\n        };\n    } else if (!this.isP2PEnabled() && !this.isP2PTestModeEnabled()) {\n        rejectReason = {\n            reason: 'decline',\n            reasonDescription: 'P2P disabled',\n            errorMsg: 'P2P mode disabled in the configuration'\n        };\n    } else if (this.p2pJingleSession) {\n        // Reject incoming P2P call (already in progress)\n        rejectReason = {\n            reason: 'busy',\n            reasonDescription: 'P2P already in progress',\n            errorMsg: 'Duplicated P2P \"session-initiate\"'\n        };\n    }\n\n    if (rejectReason) {\n        this._rejectIncomingCall(jingleSession, rejectReason);\n    } else {\n        this._acceptP2PIncomingCall(jingleSession, jingleOffer);\n    }\n};\n\n/**\n * Handles an incoming call event.\n */\nJitsiConference.prototype.onIncomingCall = function(\n        jingleSession,\n        jingleOffer,\n        now) {\n    // Handle incoming P2P call\n    if (jingleSession.isP2P) {\n        this._onIncomingCallP2P(jingleSession, jingleOffer);\n    } else {\n        if (!this.room.isFocus(jingleSession.remoteJid)) {\n            const description = 'Rejecting session-initiate from non-focus.';\n\n            this._rejectIncomingCall(\n                jingleSession, {\n                    reason: 'security-error',\n                    reasonDescription: description,\n                    errorMsg: description\n                });\n\n            return;\n        }\n        this._acceptJvbIncomingCall(jingleSession, jingleOffer, now);\n    }\n};\n\n/**\n * Accepts an incoming call event for the JVB jingle session.\n */\nJitsiConference.prototype._acceptJvbIncomingCall = function(\n        jingleSession,\n        jingleOffer,\n        now) {\n\n    // Accept incoming call\n    this.jvbJingleSession = jingleSession;\n    this.room.connectionTimes['session.initiate'] = now;\n\n    if (this.wasStopped) {\n        Statistics.sendAnalyticsAndLog(\n            createJingleEvent(ACTION_JINGLE_RESTART, { p2p: false }));\n    }\n\n    const serverRegion\n        = $(jingleOffer)\n            .find('>bridge-session[xmlns=\"http://jitsi.org/protocol/focus\"]')\n            .attr('region');\n\n    this.eventEmitter.emit(\n        JitsiConferenceEvents.SERVER_REGION_CHANGED,\n        serverRegion);\n\n    this._maybeClearSITimeout();\n    Statistics.sendAnalytics(createJingleEvent(\n        ACTION_JINGLE_SI_RECEIVED,\n        {\n            p2p: false,\n            value: now\n        }));\n    try {\n        jingleSession.initialize(this.room, this.rtc, this.options.config);\n    } catch (error) {\n        GlobalOnErrorHandler.callErrorHandler(error);\n    }\n\n    // Open a channel with the videobridge.\n    this._setBridgeChannel(jingleOffer, jingleSession.peerconnection);\n\n    // Add local tracks to the session\n    try {\n        jingleSession.acceptOffer(\n            jingleOffer,\n            () => {\n                // If for any reason invite for the JVB session arrived after\n                // the P2P has been established already the media transfer needs\n                // to be turned off here.\n                if (this.isP2PActive() && this.jvbJingleSession) {\n                    this._suspendMediaTransferForJvbConnection();\n                }\n            },\n            error => {\n                GlobalOnErrorHandler.callErrorHandler(error);\n                logger.error(\n                    'Failed to accept incoming Jingle session', error);\n            },\n            this.getLocalTracks()\n        );\n\n        // Start callstats as soon as peerconnection is initialized,\n        // do not wait for XMPPEvents.PEERCONNECTION_READY, as it may never\n        // happen in case if user doesn't have or denied permission to\n        // both camera and microphone.\n        logger.info('Starting CallStats for JVB connection...');\n        this.statistics.startCallStats(\n            this.jvbJingleSession.peerconnection,\n            'jitsi' /* Remote user ID for JVB is 'jitsi' */);\n        this.statistics.startRemoteStats(this.jvbJingleSession.peerconnection);\n    } catch (e) {\n        GlobalOnErrorHandler.callErrorHandler(e);\n        logger.error(e);\n    }\n};\n\n/**\n * Sets the BridgeChannel.\n *\n * @param {jQuery} offerIq a jQuery selector pointing to the jingle element of\n * the offer IQ which may carry the WebSocket URL for the 'websocket'\n * BridgeChannel mode.\n * @param {TraceablePeerConnection} pc the peer connection which will be used\n * to listen for new WebRTC Data Channels (in the 'datachannel' mode).\n */\nJitsiConference.prototype._setBridgeChannel = function(offerIq, pc) {\n    let wsUrl = null;\n    const webSocket\n        = $(offerIq)\n            .find('>content>transport>web-socket')\n            .first();\n\n    if (webSocket.length === 1) {\n        wsUrl = webSocket[0].getAttribute('url');\n    }\n\n    let bridgeChannelType;\n\n    switch (this.options.config.openBridgeChannel) {\n    case 'datachannel':\n    case true:\n    case undefined:\n        bridgeChannelType = 'datachannel';\n        break;\n    case 'websocket':\n        bridgeChannelType = 'websocket';\n        break;\n    }\n\n    if (bridgeChannelType === 'datachannel'\n        && !browser.supportsDataChannels()) {\n        bridgeChannelType = 'websocket';\n    }\n\n    if (bridgeChannelType === 'datachannel') {\n        this.rtc.initializeBridgeChannel(pc, null);\n    } else if (bridgeChannelType === 'websocket' && wsUrl) {\n        this.rtc.initializeBridgeChannel(null, wsUrl);\n    }\n};\n\n/**\n * Rejects incoming Jingle call.\n * @param {JingleSessionPC} jingleSession the session instance to be rejected.\n * @param {object} [options]\n * @param {string} options.reason the name of the reason element as defined\n * by Jingle\n * @param {string} options.reasonDescription the reason description which will\n * be included in Jingle 'session-terminate' message.\n * @param {string} options.errorMsg an error message to be logged on global\n * error handler\n * @private\n */\nJitsiConference.prototype._rejectIncomingCall = function(\n        jingleSession,\n        options) {\n    if (options && options.errorMsg) {\n        GlobalOnErrorHandler.callErrorHandler(new Error(options.errorMsg));\n    }\n\n    // Terminate the jingle session with a reason\n    jingleSession.terminate(\n        null /* success callback => we don't care */,\n        error => {\n            logger.warn(\n                'An error occurred while trying to terminate'\n                    + ' invalid Jingle session', error);\n        }, {\n            reason: options && options.reason,\n            reasonDescription: options && options.reasonDescription,\n            sendSessionTerminate: true\n        });\n};\n\n/**\n * Handles the call ended event.\n * XXX is this due to the remote side terminating the Jingle session?\n *\n * @param {JingleSessionPC} jingleSession the jingle session which has been\n * terminated.\n * @param {String} reasonCondition the Jingle reason condition.\n * @param {String|null} reasonText human readable reason text which may provide\n * more details about why the call has been terminated.\n */\nJitsiConference.prototype.onCallEnded = function(\n        jingleSession,\n        reasonCondition,\n        reasonText) {\n    logger.info(\n        `Call ended: ${reasonCondition} - ${reasonText} P2P ?${\n            jingleSession.isP2P}`);\n    if (jingleSession === this.jvbJingleSession) {\n        this.wasStopped = true;\n\n        Statistics.sendAnalytics(\n            createJingleEvent(ACTION_JINGLE_TERMINATE, { p2p: false }));\n\n        // Stop the stats\n        if (this.statistics) {\n            this.statistics.stopRemoteStats(\n                this.jvbJingleSession.peerconnection);\n            logger.info('Stopping JVB CallStats');\n            this.statistics.stopCallStats(\n                this.jvbJingleSession.peerconnection);\n        }\n\n        // Current JVB JingleSession is no longer valid, so set it to null\n        this.jvbJingleSession = null;\n\n        // Let the RTC service do any cleanups\n        this.rtc.onCallEnded();\n    } else if (jingleSession === this.p2pJingleSession) {\n        // It's the responder who decides to enforce JVB mode, so that both\n        // initiator and responder are aware if it was intentional.\n        if (reasonCondition === 'decline' && reasonText === 'force JVB121') {\n            logger.info('In forced JVB 121 mode...');\n            Statistics.analytics.addPermanentProperties({ forceJvb121: true });\n        } else if (reasonCondition === 'connectivity-error'\n            && reasonText === 'ICE FAILED') {\n            // It can happen that the other peer detects ICE failed and\n            // terminates the session, before we get the event on our side.\n            // But we are able to parse the reason and mark it here.\n            Statistics.analytics.addPermanentProperties({ p2pFailed: true });\n        }\n        this._stopP2PSession();\n    } else {\n        logger.error(\n            'Received onCallEnded for invalid session',\n            jingleSession.sid,\n            jingleSession.remoteJid,\n            reasonCondition,\n            reasonText);\n    }\n};\n\n/**\n * Handles the suspend detected event. Leaves the room and fires suspended.\n * @param {JingleSessionPC} jingleSession\n */\nJitsiConference.prototype.onSuspendDetected = function(jingleSession) {\n    if (!jingleSession.isP2P) {\n        this.leave();\n        this.eventEmitter.emit(JitsiConferenceEvents.SUSPEND_DETECTED);\n    }\n};\n\nJitsiConference.prototype.updateDTMFSupport = function() {\n    let somebodySupportsDTMF = false;\n    const participants = this.getParticipants();\n\n    // check if at least 1 participant supports DTMF\n    for (let i = 0; i < participants.length; i += 1) {\n        if (participants[i].supportsDTMF()) {\n            somebodySupportsDTMF = true;\n            break;\n        }\n    }\n    if (somebodySupportsDTMF !== this.somebodySupportsDTMF) {\n        this.somebodySupportsDTMF = somebodySupportsDTMF;\n        this.eventEmitter.emit(\n            JitsiConferenceEvents.DTMF_SUPPORT_CHANGED,\n            somebodySupportsDTMF);\n    }\n};\n\n/**\n * Allows to check if there is at least one user in the conference\n * that supports DTMF.\n * @returns {boolean} true if somebody supports DTMF, false otherwise\n */\nJitsiConference.prototype.isDTMFSupported = function() {\n    return this.somebodySupportsDTMF;\n};\n\n/**\n * Returns the local user's ID\n * @return {string} local user's ID\n */\nJitsiConference.prototype.myUserId = function() {\n    return (\n        this.room && this.room.myroomjid\n            ? Strophe.getResourceFromJid(this.room.myroomjid)\n            : null);\n};\n\nJitsiConference.prototype.sendTones = function(tones, duration, pause) {\n    if (!this.dtmfManager) {\n        const peerConnection = this.getActivePeerConnection();\n\n        if (!peerConnection) {\n            logger.warn('cannot sendTones: no peer connection');\n\n            return;\n        }\n\n        const localAudio = this.getLocalAudioTrack();\n\n        if (!localAudio) {\n            logger.warn('cannot sendTones: no local audio stream');\n\n            return;\n        }\n        this.dtmfManager = new JitsiDTMFManager(localAudio, peerConnection);\n    }\n\n    this.dtmfManager.sendTones(tones, duration, pause);\n};\n\n/**\n * Starts recording the current conference.\n *\n * @param {Object} options - Configuration for the recording. See\n * {@link Chatroom#startRecording} for more info.\n * @returns {Promise} See {@link Chatroom#startRecording} for more info.\n */\nJitsiConference.prototype.startRecording = function(options) {\n    if (this.room) {\n        return this.recordingManager.startRecording(options);\n    }\n\n    return Promise.reject(new Error('The conference is not created yet!'));\n};\n\n/**\n * Stop a recording session.\n *\n * @param {string} sessionID - The ID of the recording session that\n * should be stopped.\n * @returns {Promise} See {@link Chatroom#stopRecording} for more info.\n */\nJitsiConference.prototype.stopRecording = function(sessionID) {\n    if (this.room) {\n        return this.recordingManager.stopRecording(sessionID);\n    }\n\n    return Promise.reject(new Error('The conference is not created yet!'));\n};\n\n/**\n * Returns true if the SIP calls are supported and false otherwise\n */\nJitsiConference.prototype.isSIPCallingSupported = function() {\n    if (this.room) {\n        return this.room.isSIPCallingSupported();\n    }\n\n    return false;\n};\n\n/**\n * Dials a number.\n * @param number the number\n */\nJitsiConference.prototype.dial = function(number) {\n    if (this.room) {\n        return this.room.dial(number);\n    }\n\n    return new Promise((resolve, reject) => {\n        reject(new Error('The conference is not created yet!'));\n    });\n};\n\n/**\n * Hangup an existing call\n */\nJitsiConference.prototype.hangup = function() {\n    if (this.room) {\n        return this.room.hangup();\n    }\n\n    return new Promise((resolve, reject) => {\n        reject(new Error('The conference is not created yet!'));\n    });\n};\n\n/**\n * Starts the transcription service.\n */\nJitsiConference.prototype.startTranscriber = function() {\n    return this.dial('jitsi_meet_transcribe');\n};\n\n\n/**\n * Stops the transcription service.\n */\nJitsiConference.prototype.stopTranscriber = JitsiConference.prototype.hangup;\n\n/**\n * Returns the phone number for joining the conference.\n */\nJitsiConference.prototype.getPhoneNumber = function() {\n    if (this.room) {\n        return this.room.getPhoneNumber();\n    }\n\n    return null;\n};\n\n/**\n * Returns the pin for joining the conference with phone.\n */\nJitsiConference.prototype.getPhonePin = function() {\n    if (this.room) {\n        return this.room.getPhonePin();\n    }\n\n    return null;\n};\n\n/**\n * Will return P2P or JVB <tt>TraceablePeerConnection</tt> depending on\n * which connection is currently active.\n *\n * @return {TraceablePeerConnection|null} null if there isn't any active\n * <tt>TraceablePeerConnection</tt> currently available.\n * @public (FIXME how to make package local ?)\n */\nJitsiConference.prototype.getActivePeerConnection = function() {\n    if (this.isP2PActive()) {\n        return this.p2pJingleSession.peerconnection;\n    }\n\n    return this.jvbJingleSession ? this.jvbJingleSession.peerconnection : null;\n};\n\n/**\n * Returns the connection state for the current room. Its ice connection state\n * for its session.\n * NOTE that \"completed\" ICE state which can appear on the P2P connection will\n * be converted to \"connected\".\n * @return {string|null} ICE state name or <tt>null</tt> if there is no active\n * peer connection at this time.\n */\nJitsiConference.prototype.getConnectionState = function() {\n    const peerConnection = this.getActivePeerConnection();\n\n    return peerConnection ? peerConnection.getConnectionState() : null;\n};\n\n/**\n * Make all new participants mute their audio/video on join.\n * @param policy {Object} object with 2 boolean properties for video and audio:\n * @param {boolean} audio if audio should be muted.\n * @param {boolean} video if video should be muted.\n */\nJitsiConference.prototype.setStartMutedPolicy = function(policy) {\n    if (!this.isModerator()) {\n        return;\n    }\n    this.startMutedPolicy = policy;\n    this.room.removeFromPresence('startmuted');\n    this.room.addToPresence('startmuted', {\n        attributes: {\n            audio: policy.audio,\n            video: policy.video,\n            xmlns: 'http://jitsi.org/jitmeet/start-muted'\n        }\n    });\n    this.room.sendPresence();\n};\n\n/**\n * Returns current start muted policy\n * @returns {Object} with 2 properties - audio and video.\n */\nJitsiConference.prototype.getStartMutedPolicy = function() {\n    return this.startMutedPolicy;\n};\n\n/**\n * Check if audio is muted on join.\n */\nJitsiConference.prototype.isStartAudioMuted = function() {\n    return this.startAudioMuted;\n};\n\n/**\n * Check if video is muted on join.\n */\nJitsiConference.prototype.isStartVideoMuted = function() {\n    return this.startVideoMuted;\n};\n\n/**\n * Get object with internal logs.\n */\nJitsiConference.prototype.getLogs = function() {\n    const data = this.xmpp.getJingleLog();\n\n    const metadata = {};\n\n    metadata.time = new Date();\n    metadata.url = window.location.href;\n    metadata.ua = navigator.userAgent;\n\n    const log = this.xmpp.getXmppLog();\n\n    if (log) {\n        metadata.xmpp = log;\n    }\n\n    data.metadata = metadata;\n\n    return data;\n};\n\n/**\n * Returns measured connectionTimes.\n */\nJitsiConference.prototype.getConnectionTimes = function() {\n    return this.room.connectionTimes;\n};\n\n/**\n * Sets a property for the local participant.\n */\nJitsiConference.prototype.setLocalParticipantProperty = function(name, value) {\n    this.sendCommand(`jitsi_participant_${name}`, { value });\n};\n\n/**\n *  Removes a property for the local participant and sends the updated presence.\n */\nJitsiConference.prototype.removeLocalParticipantProperty = function(name) {\n    this.removeCommand(`jitsi_participant_${name}`);\n    this.room.sendPresence();\n};\n\n/**\n * Gets a local participant property.\n *\n * @return value of the local participant property if the tagName exists in the\n * list of properties, otherwise returns undefined.\n */\nJitsiConference.prototype.getLocalParticipantProperty = function(name) {\n    const property = this.room.presMap.nodes.find(prop =>\n        prop.tagName === `jitsi_participant_${name}`\n    );\n\n    return property ? property.value : undefined;\n};\n\n/**\n * Sends the given feedback through CallStats if enabled.\n *\n * @param overallFeedback an integer between 1 and 5 indicating the\n * user feedback\n * @param detailedFeedback detailed feedback from the user. Not yet used\n * @returns {Promise} Resolves if feedback is submitted successfully.\n */\nJitsiConference.prototype.sendFeedback = function(\n        overallFeedback,\n        detailedFeedback) {\n    return this.statistics.sendFeedback(overallFeedback, detailedFeedback);\n};\n\n/**\n * Returns true if the callstats integration is enabled, otherwise returns\n * false.\n *\n * @returns true if the callstats integration is enabled, otherwise returns\n * false.\n */\nJitsiConference.prototype.isCallstatsEnabled = function() {\n    return this.statistics.isCallstatsEnabled();\n};\n\n\n/**\n * Handles track attached to container (Calls associateStreamWithVideoTag method\n * from statistics module)\n * @param {JitsiLocalTrack|JitsiRemoteTrack} track the track\n * @param container the container\n */\nJitsiConference.prototype._onTrackAttach = function(track, container) {\n    const isLocal = track.isLocal();\n    let ssrc = null;\n    const isP2P = track.isP2P;\n    const remoteUserId = isP2P ? track.getParticipantId() : 'jitsi';\n    const peerConnection\n        = isP2P\n            ? this.p2pJingleSession && this.p2pJingleSession.peerconnection\n            : this.jvbJingleSession && this.jvbJingleSession.peerconnection;\n\n    if (isLocal) {\n        // Local tracks have SSRC stored on per peer connection basis\n        if (peerConnection) {\n            ssrc = peerConnection.getLocalSSRC(track);\n        }\n    } else {\n        ssrc = track.getSSRC();\n    }\n    if (!container.id || !ssrc || !peerConnection) {\n        return;\n    }\n\n    this.statistics.associateStreamWithVideoTag(\n        peerConnection,\n        ssrc,\n        isLocal,\n        remoteUserId,\n        track.getUsageLabel(),\n        container.id);\n};\n\n/**\n * Logs an \"application log\" message.\n * @param message {string} The message to log. Note that while this can be a\n * generic string, the convention used by lib-jitsi-meet and jitsi-meet is to\n * log valid JSON strings, with an \"id\" field used for distinguishing between\n * message types. E.g.: {id: \"recorder_status\", status: \"off\"}\n */\nJitsiConference.prototype.sendApplicationLog = function(message) {\n    Statistics.sendLog(message);\n};\n\n/**\n * Checks if the user identified by given <tt>mucJid</tt> is the conference\n * focus.\n * @param mucJid the full MUC address of the user to be checked.\n * @returns {boolean|null} <tt>true</tt> if MUC user is the conference focus,\n * <tt>false</tt> when is not. <tt>null</tt> if we're not in the MUC anymore and\n * are unable to figure out the status or if given <tt>mucJid</tt> is invalid.\n */\nJitsiConference.prototype._isFocus = function(mucJid) {\n    return this.room ? this.room.isFocus(mucJid) : null;\n};\n\n/**\n * Fires CONFERENCE_FAILED event with INCOMPATIBLE_SERVER_VERSIONS parameter\n */\nJitsiConference.prototype._fireIncompatibleVersionsEvent = function() {\n    this.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.INCOMPATIBLE_SERVER_VERSIONS);\n};\n\n/**\n * Sends a message via the data channel.\n * @param to {string} the id of the endpoint that should receive the message.\n * If \"\" the message will be sent to all participants.\n * @param payload {object} the payload of the message.\n * @throws NetworkError or InvalidStateError or Error if the operation fails.\n * @deprecated Use 'sendMessage' instead. TODO: this should be private.\n */\nJitsiConference.prototype.sendEndpointMessage = function(to, payload) {\n    this.rtc.sendChannelMessage(to, payload);\n};\n\n/**\n * Sends a broadcast message via the data channel.\n * @param payload {object} the payload of the message.\n * @throws NetworkError or InvalidStateError or Error if the operation fails.\n * @deprecated Use 'sendMessage' instead. TODO: this should be private.\n */\nJitsiConference.prototype.broadcastEndpointMessage = function(payload) {\n    this.sendEndpointMessage('', payload);\n};\n\n/**\n * Sends a message to a given endpoint (if 'to' is a non-empty string), or\n * broadcasts it to all endpoints in the conference.\n * @param {string} to The ID of the endpoint/participant which is to receive\n * the message, or '' to broadcast the message to all endpoints in the\n * conference.\n * @param {string|object} message the message to send. If this is of type\n * 'string' it will be sent as a chat message. If it is of type 'object', it\n * will be encapsulated in a format recognized by jitsi-meet and converted to\n * JSON before being sent.\n * @param {boolean} sendThroughVideobridge Whether to send the message through\n * jitsi-videobridge (via the COLIBRI data channel or web socket), or through\n * the XMPP MUC. Currently only objects can be sent through jitsi-videobridge.\n */\nJitsiConference.prototype.sendMessage = function(\n        message,\n        to = '',\n        sendThroughVideobridge = false) {\n    const messageType = typeof message;\n\n    // Through videobridge we support only objects. Through XMPP we support\n    // objects (encapsulated in a specific JSON format) and strings (i.e.\n    // regular chat messages).\n    if (messageType !== 'object'\n            && (sendThroughVideobridge || messageType !== 'string')) {\n        logger.error(`Can not send a message of type ${messageType}`);\n\n        return;\n    }\n\n    if (sendThroughVideobridge) {\n        this.sendEndpointMessage(to, message);\n    } else {\n        let messageToSend = message;\n\n        // Name of packet extension of message stanza to send the required\n        // message in.\n        let elementName = 'body';\n\n        if (messageType === 'object') {\n            elementName = 'json-message';\n\n            // Mark as valid JSON message if not already\n            if (!messageToSend.hasOwnProperty(JITSI_MEET_MUC_TYPE)) {\n                messageToSend[JITSI_MEET_MUC_TYPE] = '';\n            }\n\n            try {\n                messageToSend = JSON.stringify(messageToSend);\n            } catch (e) {\n                logger.error('Can not send a message, stringify failed: ', e);\n\n                return;\n            }\n        }\n\n        if (to) {\n            this.sendPrivateTextMessage(to, messageToSend, elementName);\n        } else {\n            // Broadcast\n            this.sendTextMessage(messageToSend, elementName);\n        }\n    }\n\n};\n\nJitsiConference.prototype.isConnectionInterrupted = function() {\n    return this.isP2PActive()\n        ? this.isP2PConnectionInterrupted : this.isJvbConnectionInterrupted;\n};\n\n/**\n * Handles {@link XMPPEvents.CONNECTION_INTERRUPTED}\n * @param {JingleSessionPC} session\n * @private\n */\nJitsiConference.prototype._onIceConnectionInterrupted = function(session) {\n    if (session.isP2P) {\n        this.isP2PConnectionInterrupted = true;\n    } else {\n        this.isJvbConnectionInterrupted = true;\n    }\n    if (session.isP2P === this.isP2PActive()) {\n        this.eventEmitter.emit(JitsiConferenceEvents.CONNECTION_INTERRUPTED);\n    }\n};\n\n/**\n * Handles {@link XMPPEvents.CONNECTION_ICE_FAILED}\n * @param {JingleSessionPC} session\n * @private\n */\nJitsiConference.prototype._onIceConnectionFailed = function(session) {\n    // We do nothing for the JVB connection, because it's up to the Jicofo to\n    // eventually come up with the new offer (at least for the time being).\n    if (session.isP2P) {\n        // Add p2pFailed property to analytics to distinguish, between \"good\"\n        // and \"bad\" connection\n        Statistics.analytics.addPermanentProperties({ p2pFailed: true });\n\n        if (this.p2pJingleSession) {\n            Statistics.sendAnalyticsAndLog(\n                createP2PEvent(\n                    ACTION_P2P_FAILED,\n                    {\n                        initiator: this.p2pJingleSession.isInitiator\n                    }));\n\n        }\n        this._stopP2PSession('connectivity-error', 'ICE FAILED');\n    } else if (session && this.jvbJingleSession === session) {\n        if (this.xmpp.isPingSupported()) {\n            this._delayedIceFailed = new IceFailedNotification(this);\n            this._delayedIceFailed.start(session);\n        } else {\n            // Let Jicofo know that the JVB's ICE connection has failed\n            logger.info('PING not supported - sending ICE failed immediately');\n            session.sendIceFailedNotification();\n        }\n    }\n};\n\n/**\n * Handles {@link XMPPEvents.CONNECTION_RESTORED}\n * @param {JingleSessionPC} session\n * @private\n */\nJitsiConference.prototype._onIceConnectionRestored = function(session) {\n    if (session.isP2P) {\n        this.isP2PConnectionInterrupted = false;\n    } else {\n        this.isJvbConnectionInterrupted = false;\n        this._delayedIceFailed && this._delayedIceFailed.cancel();\n    }\n\n    if (session.isP2P === this.isP2PActive()) {\n        this.eventEmitter.emit(JitsiConferenceEvents.CONNECTION_RESTORED);\n    }\n};\n\n/**\n * Accept incoming P2P Jingle call.\n * @param {JingleSessionPC} jingleSession the session instance\n * @param {jQuery} jingleOffer a jQuery selector pointing to 'jingle' IQ element\n * @private\n */\nJitsiConference.prototype._acceptP2PIncomingCall = function(\n        jingleSession,\n        jingleOffer) {\n    this.isP2PConnectionInterrupted = false;\n\n    // Accept the offer\n    this.p2pJingleSession = jingleSession;\n\n    this.p2pJingleSession.initialize(this.room, this.rtc, this.options.config);\n\n    logger.info('Starting CallStats for P2P connection...');\n\n    let remoteID = Strophe.getResourceFromJid(this.p2pJingleSession.remoteJid);\n\n    if (this.options.config.enableStatsID) {\n        const participant = this.participants[remoteID];\n\n        if (participant) {\n            remoteID = participant.getStatsID() || remoteID;\n        }\n    }\n\n    this.statistics.startCallStats(\n        this.p2pJingleSession.peerconnection,\n        remoteID);\n\n    const localTracks = this.getLocalTracks();\n\n    this.p2pJingleSession.acceptOffer(\n        jingleOffer,\n        () => {\n            logger.debug('Got RESULT for P2P \"session-accept\"');\n        },\n        error => {\n            logger.error(\n                'Failed to accept incoming P2P Jingle session', error);\n        },\n        localTracks);\n};\n\n/**\n * Adds remote tracks to the conference associated with the JVB session.\n * @private\n */\nJitsiConference.prototype._addRemoteJVBTracks = function() {\n    this._addRemoteTracks(\n        'JVB', this.jvbJingleSession.peerconnection.getRemoteTracks());\n};\n\n/**\n * Adds remote tracks to the conference associated with the P2P session.\n * @private\n */\nJitsiConference.prototype._addRemoteP2PTracks = function() {\n    this._addRemoteTracks(\n        'P2P', this.p2pJingleSession.peerconnection.getRemoteTracks());\n};\n\n/**\n * Generates fake \"remote track added\" events for given Jingle session.\n * @param {string} logName the session's nickname which will appear in log\n * messages.\n * @param {Array<JitsiRemoteTrack>} remoteTracks the tracks that will be added\n * @private\n */\nJitsiConference.prototype._addRemoteTracks = function(logName, remoteTracks) {\n    for (const track of remoteTracks) {\n        logger.info(`Adding remote ${logName} track: ${track}`);\n        this.rtc.eventEmitter.emit(RTCEvents.REMOTE_TRACK_ADDED, track);\n    }\n};\n\n/**\n * Called when {@link XMPPEvents.CONNECTION_ESTABLISHED} event is\n * triggered for a {@link JingleSessionPC}. Switches the conference to use\n * the P2P connection if the event comes from the P2P session.\n * @param {JingleSessionPC} jingleSession the session instance.\n * @private\n */\nJitsiConference.prototype._onIceConnectionEstablished = function(\n        jingleSession) {\n    if (this.p2pJingleSession !== null) {\n        // store the establishment time of the p2p session as a field of the\n        // JitsiConference because the p2pJingleSession might get disposed (thus\n        // the value is lost).\n        this.p2pEstablishmentDuration\n            = this.p2pJingleSession.establishmentDuration;\n    }\n\n    if (this.jvbJingleSession !== null) {\n        this.jvbEstablishmentDuration\n            = this.jvbJingleSession.establishmentDuration;\n    }\n\n    let done = false;\n    const forceJVB121Ratio = this.options.config.forceJVB121Ratio;\n\n    // We don't care about the JVB case, there's nothing to be done\n    if (!jingleSession.isP2P) {\n        done = true;\n    } else if (this.p2pJingleSession !== jingleSession) {\n        logger.error('CONNECTION_ESTABLISHED - wrong P2P session instance ?!');\n\n        done = true;\n    } else if (!jingleSession.isInitiator\n        && typeof forceJVB121Ratio === 'number'\n        && Math.random() < forceJVB121Ratio) {\n        logger.info(`Forcing JVB 121 mode (ratio=${forceJVB121Ratio})...`);\n        Statistics.analytics.addPermanentProperties({ forceJvb121: true });\n        this._stopP2PSession('decline', 'force JVB121');\n\n        done = true;\n    }\n\n    if (!isNaN(this.p2pEstablishmentDuration)\n        && !isNaN(this.jvbEstablishmentDuration)) {\n        const establishmentDurationDiff\n            = this.p2pEstablishmentDuration - this.jvbEstablishmentDuration;\n\n        Statistics.sendAnalytics(\n            ICE_ESTABLISHMENT_DURATION_DIFF,\n            { value: establishmentDurationDiff });\n    }\n\n    if (jingleSession.isP2P === this.isP2PActive()) {\n        this.eventEmitter.emit(JitsiConferenceEvents.CONNECTION_ESTABLISHED);\n    }\n\n    if (done) {\n\n        return;\n    }\n\n    // Update P2P status and emit events\n    this._setP2PStatus(true);\n\n    // Remove remote tracks\n    if (this.jvbJingleSession) {\n        this._removeRemoteJVBTracks();\n    } else {\n        logger.info('Not removing remote JVB tracks - no session yet');\n    }\n\n    this._addRemoteP2PTracks();\n\n    // Stop media transfer over the JVB connection\n    if (this.jvbJingleSession) {\n        this._suspendMediaTransferForJvbConnection();\n    }\n\n    logger.info('Starting remote stats with p2p connection');\n    this.statistics.startRemoteStats(this.p2pJingleSession.peerconnection);\n\n    Statistics.sendAnalyticsAndLog(\n        createP2PEvent(\n            ACTION_P2P_ESTABLISHED,\n            {\n                initiator: this.p2pJingleSession.isInitiator\n            }));\n\n};\n\n/**\n * Called when the chat room reads a new list of properties from jicofo's\n * presence. The properties may have changed, but they don't have to.\n *\n * @param {Object} properties - The properties keyed by the property name\n * ('key').\n * @private\n */\nJitsiConference.prototype._updateProperties = function(properties = {}) {\n    const changed = !isEqual(properties, this.properties);\n\n    this.properties = properties;\n    if (changed) {\n        this.eventEmitter.emit(\n            JitsiConferenceEvents.PROPERTIES_CHANGED,\n            this.properties);\n\n        // Some of the properties need to be added to analytics events.\n        const analyticsKeys = [\n\n            // The number of jitsi-videobridge instances currently used for the\n            // conference.\n            'bridge-count',\n\n            // The conference creation time (set by jicofo).\n            'created-ms',\n            'octo-enabled'\n        ];\n\n        analyticsKeys.forEach(key => {\n            if (properties[key] !== undefined) {\n                Statistics.analytics.addPermanentProperties({\n                    [key.replace('-', '_')]: properties[key]\n                });\n            }\n        });\n    }\n};\n\n/**\n * Gets a conference property with a given key.\n *\n * @param {string} key - The key.\n * @returns {*} The value\n */\nJitsiConference.prototype.getProperty = function(key) {\n    return this.properties[key];\n};\n\n/**\n * Clears the deferred start P2P task if it has been scheduled.\n * @private\n */\nJitsiConference.prototype._maybeClearDeferredStartP2P = function() {\n    if (this.deferredStartP2PTask) {\n        logger.info('Cleared deferred start P2P task');\n        clearTimeout(this.deferredStartP2PTask);\n        this.deferredStartP2PTask = null;\n    }\n};\n\n/**\n * Removes from the conference remote tracks associated with the JVB\n * connection.\n * @private\n */\nJitsiConference.prototype._removeRemoteJVBTracks = function() {\n    this._removeRemoteTracks(\n        'JVB', this.jvbJingleSession.peerconnection.getRemoteTracks());\n};\n\n/**\n * Removes from the conference remote tracks associated with the P2P\n * connection.\n * @private\n */\nJitsiConference.prototype._removeRemoteP2PTracks = function() {\n    this._removeRemoteTracks(\n        'P2P', this.p2pJingleSession.peerconnection.getRemoteTracks());\n};\n\n/**\n * Generates fake \"remote track removed\" events for given Jingle session.\n * @param {string} sessionNickname the session's nickname which will appear in\n * log messages.\n * @param {Array<JitsiRemoteTrack>} remoteTracks the tracks that will be removed\n * @private\n */\nJitsiConference.prototype._removeRemoteTracks = function(\n        sessionNickname,\n        remoteTracks) {\n    for (const track of remoteTracks) {\n        logger.info(`Removing remote ${sessionNickname} track: ${track}`);\n        this.rtc.eventEmitter.emit(RTCEvents.REMOTE_TRACK_REMOVED, track);\n    }\n};\n\n/**\n * Resumes media transfer over the JVB connection.\n * @private\n */\nJitsiConference.prototype._resumeMediaTransferForJvbConnection = function() {\n    logger.info('Resuming media transfer over the JVB connection...');\n    this.jvbJingleSession.setMediaTransferActive(true, true).then(\n        () => {\n            logger.info('Resumed media transfer over the JVB connection!');\n        },\n        error => {\n            logger.error(\n                'Failed to resume media transfer over the JVB connection:',\n                error);\n        });\n};\n\n/**\n * Sets new P2P status and updates some events/states hijacked from\n * the <tt>JitsiConference</tt>.\n * @param {boolean} newStatus the new P2P status value, <tt>true</tt> means that\n * P2P is now in use, <tt>false</tt> means that the JVB connection is now in use\n * @private\n */\nJitsiConference.prototype._setP2PStatus = function(newStatus) {\n    if (this.p2p === newStatus) {\n        logger.debug(`Called _setP2PStatus with the same status: ${newStatus}`);\n\n        return;\n    }\n    this.p2p = newStatus;\n    if (newStatus) {\n        logger.info('Peer to peer connection established!');\n\n        // When we end up in a valid P2P session need to reset the properties\n        // in case they have persisted, after session with another peer.\n        Statistics.analytics.addPermanentProperties({\n            p2pFailed: false,\n            forceJvb121: false\n        });\n\n        // Sync up video transfer active in case p2pJingleSession not existed\n        // when the lastN value was being adjusted.\n        const isVideoActive = this.rtc.getLastN() !== 0;\n\n        this.p2pJingleSession\n            .setMediaTransferActive(true, isVideoActive)\n            .catch(error => {\n                logger.error(\n                    'Failed to sync up P2P video transfer status'\n                        + `(${isVideoActive})`, error);\n            });\n    } else {\n        logger.info('Peer to peer connection closed!');\n    }\n\n    // Put the JVB connection on hold/resume\n    if (this.jvbJingleSession) {\n        this.statistics.sendConnectionResumeOrHoldEvent(\n            this.jvbJingleSession.peerconnection, !newStatus);\n    }\n\n    // Clear dtmfManager, so that it can be recreated with new connection\n    this.dtmfManager = null;\n\n    // Update P2P status\n    this.eventEmitter.emit(\n        JitsiConferenceEvents.P2P_STATUS,\n        this,\n        this.p2p);\n\n    // Refresh connection interrupted/restored\n    this.eventEmitter.emit(\n        this.isConnectionInterrupted()\n            ? JitsiConferenceEvents.CONNECTION_INTERRUPTED\n            : JitsiConferenceEvents.CONNECTION_RESTORED);\n};\n\n/**\n * Starts new P2P session.\n * @param {string} remoteJid the JID of the remote participant\n * @private\n */\nJitsiConference.prototype._startP2PSession = function(remoteJid) {\n    this._maybeClearDeferredStartP2P();\n    if (this.p2pJingleSession) {\n        logger.error('P2P session already started!');\n\n        return;\n    }\n\n    this.isP2PConnectionInterrupted = false;\n    this.p2pJingleSession\n        = this.xmpp.connection.jingle.newP2PJingleSession(\n            this.room.myroomjid,\n            remoteJid);\n    logger.info(\n        'Created new P2P JingleSession', this.room.myroomjid, remoteJid);\n\n    this.p2pJingleSession.initialize(this.room, this.rtc, this.options.config);\n\n    logger.info('Starting CallStats for P2P connection...');\n\n    let remoteID = Strophe.getResourceFromJid(this.p2pJingleSession.remoteJid);\n\n    if (this.options.config.enableStatsID) {\n        const participant = this.participants[remoteID];\n\n        if (participant) {\n            remoteID = participant.getStatsID() || remoteID;\n        }\n    }\n\n    this.statistics.startCallStats(\n        this.p2pJingleSession.peerconnection,\n        remoteID);\n\n    // NOTE one may consider to start P2P with the local tracks detached,\n    // but no data will be sent until ICE succeeds anyway. And we switch\n    // immediately once the P2P ICE connects.\n    const localTracks = this.getLocalTracks();\n\n    this.p2pJingleSession.invite(localTracks);\n};\n\n/**\n * Suspends media transfer over the JVB connection.\n * @private\n */\nJitsiConference.prototype._suspendMediaTransferForJvbConnection = function() {\n    logger.info('Suspending media transfer over the JVB connection...');\n    this.jvbJingleSession.setMediaTransferActive(false, false).then(\n        () => {\n            logger.info('Suspended media transfer over the JVB connection !');\n        },\n        error => {\n            logger.error(\n                'Failed to suspend media transfer over the JVB connection:',\n                error);\n        });\n};\n\n/**\n * Method when called will decide whether it's the time to start or stop\n * the P2P session.\n * @param {boolean} userLeftEvent if <tt>true</tt> it means that the call\n * originates from the user left event.\n * @private\n */\nJitsiConference.prototype._maybeStartOrStopP2P = function(userLeftEvent) {\n    if (!browser.supportsP2P()\n        || !this.isP2PEnabled()\n        || this.isP2PTestModeEnabled()) {\n        logger.info('Auto P2P disabled');\n\n        return;\n    }\n    const peers = this.getParticipants();\n    const peerCount = peers.length;\n    const isModerator = this.isModerator();\n    const hasBotPeer\n        = peers.find(p => p._botType === 'poltergeist') !== undefined;\n\n    // FIXME 1 peer and it must *support* P2P switching\n    const shouldBeInP2P = peerCount === 1 && !hasBotPeer;\n\n    logger.debug(\n        `P2P? isModerator: ${isModerator}, peerCount: ${\n            peerCount}, hasBotPeer: ${hasBotPeer} => ${\n            shouldBeInP2P}`);\n\n    // Clear deferred \"start P2P\" task\n    if (!shouldBeInP2P && this.deferredStartP2PTask) {\n        this._maybeClearDeferredStartP2P();\n    }\n\n    // Start peer to peer session\n    if (!this.p2pJingleSession && shouldBeInP2P) {\n        const peer = peerCount && peers[0];\n\n\n        const myId = this.myUserId();\n        const peersId = peer.getId();\n\n        if (myId > peersId) {\n            logger.debug(\n                'I\\'m the bigger peersId - '\n                + 'the other peer should start P2P', myId, peersId);\n\n            return;\n        } else if (myId === peersId) {\n            logger.error('The same IDs ? ', myId, peersId);\n\n            return;\n        }\n\n        const jid = peer.getJid();\n\n        if (userLeftEvent) {\n            if (this.deferredStartP2PTask) {\n                logger.error('Deferred start P2P task\\'s been set already!');\n\n                return;\n            }\n            logger.info(\n                `Will start P2P with: ${jid} after ${\n                    this.backToP2PDelay} seconds...`);\n            this.deferredStartP2PTask = setTimeout(\n                this._startP2PSession.bind(this, jid),\n                this.backToP2PDelay * 1000);\n        } else {\n            logger.info(`Will start P2P with: ${jid}`);\n            this._startP2PSession(jid);\n        }\n    } else if (this.p2pJingleSession && !shouldBeInP2P) {\n        logger.info(`Will stop P2P with: ${this.p2pJingleSession.remoteJid}`);\n\n        // Log that there will be a switch back to the JVB connection\n        if (this.p2pJingleSession.isInitiator && peerCount > 1) {\n            Statistics.sendAnalyticsAndLog(\n                createP2PEvent(ACTION_P2P_SWITCH_TO_JVB));\n        }\n        this._stopP2PSession();\n    }\n};\n\n/**\n * Stops the current P2P session.\n * @param {string} [reason=\"success\"] one of the Jingle \"reason\" element\n * names as defined by https://xmpp.org/extensions/xep-0166.html#def-reason\n * @param {string} [reasonDescription=\"Turing off P2P session\"] text\n * description that will be included in the session terminate message\n * @private\n */\nJitsiConference.prototype._stopP2PSession = function(\n        reason,\n        reasonDescription) {\n    if (!this.p2pJingleSession) {\n        logger.error('No P2P session to be stopped!');\n\n        return;\n    }\n\n    const wasP2PEstablished = this.isP2PActive();\n\n    // Swap remote tracks, but only if the P2P has been fully established\n    if (wasP2PEstablished) {\n        if (this.jvbJingleSession) {\n            this._resumeMediaTransferForJvbConnection();\n        }\n\n        // Remove remote P2P tracks\n        this._removeRemoteP2PTracks();\n    }\n\n    // Stop P2P stats\n    logger.info('Stopping remote stats for P2P connection');\n    this.statistics.stopRemoteStats(this.p2pJingleSession.peerconnection);\n    logger.info('Stopping CallStats for P2P connection');\n    this.statistics.stopCallStats(this.p2pJingleSession.peerconnection);\n\n    this.p2pJingleSession.terminate(\n        () => {\n            logger.info('P2P session terminate RESULT');\n        },\n        error => {\n            // Because both initiator and responder are simultaneously\n            // terminating their JingleSessions in case of the 'to JVB switch'\n            // when 3rd participant joins, both will dispose their sessions and\n            // reply with 'item-not-found' (see strophe.jingle.js). We don't\n            // want to log this as an error since it's expected behaviour.\n            //\n            // We want them both to terminate, because in case of initiator's\n            // crash the responder would stay in P2P mode until ICE fails which\n            // could take up to 20 seconds.\n            //\n            // NOTE lack of 'reason' is considered as graceful session terminate\n            // where both initiator and responder terminate their sessions\n            // simultaneously.\n            if (reason) {\n                logger.error(\n                    'An error occurred while trying to terminate'\n                        + ' P2P Jingle session', error);\n            }\n        }, {\n            reason: reason ? reason : 'success',\n            reasonDescription: reasonDescription\n                ? reasonDescription : 'Turing off P2P session',\n            sendSessionTerminate: this.room\n                && this.getParticipantById(\n                    Strophe.getResourceFromJid(this.p2pJingleSession.remoteJid))\n        });\n\n    this.p2pJingleSession = null;\n\n    // Update P2P status and other affected events/states\n    this._setP2PStatus(false);\n\n    if (wasP2PEstablished) {\n        // Add back remote JVB tracks\n        if (this.jvbJingleSession) {\n            this._addRemoteJVBTracks();\n        } else {\n            logger.info('Not adding remote JVB tracks - no session yet');\n        }\n    }\n};\n\n/**\n * Checks whether or not the conference is currently in the peer to peer mode.\n * Being in peer to peer mode means that the direct connection has been\n * established and the P2P connection is being used for media transmission.\n * @return {boolean} <tt>true</tt> if in P2P mode or <tt>false</tt> otherwise.\n */\nJitsiConference.prototype.isP2PActive = function() {\n    return this.p2p;\n};\n\n/**\n * Returns the current ICE state of the P2P connection.\n * NOTE: method is used by the jitsi-meet-torture tests.\n * @return {string|null} an ICE state or <tt>null</tt> if there's currently\n * no P2P connection.\n */\nJitsiConference.prototype.getP2PConnectionState = function() {\n    if (this.isP2PActive()) {\n        return this.p2pJingleSession.peerconnection.getConnectionState();\n    }\n\n    return null;\n};\n\n\n/**\n * Manually starts new P2P session (should be used only in the tests).\n */\nJitsiConference.prototype.startP2PSession = function() {\n    const peers = this.getParticipants();\n\n    // Start peer to peer session\n    if (peers.length === 1) {\n        const peerJid = peers[0].getJid();\n\n        this._startP2PSession(peerJid);\n    } else {\n        throw new Error(\n            'There must be exactly 1 participant to start the P2P session !');\n    }\n};\n\n/**\n * Manually stops the current P2P session (should be used only in the tests)\n */\nJitsiConference.prototype.stopP2PSession = function() {\n    this._stopP2PSession();\n};\n\n/**\n * Get a summary of how long current participants have been the dominant speaker\n * @returns {object}\n */\nJitsiConference.prototype.getSpeakerStats = function() {\n    return this.speakerStatsCollector.getStats();\n};\n\n/**\n * Sets the maximum video size the local participant should receive from remote\n * participants.\n *\n * @param {number} maxFrameHeightPixels the maximum frame height, in pixels,\n * this receiver is willing to receive.\n * @returns {void}\n */\nJitsiConference.prototype.setReceiverVideoConstraint = function(\n        maxFrameHeight) {\n    this.rtc.setReceiverVideoConstraint(maxFrameHeight);\n};\n\n/**\n * Creates a video SIP GW session and returns it if service is enabled. Before\n * creating a session one need to check whether video SIP GW service is\n * available in the system {@link JitsiConference.isVideoSIPGWAvailable}. Even\n * if there are available nodes to serve this request, after creating the\n * session those nodes can be taken and the request about using the\n * created session can fail.\n *\n * @param {string} sipAddress - The sip address to be used.\n * @param {string} displayName - The display name to be used for this session.\n * @returns {JitsiVideoSIPGWSession|Error} Returns null if conference is not\n * initialised and there is no room.\n */\nJitsiConference.prototype.createVideoSIPGWSession\n    = function(sipAddress, displayName) {\n        if (!this.room) {\n            return new Error(VideoSIPGWConstants.ERROR_NO_CONNECTION);\n        }\n\n        return this.videoSIPGWHandler\n            .createVideoSIPGWSession(sipAddress, displayName);\n    };\n","/**\n * Lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright JS Foundation and other contributors <https://js.foundation/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    asyncTag = '[object AsyncFunction]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    nullTag = '[object Null]',\n    objectTag = '[object Object]',\n    promiseTag = '[object Promise]',\n    proxyTag = '[object Proxy]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]',\n    undefinedTag = '[object Undefined]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/** Used to identify `toStringTag` values of typed arrays. */\nvar typedArrayTags = {};\ntypedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\ntypedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\ntypedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\ntypedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\ntypedArrayTags[uint32Tag] = true;\ntypedArrayTags[argsTag] = typedArrayTags[arrayTag] =\ntypedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\ntypedArrayTags[dataViewTag] = typedArrayTags[dateTag] =\ntypedArrayTags[errorTag] = typedArrayTags[funcTag] =\ntypedArrayTags[mapTag] = typedArrayTags[numberTag] =\ntypedArrayTags[objectTag] = typedArrayTags[regexpTag] =\ntypedArrayTags[setTag] = typedArrayTags[stringTag] =\ntypedArrayTags[weakMapTag] = false;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Detect free variable `process` from Node.js. */\nvar freeProcess = moduleExports && freeGlobal.process;\n\n/** Used to access faster Node.js helpers. */\nvar nodeUtil = (function() {\n  try {\n    return freeProcess && freeProcess.binding && freeProcess.binding('util');\n  } catch (e) {}\n}());\n\n/* Node.js helper references. */\nvar nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\n\n/**\n * A specialized version of `_.filter` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {Array} Returns the new filtered array.\n */\nfunction arrayFilter(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      resIndex = 0,\n      result = [];\n\n  while (++index < length) {\n    var value = array[index];\n    if (predicate(value, index, array)) {\n      result[resIndex++] = value;\n    }\n  }\n  return result;\n}\n\n/**\n * Appends the elements of `values` to `array`.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to append.\n * @returns {Array} Returns `array`.\n */\nfunction arrayPush(array, values) {\n  var index = -1,\n      length = values.length,\n      offset = array.length;\n\n  while (++index < length) {\n    array[offset + index] = values[index];\n  }\n  return array;\n}\n\n/**\n * A specialized version of `_.some` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {boolean} Returns `true` if any element passes the predicate check,\n *  else `false`.\n */\nfunction arraySome(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    if (predicate(array[index], index, array)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\n/**\n * The base implementation of `_.unary` without support for storing metadata.\n *\n * @private\n * @param {Function} func The function to cap arguments for.\n * @returns {Function} Returns the new capped function.\n */\nfunction baseUnary(func) {\n  return function(value) {\n    return func(value);\n  };\n}\n\n/**\n * Checks if a `cache` value for `key` exists.\n *\n * @private\n * @param {Object} cache The cache to query.\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction cacheHas(cache, key) {\n  return cache.has(key);\n}\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\n/**\n * Converts `map` to its key-value pairs.\n *\n * @private\n * @param {Object} map The map to convert.\n * @returns {Array} Returns the key-value pairs.\n */\nfunction mapToArray(map) {\n  var index = -1,\n      result = Array(map.size);\n\n  map.forEach(function(value, key) {\n    result[++index] = [key, value];\n  });\n  return result;\n}\n\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\n/**\n * Converts `set` to an array of its values.\n *\n * @private\n * @param {Object} set The set to convert.\n * @returns {Array} Returns the values.\n */\nfunction setToArray(set) {\n  var index = -1,\n      result = Array(set.size);\n\n  set.forEach(function(value) {\n    result[++index] = value;\n  });\n  return result;\n}\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype,\n    funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined,\n    Symbol = root.Symbol,\n    Uint8Array = root.Uint8Array,\n    propertyIsEnumerable = objectProto.propertyIsEnumerable,\n    splice = arrayProto.splice,\n    symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeGetSymbols = Object.getOwnPropertySymbols,\n    nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,\n    nativeKeys = overArg(Object.keys, Object);\n\n/* Built-in method references that are verified to be native. */\nvar DataView = getNative(root, 'DataView'),\n    Map = getNative(root, 'Map'),\n    Promise = getNative(root, 'Promise'),\n    Set = getNative(root, 'Set'),\n    WeakMap = getNative(root, 'WeakMap'),\n    nativeCreate = getNative(Object, 'create');\n\n/** Used to detect maps, sets, and weakmaps. */\nvar dataViewCtorString = toSource(DataView),\n    mapCtorString = toSource(Map),\n    promiseCtorString = toSource(Promise),\n    setCtorString = toSource(Set),\n    weakMapCtorString = toSource(WeakMap);\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  var result = this.has(key) && delete this.__data__[key];\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);\n}\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  this.size += this.has(key) ? 0 : 1;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  --this.size;\n  return true;\n}\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    ++this.size;\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.size = 0;\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  var result = getMapData(this, key)['delete'](key);\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  var data = getMapData(this, key),\n      size = data.size;\n\n  data.set(key, value);\n  this.size += data.size == size ? 0 : 1;\n  return this;\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\n/**\n *\n * Creates an array cache object to store unique values.\n *\n * @private\n * @constructor\n * @param {Array} [values] The values to cache.\n */\nfunction SetCache(values) {\n  var index = -1,\n      length = values == null ? 0 : values.length;\n\n  this.__data__ = new MapCache;\n  while (++index < length) {\n    this.add(values[index]);\n  }\n}\n\n/**\n * Adds `value` to the array cache.\n *\n * @private\n * @name add\n * @memberOf SetCache\n * @alias push\n * @param {*} value The value to cache.\n * @returns {Object} Returns the cache instance.\n */\nfunction setCacheAdd(value) {\n  this.__data__.set(value, HASH_UNDEFINED);\n  return this;\n}\n\n/**\n * Checks if `value` is in the array cache.\n *\n * @private\n * @name has\n * @memberOf SetCache\n * @param {*} value The value to search for.\n * @returns {number} Returns `true` if `value` is found, else `false`.\n */\nfunction setCacheHas(value) {\n  return this.__data__.has(value);\n}\n\n// Add methods to `SetCache`.\nSetCache.prototype.add = SetCache.prototype.push = setCacheAdd;\nSetCache.prototype.has = setCacheHas;\n\n/**\n * Creates a stack cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Stack(entries) {\n  var data = this.__data__ = new ListCache(entries);\n  this.size = data.size;\n}\n\n/**\n * Removes all key-value entries from the stack.\n *\n * @private\n * @name clear\n * @memberOf Stack\n */\nfunction stackClear() {\n  this.__data__ = new ListCache;\n  this.size = 0;\n}\n\n/**\n * Removes `key` and its value from the stack.\n *\n * @private\n * @name delete\n * @memberOf Stack\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction stackDelete(key) {\n  var data = this.__data__,\n      result = data['delete'](key);\n\n  this.size = data.size;\n  return result;\n}\n\n/**\n * Gets the stack value for `key`.\n *\n * @private\n * @name get\n * @memberOf Stack\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction stackGet(key) {\n  return this.__data__.get(key);\n}\n\n/**\n * Checks if a stack value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Stack\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction stackHas(key) {\n  return this.__data__.has(key);\n}\n\n/**\n * Sets the stack `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Stack\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the stack cache instance.\n */\nfunction stackSet(key, value) {\n  var data = this.__data__;\n  if (data instanceof ListCache) {\n    var pairs = data.__data__;\n    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n      pairs.push([key, value]);\n      this.size = ++data.size;\n      return this;\n    }\n    data = this.__data__ = new MapCache(pairs);\n  }\n  data.set(key, value);\n  this.size = data.size;\n  return this;\n}\n\n// Add methods to `Stack`.\nStack.prototype.clear = stackClear;\nStack.prototype['delete'] = stackDelete;\nStack.prototype.get = stackGet;\nStack.prototype.has = stackHas;\nStack.prototype.set = stackSet;\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  var isArr = isArray(value),\n      isArg = !isArr && isArguments(value),\n      isBuff = !isArr && !isArg && isBuffer(value),\n      isType = !isArr && !isArg && !isBuff && isTypedArray(value),\n      skipIndexes = isArr || isArg || isBuff || isType,\n      result = skipIndexes ? baseTimes(value.length, String) : [],\n      length = result.length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty.call(value, key)) &&\n        !(skipIndexes && (\n           // Safari 9 has enumerable `arguments.length` in strict mode.\n           key == 'length' ||\n           // Node.js 0.10 has enumerable non-index properties on buffers.\n           (isBuff && (key == 'offset' || key == 'parent')) ||\n           // PhantomJS 2 has enumerable non-index properties on typed arrays.\n           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||\n           // Skip index properties.\n           isIndex(key, length)\n        ))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @param {Function} symbolsFunc The function to get the symbols of `object`.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction baseGetAllKeys(object, keysFunc, symbolsFunc) {\n  var result = keysFunc(object);\n  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n}\n\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  if (value == null) {\n    return value === undefined ? undefinedTag : nullTag;\n  }\n  return (symToStringTag && symToStringTag in Object(value))\n    ? getRawTag(value)\n    : objectToString(value);\n}\n\n/**\n * The base implementation of `_.isArguments`.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n */\nfunction baseIsArguments(value) {\n  return isObjectLike(value) && baseGetTag(value) == argsTag;\n}\n\n/**\n * The base implementation of `_.isEqual` which supports partial comparisons\n * and tracks traversed objects.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @param {boolean} bitmask The bitmask flags.\n *  1 - Unordered comparison\n *  2 - Partial comparison\n * @param {Function} [customizer] The function to customize comparisons.\n * @param {Object} [stack] Tracks traversed `value` and `other` objects.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n */\nfunction baseIsEqual(value, other, bitmask, customizer, stack) {\n  if (value === other) {\n    return true;\n  }\n  if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {\n    return value !== value && other !== other;\n  }\n  return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);\n}\n\n/**\n * A specialized version of `baseIsEqual` for arrays and objects which performs\n * deep comparisons and tracks traversed objects enabling objects with circular\n * references to be compared.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} [stack] Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {\n  var objIsArr = isArray(object),\n      othIsArr = isArray(other),\n      objTag = objIsArr ? arrayTag : getTag(object),\n      othTag = othIsArr ? arrayTag : getTag(other);\n\n  objTag = objTag == argsTag ? objectTag : objTag;\n  othTag = othTag == argsTag ? objectTag : othTag;\n\n  var objIsObj = objTag == objectTag,\n      othIsObj = othTag == objectTag,\n      isSameTag = objTag == othTag;\n\n  if (isSameTag && isBuffer(object)) {\n    if (!isBuffer(other)) {\n      return false;\n    }\n    objIsArr = true;\n    objIsObj = false;\n  }\n  if (isSameTag && !objIsObj) {\n    stack || (stack = new Stack);\n    return (objIsArr || isTypedArray(object))\n      ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)\n      : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);\n  }\n  if (!(bitmask & COMPARE_PARTIAL_FLAG)) {\n    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),\n        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');\n\n    if (objIsWrapped || othIsWrapped) {\n      var objUnwrapped = objIsWrapped ? object.value() : object,\n          othUnwrapped = othIsWrapped ? other.value() : other;\n\n      stack || (stack = new Stack);\n      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);\n    }\n  }\n  if (!isSameTag) {\n    return false;\n  }\n  stack || (stack = new Stack);\n  return equalObjects(object, other, bitmask, customizer, equalFunc, stack);\n}\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\n/**\n * The base implementation of `_.isTypedArray` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n */\nfunction baseIsTypedArray(value) {\n  return isObjectLike(value) &&\n    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];\n}\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for arrays with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Array} array The array to compare.\n * @param {Array} other The other array to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `array` and `other` objects.\n * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\n */\nfunction equalArrays(array, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      arrLength = array.length,\n      othLength = other.length;\n\n  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\n    return false;\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(array);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var index = -1,\n      result = true,\n      seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;\n\n  stack.set(array, other);\n  stack.set(other, array);\n\n  // Ignore non-index properties.\n  while (++index < arrLength) {\n    var arrValue = array[index],\n        othValue = other[index];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, arrValue, index, other, array, stack)\n        : customizer(arrValue, othValue, index, array, other, stack);\n    }\n    if (compared !== undefined) {\n      if (compared) {\n        continue;\n      }\n      result = false;\n      break;\n    }\n    // Recursively compare arrays (susceptible to call stack limits).\n    if (seen) {\n      if (!arraySome(other, function(othValue, othIndex) {\n            if (!cacheHas(seen, othIndex) &&\n                (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {\n              return seen.push(othIndex);\n            }\n          })) {\n        result = false;\n        break;\n      }\n    } else if (!(\n          arrValue === othValue ||\n            equalFunc(arrValue, othValue, bitmask, customizer, stack)\n        )) {\n      result = false;\n      break;\n    }\n  }\n  stack['delete'](array);\n  stack['delete'](other);\n  return result;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for comparing objects of\n * the same `toStringTag`.\n *\n * **Note:** This function only supports comparing values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {string} tag The `toStringTag` of the objects to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {\n  switch (tag) {\n    case dataViewTag:\n      if ((object.byteLength != other.byteLength) ||\n          (object.byteOffset != other.byteOffset)) {\n        return false;\n      }\n      object = object.buffer;\n      other = other.buffer;\n\n    case arrayBufferTag:\n      if ((object.byteLength != other.byteLength) ||\n          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {\n        return false;\n      }\n      return true;\n\n    case boolTag:\n    case dateTag:\n    case numberTag:\n      // Coerce booleans to `1` or `0` and dates to milliseconds.\n      // Invalid dates are coerced to `NaN`.\n      return eq(+object, +other);\n\n    case errorTag:\n      return object.name == other.name && object.message == other.message;\n\n    case regexpTag:\n    case stringTag:\n      // Coerce regexes to strings and treat strings, primitives and objects,\n      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring\n      // for more details.\n      return object == (other + '');\n\n    case mapTag:\n      var convert = mapToArray;\n\n    case setTag:\n      var isPartial = bitmask & COMPARE_PARTIAL_FLAG;\n      convert || (convert = setToArray);\n\n      if (object.size != other.size && !isPartial) {\n        return false;\n      }\n      // Assume cyclic values are equal.\n      var stacked = stack.get(object);\n      if (stacked) {\n        return stacked == other;\n      }\n      bitmask |= COMPARE_UNORDERED_FLAG;\n\n      // Recursively compare objects (susceptible to call stack limits).\n      stack.set(object, other);\n      var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);\n      stack['delete'](object);\n      return result;\n\n    case symbolTag:\n      if (symbolValueOf) {\n        return symbolValueOf.call(object) == symbolValueOf.call(other);\n      }\n  }\n  return false;\n}\n\n/**\n * A specialized version of `baseIsEqualDeep` for objects with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalObjects(object, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      objProps = getAllKeys(object),\n      objLength = objProps.length,\n      othProps = getAllKeys(other),\n      othLength = othProps.length;\n\n  if (objLength != othLength && !isPartial) {\n    return false;\n  }\n  var index = objLength;\n  while (index--) {\n    var key = objProps[index];\n    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {\n      return false;\n    }\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(object);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var result = true;\n  stack.set(object, other);\n  stack.set(other, object);\n\n  var skipCtor = isPartial;\n  while (++index < objLength) {\n    key = objProps[index];\n    var objValue = object[key],\n        othValue = other[key];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, objValue, key, other, object, stack)\n        : customizer(objValue, othValue, key, object, other, stack);\n    }\n    // Recursively compare objects (susceptible to call stack limits).\n    if (!(compared === undefined\n          ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))\n          : compared\n        )) {\n      result = false;\n      break;\n    }\n    skipCtor || (skipCtor = key == 'constructor');\n  }\n  if (result && !skipCtor) {\n    var objCtor = object.constructor,\n        othCtor = other.constructor;\n\n    // Non `Object` object instances with different constructors are not equal.\n    if (objCtor != othCtor &&\n        ('constructor' in object && 'constructor' in other) &&\n        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&\n          typeof othCtor == 'function' && othCtor instanceof othCtor)) {\n      result = false;\n    }\n  }\n  stack['delete'](object);\n  stack['delete'](other);\n  return result;\n}\n\n/**\n * Creates an array of own enumerable property names and symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction getAllKeys(object) {\n  return baseGetAllKeys(object, keys, getSymbols);\n}\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value) {\n  var isOwn = hasOwnProperty.call(value, symToStringTag),\n      tag = value[symToStringTag];\n\n  try {\n    value[symToStringTag] = undefined;\n    var unmasked = true;\n  } catch (e) {}\n\n  var result = nativeObjectToString.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag] = tag;\n    } else {\n      delete value[symToStringTag];\n    }\n  }\n  return result;\n}\n\n/**\n * Creates an array of the own enumerable symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */\nvar getSymbols = !nativeGetSymbols ? stubArray : function(object) {\n  if (object == null) {\n    return [];\n  }\n  object = Object(object);\n  return arrayFilter(nativeGetSymbols(object), function(symbol) {\n    return propertyIsEnumerable.call(object, symbol);\n  });\n};\n\n/**\n * Gets the `toStringTag` of `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nvar getTag = baseGetTag;\n\n// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.\nif ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n    (Map && getTag(new Map) != mapTag) ||\n    (Promise && getTag(Promise.resolve()) != promiseTag) ||\n    (Set && getTag(new Set) != setTag) ||\n    (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n  getTag = function(value) {\n    var result = baseGetTag(value),\n        Ctor = result == objectTag ? value.constructor : undefined,\n        ctorString = Ctor ? toSource(Ctor) : '';\n\n    if (ctorString) {\n      switch (ctorString) {\n        case dataViewCtorString: return dataViewTag;\n        case mapCtorString: return mapTag;\n        case promiseCtorString: return promiseTag;\n        case setCtorString: return setTag;\n        case weakMapCtorString: return weakMapTag;\n      }\n    }\n    return result;\n  };\n}\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  length = length == null ? MAX_SAFE_INTEGER : length;\n  return !!length &&\n    (typeof value == 'number' || reIsUint.test(value)) &&\n    (value > -1 && value % 1 == 0 && value < length);\n}\n\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n  return nativeObjectToString.call(value);\n}\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to convert.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nvar isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {\n  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&\n    !propertyIsEnumerable.call(value, 'callee');\n};\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */\nvar isBuffer = nativeIsBuffer || stubFalse;\n\n/**\n * Performs a deep comparison between two values to determine if they are\n * equivalent.\n *\n * **Note:** This method supports comparing arrays, array buffers, booleans,\n * date objects, error objects, maps, numbers, `Object` objects, regexes,\n * sets, strings, symbols, and typed arrays. `Object` objects are compared\n * by their own, not inherited, enumerable properties. Functions and DOM\n * nodes are compared by strict equality, i.e. `===`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.isEqual(object, other);\n * // => true\n *\n * object === other;\n * // => false\n */\nfunction isEqual(value, other) {\n  return baseIsEqual(value, other);\n}\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  if (!isObject(value)) {\n    return false;\n  }\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 9 which returns 'object' for typed arrays and other constructors.\n  var tag = baseGetTag(value);\n  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n}\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return value != null && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return value != null && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a typed array.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n * @example\n *\n * _.isTypedArray(new Uint8Array);\n * // => true\n *\n * _.isTypedArray([]);\n * // => false\n */\nvar isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nfunction keys(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n}\n\n/**\n * This method returns a new empty array.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {Array} Returns the new empty array.\n * @example\n *\n * var arrays = _.times(2, _.stubArray);\n *\n * console.log(arrays);\n * // => [[], []]\n *\n * console.log(arrays[0] === arrays[1]);\n * // => false\n */\nfunction stubArray() {\n  return [];\n}\n\n/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = isEqual;\n","/* global __filename */\nimport { Strophe } from 'strophe.js';\n\nimport {\n    ACTION_JINGLE_SA_TIMEOUT,\n    createBridgeDownEvent,\n    createConnectionStageReachedEvent,\n    createFocusLeftEvent,\n    createJingleEvent,\n    createRemotelyMutedEvent\n} from './service/statistics/AnalyticsEvents';\nimport AuthenticationEvents\n    from './service/authentication/AuthenticationEvents';\nimport EventEmitterForwarder from './modules/util/EventEmitterForwarder';\nimport { getLogger } from 'jitsi-meet-logger';\nimport * as JitsiConferenceErrors from './JitsiConferenceErrors';\nimport * as JitsiConferenceEvents from './JitsiConferenceEvents';\nimport * as MediaType from './service/RTC/MediaType';\nimport RTCEvents from './service/RTC/RTCEvents';\nimport VideoType from './service/RTC/VideoType';\nimport Statistics from './modules/statistics/statistics';\nimport XMPPEvents from './service/xmpp/XMPPEvents';\n\nconst logger = getLogger(__filename);\n\n/**\n * Setups all event listeners related to conference\n * @param conference {JitsiConference} the conference\n */\nexport default function JitsiConferenceEventManager(conference) {\n    this.conference = conference;\n    this.xmppListeners = {};\n\n    // Listeners related to the conference only\n    conference.on(JitsiConferenceEvents.TRACK_MUTE_CHANGED,\n        track => {\n            if (!track.isLocal() || !conference.statistics) {\n                return;\n            }\n            const session\n                = track.isP2P\n                    ? conference.p2pJingleSession : conference.jvbJingleSession;\n\n            // TPC will be null, before the conference starts, but the event\n            // still should be queued\n            const tpc = (session && session.peerconnection) || null;\n\n            conference.statistics.sendMuteEvent(\n                tpc,\n                track.isMuted(),\n                track.getType());\n        });\n}\n\n/**\n * Setups event listeners related to conference.chatRoom\n */\nJitsiConferenceEventManager.prototype.setupChatRoomListeners = function() {\n    const conference = this.conference;\n    const chatRoom = conference.room;\n\n    this.chatRoomForwarder = new EventEmitterForwarder(chatRoom,\n        this.conference.eventEmitter);\n\n    chatRoom.addListener(XMPPEvents.ICE_RESTARTING, jingleSession => {\n        if (!jingleSession.isP2P) {\n            // If using DataChannel as bridge channel, it must be closed\n            // before ICE restart, otherwise Chrome will not trigger \"opened\"\n            // event for the channel established with the new bridge.\n            // TODO: This may be bypassed when using a WebSocket as bridge\n            // channel.\n            conference.rtc.closeBridgeChannel();\n        }\n\n        // else: there are no DataChannels in P2P session (at least for now)\n    });\n\n    chatRoom.addListener(\n        XMPPEvents.ICE_RESTART_SUCCESS,\n        (jingleSession, offerIq) => {\n            // The JVB data chanel needs to be reopened in case the conference\n            // has been moved to a new bridge.\n            !jingleSession.isP2P\n                && conference._setBridgeChannel(\n                    offerIq, jingleSession.peerconnection);\n        });\n\n\n    chatRoom.addListener(XMPPEvents.AUDIO_MUTED_BY_FOCUS,\n        actor => {\n            // TODO: Add a way to differentiate between commands which caused\n            // us to mute and those that did not change our state (i.e. we were\n            // already muted).\n            Statistics.sendAnalytics(createRemotelyMutedEvent());\n\n            conference.mutedByFocusActor = actor;\n\n            // set isMutedByFocus when setAudioMute Promise ends\n            conference.rtc.setAudioMute(true).then(\n                () => {\n                    conference.isMutedByFocus = true;\n                    conference.mutedByFocusActor = null;\n                })\n                .catch(\n                    error => {\n                        conference.mutedByFocusActor = null;\n                        logger.warn(\n                            'Error while audio muting due to focus request', error);\n                    });\n        }\n    );\n\n    this.chatRoomForwarder.forward(XMPPEvents.SUBJECT_CHANGED,\n        JitsiConferenceEvents.SUBJECT_CHANGED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_JOINED,\n        JitsiConferenceEvents.CONFERENCE_JOINED);\n\n    // send some analytics events\n    chatRoom.addListener(XMPPEvents.MUC_JOINED,\n        () => {\n            this.conference.isJvbConnectionInterrupted = false;\n\n            // TODO: Move all of the 'connectionTimes' logic to its own module.\n            Object.keys(chatRoom.connectionTimes).forEach(key => {\n                const event\n                    = createConnectionStageReachedEvent(\n                        `conference_${key}`,\n                        { value: chatRoom.connectionTimes[key] });\n\n                Statistics.sendAnalytics(event);\n            });\n\n            // TODO: Move all of the 'connectionTimes' logic to its own module.\n            Object.keys(chatRoom.xmpp.connectionTimes).forEach(key => {\n                const event\n                    = createConnectionStageReachedEvent(\n                        `xmpp_${key}`,\n                        { value: chatRoom.xmpp.connectionTimes[key] });\n\n                Statistics.sendAnalytics(event);\n            });\n        });\n\n    chatRoom.addListener(XMPPEvents.RENEGOTIATION_FAILED, (e, session) => {\n        if (!session.isP2P) {\n            conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\n                JitsiConferenceErrors.OFFER_ANSWER_FAILED, e);\n        }\n    });\n\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_JOIN_ERROR,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.CONNECTION_ERROR);\n\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_CONNECT_ERROR,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.CONNECTION_ERROR);\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_CONNECT_NOT_ALLOWED_ERROR,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.NOT_ALLOWED_ERROR);\n\n    this.chatRoomForwarder.forward(XMPPEvents.ROOM_MAX_USERS_ERROR,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.CONFERENCE_MAX_USERS);\n\n    this.chatRoomForwarder.forward(XMPPEvents.PASSWORD_REQUIRED,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.PASSWORD_REQUIRED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.AUTHENTICATION_REQUIRED,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.AUTHENTICATION_REQUIRED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.BRIDGE_DOWN,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.VIDEOBRIDGE_NOT_AVAILABLE);\n    chatRoom.addListener(\n        XMPPEvents.BRIDGE_DOWN,\n        () => Statistics.sendAnalytics(createBridgeDownEvent()));\n\n    this.chatRoomForwarder.forward(XMPPEvents.RESERVATION_ERROR,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.RESERVATION_ERROR);\n\n    this.chatRoomForwarder.forward(XMPPEvents.GRACEFUL_SHUTDOWN,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.GRACEFUL_SHUTDOWN);\n\n    chatRoom.addListener(XMPPEvents.CONNECTION_ICE_FAILED,\n        jingleSession => {\n            conference._onIceConnectionFailed(jingleSession);\n        });\n\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_DESTROYED,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.CONFERENCE_DESTROYED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.CHAT_ERROR_RECEIVED,\n        JitsiConferenceEvents.CONFERENCE_ERROR,\n        JitsiConferenceErrors.CHAT_ERROR);\n\n    this.chatRoomForwarder.forward(XMPPEvents.FOCUS_DISCONNECTED,\n        JitsiConferenceEvents.CONFERENCE_FAILED,\n        JitsiConferenceErrors.FOCUS_DISCONNECTED);\n\n    chatRoom.addListener(XMPPEvents.FOCUS_LEFT,\n        () => {\n            Statistics.sendAnalytics(createFocusLeftEvent());\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.CONFERENCE_FAILED,\n                JitsiConferenceErrors.FOCUS_LEFT);\n        });\n\n    chatRoom.addListener(XMPPEvents.SESSION_ACCEPT_TIMEOUT,\n        jingleSession => {\n            Statistics.sendAnalyticsAndLog(\n                createJingleEvent(\n                    ACTION_JINGLE_SA_TIMEOUT,\n                    { p2p: jingleSession.isP2P }));\n        });\n\n    this.chatRoomForwarder.forward(XMPPEvents.RECORDER_STATE_CHANGED,\n        JitsiConferenceEvents.RECORDER_STATE_CHANGED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.TRANSCRIPTION_STATUS_CHANGED,\n        JitsiConferenceEvents.TRANSCRIPTION_STATUS_CHANGED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.VIDEO_SIP_GW_AVAILABILITY_CHANGED,\n        JitsiConferenceEvents.VIDEO_SIP_GW_AVAILABILITY_CHANGED);\n\n    this.chatRoomForwarder.forward(\n        XMPPEvents.VIDEO_SIP_GW_SESSION_STATE_CHANGED,\n        JitsiConferenceEvents.VIDEO_SIP_GW_SESSION_STATE_CHANGED);\n\n    this.chatRoomForwarder.forward(XMPPEvents.PHONE_NUMBER_CHANGED,\n        JitsiConferenceEvents.PHONE_NUMBER_CHANGED);\n\n    chatRoom.setParticipantPropertyListener((node, from) => {\n        const participant = conference.getParticipantById(from);\n\n        if (!participant) {\n            return;\n        }\n\n        participant.setProperty(\n            node.tagName.substring('jitsi_participant_'.length),\n            node.value);\n    });\n\n    chatRoom.addListener(XMPPEvents.KICKED,\n        conference.onMemberKicked.bind(conference));\n    chatRoom.addListener(XMPPEvents.SUSPEND_DETECTED,\n        conference.onSuspendDetected.bind(conference));\n\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_LOCK_CHANGED,\n        JitsiConferenceEvents.LOCK_STATE_CHANGED);\n\n    chatRoom.addListener(XMPPEvents.MUC_MEMBER_JOINED,\n        conference.onMemberJoined.bind(conference));\n    chatRoom.addListener(XMPPEvents.MUC_MEMBER_BOT_TYPE_CHANGED,\n        conference._onMemberBotTypeChanged.bind(conference));\n    chatRoom.addListener(XMPPEvents.MUC_MEMBER_LEFT,\n        conference.onMemberLeft.bind(conference));\n    this.chatRoomForwarder.forward(XMPPEvents.MUC_LEFT,\n        JitsiConferenceEvents.CONFERENCE_LEFT);\n\n    chatRoom.addListener(XMPPEvents.DISPLAY_NAME_CHANGED,\n        conference.onDisplayNameChanged.bind(conference));\n\n    chatRoom.addListener(XMPPEvents.LOCAL_ROLE_CHANGED, role => {\n        conference.onLocalRoleChanged(role);\n\n        // log all events for the recorder operated by the moderator\n        if (conference.statistics && conference.isModerator()) {\n            conference.on(JitsiConferenceEvents.RECORDER_STATE_CHANGED,\n                recorderSession => {\n                    const logObject = {\n                        error: recorderSession.getError(),\n                        id: 'recorder_status',\n                        status: recorderSession.getStatus()\n                    };\n\n                    Statistics.sendLog(JSON.stringify(logObject));\n                });\n        }\n    });\n\n    chatRoom.addListener(XMPPEvents.MUC_ROLE_CHANGED,\n        conference.onUserRoleChanged.bind(conference));\n\n    chatRoom.addListener(AuthenticationEvents.IDENTITY_UPDATED,\n        (authEnabled, authIdentity) => {\n            conference.authEnabled = authEnabled;\n            conference.authIdentity = authIdentity;\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.AUTH_STATUS_CHANGED, authEnabled,\n                authIdentity);\n        });\n\n    chatRoom.addListener(\n        XMPPEvents.MESSAGE_RECEIVED,\n\n        // eslint-disable-next-line max-params\n        (jid, displayName, txt, myJid, ts) => {\n            const id = Strophe.getResourceFromJid(jid);\n\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.MESSAGE_RECEIVED,\n                id, txt, ts, displayName);\n        });\n\n    chatRoom.addListener(\n        XMPPEvents.PRIVATE_MESSAGE_RECEIVED,\n\n        // eslint-disable-next-line max-params\n        (jid, displayName, txt, myJid, ts) => {\n            const id = Strophe.getResourceFromJid(jid);\n\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.PRIVATE_MESSAGE_RECEIVED,\n                id, txt, ts);\n        });\n\n    chatRoom.addListener(XMPPEvents.PRESENCE_STATUS,\n        (jid, status) => {\n            const id = Strophe.getResourceFromJid(jid);\n            const participant = conference.getParticipantById(id);\n\n            if (!participant || participant._status === status) {\n                return;\n            }\n            participant._status = status;\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.USER_STATUS_CHANGED, id, status);\n        });\n\n    chatRoom.addListener(XMPPEvents.JSON_MESSAGE_RECEIVED,\n        (from, payload) => {\n            const id = Strophe.getResourceFromJid(from);\n            const participant = conference.getParticipantById(id);\n\n            if (participant) {\n                conference.eventEmitter.emit(\n                    JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED,\n                    participant, payload);\n            } else {\n                logger.warn(\n                    'Ignored XMPPEvents.JSON_MESSAGE_RECEIVED for not existing '\n                    + `participant: ${from}`,\n                    payload);\n            }\n        });\n\n    chatRoom.addPresenceListener('startmuted', (data, from) => {\n        let isModerator = false;\n\n        if (conference.myUserId() === from && conference.isModerator()) {\n            isModerator = true;\n        } else {\n            const participant = conference.getParticipantById(from);\n\n            if (participant && participant.isModerator()) {\n                isModerator = true;\n            }\n        }\n\n        if (!isModerator) {\n            return;\n        }\n\n        const startAudioMuted = data.attributes.audio === 'true';\n        const startVideoMuted = data.attributes.video === 'true';\n\n        let updated = false;\n\n        if (startAudioMuted !== conference.startMutedPolicy.audio) {\n            conference.startMutedPolicy.audio = startAudioMuted;\n            updated = true;\n        }\n\n        if (startVideoMuted !== conference.startMutedPolicy.video) {\n            conference.startMutedPolicy.video = startVideoMuted;\n            updated = true;\n        }\n\n        if (updated) {\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.START_MUTED_POLICY_CHANGED,\n                conference.startMutedPolicy\n            );\n        }\n    });\n\n    if (conference.statistics) {\n        // FIXME ICE related events should end up in RTCEvents eventually\n        chatRoom.addListener(XMPPEvents.CONNECTION_ICE_FAILED,\n            session => {\n                conference.statistics.sendIceConnectionFailedEvent(\n                    session.peerconnection);\n            });\n\n        // FIXME XMPPEvents.ADD_ICE_CANDIDATE_FAILED is never emitted\n        chatRoom.addListener(XMPPEvents.ADD_ICE_CANDIDATE_FAILED,\n            (e, pc) => {\n                conference.statistics.sendAddIceCandidateFailed(e, pc);\n            });\n    }\n};\n\n/**\n * Setups event listeners related to conference.rtc\n */\nJitsiConferenceEventManager.prototype.setupRTCListeners = function() {\n    const conference = this.conference;\n    const rtc = conference.rtc;\n\n    rtc.addListener(\n        RTCEvents.REMOTE_TRACK_ADDED,\n        conference.onRemoteTrackAdded.bind(conference));\n\n    rtc.addListener(\n        RTCEvents.REMOTE_TRACK_REMOVED,\n        conference.onRemoteTrackRemoved.bind(conference));\n\n    rtc.addListener(RTCEvents.DOMINANT_SPEAKER_CHANGED,\n        id => {\n            if (conference.lastDominantSpeaker !== id && conference.room) {\n                conference.lastDominantSpeaker = id;\n                conference.eventEmitter.emit(\n                    JitsiConferenceEvents.DOMINANT_SPEAKER_CHANGED, id);\n\n                if (conference.statistics && conference.myUserId() === id) {\n                    // We are the new dominant speaker.\n                    conference.statistics.sendDominantSpeakerEvent(\n                        conference.room.roomjid);\n                }\n            }\n        });\n\n    rtc.addListener(RTCEvents.DATA_CHANNEL_OPEN, () => {\n        const now = window.performance.now();\n        const key = 'data.channel.opened';\n\n        // TODO: Move all of the 'connectionTimes' logic to its own module.\n        logger.log(`(TIME) ${key}`, now);\n        conference.room.connectionTimes[key] = now;\n        Statistics.sendAnalytics(\n            createConnectionStageReachedEvent(key, { value: now }));\n\n        conference.eventEmitter.emit(JitsiConferenceEvents.DATA_CHANNEL_OPENED);\n    });\n\n    rtc.addListener(RTCEvents.ENDPOINT_MESSAGE_RECEIVED,\n        (from, payload) => {\n            const participant = conference.getParticipantById(from);\n\n            if (participant) {\n                conference.eventEmitter.emit(\n                    JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED,\n                    participant, payload);\n            } else {\n                logger.warn(\n                    'Ignored ENDPOINT_MESSAGE_RECEIVED for not existing '\n                        + `participant: ${from}`,\n                    payload);\n            }\n        });\n\n    rtc.addListener(RTCEvents.LOCAL_UFRAG_CHANGED,\n        (tpc, ufrag) => {\n            if (!tpc.isP2P) {\n                Statistics.sendLog(\n                    JSON.stringify({\n                        id: 'local_ufrag',\n                        value: ufrag\n                    }));\n            }\n        });\n    rtc.addListener(RTCEvents.REMOTE_UFRAG_CHANGED,\n        (tpc, ufrag) => {\n            if (!tpc.isP2P) {\n                Statistics.sendLog(\n                    JSON.stringify({\n                        id: 'remote_ufrag',\n                        value: ufrag\n                    }));\n            }\n        });\n\n    rtc.addListener(RTCEvents.CREATE_ANSWER_FAILED,\n        (e, tpc) => {\n            conference.statistics.sendCreateAnswerFailed(e, tpc);\n            if (!tpc.isP2P) {\n                conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\n                    JitsiConferenceErrors.OFFER_ANSWER_FAILED, e);\n            }\n        });\n\n    rtc.addListener(RTCEvents.CREATE_OFFER_FAILED,\n        (e, tpc) => {\n            conference.statistics.sendCreateOfferFailed(e, tpc);\n            if (!tpc.isP2P) {\n                conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\n                    JitsiConferenceErrors.OFFER_ANSWER_FAILED, e);\n            }\n        });\n\n    rtc.addListener(RTCEvents.SET_LOCAL_DESCRIPTION_FAILED,\n        (e, tpc) => {\n            conference.statistics.sendSetLocalDescFailed(e, tpc);\n            if (!tpc.isP2P) {\n                conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\n                    JitsiConferenceErrors.OFFER_ANSWER_FAILED, e);\n            }\n        });\n\n    rtc.addListener(RTCEvents.SET_REMOTE_DESCRIPTION_FAILED,\n        (e, tpc) => {\n            conference.statistics.sendSetRemoteDescFailed(e, tpc);\n            if (!tpc.isP2P) {\n                conference.eventEmitter.emit(JitsiConferenceEvents.CONFERENCE_FAILED,\n                    JitsiConferenceErrors.OFFER_ANSWER_FAILED, e);\n            }\n        });\n\n    rtc.addListener(RTCEvents.LOCAL_TRACK_SSRC_UPDATED,\n        (track, ssrc) => {\n            // when starting screen sharing, the track is created and when\n            // we do set local description and we process the ssrc we\n            // will be notified for it and we will report it with the event\n            // for screen sharing\n            if (track.isVideoTrack() && track.videoType === VideoType.DESKTOP) {\n                conference.statistics.sendScreenSharingEvent(true, ssrc);\n            }\n        });\n};\n\n/**\n * Removes event listeners related to conference.xmpp\n */\nJitsiConferenceEventManager.prototype.removeXMPPListeners = function() {\n    const conference = this.conference;\n\n    conference.xmpp.caps.removeListener(\n        XMPPEvents.PARTCIPANT_FEATURES_CHANGED,\n        this.xmppListeners[XMPPEvents.PARTCIPANT_FEATURES_CHANGED]);\n    delete this.xmppListeners[XMPPEvents.PARTCIPANT_FEATURES_CHANGED];\n\n    Object.keys(this.xmppListeners).forEach(eventName => {\n        conference.xmpp.removeListener(\n            eventName,\n            this.xmppListeners[eventName]);\n    });\n    this.xmppListeners = {};\n};\n\n\n/**\n * Setups event listeners related to conference.xmpp\n */\nJitsiConferenceEventManager.prototype.setupXMPPListeners = function() {\n    const conference = this.conference;\n\n    const featuresChangedListener = from => {\n        const participant\n            = conference.getParticipantById(\n            Strophe.getResourceFromJid(from));\n\n        if (participant) {\n            conference.eventEmitter.emit(\n                JitsiConferenceEvents.PARTCIPANT_FEATURES_CHANGED,\n                participant);\n        }\n    };\n\n    conference.xmpp.caps.addListener(\n        XMPPEvents.PARTCIPANT_FEATURES_CHANGED,\n        featuresChangedListener);\n    this.xmppListeners[XMPPEvents.PARTCIPANT_FEATURES_CHANGED]\n        = featuresChangedListener;\n\n    this._addConferenceXMPPListener(\n        XMPPEvents.CALL_INCOMING,\n        conference.onIncomingCall.bind(conference));\n    this._addConferenceXMPPListener(\n        XMPPEvents.CALL_ACCEPTED,\n        conference.onCallAccepted.bind(conference));\n    this._addConferenceXMPPListener(\n        XMPPEvents.TRANSPORT_INFO,\n        conference.onTransportInfo.bind(conference));\n    this._addConferenceXMPPListener(\n        XMPPEvents.CALL_ENDED,\n        conference.onCallEnded.bind(conference));\n\n    this._addConferenceXMPPListener(XMPPEvents.START_MUTED_FROM_FOCUS,\n        (audioMuted, videoMuted) => {\n            if (conference.options.config.ignoreStartMuted) {\n                return;\n            }\n\n            conference.startAudioMuted = audioMuted;\n            conference.startVideoMuted = videoMuted;\n\n            // mute existing local tracks because this is initial mute from\n            // Jicofo\n            conference.getLocalTracks().forEach(track => {\n                switch (track.getType()) {\n                case MediaType.AUDIO:\n                    conference.startAudioMuted && track.mute();\n                    break;\n                case MediaType.VIDEO:\n                    conference.startVideoMuted && track.mute();\n                    break;\n                }\n            });\n\n            conference.eventEmitter.emit(JitsiConferenceEvents.STARTED_MUTED);\n        });\n};\n\n/**\n * Add XMPP listener and save its reference for remove on leave conference.\n */\nJitsiConferenceEventManager.prototype._addConferenceXMPPListener = function(\n        eventName, listener) {\n    this.xmppListeners[eventName] = listener;\n    this.conference.xmpp.addListener(eventName, listener);\n};\n\n/**\n * Setups event listeners related to conference.statistics\n */\nJitsiConferenceEventManager.prototype.setupStatisticsListeners = function() {\n    const conference = this.conference;\n\n    if (!conference.statistics) {\n        return;\n    }\n\n    /* eslint-disable max-params */\n    conference.statistics.addAudioLevelListener((tpc, ssrc, level, isLocal) => {\n        conference.rtc.setAudioLevel(tpc, ssrc, level, isLocal);\n    });\n\n    /* eslint-enable max-params */\n\n    // Forward the \"before stats disposed\" event\n    conference.statistics.addBeforeDisposedListener(() => {\n        conference.eventEmitter.emit(\n            JitsiConferenceEvents.BEFORE_STATISTICS_DISPOSED);\n    });\n\n    // if we are in startSilent mode we will not be sending/receiving so nothing to detect\n    if (!conference.options.config.startSilent) {\n        conference.statistics.addByteSentStatsListener((tpc, stats) => {\n            conference.getLocalTracks(MediaType.AUDIO).forEach(track => {\n                const ssrc = tpc.getLocalSSRC(track);\n\n                if (!ssrc || !stats.hasOwnProperty(ssrc)) {\n                    return;\n                }\n\n                track._onByteSentStatsReceived(tpc, stats[ssrc]);\n            });\n        });\n    }\n};\n","/**\n * Implements utility to forward events from one eventEmitter to another.\n * @param src {object} instance of EventEmitter or another class that implements\n * addListener method which will register listener to EventEmitter instance.\n * @param dest {object} instance of EventEmitter or another class that\n * implements emit method which will emit an event.\n */\nfunction EventEmitterForwarder(src, dest) {\n    if (!src || !dest || typeof src.addListener !== 'function'\n        || typeof dest.emit !== 'function') {\n        throw new Error('Invalid arguments passed to EventEmitterForwarder');\n    }\n    this.src = src;\n    this.dest = dest;\n}\n\n/**\n * Adds event to be forwarded from src to dest.\n * @param srcEvent {string} the event that EventEmitterForwarder is listening\n * for.\n * @param dstEvent {string} the event that will be fired from dest.\n * @param arguments all other passed arguments are going to be fired with\n * dstEvent.\n */\nEventEmitterForwarder.prototype.forward = function(...args) {\n    const srcEvent = args[0];\n\n    // This will be the \"this\" value for emit function.\n\n    args[0] = this.dest;\n\n    // Using bind.apply to pass the arguments as Array-like object (\"arguments\")\n    this.src.addListener(\n        srcEvent,\n        Function.prototype.bind.apply(this.dest.emit, args));\n};\n\nmodule.exports = EventEmitterForwarder;\n","import {\n    TYPE_OPERATIONAL,\n    TYPE_PAGE,\n    TYPE_TRACK,\n    TYPE_UI\n} from '../../service/statistics/AnalyticsEvents';\nimport { getLogger } from 'jitsi-meet-logger';\nimport browser from '../browser';\nimport Settings from '../settings/Settings';\n\nconst MAX_CACHE_SIZE = 100;\n\n// eslist-disable-line no-undef\nconst logger = getLogger(__filename);\n\n/**\n * This class provides an API to lib-jitsi-meet and its users for sending\n * analytics events. It serves as a bridge to different backend implementations\n * (\"analytics handlers\") and a cache for events attempted to be sent before\n * the analytics handlers were enabled.\n *\n * The API is designed to be an easy replacement for the previous version of\n * this adapter, and is meant to be extended with more convenience methods.\n *\n *\n * The API calls are translated to objects with the following structure, which\n * are then passed to the sendEvent(event) function of the underlying handlers:\n *\n * {\n *    type,\n *\n *    action,\n *    actionSubject,\n *    actionSubjectId,\n *    attributes,\n *    categories,\n *    containerId,\n *    containerType,\n *    name,\n *    objectId,\n *    objectType,\n *    source,\n *    tags\n * }\n *\n * The 'type' is one of 'operational', 'page', 'track' or 'ui', and some of the\n * other properties are considered required according to the type.\n *\n * For events with type 'page', the required properties are: name.\n *\n * For events with type 'operational' and 'ui', the required properties are:\n * action, actionSubject, source\n *\n * For events with type 'page', the required properties are:\n * action, actionSubject, source, containerType, containerId, objectType,\n * objectId\n */\nclass AnalyticsAdapter {\n    /**\n     * Creates new AnalyticsAdapter instance.\n     */\n    constructor() {\n        this.reset();\n    }\n\n    /**\n     * Reset the state to the initial one.\n     *\n     * @returns {void}\n     */\n    reset() {\n        /**\n         * Whether this AnalyticsAdapter has been disposed of or not. Once this\n         * is set to true, the AnalyticsAdapter is disabled and does not accept\n         * any more events, and it can not be re-enabled.\n         * @type {boolean}\n         */\n        this.disposed = false;\n\n        /**\n         * The set of handlers to which events will be sent.\n         * @type {Set<any>}\n         */\n        this.analyticsHandlers = new Set();\n\n        /**\n         * The cache of events which are not sent yet. The cache is enabled\n         * while this field is truthy, and disabled otherwise.\n         * @type {Array}\n         */\n        this.cache = [];\n\n        /**\n         * Map of properties that will be added to every event. Note that the\n         * keys will be prefixed with \"permanent.\".\n         */\n        this.permanentProperties = {};\n\n        /**\n         * The name of the conference that this AnalyticsAdapter is associated\n         * with.\n         * @type {null}\n         */\n        this.conferenceName = '';\n\n        this.addPermanentProperties({\n            'callstats_name': Settings.callStatsUserName,\n            'user_agent': navigator.userAgent,\n            'browser_name': browser.getName()\n        });\n    }\n\n    /**\n     * Dispose analytics. Clears all handlers.\n     */\n    dispose() {\n        logger.warn('Disposing of analytics adapter.');\n\n        if (this.analyticsHandlers && this.analyticsHandlers.size > 0) {\n            this.analyticsHandlers.forEach(handler => {\n                if (typeof handler.dispose === 'function') {\n                    handler.dispose();\n                }\n            });\n        }\n\n        this.setAnalyticsHandlers([]);\n        this.disposed = true;\n    }\n\n    /**\n     * Sets the handlers that are going to be used to send analytics. Sends any\n     * cached events.\n     * @param {Array} handlers the handlers\n     */\n    setAnalyticsHandlers(handlers) {\n        if (this.disposed) {\n            return;\n        }\n\n        this.analyticsHandlers = new Set(handlers);\n\n        this._setUserProperties();\n\n        // Note that we disable the cache even if the set of handlers is empty.\n        const cache = this.cache;\n\n        this.cache = null;\n        if (cache) {\n            cache.forEach(event => this._sendEvent(event));\n        }\n    }\n\n    /**\n     * Set the user properties to the analytics handlers.\n     *\n     * @returns {void}\n     */\n    _setUserProperties() {\n        this.analyticsHandlers.forEach(handler => {\n            try {\n                handler.setUserProperties(this.permanentProperties);\n            } catch (error) {\n                logger.warn('Error in setUserProperties method of one of the '\n                    + `analytics handlers: ${error}`);\n            }\n        });\n    }\n\n    /**\n     * Adds a set of permanent properties to this this AnalyticsAdapter.\n     * Permanent properties will be added as \"attributes\" to events sent to\n     * the underlying \"analytics handlers\", and their keys will be prefixed\n     * by \"permanent_\", i.e. adding a permanent property {key: \"value\"} will\n     * result in {\"permanent_key\": \"value\"} object to be added to the\n     * \"attributes\" field of events.\n     *\n     * @param {Object} properties the properties to add\n     */\n    addPermanentProperties(properties) {\n        this.permanentProperties = {\n            ...this.permanentProperties,\n            ...properties\n        };\n\n        this._setUserProperties();\n    }\n\n    /**\n     * Sets the name of the conference that this AnalyticsAdapter is associated\n     * with.\n     * @param name the name to set.\n     */\n    setConferenceName(name) {\n        this.conferenceName = name;\n        this.addPermanentProperties({ 'conference_name': name });\n    }\n\n    /**\n     * Sends an event with a given name and given properties. The first\n     * parameter is either a string or an object. If it is a string, it is used\n     * as the event name and the second parameter is used at the attributes to\n     * attach to the event. If it is an object, it represents the whole event,\n     * including any desired attributes, and the second parameter is ignored.\n     *\n     * @param {String|Object} eventName either a string to be used as the name\n     * of the event, or an event object. If an event object is passed, the\n     * properties parameters is ignored.\n     * @param {Object} properties the properties/attributes to attach to the\n     * event, if eventName is a string.\n     */\n    sendEvent(eventName, properties = {}) {\n        if (this.disposed) {\n            return;\n        }\n\n        let event = null;\n\n        if (typeof eventName === 'string') {\n            event = {\n                type: TYPE_OPERATIONAL,\n                action: eventName,\n                actionSubject: eventName,\n                source: eventName,\n                attributes: properties\n            };\n        } else if (typeof eventName === 'object') {\n            event = eventName;\n        }\n\n        if (!this._verifyRequiredFields(event)) {\n            logger.error(\n                `Dropping a mis-formatted event: ${JSON.stringify(event)}`);\n\n            return;\n        }\n\n        this._sendEvent(event);\n    }\n\n    /**\n     * Checks whether an event has all of the required fields set, and tries\n     * to fill in some of the missing fields with reasonable default values.\n     * Returns true if after this operation the event has all of the required\n     * fields set, and false otherwise (if some of the required fields were not\n     * set and the attempt to fill them in with a default failed).\n     *\n     * @param event the event object.\n     * @return {boolean} true if the event (after the call to this function)\n     * contains all of the required fields, and false otherwise.\n     * @private\n     */\n    _verifyRequiredFields(event) {\n        if (!event) {\n            return false;\n        }\n\n        if (!event.type) {\n            event.type = TYPE_OPERATIONAL;\n        }\n\n        const type = event.type;\n\n        if (type !== TYPE_OPERATIONAL && type !== TYPE_PAGE\n            && type !== TYPE_UI && type !== TYPE_TRACK) {\n            logger.error(`Unknown event type: ${type}`);\n\n            return false;\n        }\n\n        if (type === TYPE_PAGE) {\n            return Boolean(event.name);\n        }\n\n        // Try to set some reasonable default values in case some of the\n        // parameters required by the handler API are missing.\n        event.action = event.action || event.name || event.actionSubject;\n        event.actionSubject = event.actionSubject || event.name || event.action;\n        event.source = event.source || event.name || event.action\n            || event.actionSubject;\n\n        if (!event.action || !event.actionSubject || !event.source) {\n            logger.error(\n                'Required field missing (action, actionSubject or source)');\n\n            return false;\n        }\n\n        // Track events have additional required fields.\n        if (type === TYPE_TRACK) {\n            event.objectType = event.objectType || 'generic-object-type';\n            event.containerType = event.containerType || 'conference';\n            if (event.containerType === 'conference' && !event.containerId) {\n                event.containerId = this.conferenceName;\n            }\n\n\n            if (!event.objectType || !event.objectId\n                || !event.containerType || !event.containerId) {\n                logger.error(\n                    'Required field missing (containerId, containerType, '\n                        + 'objectId or objectType)');\n\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * Saves an event to the cache, if the cache is enabled.\n     * @param event the event to save.\n     * @returns {boolean} true if the event was saved, and false otherwise (i.e.\n     * if the cache was disabled).\n     * @private\n     */\n    _maybeCacheEvent(event) {\n        if (this.cache) {\n            this.cache.push(event);\n\n            // We limit the size of the cache, in case the user fails to ever\n            // set the analytics handlers.\n            if (this.cache.length > MAX_CACHE_SIZE) {\n                this.cache.splice(0, 1);\n            }\n\n            return true;\n        }\n\n        return false;\n\n    }\n\n    /**\n     *\n     * @param event\n     * @private\n     */\n    _sendEvent(event) {\n        if (this._maybeCacheEvent(event)) {\n            // The event was consumed by the cache.\n        } else {\n            this.analyticsHandlers.forEach(handler => {\n                try {\n                    handler.sendEvent(event);\n                } catch (e) {\n                    logger.warn(`Error sending analytics event: ${e}`);\n                }\n            });\n        }\n    }\n}\n\nexport default new AnalyticsAdapter();\n","import { getLogger } from 'jitsi-meet-logger';\nimport { BrowserDetection } from 'js-utils';\n\nconst logger = getLogger(__filename);\n\n// TODO: Move this code to js-utils.\n\n// NOTE: Now we are extending BrowserDetection in order to preserve\n// RTCBrowserType interface but maybe it worth exporting BrowserCapabilities\n// and BrowserDetection as separate objects in future.\n\n/**\n * Implements browser capabilities for lib-jitsi-meet.\n */\nexport default class BrowserCapabilities extends BrowserDetection {\n    /**\n     * Creates new BrowserCapabilities instance.\n     */\n    constructor() {\n        super();\n        logger.info(\n            `This appears to be ${this.getName()}, ver: ${this.getVersion()}`);\n    }\n\n    /**\n     * Tells whether or not the <tt>MediaStream/tt> is removed from\n     * the <tt>PeerConnection</tt> and disposed on video mute (in order to turn\n     * off the camera device).\n     * @return {boolean} <tt>true</tt> if the current browser supports this\n     * strategy or <tt>false</tt> otherwise.\n     */\n    doesVideoMuteByStreamRemove() {\n        return !(\n            this.isFirefox()\n            || this.isEdge()\n            || this.isReactNative()\n            || this.isSafariWithWebrtc()\n        );\n    }\n\n    /**\n     * Check whether or not the current browser support peer to peer connections\n     * @return {boolean} <tt>true</tt> if p2p is supported or <tt>false</tt>\n     * otherwise.\n     */\n    supportsP2P() {\n        return !this.isEdge() && !this.isFirefox();\n    }\n\n    /**\n     * Checks if the current browser is Chromium based, that is, it's either\n     * Chrome / Chromium or uses it as its engine, but doesn't identify as\n     * Chrome.\n     *\n     * This includes the following browsers:\n     * - Chrome and Chromium\n     * - Other browsers which use the Chrome engine, but are detected as Chrome,\n     *   such as Brave and Vivaldi\n     * - Browsers which are NOT Chrome but use it as their engine, and have\n     *   custom detection code: Opera, Electron and NW.JS\n     */\n    isChromiumBased() {\n        return this.isChrome()\n            || this.isElectron()\n            || this.isNWJS()\n            || this.isOpera();\n    }\n\n    /**\n     * Checks if current browser is a Safari and a version of Safari that\n     * supports native webrtc.\n     *\n     * @returns {boolean}\n     */\n    isSafariWithWebrtc() {\n        return this.isSafari()\n            && !this.isVersionLessThan('11');\n    }\n\n    /**\n     * Checks if current browser is a Safari and a version of Safari that\n     * supports VP8.\n     *\n     * @returns {boolean}\n     */\n    isSafariWithVP8() {\n        return this.isSafari()\n            && !this.isVersionLessThan('12.1');\n    }\n\n    /**\n     * Checks if the current browser is supported.\n     *\n     * @returns {boolean} true if the browser is supported, false otherwise.\n     */\n    isSupported() {\n        return this.isChromiumBased()\n            || this.isFirefox()\n            || this.isReactNative()\n            || this.isSafariWithWebrtc();\n    }\n\n    /**\n     * Returns whether or not the current environment needs a user interaction\n     * with the page before any unmute can occur.\n     *\n     * @returns {boolean}\n     */\n    isUserInteractionRequiredForUnmute() {\n        return this.isFirefox() || this.isSafari();\n    }\n\n    /**\n     * Checks if the current browser triggers 'onmute'/'onunmute' events when\n     * user's connection is interrupted and the video stops playback.\n     * @returns {*|boolean} 'true' if the event is supported or 'false'\n     * otherwise.\n     */\n    supportsVideoMuteOnConnInterrupted() {\n        return this.isChromiumBased() || this.isReactNative()\n            || this.isSafariWithVP8();\n    }\n\n    /**\n     * Checks if the current browser reports upload and download bandwidth\n     * statistics.\n     * @return {boolean}\n     */\n    supportsBandwidthStatistics() {\n        // FIXME bandwidth stats are currently not implemented for FF on our\n        // side, but not sure if not possible ?\n        return !this.isFirefox() && !this.isEdge()\n            && !this.isSafariWithWebrtc();\n    }\n\n    /**\n     * Checks if the current browser supports WebRTC datachannels.\n     * @return {boolean}\n     */\n    supportsDataChannels() {\n        // NOTE: Edge does not yet implement DataChannel.\n        return !this.isEdge();\n    }\n\n    /**\n     * Checks if the current browser support the device change event.\n     * @return {boolean}\n     */\n    supportsDeviceChangeEvent() {\n        return navigator.mediaDevices\n            && typeof navigator.mediaDevices.ondevicechange !== 'undefined'\n            && typeof navigator.mediaDevices.addEventListener !== 'undefined';\n    }\n\n    /**\n     * Checks if the current browser supports RTP statictics collecting.\n     * Required by {@link RTPStatsCollector}.\n     *\n     * @returns {boolean} true if they are supported, false otherwise.\n     */\n    supportsRtpStatistics() {\n        return this.isChromiumBased()\n            || this.isEdge()\n            || this.isFirefox()\n            || this.isReactNative()\n            || this.isSafariWithWebrtc();\n    }\n\n    /**\n     * Checks if the current browser supports RTT statistics for srflx local\n     * candidates through the legacy getStats() API.\n     */\n    supportsLocalCandidateRttStatistics() {\n        return this.isChromiumBased() || this.isReactNative()\n            || this.isSafariWithVP8();\n    }\n\n    /**\n     * Checks if the current browser reports round trip time statistics for\n     * the ICE candidate pair.\n     * @return {boolean}\n     */\n    supportsRTTStatistics() {\n        // Firefox does not seem to report RTT for ICE candidate pair:\n        // eslint-disable-next-line max-len\n        // https://www.w3.org/TR/webrtc-stats/#dom-rtcicecandidatepairstats-currentroundtriptime\n        // It does report mozRTT for RTP streams, but at the time of this\n        // writing it's value does not make sense most of the time\n        // (is reported as 1):\n        // https://bugzilla.mozilla.org/show_bug.cgi?id=1241066\n        // For Chrome and others we rely on 'googRtt'.\n        return !this.isFirefox() && !this.isEdge();\n    }\n\n    /**\n     * Checks whether the browser supports RTPSender.\n     *\n     * @returns {boolean}\n     */\n    supportsRtpSender() {\n        return this.isFirefox() || this.isSafariWithVP8();\n    }\n\n    /**\n     * Checks whether the browser supports RTX.\n     *\n     * @returns {boolean}\n     */\n    supportsRtx() {\n        return !this.isFirefox() && !this.usesUnifiedPlan();\n    }\n\n    /**\n     * Whether jitsi-meet supports simulcast on the current browser.\n     * @returns {boolean}\n     */\n    supportsSimulcast() {\n        return this.isChromiumBased() || this.isFirefox()\n            || this.isSafariWithVP8() || this.isReactNative();\n    }\n\n    /**\n     * Returns whether or not the current browser can support capturing video,\n     * be it camera or desktop, and displaying received video.\n     *\n     * @returns {boolean}\n     */\n    supportsVideo() {\n        // FIXME: Check if we can use supportsVideoOut and supportsVideoIn. I\n        // leave the old implementation here in order not to brake something.\n\n        // Older versions of Safari using webrtc/adapter do not support video\n        // due in part to Safari only supporting H264 and the bridge sending VP8\n        // Newer Safari support VP8 and other WebRTC features.\n        return !this.isSafariWithWebrtc()\n            || (this.isSafariWithVP8() && this.usesPlanB());\n    }\n\n    /**\n     * Checks if the browser uses plan B.\n     *\n     * @returns {boolean}\n     */\n    usesPlanB() {\n        return !this.usesUnifiedPlan();\n    }\n\n    /**\n     * Checks if the browser uses unified plan.\n     *\n     * @returns {boolean}\n     */\n    usesUnifiedPlan() {\n        if (this.isFirefox()) {\n            return true;\n        }\n\n        if (this.isSafariWithVP8() && typeof window.RTCRtpTransceiver !== 'undefined') {\n            // eslint-disable-next-line max-len\n            // https://trac.webkit.org/changeset/236144/webkit/trunk/LayoutTests/webrtc/video-addLegacyTransceiver.html\n            // eslint-disable-next-line no-undef\n            return Object.keys(RTCRtpTransceiver.prototype)\n                   .indexOf('currentDirection') > -1;\n        }\n\n        return false;\n    }\n\n    /**\n     * Returns whether or not the current browser should be using the new\n     * getUserMedia flow, which utilizes the adapter shim. This method should\n     * be temporary and used while migrating all browsers to use adapter and\n     * the new getUserMedia.\n     *\n     * @returns {boolean}\n     */\n    usesNewGumFlow() {\n        const REQUIRED_CHROME_VERSION = 61;\n\n        if (this.isChrome()) {\n            return !this.isVersionLessThan(REQUIRED_CHROME_VERSION);\n        }\n\n        if (this.isFirefox() || this.isSafariWithWebrtc()) {\n            return true;\n        }\n\n        if (this.isChromiumBased()) {\n            return this._getChromiumBasedVersion() >= REQUIRED_CHROME_VERSION;\n        }\n\n        return false;\n    }\n\n    /**\n     * Checks if the browser uses webrtc-adapter. All browsers using the new\n     * getUserMedia flow and Edge.\n     *\n     * @returns {boolean}\n     */\n    usesAdapter() {\n        return this.usesNewGumFlow() || this.isEdge();\n    }\n\n    /**\n     * Checks if the browser supports getDisplayMedia.\n     * @returns {boolean} {@code true} if the browser supports getDisplayMedia.\n     */\n    supportsGetDisplayMedia() {\n        return typeof navigator.getDisplayMedia !== 'undefined'\n            || (typeof navigator.mediaDevices !== 'undefined'\n                && typeof navigator.mediaDevices.getDisplayMedia\n                    !== 'undefined');\n    }\n\n    /**\n     * Checks if the browser supports the \"sdpSemantics\" configuration option.\n     * https://webrtc.org/web-apis/chrome/unified-plan/\n     *\n     * @returns {boolean}\n     */\n    supportsSdpSemantics() {\n        return this.isChromiumBased() && this._getChromiumBasedVersion() >= 65;\n    }\n\n    /**\n     * Returns the version of a Chromium based browser.\n     *\n     * @returns {Number}\n     */\n    _getChromiumBasedVersion() {\n        if (this.isChromiumBased()) {\n            // NW.JS doesn't expose the Chrome version in the UA string.\n            if (this.isNWJS()) {\n                // eslint-disable-next-line no-undef\n                return Number.parseInt(process.versions.chromium, 10);\n            }\n\n            // Here we process all browsers which use the Chrome engine but\n            // don't necessarily identify as Chrome. We cannot use the version\n            // comparing functions because the Electron, Opera and NW.JS\n            // versions are inconsequential here, as we need to know the actual\n            // Chrome engine version.\n            const ua = navigator.userAgent;\n\n            if (ua.match(/Chrome/)) {\n                const version\n                    = Number.parseInt(ua.match(/Chrome\\/([\\d.]+)/)[1], 10);\n\n                return version;\n            }\n        }\n\n        return -1;\n    }\n}\n","/**\n * [js-md5]{@link https://github.com/emn178/js-md5}\n *\n * @namespace md5\n * @version 0.7.3\n * @author Chen, Yi-Cyuan [emn178@gmail.com]\n * @copyright Chen, Yi-Cyuan 2014-2017\n * @license MIT\n */\n(function () {\n  'use strict';\n\n  var ERROR = 'input is invalid type';\n  var WINDOW = typeof window === 'object';\n  var root = WINDOW ? window : {};\n  if (root.JS_MD5_NO_WINDOW) {\n    WINDOW = false;\n  }\n  var WEB_WORKER = !WINDOW && typeof self === 'object';\n  var NODE_JS = !root.JS_MD5_NO_NODE_JS && typeof process === 'object' && process.versions && process.versions.node;\n  if (NODE_JS) {\n    root = global;\n  } else if (WEB_WORKER) {\n    root = self;\n  }\n  var COMMON_JS = !root.JS_MD5_NO_COMMON_JS && typeof module === 'object' && module.exports;\n  var AMD = typeof define === 'function' && define.amd;\n  var ARRAY_BUFFER = !root.JS_MD5_NO_ARRAY_BUFFER && typeof ArrayBuffer !== 'undefined';\n  var HEX_CHARS = '0123456789abcdef'.split('');\n  var EXTRA = [128, 32768, 8388608, -2147483648];\n  var SHIFT = [0, 8, 16, 24];\n  var OUTPUT_TYPES = ['hex', 'array', 'digest', 'buffer', 'arrayBuffer', 'base64'];\n  var BASE64_ENCODE_CHAR = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'.split('');\n\n  var blocks = [], buffer8;\n  if (ARRAY_BUFFER) {\n    var buffer = new ArrayBuffer(68);\n    buffer8 = new Uint8Array(buffer);\n    blocks = new Uint32Array(buffer);\n  }\n\n  if (root.JS_MD5_NO_NODE_JS || !Array.isArray) {\n    Array.isArray = function (obj) {\n      return Object.prototype.toString.call(obj) === '[object Array]';\n    };\n  }\n\n  if (ARRAY_BUFFER && (root.JS_MD5_NO_ARRAY_BUFFER_IS_VIEW || !ArrayBuffer.isView)) {\n    ArrayBuffer.isView = function (obj) {\n      return typeof obj === 'object' && obj.buffer && obj.buffer.constructor === ArrayBuffer;\n    };\n  }\n\n  /**\n   * @method hex\n   * @memberof md5\n   * @description Output hash as hex string\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {String} Hex string\n   * @example\n   * md5.hex('The quick brown fox jumps over the lazy dog');\n   * // equal to\n   * md5('The quick brown fox jumps over the lazy dog');\n   */\n  /**\n   * @method digest\n   * @memberof md5\n   * @description Output hash as bytes array\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {Array} Bytes array\n   * @example\n   * md5.digest('The quick brown fox jumps over the lazy dog');\n   */\n  /**\n   * @method array\n   * @memberof md5\n   * @description Output hash as bytes array\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {Array} Bytes array\n   * @example\n   * md5.array('The quick brown fox jumps over the lazy dog');\n   */\n  /**\n   * @method arrayBuffer\n   * @memberof md5\n   * @description Output hash as ArrayBuffer\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {ArrayBuffer} ArrayBuffer\n   * @example\n   * md5.arrayBuffer('The quick brown fox jumps over the lazy dog');\n   */\n  /**\n   * @method buffer\n   * @deprecated This maybe confuse with Buffer in node.js. Please use arrayBuffer instead.\n   * @memberof md5\n   * @description Output hash as ArrayBuffer\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {ArrayBuffer} ArrayBuffer\n   * @example\n   * md5.buffer('The quick brown fox jumps over the lazy dog');\n   */\n  /**\n   * @method base64\n   * @memberof md5\n   * @description Output hash as base64 string\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {String} base64 string\n   * @example\n   * md5.base64('The quick brown fox jumps over the lazy dog');\n   */\n  var createOutputMethod = function (outputType) {\n    return function (message) {\n      return new Md5(true).update(message)[outputType]();\n    };\n  };\n\n  /**\n   * @method create\n   * @memberof md5\n   * @description Create Md5 object\n   * @returns {Md5} Md5 object.\n   * @example\n   * var hash = md5.create();\n   */\n  /**\n   * @method update\n   * @memberof md5\n   * @description Create and update Md5 object\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {Md5} Md5 object.\n   * @example\n   * var hash = md5.update('The quick brown fox jumps over the lazy dog');\n   * // equal to\n   * var hash = md5.create();\n   * hash.update('The quick brown fox jumps over the lazy dog');\n   */\n  var createMethod = function () {\n    var method = createOutputMethod('hex');\n    if (NODE_JS) {\n      method = nodeWrap(method);\n    }\n    method.create = function () {\n      return new Md5();\n    };\n    method.update = function (message) {\n      return method.create().update(message);\n    };\n    for (var i = 0; i < OUTPUT_TYPES.length; ++i) {\n      var type = OUTPUT_TYPES[i];\n      method[type] = createOutputMethod(type);\n    }\n    return method;\n  };\n\n  var nodeWrap = function (method) {\n    var crypto = eval(\"require('crypto')\");\n    var Buffer = eval(\"require('buffer').Buffer\");\n    var nodeMethod = function (message) {\n      if (typeof message === 'string') {\n        return crypto.createHash('md5').update(message, 'utf8').digest('hex');\n      } else {\n        if (message === null || message === undefined) {\n          throw ERROR;\n        } else if (message.constructor === ArrayBuffer) {\n          message = new Uint8Array(message);\n        }\n      }\n      if (Array.isArray(message) || ArrayBuffer.isView(message) ||\n        message.constructor === Buffer) {\n        return crypto.createHash('md5').update(new Buffer(message)).digest('hex');\n      } else {\n        return method(message);\n      }\n    };\n    return nodeMethod;\n  };\n\n  /**\n   * Md5 class\n   * @class Md5\n   * @description This is internal class.\n   * @see {@link md5.create}\n   */\n  function Md5(sharedMemory) {\n    if (sharedMemory) {\n      blocks[0] = blocks[16] = blocks[1] = blocks[2] = blocks[3] =\n      blocks[4] = blocks[5] = blocks[6] = blocks[7] =\n      blocks[8] = blocks[9] = blocks[10] = blocks[11] =\n      blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\n      this.blocks = blocks;\n      this.buffer8 = buffer8;\n    } else {\n      if (ARRAY_BUFFER) {\n        var buffer = new ArrayBuffer(68);\n        this.buffer8 = new Uint8Array(buffer);\n        this.blocks = new Uint32Array(buffer);\n      } else {\n        this.blocks = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n      }\n    }\n    this.h0 = this.h1 = this.h2 = this.h3 = this.start = this.bytes = this.hBytes = 0;\n    this.finalized = this.hashed = false;\n    this.first = true;\n  }\n\n  /**\n   * @method update\n   * @memberof Md5\n   * @instance\n   * @description Update hash\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n   * @returns {Md5} Md5 object.\n   * @see {@link md5.update}\n   */\n  Md5.prototype.update = function (message) {\n    if (this.finalized) {\n      return;\n    }\n\n    var notString, type = typeof message;\n    if (type !== 'string') {\n      if (type === 'object') {\n        if (message === null) {\n          throw ERROR;\n        } else if (ARRAY_BUFFER && message.constructor === ArrayBuffer) {\n          message = new Uint8Array(message);\n        } else if (!Array.isArray(message)) {\n          if (!ARRAY_BUFFER || !ArrayBuffer.isView(message)) {\n            throw ERROR;\n          }\n        }\n      } else {\n        throw ERROR;\n      }\n      notString = true;\n    }\n    var code, index = 0, i, length = message.length, blocks = this.blocks;\n    var buffer8 = this.buffer8;\n\n    while (index < length) {\n      if (this.hashed) {\n        this.hashed = false;\n        blocks[0] = blocks[16];\n        blocks[16] = blocks[1] = blocks[2] = blocks[3] =\n        blocks[4] = blocks[5] = blocks[6] = blocks[7] =\n        blocks[8] = blocks[9] = blocks[10] = blocks[11] =\n        blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\n      }\n\n      if (notString) {\n        if (ARRAY_BUFFER) {\n          for (i = this.start; index < length && i < 64; ++index) {\n            buffer8[i++] = message[index];\n          }\n        } else {\n          for (i = this.start; index < length && i < 64; ++index) {\n            blocks[i >> 2] |= message[index] << SHIFT[i++ & 3];\n          }\n        }\n      } else {\n        if (ARRAY_BUFFER) {\n          for (i = this.start; index < length && i < 64; ++index) {\n            code = message.charCodeAt(index);\n            if (code < 0x80) {\n              buffer8[i++] = code;\n            } else if (code < 0x800) {\n              buffer8[i++] = 0xc0 | (code >> 6);\n              buffer8[i++] = 0x80 | (code & 0x3f);\n            } else if (code < 0xd800 || code >= 0xe000) {\n              buffer8[i++] = 0xe0 | (code >> 12);\n              buffer8[i++] = 0x80 | ((code >> 6) & 0x3f);\n              buffer8[i++] = 0x80 | (code & 0x3f);\n            } else {\n              code = 0x10000 + (((code & 0x3ff) << 10) | (message.charCodeAt(++index) & 0x3ff));\n              buffer8[i++] = 0xf0 | (code >> 18);\n              buffer8[i++] = 0x80 | ((code >> 12) & 0x3f);\n              buffer8[i++] = 0x80 | ((code >> 6) & 0x3f);\n              buffer8[i++] = 0x80 | (code & 0x3f);\n            }\n          }\n        } else {\n          for (i = this.start; index < length && i < 64; ++index) {\n            code = message.charCodeAt(index);\n            if (code < 0x80) {\n              blocks[i >> 2] |= code << SHIFT[i++ & 3];\n            } else if (code < 0x800) {\n              blocks[i >> 2] |= (0xc0 | (code >> 6)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n            } else if (code < 0xd800 || code >= 0xe000) {\n              blocks[i >> 2] |= (0xe0 | (code >> 12)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n            } else {\n              code = 0x10000 + (((code & 0x3ff) << 10) | (message.charCodeAt(++index) & 0x3ff));\n              blocks[i >> 2] |= (0xf0 | (code >> 18)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | ((code >> 12) & 0x3f)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];\n              blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\n            }\n          }\n        }\n      }\n      this.lastByteIndex = i;\n      this.bytes += i - this.start;\n      if (i >= 64) {\n        this.start = i - 64;\n        this.hash();\n        this.hashed = true;\n      } else {\n        this.start = i;\n      }\n    }\n    if (this.bytes > 4294967295) {\n      this.hBytes += this.bytes / 4294967296 << 0;\n      this.bytes = this.bytes % 4294967296;\n    }\n    return this;\n  };\n\n  Md5.prototype.finalize = function () {\n    if (this.finalized) {\n      return;\n    }\n    this.finalized = true;\n    var blocks = this.blocks, i = this.lastByteIndex;\n    blocks[i >> 2] |= EXTRA[i & 3];\n    if (i >= 56) {\n      if (!this.hashed) {\n        this.hash();\n      }\n      blocks[0] = blocks[16];\n      blocks[16] = blocks[1] = blocks[2] = blocks[3] =\n      blocks[4] = blocks[5] = blocks[6] = blocks[7] =\n      blocks[8] = blocks[9] = blocks[10] = blocks[11] =\n      blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\n    }\n    blocks[14] = this.bytes << 3;\n    blocks[15] = this.hBytes << 3 | this.bytes >>> 29;\n    this.hash();\n  };\n\n  Md5.prototype.hash = function () {\n    var a, b, c, d, bc, da, blocks = this.blocks;\n\n    if (this.first) {\n      a = blocks[0] - 680876937;\n      a = (a << 7 | a >>> 25) - 271733879 << 0;\n      d = (-1732584194 ^ a & 2004318071) + blocks[1] - 117830708;\n      d = (d << 12 | d >>> 20) + a << 0;\n      c = (-271733879 ^ (d & (a ^ -271733879))) + blocks[2] - 1126478375;\n      c = (c << 17 | c >>> 15) + d << 0;\n      b = (a ^ (c & (d ^ a))) + blocks[3] - 1316259209;\n      b = (b << 22 | b >>> 10) + c << 0;\n    } else {\n      a = this.h0;\n      b = this.h1;\n      c = this.h2;\n      d = this.h3;\n      a += (d ^ (b & (c ^ d))) + blocks[0] - 680876936;\n      a = (a << 7 | a >>> 25) + b << 0;\n      d += (c ^ (a & (b ^ c))) + blocks[1] - 389564586;\n      d = (d << 12 | d >>> 20) + a << 0;\n      c += (b ^ (d & (a ^ b))) + blocks[2] + 606105819;\n      c = (c << 17 | c >>> 15) + d << 0;\n      b += (a ^ (c & (d ^ a))) + blocks[3] - 1044525330;\n      b = (b << 22 | b >>> 10) + c << 0;\n    }\n\n    a += (d ^ (b & (c ^ d))) + blocks[4] - 176418897;\n    a = (a << 7 | a >>> 25) + b << 0;\n    d += (c ^ (a & (b ^ c))) + blocks[5] + 1200080426;\n    d = (d << 12 | d >>> 20) + a << 0;\n    c += (b ^ (d & (a ^ b))) + blocks[6] - 1473231341;\n    c = (c << 17 | c >>> 15) + d << 0;\n    b += (a ^ (c & (d ^ a))) + blocks[7] - 45705983;\n    b = (b << 22 | b >>> 10) + c << 0;\n    a += (d ^ (b & (c ^ d))) + blocks[8] + 1770035416;\n    a = (a << 7 | a >>> 25) + b << 0;\n    d += (c ^ (a & (b ^ c))) + blocks[9] - 1958414417;\n    d = (d << 12 | d >>> 20) + a << 0;\n    c += (b ^ (d & (a ^ b))) + blocks[10] - 42063;\n    c = (c << 17 | c >>> 15) + d << 0;\n    b += (a ^ (c & (d ^ a))) + blocks[11] - 1990404162;\n    b = (b << 22 | b >>> 10) + c << 0;\n    a += (d ^ (b & (c ^ d))) + blocks[12] + 1804603682;\n    a = (a << 7 | a >>> 25) + b << 0;\n    d += (c ^ (a & (b ^ c))) + blocks[13] - 40341101;\n    d = (d << 12 | d >>> 20) + a << 0;\n    c += (b ^ (d & (a ^ b))) + blocks[14] - 1502002290;\n    c = (c << 17 | c >>> 15) + d << 0;\n    b += (a ^ (c & (d ^ a))) + blocks[15] + 1236535329;\n    b = (b << 22 | b >>> 10) + c << 0;\n    a += (c ^ (d & (b ^ c))) + blocks[1] - 165796510;\n    a = (a << 5 | a >>> 27) + b << 0;\n    d += (b ^ (c & (a ^ b))) + blocks[6] - 1069501632;\n    d = (d << 9 | d >>> 23) + a << 0;\n    c += (a ^ (b & (d ^ a))) + blocks[11] + 643717713;\n    c = (c << 14 | c >>> 18) + d << 0;\n    b += (d ^ (a & (c ^ d))) + blocks[0] - 373897302;\n    b = (b << 20 | b >>> 12) + c << 0;\n    a += (c ^ (d & (b ^ c))) + blocks[5] - 701558691;\n    a = (a << 5 | a >>> 27) + b << 0;\n    d += (b ^ (c & (a ^ b))) + blocks[10] + 38016083;\n    d = (d << 9 | d >>> 23) + a << 0;\n    c += (a ^ (b & (d ^ a))) + blocks[15] - 660478335;\n    c = (c << 14 | c >>> 18) + d << 0;\n    b += (d ^ (a & (c ^ d))) + blocks[4] - 405537848;\n    b = (b << 20 | b >>> 12) + c << 0;\n    a += (c ^ (d & (b ^ c))) + blocks[9] + 568446438;\n    a = (a << 5 | a >>> 27) + b << 0;\n    d += (b ^ (c & (a ^ b))) + blocks[14] - 1019803690;\n    d = (d << 9 | d >>> 23) + a << 0;\n    c += (a ^ (b & (d ^ a))) + blocks[3] - 187363961;\n    c = (c << 14 | c >>> 18) + d << 0;\n    b += (d ^ (a & (c ^ d))) + blocks[8] + 1163531501;\n    b = (b << 20 | b >>> 12) + c << 0;\n    a += (c ^ (d & (b ^ c))) + blocks[13] - 1444681467;\n    a = (a << 5 | a >>> 27) + b << 0;\n    d += (b ^ (c & (a ^ b))) + blocks[2] - 51403784;\n    d = (d << 9 | d >>> 23) + a << 0;\n    c += (a ^ (b & (d ^ a))) + blocks[7] + 1735328473;\n    c = (c << 14 | c >>> 18) + d << 0;\n    b += (d ^ (a & (c ^ d))) + blocks[12] - 1926607734;\n    b = (b << 20 | b >>> 12) + c << 0;\n    bc = b ^ c;\n    a += (bc ^ d) + blocks[5] - 378558;\n    a = (a << 4 | a >>> 28) + b << 0;\n    d += (bc ^ a) + blocks[8] - 2022574463;\n    d = (d << 11 | d >>> 21) + a << 0;\n    da = d ^ a;\n    c += (da ^ b) + blocks[11] + 1839030562;\n    c = (c << 16 | c >>> 16) + d << 0;\n    b += (da ^ c) + blocks[14] - 35309556;\n    b = (b << 23 | b >>> 9) + c << 0;\n    bc = b ^ c;\n    a += (bc ^ d) + blocks[1] - 1530992060;\n    a = (a << 4 | a >>> 28) + b << 0;\n    d += (bc ^ a) + blocks[4] + 1272893353;\n    d = (d << 11 | d >>> 21) + a << 0;\n    da = d ^ a;\n    c += (da ^ b) + blocks[7] - 155497632;\n    c = (c << 16 | c >>> 16) + d << 0;\n    b += (da ^ c) + blocks[10] - 1094730640;\n    b = (b << 23 | b >>> 9) + c << 0;\n    bc = b ^ c;\n    a += (bc ^ d) + blocks[13] + 681279174;\n    a = (a << 4 | a >>> 28) + b << 0;\n    d += (bc ^ a) + blocks[0] - 358537222;\n    d = (d << 11 | d >>> 21) + a << 0;\n    da = d ^ a;\n    c += (da ^ b) + blocks[3] - 722521979;\n    c = (c << 16 | c >>> 16) + d << 0;\n    b += (da ^ c) + blocks[6] + 76029189;\n    b = (b << 23 | b >>> 9) + c << 0;\n    bc = b ^ c;\n    a += (bc ^ d) + blocks[9] - 640364487;\n    a = (a << 4 | a >>> 28) + b << 0;\n    d += (bc ^ a) + blocks[12] - 421815835;\n    d = (d << 11 | d >>> 21) + a << 0;\n    da = d ^ a;\n    c += (da ^ b) + blocks[15] + 530742520;\n    c = (c << 16 | c >>> 16) + d << 0;\n    b += (da ^ c) + blocks[2] - 995338651;\n    b = (b << 23 | b >>> 9) + c << 0;\n    a += (c ^ (b | ~d)) + blocks[0] - 198630844;\n    a = (a << 6 | a >>> 26) + b << 0;\n    d += (b ^ (a | ~c)) + blocks[7] + 1126891415;\n    d = (d << 10 | d >>> 22) + a << 0;\n    c += (a ^ (d | ~b)) + blocks[14] - 1416354905;\n    c = (c << 15 | c >>> 17) + d << 0;\n    b += (d ^ (c | ~a)) + blocks[5] - 57434055;\n    b = (b << 21 | b >>> 11) + c << 0;\n    a += (c ^ (b | ~d)) + blocks[12] + 1700485571;\n    a = (a << 6 | a >>> 26) + b << 0;\n    d += (b ^ (a | ~c)) + blocks[3] - 1894986606;\n    d = (d << 10 | d >>> 22) + a << 0;\n    c += (a ^ (d | ~b)) + blocks[10] - 1051523;\n    c = (c << 15 | c >>> 17) + d << 0;\n    b += (d ^ (c | ~a)) + blocks[1] - 2054922799;\n    b = (b << 21 | b >>> 11) + c << 0;\n    a += (c ^ (b | ~d)) + blocks[8] + 1873313359;\n    a = (a << 6 | a >>> 26) + b << 0;\n    d += (b ^ (a | ~c)) + blocks[15] - 30611744;\n    d = (d << 10 | d >>> 22) + a << 0;\n    c += (a ^ (d | ~b)) + blocks[6] - 1560198380;\n    c = (c << 15 | c >>> 17) + d << 0;\n    b += (d ^ (c | ~a)) + blocks[13] + 1309151649;\n    b = (b << 21 | b >>> 11) + c << 0;\n    a += (c ^ (b | ~d)) + blocks[4] - 145523070;\n    a = (a << 6 | a >>> 26) + b << 0;\n    d += (b ^ (a | ~c)) + blocks[11] - 1120210379;\n    d = (d << 10 | d >>> 22) + a << 0;\n    c += (a ^ (d | ~b)) + blocks[2] + 718787259;\n    c = (c << 15 | c >>> 17) + d << 0;\n    b += (d ^ (c | ~a)) + blocks[9] - 343485551;\n    b = (b << 21 | b >>> 11) + c << 0;\n\n    if (this.first) {\n      this.h0 = a + 1732584193 << 0;\n      this.h1 = b - 271733879 << 0;\n      this.h2 = c - 1732584194 << 0;\n      this.h3 = d + 271733878 << 0;\n      this.first = false;\n    } else {\n      this.h0 = this.h0 + a << 0;\n      this.h1 = this.h1 + b << 0;\n      this.h2 = this.h2 + c << 0;\n      this.h3 = this.h3 + d << 0;\n    }\n  };\n\n  /**\n   * @method hex\n   * @memberof Md5\n   * @instance\n   * @description Output hash as hex string\n   * @returns {String} Hex string\n   * @see {@link md5.hex}\n   * @example\n   * hash.hex();\n   */\n  Md5.prototype.hex = function () {\n    this.finalize();\n\n    var h0 = this.h0, h1 = this.h1, h2 = this.h2, h3 = this.h3;\n\n    return HEX_CHARS[(h0 >> 4) & 0x0F] + HEX_CHARS[h0 & 0x0F] +\n      HEX_CHARS[(h0 >> 12) & 0x0F] + HEX_CHARS[(h0 >> 8) & 0x0F] +\n      HEX_CHARS[(h0 >> 20) & 0x0F] + HEX_CHARS[(h0 >> 16) & 0x0F] +\n      HEX_CHARS[(h0 >> 28) & 0x0F] + HEX_CHARS[(h0 >> 24) & 0x0F] +\n      HEX_CHARS[(h1 >> 4) & 0x0F] + HEX_CHARS[h1 & 0x0F] +\n      HEX_CHARS[(h1 >> 12) & 0x0F] + HEX_CHARS[(h1 >> 8) & 0x0F] +\n      HEX_CHARS[(h1 >> 20) & 0x0F] + HEX_CHARS[(h1 >> 16) & 0x0F] +\n      HEX_CHARS[(h1 >> 28) & 0x0F] + HEX_CHARS[(h1 >> 24) & 0x0F] +\n      HEX_CHARS[(h2 >> 4) & 0x0F] + HEX_CHARS[h2 & 0x0F] +\n      HEX_CHARS[(h2 >> 12) & 0x0F] + HEX_CHARS[(h2 >> 8) & 0x0F] +\n      HEX_CHARS[(h2 >> 20) & 0x0F] + HEX_CHARS[(h2 >> 16) & 0x0F] +\n      HEX_CHARS[(h2 >> 28) & 0x0F] + HEX_CHARS[(h2 >> 24) & 0x0F] +\n      HEX_CHARS[(h3 >> 4) & 0x0F] + HEX_CHARS[h3 & 0x0F] +\n      HEX_CHARS[(h3 >> 12) & 0x0F] + HEX_CHARS[(h3 >> 8) & 0x0F] +\n      HEX_CHARS[(h3 >> 20) & 0x0F] + HEX_CHARS[(h3 >> 16) & 0x0F] +\n      HEX_CHARS[(h3 >> 28) & 0x0F] + HEX_CHARS[(h3 >> 24) & 0x0F];\n  };\n\n  /**\n   * @method toString\n   * @memberof Md5\n   * @instance\n   * @description Output hash as hex string\n   * @returns {String} Hex string\n   * @see {@link md5.hex}\n   * @example\n   * hash.toString();\n   */\n  Md5.prototype.toString = Md5.prototype.hex;\n\n  /**\n   * @method digest\n   * @memberof Md5\n   * @instance\n   * @description Output hash as bytes array\n   * @returns {Array} Bytes array\n   * @see {@link md5.digest}\n   * @example\n   * hash.digest();\n   */\n  Md5.prototype.digest = function () {\n    this.finalize();\n\n    var h0 = this.h0, h1 = this.h1, h2 = this.h2, h3 = this.h3;\n    return [\n      h0 & 0xFF, (h0 >> 8) & 0xFF, (h0 >> 16) & 0xFF, (h0 >> 24) & 0xFF,\n      h1 & 0xFF, (h1 >> 8) & 0xFF, (h1 >> 16) & 0xFF, (h1 >> 24) & 0xFF,\n      h2 & 0xFF, (h2 >> 8) & 0xFF, (h2 >> 16) & 0xFF, (h2 >> 24) & 0xFF,\n      h3 & 0xFF, (h3 >> 8) & 0xFF, (h3 >> 16) & 0xFF, (h3 >> 24) & 0xFF\n    ];\n  };\n\n  /**\n   * @method array\n   * @memberof Md5\n   * @instance\n   * @description Output hash as bytes array\n   * @returns {Array} Bytes array\n   * @see {@link md5.array}\n   * @example\n   * hash.array();\n   */\n  Md5.prototype.array = Md5.prototype.digest;\n\n  /**\n   * @method arrayBuffer\n   * @memberof Md5\n   * @instance\n   * @description Output hash as ArrayBuffer\n   * @returns {ArrayBuffer} ArrayBuffer\n   * @see {@link md5.arrayBuffer}\n   * @example\n   * hash.arrayBuffer();\n   */\n  Md5.prototype.arrayBuffer = function () {\n    this.finalize();\n\n    var buffer = new ArrayBuffer(16);\n    var blocks = new Uint32Array(buffer);\n    blocks[0] = this.h0;\n    blocks[1] = this.h1;\n    blocks[2] = this.h2;\n    blocks[3] = this.h3;\n    return buffer;\n  };\n\n  /**\n   * @method buffer\n   * @deprecated This maybe confuse with Buffer in node.js. Please use arrayBuffer instead.\n   * @memberof Md5\n   * @instance\n   * @description Output hash as ArrayBuffer\n   * @returns {ArrayBuffer} ArrayBuffer\n   * @see {@link md5.buffer}\n   * @example\n   * hash.buffer();\n   */\n  Md5.prototype.buffer = Md5.prototype.arrayBuffer;\n\n  /**\n   * @method base64\n   * @memberof Md5\n   * @instance\n   * @description Output hash as base64 string\n   * @returns {String} base64 string\n   * @see {@link md5.base64}\n   * @example\n   * hash.base64();\n   */\n  Md5.prototype.base64 = function () {\n    var v1, v2, v3, base64Str = '', bytes = this.array();\n    for (var i = 0; i < 15;) {\n      v1 = bytes[i++];\n      v2 = bytes[i++];\n      v3 = bytes[i++];\n      base64Str += BASE64_ENCODE_CHAR[v1 >>> 2] +\n        BASE64_ENCODE_CHAR[(v1 << 4 | v2 >>> 4) & 63] +\n        BASE64_ENCODE_CHAR[(v2 << 2 | v3 >>> 6) & 63] +\n        BASE64_ENCODE_CHAR[v3 & 63];\n    }\n    v1 = bytes[i];\n    base64Str += BASE64_ENCODE_CHAR[v1 >>> 2] +\n      BASE64_ENCODE_CHAR[(v1 << 4) & 63] +\n      '==';\n    return base64Str;\n  };\n\n  var exports = createMethod();\n\n  if (COMMON_JS) {\n    module.exports = exports;\n  } else {\n    /**\n     * @method md5\b\n     * @description Md5 hash function, export to global in browsers.\n     * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\n     * @returns {String} md5 hashes\n     * @example\n     * md5(''); // d41d8cd98f00b204e9800998ecf8427e\n     * md5('The quick brown fox jumps over the lazy dog'); // 9e107d9d372bb6826bd81d3542a419d6\n     * md5('The quick brown fox jumps over the lazy dog.'); // e4d909c290d0fb1ca068ffaddf22cbd0\n     *\n     * // It also supports UTF-8 encoding\n     * md5('中文'); // a7bac2239fcdcb3a067903d8077c4a07\n     *\n     * // It also supports byte `Array`, `Uint8Array`, `ArrayBuffer`\n     * md5([]); // d41d8cd98f00b204e9800998ecf8427e\n     * md5(new Uint8Array([])); // d41d8cd98f00b204e9800998ecf8427e\n     */\n    root.md5 = exports;\n    if (AMD) {\n      define(function () {\n        return exports;\n      });\n    }\n  }\n})();\n","const RandomUtil = require('./RandomUtil');\n\n/**\n * from faker.js - Copyright (c) 2014-2015 Matthew Bergman & Marak Squires\n * MIT License\n * http://github.com/marak/faker.js/\n *\n * @const\n */\nconst names = [\n    'Aaliyah', 'Aaron', 'Abagail', 'Abbey', 'Abbie', 'Abbigail', 'Abby',\n    'Abdiel', 'Abdul', 'Abdullah', 'Abe', 'Abel', 'Abelardo', 'Abigail',\n    'Abigale', 'Abigayle', 'Abner', 'Abraham', 'Ada', 'Adah', 'Adalberto',\n    'Adaline', 'Adam', 'Adan', 'Addie', 'Addison', 'Adela', 'Adelbert', 'Adele',\n    'Adelia', 'Adeline', 'Adell', 'Adella', 'Adelle', 'Aditya', 'Adolf',\n    'Adolfo', 'Adolph', 'Adolphus', 'Adonis', 'Adrain', 'Adrian', 'Adriana',\n    'Adrianna', 'Adriel', 'Adrien', 'Adrienne', 'Afton', 'Aglae', 'Agnes',\n    'Agustin', 'Agustina', 'Ahmad', 'Ahmed', 'Aida', 'Aidan', 'Aiden', 'Aileen',\n    'Aisha', 'Aiyana', 'Akeem', 'Al', 'Alaina', 'Alan', 'Alana', 'Alanis',\n    'Alanna', 'Alayna', 'Alba', 'Albert', 'Alberta', 'Albertha', 'Alberto',\n    'Albin', 'Albina', 'Alda', 'Alden', 'Alec', 'Aleen', 'Alejandra',\n    'Alejandrin', 'Alek', 'Alena', 'Alene', 'Alessandra', 'Alessandro',\n    'Alessia', 'Aletha', 'Alex', 'Alexa', 'Alexander', 'Alexandra', 'Alexandre',\n    'Alexandrea', 'Alexandria', 'Alexandrine', 'Alexandro', 'Alexane',\n    'Alexanne', 'Alexie', 'Alexis', 'Alexys', 'Alexzander', 'Alf', 'Alfonso',\n    'Alfonzo', 'Alford', 'Alfred', 'Alfreda', 'Alfredo', 'Ali', 'Alia', 'Alice',\n    'Alicia', 'Alisa', 'Alisha', 'Alison', 'Alivia', 'Aliya', 'Aliyah', 'Aliza',\n    'Alize', 'Allan', 'Allen', 'Allene', 'Allie', 'Allison', 'Ally', 'Alphonso',\n    'Alta', 'Althea', 'Alva', 'Alvah', 'Alvena', 'Alvera', 'Alverta', 'Alvina',\n    'Alvis', 'Alyce', 'Alycia', 'Alysa', 'Alysha', 'Alyson', 'Alysson',\n    'Amalia', 'Amanda', 'Amani', 'Amara', 'Amari', 'Amaya', 'Amber', 'Ambrose',\n    'Amelia', 'Amelie', 'Amely', 'America', 'Americo', 'Amie', 'Amina', 'Amir',\n    'Amira', 'Amiya', 'Amos', 'Amparo', 'Amy', 'Amya', 'Ana', 'Anabel',\n    'Anabelle', 'Anahi', 'Anais', 'Anastacio', 'Anastasia', 'Anderson', 'Andre',\n    'Andreane', 'Andreanne', 'Andres', 'Andrew', 'Andy', 'Angel', 'Angela',\n    'Angelica', 'Angelina', 'Angeline', 'Angelita', 'Angelo', 'Angie', 'Angus',\n    'Anibal', 'Anika', 'Anissa', 'Anita', 'Aniya', 'Aniyah', 'Anjali', 'Anna',\n    'Annabel', 'Annabell', 'Annabelle', 'Annalise', 'Annamae', 'Annamarie',\n    'Anne', 'Annetta', 'Annette', 'Annie', 'Ansel', 'Ansley', 'Anthony',\n    'Antoinette', 'Antone', 'Antonetta', 'Antonette', 'Antonia', 'Antonietta',\n    'Antonina', 'Antonio', 'Antwan', 'Antwon', 'Anya', 'April', 'Ara',\n    'Araceli', 'Aracely', 'Arch', 'Archibald', 'Ardella', 'Arden', 'Ardith',\n    'Arely', 'Ari', 'Ariane', 'Arianna', 'Aric', 'Ariel', 'Arielle', 'Arjun',\n    'Arlene', 'Arlie', 'Arlo', 'Armand', 'Armando', 'Armani', 'Arnaldo', 'Arne',\n    'Arno', 'Arnold', 'Arnoldo', 'Arnulfo', 'Aron', 'Art', 'Arthur', 'Arturo',\n    'Arvel', 'Arvid', 'Arvilla', 'Aryanna', 'Asa', 'Asha', 'Ashlee', 'Ashleigh',\n    'Ashley', 'Ashly', 'Ashlynn', 'Ashton', 'Ashtyn', 'Asia', 'Assunta',\n    'Astrid', 'Athena', 'Aubree', 'Aubrey', 'Audie', 'Audra', 'Audreanne',\n    'Audrey', 'August', 'Augusta', 'Augustine', 'Augustus', 'Aurelia',\n    'Aurelie', 'Aurelio', 'Aurore', 'Austen', 'Austin', 'Austyn', 'Autumn',\n    'Ava', 'Avery', 'Avis', 'Axel', 'Ayana', 'Ayden', 'Ayla', 'Aylin', 'Baby',\n    'Bailee', 'Bailey', 'Barbara', 'Barney', 'Baron', 'Barrett', 'Barry',\n    'Bart', 'Bartholome', 'Barton', 'Baylee', 'Beatrice', 'Beau', 'Beaulah',\n    'Bell', 'Bella', 'Belle', 'Ben', 'Benedict', 'Benjamin', 'Bennett',\n    'Bennie', 'Benny', 'Benton', 'Berenice', 'Bernadette', 'Bernadine',\n    'Bernard', 'Bernardo', 'Berneice', 'Bernhard', 'Bernice', 'Bernie',\n    'Berniece', 'Bernita', 'Berry', 'Bert', 'Berta', 'Bertha', 'Bertram',\n    'Bertrand', 'Beryl', 'Bessie', 'Beth', 'Bethany', 'Bethel', 'Betsy',\n    'Bette', 'Bettie', 'Betty', 'Bettye', 'Beulah', 'Beverly', 'Bianka', 'Bill',\n    'Billie', 'Billy', 'Birdie', 'Blair', 'Blaise', 'Blake', 'Blanca',\n    'Blanche', 'Blaze', 'Bo', 'Bobbie', 'Bobby', 'Bonita', 'Bonnie', 'Boris',\n    'Boyd', 'Brad', 'Braden', 'Bradford', 'Bradley', 'Bradly', 'Brady',\n    'Braeden', 'Brain', 'Brandi', 'Brando', 'Brandon', 'Brandt', 'Brandy',\n    'Brandyn', 'Brannon', 'Branson', 'Brant', 'Braulio', 'Braxton', 'Brayan',\n    'Breana', 'Breanna', 'Breanne', 'Brenda', 'Brendan', 'Brenden', 'Brendon',\n    'Brenna', 'Brennan', 'Brennon', 'Brent', 'Bret', 'Brett', 'Bria', 'Brian',\n    'Briana', 'Brianne', 'Brice', 'Bridget', 'Bridgette', 'Bridie', 'Brielle',\n    'Brigitte', 'Brionna', 'Brisa', 'Britney', 'Brittany', 'Brock', 'Broderick',\n    'Brody', 'Brook', 'Brooke', 'Brooklyn', 'Brooks', 'Brown', 'Bruce',\n    'Bryana', 'Bryce', 'Brycen', 'Bryon', 'Buck', 'Bud', 'Buddy', 'Buford',\n    'Bulah', 'Burdette', 'Burley', 'Burnice', 'Buster', 'Cade', 'Caden',\n    'Caesar', 'Caitlyn', 'Cale', 'Caleb', 'Caleigh', 'Cali', 'Calista',\n    'Callie', 'Camden', 'Cameron', 'Camila', 'Camilla', 'Camille', 'Camren',\n    'Camron', 'Camryn', 'Camylle', 'Candace', 'Candelario', 'Candice',\n    'Candida', 'Candido', 'Cara', 'Carey', 'Carissa', 'Carlee', 'Carleton',\n    'Carley', 'Carli', 'Carlie', 'Carlo', 'Carlos', 'Carlotta', 'Carmel',\n    'Carmela', 'Carmella', 'Carmelo', 'Carmen', 'Carmine', 'Carol', 'Carolanne',\n    'Carole', 'Carolina', 'Caroline', 'Carolyn', 'Carolyne', 'Carrie',\n    'Carroll', 'Carson', 'Carter', 'Cary', 'Casandra', 'Casey', 'Casimer',\n    'Casimir', 'Casper', 'Cassandra', 'Cassandre', 'Cassidy', 'Cassie',\n    'Catalina', 'Caterina', 'Catharine', 'Catherine', 'Cathrine', 'Cathryn',\n    'Cathy', 'Cayla', 'Ceasar', 'Cecelia', 'Cecil', 'Cecile', 'Cecilia',\n    'Cedrick', 'Celestine', 'Celestino', 'Celia', 'Celine', 'Cesar', 'Chad',\n    'Chadd', 'Chadrick', 'Chaim', 'Chance', 'Chandler', 'Chanel', 'Chanelle',\n    'Charity', 'Charlene', 'Charles', 'Charley', 'Charlie', 'Charlotte',\n    'Chase', 'Chasity', 'Chauncey', 'Chaya', 'Chaz', 'Chelsea', 'Chelsey',\n    'Chelsie', 'Chesley', 'Chester', 'Chet', 'Cheyanne', 'Cheyenne', 'Chloe',\n    'Chris', 'Christ', 'Christa', 'Christelle', 'Christian', 'Christiana',\n    'Christina', 'Christine', 'Christop', 'Christophe', 'Christopher',\n    'Christy', 'Chyna', 'Ciara', 'Cicero', 'Cielo', 'Cierra', 'Cindy',\n    'Citlalli', 'Clair', 'Claire', 'Clara', 'Clarabelle', 'Clare', 'Clarissa',\n    'Clark', 'Claud', 'Claude', 'Claudia', 'Claudie', 'Claudine', 'Clay',\n    'Clemens', 'Clement', 'Clementina', 'Clementine', 'Clemmie', 'Cleo',\n    'Cleora', 'Cleta', 'Cletus', 'Cleve', 'Cleveland', 'Clifford', 'Clifton',\n    'Clint', 'Clinton', 'Clotilde', 'Clovis', 'Cloyd', 'Clyde', 'Coby', 'Cody',\n    'Colby', 'Cole', 'Coleman', 'Colin', 'Colleen', 'Collin', 'Colt', 'Colten',\n    'Colton', 'Columbus', 'Concepcion', 'Conner', 'Connie', 'Connor', 'Conor',\n    'Conrad', 'Constance', 'Constantin', 'Consuelo', 'Cooper', 'Cora',\n    'Coralie', 'Corbin', 'Cordelia', 'Cordell', 'Cordia', 'Cordie', 'Corene',\n    'Corine', 'Cornelius', 'Cornell', 'Corrine', 'Cortez', 'Cortney', 'Cory',\n    'Coty', 'Courtney', 'Coy', 'Craig', 'Crawford', 'Creola', 'Cristal',\n    'Cristian', 'Cristina', 'Cristobal', 'Cristopher', 'Cruz', 'Crystal',\n    'Crystel', 'Cullen', 'Curt', 'Curtis', 'Cydney', 'Cynthia', 'Cyril',\n    'Cyrus', 'Dagmar', 'Dahlia', 'Daija', 'Daisha', 'Daisy', 'Dakota', 'Dale',\n    'Dallas', 'Dallin', 'Dalton', 'Damaris', 'Dameon', 'Damian', 'Damien',\n    'Damion', 'Damon', 'Dan', 'Dana', 'Dandre', 'Dane', 'D\\'angelo', 'Dangelo',\n    'Danial', 'Daniela', 'Daniella', 'Danielle', 'Danika', 'Dannie', 'Danny',\n    'Dante', 'Danyka', 'Daphne', 'Daphnee', 'Daphney', 'Darby', 'Daren',\n    'Darian', 'Dariana', 'Darien', 'Dario', 'Darion', 'Darius', 'Darlene',\n    'Daron', 'Darrel', 'Darrell', 'Darren', 'Darrick', 'Darrin', 'Darrion',\n    'Darron', 'Darryl', 'Darwin', 'Daryl', 'Dashawn', 'Dasia', 'Dave', 'David',\n    'Davin', 'Davion', 'Davon', 'Davonte', 'Dawn', 'Dawson', 'Dax', 'Dayana',\n    'Dayna', 'Dayne', 'Dayton', 'Dean', 'Deangelo', 'Deanna', 'Deborah',\n    'Declan', 'Dedric', 'Dedrick', 'Dee', 'Deion', 'Deja', 'Dejah', 'Dejon',\n    'Dejuan', 'Delaney', 'Delbert', 'Delfina', 'Delia', 'Delilah', 'Dell',\n    'Della', 'Delmer', 'Delores', 'Delpha', 'Delphia', 'Delphine', 'Delta',\n    'Demarco', 'Demarcus', 'Demario', 'Demetris', 'Demetrius', 'Demond', 'Dena',\n    'Denis', 'Dennis', 'Deon', 'Deondre', 'Deontae', 'Deonte', 'Dereck',\n    'Derek', 'Derick', 'Deron', 'Derrick', 'Deshaun', 'Deshawn', 'Desiree',\n    'Desmond', 'Dessie', 'Destany', 'Destin', 'Destinee', 'Destiney', 'Destini',\n    'Destiny', 'Devan', 'Devante', 'Deven', 'Devin', 'Devon', 'Devonte',\n    'Devyn', 'Dewayne', 'Dewitt', 'Dexter', 'Diamond', 'Diana', 'Dianna',\n    'Diego', 'Dillan', 'Dillon', 'Dimitri', 'Dina', 'Dino', 'Dion', 'Dixie',\n    'Dock', 'Dolly', 'Dolores', 'Domenic', 'Domenica', 'Domenick', 'Domenico',\n    'Domingo', 'Dominic', 'Dominique', 'Don', 'Donald', 'Donato', 'Donavon',\n    'Donna', 'Donnell', 'Donnie', 'Donny', 'Dora', 'Dorcas', 'Dorian', 'Doris',\n    'Dorothea', 'Dorothy', 'Dorris', 'Dortha', 'Dorthy', 'Doug', 'Douglas',\n    'Dovie', 'Doyle', 'Drake', 'Drew', 'Duane', 'Dudley', 'Dulce', 'Duncan',\n    'Durward', 'Dustin', 'Dusty', 'Dwight', 'Dylan', 'Earl', 'Earlene',\n    'Earline', 'Earnest', 'Earnestine', 'Easter', 'Easton', 'Ebba', 'Ebony',\n    'Ed', 'Eda', 'Edd', 'Eddie', 'Eden', 'Edgar', 'Edgardo', 'Edison', 'Edmond',\n    'Edmund', 'Edna', 'Eduardo', 'Edward', 'Edwardo', 'Edwin', 'Edwina',\n    'Edyth', 'Edythe', 'Effie', 'Efrain', 'Efren', 'Eileen', 'Einar', 'Eino',\n    'Eladio', 'Elaina', 'Elbert', 'Elda', 'Eldon', 'Eldora', 'Eldred',\n    'Eldridge', 'Eleanora', 'Eleanore', 'Eleazar', 'Electa', 'Elena', 'Elenor',\n    'Elenora', 'Eleonore', 'Elfrieda', 'Eli', 'Elian', 'Eliane', 'Elias',\n    'Eliezer', 'Elijah', 'Elinor', 'Elinore', 'Elisa', 'Elisabeth', 'Elise',\n    'Eliseo', 'Elisha', 'Elissa', 'Eliza', 'Elizabeth', 'Ella', 'Ellen',\n    'Ellie', 'Elliot', 'Elliott', 'Ellis', 'Ellsworth', 'Elmer', 'Elmira',\n    'Elmo', 'Elmore', 'Elna', 'Elnora', 'Elody', 'Eloisa', 'Eloise', 'Elouise',\n    'Eloy', 'Elroy', 'Elsa', 'Else', 'Elsie', 'Elta', 'Elton', 'Elva', 'Elvera',\n    'Elvie', 'Elvis', 'Elwin', 'Elwyn', 'Elyse', 'Elyssa', 'Elza', 'Emanuel',\n    'Emelia', 'Emelie', 'Emely', 'Emerald', 'Emerson', 'Emery', 'Emie', 'Emil',\n    'Emile', 'Emilia', 'Emiliano', 'Emilie', 'Emilio', 'Emily', 'Emma',\n    'Emmalee', 'Emmanuel', 'Emmanuelle', 'Emmet', 'Emmett', 'Emmie', 'Emmitt',\n    'Emmy', 'Emory', 'Ena', 'Enid', 'Enoch', 'Enola', 'Enos', 'Enrico',\n    'Enrique', 'Ephraim', 'Era', 'Eriberto', 'Eric', 'Erica', 'Erich', 'Erick',\n    'Ericka', 'Erik', 'Erika', 'Erin', 'Erling', 'Erna', 'Ernest', 'Ernestina',\n    'Ernestine', 'Ernesto', 'Ernie', 'Ervin', 'Erwin', 'Eryn', 'Esmeralda',\n    'Esperanza', 'Esta', 'Esteban', 'Estefania', 'Estel', 'Estell', 'Estella',\n    'Estelle', 'Estevan', 'Esther', 'Estrella', 'Etha', 'Ethan', 'Ethel',\n    'Ethelyn', 'Ethyl', 'Ettie', 'Eudora', 'Eugene', 'Eugenia', 'Eula', 'Eulah',\n    'Eulalia', 'Euna', 'Eunice', 'Eusebio', 'Eva', 'Evalyn', 'Evan',\n    'Evangeline', 'Evans', 'Eve', 'Eveline', 'Evelyn', 'Everardo', 'Everett',\n    'Everette', 'Evert', 'Evie', 'Ewald', 'Ewell', 'Ezekiel', 'Ezequiel',\n    'Ezra', 'Fabian', 'Fabiola', 'Fae', 'Fannie', 'Fanny', 'Fatima', 'Faustino',\n    'Fausto', 'Favian', 'Fay', 'Faye', 'Federico', 'Felicia', 'Felicita',\n    'Felicity', 'Felipa', 'Felipe', 'Felix', 'Felton', 'Fermin', 'Fern',\n    'Fernando', 'Ferne', 'Fidel', 'Filiberto', 'Filomena', 'Finn', 'Fiona',\n    'Flavie', 'Flavio', 'Fleta', 'Fletcher', 'Flo', 'Florence', 'Florencio',\n    'Florian', 'Florida', 'Florine', 'Flossie', 'Floy', 'Floyd', 'Ford',\n    'Forest', 'Forrest', 'Foster', 'Frances', 'Francesca', 'Francesco',\n    'Francis', 'Francisca', 'Francisco', 'Franco', 'Frank', 'Frankie', 'Franz',\n    'Fred', 'Freda', 'Freddie', 'Freddy', 'Frederic', 'Frederick', 'Frederik',\n    'Frederique', 'Fredrick', 'Fredy', 'Freeda', 'Freeman', 'Freida', 'Frida',\n    'Frieda', 'Friedrich', 'Fritz', 'Furman', 'Gabe', 'Gabriel', 'Gabriella',\n    'Gabrielle', 'Gaetano', 'Gage', 'Gail', 'Gardner', 'Garett', 'Garfield',\n    'Garland', 'Garnet', 'Garnett', 'Garret', 'Garrett', 'Garrick', 'Garrison',\n    'Garry', 'Garth', 'Gaston', 'Gavin', 'Gay', 'Gayle', 'Gaylord', 'Gene',\n    'General', 'Genesis', 'Genevieve', 'Gennaro', 'Genoveva', 'Geo', 'Geoffrey',\n    'George', 'Georgette', 'Georgiana', 'Georgianna', 'Geovanni', 'Geovanny',\n    'Geovany', 'Gerald', 'Geraldine', 'Gerard', 'Gerardo', 'Gerda', 'Gerhard',\n    'Germaine', 'German', 'Gerry', 'Gerson', 'Gertrude', 'Gia', 'Gianni',\n    'Gideon', 'Gilbert', 'Gilberto', 'Gilda', 'Giles', 'Gillian', 'Gina',\n    'Gino', 'Giovani', 'Giovanna', 'Giovanni', 'Giovanny', 'Gisselle',\n    'Giuseppe', 'Gladyce', 'Gladys', 'Glen', 'Glenda', 'Glenna', 'Glennie',\n    'Gloria', 'Godfrey', 'Golda', 'Golden', 'Gonzalo', 'Gordon', 'Grace',\n    'Gracie', 'Graciela', 'Grady', 'Graham', 'Grant', 'Granville', 'Grayce',\n    'Grayson', 'Green', 'Greg', 'Gregg', 'Gregoria', 'Gregorio', 'Gregory',\n    'Greta', 'Gretchen', 'Greyson', 'Griffin', 'Grover', 'Guadalupe', 'Gudrun',\n    'Guido', 'Guillermo', 'Guiseppe', 'Gunnar', 'Gunner', 'Gus', 'Gussie',\n    'Gust', 'Gustave', 'Guy', 'Gwen', 'Gwendolyn', 'Hadley', 'Hailee', 'Hailey',\n    'Hailie', 'Hal', 'Haleigh', 'Haley', 'Halie', 'Halle', 'Hallie', 'Hank',\n    'Hanna', 'Hannah', 'Hans', 'Hardy', 'Harley', 'Harmon', 'Harmony', 'Harold',\n    'Harrison', 'Harry', 'Harvey', 'Haskell', 'Hassan', 'Hassie', 'Hattie',\n    'Haven', 'Hayden', 'Haylee', 'Hayley', 'Haylie', 'Hazel', 'Hazle', 'Heath',\n    'Heather', 'Heaven', 'Heber', 'Hector', 'Heidi', 'Helen', 'Helena',\n    'Helene', 'Helga', 'Hellen', 'Helmer', 'Heloise', 'Henderson', 'Henri',\n    'Henriette', 'Henry', 'Herbert', 'Herman', 'Hermann', 'Hermina', 'Herminia',\n    'Herminio', 'Hershel', 'Herta', 'Hertha', 'Hester', 'Hettie', 'Hilario',\n    'Hilbert', 'Hilda', 'Hildegard', 'Hillard', 'Hillary', 'Hilma', 'Hilton',\n    'Hipolito', 'Hiram', 'Hobart', 'Holden', 'Hollie', 'Hollis', 'Holly',\n    'Hope', 'Horace', 'Horacio', 'Hortense', 'Hosea', 'Houston', 'Howard',\n    'Howell', 'Hoyt', 'Hubert', 'Hudson', 'Hugh', 'Hulda', 'Humberto', 'Hunter',\n    'Hyman', 'Ian', 'Ibrahim', 'Icie', 'Ida', 'Idell', 'Idella', 'Ignacio',\n    'Ignatius', 'Ike', 'Ila', 'Ilene', 'Iliana', 'Ima', 'Imani', 'Imelda',\n    'Immanuel', 'Imogene', 'Ines', 'Irma', 'Irving', 'Irwin', 'Isaac', 'Isabel',\n    'Isabell', 'Isabella', 'Isabelle', 'Isac', 'Isadore', 'Isai', 'Isaiah',\n    'Isaias', 'Isidro', 'Ismael', 'Isobel', 'Isom', 'Israel', 'Issac', 'Itzel',\n    'Iva', 'Ivah', 'Ivory', 'Ivy', 'Izabella', 'Izaiah', 'Jabari', 'Jace',\n    'Jacey', 'Jacinthe', 'Jacinto', 'Jack', 'Jackeline', 'Jackie', 'Jacklyn',\n    'Jackson', 'Jacky', 'Jaclyn', 'Jacquelyn', 'Jacques', 'Jacynthe', 'Jada',\n    'Jade', 'Jaden', 'Jadon', 'Jadyn', 'Jaeden', 'Jaida', 'Jaiden', 'Jailyn',\n    'Jaime', 'Jairo', 'Jakayla', 'Jake', 'Jakob', 'Jaleel', 'Jalen', 'Jalon',\n    'Jalyn', 'Jamaal', 'Jamal', 'Jamar', 'Jamarcus', 'Jamel', 'Jameson',\n    'Jamey', 'Jamie', 'Jamil', 'Jamir', 'Jamison', 'Jammie', 'Jan', 'Jana',\n    'Janae', 'Jane', 'Janelle', 'Janessa', 'Janet', 'Janice', 'Janick', 'Janie',\n    'Janis', 'Janiya', 'Jannie', 'Jany', 'Jaquan', 'Jaquelin', 'Jaqueline',\n    'Jared', 'Jaren', 'Jarod', 'Jaron', 'Jarred', 'Jarrell', 'Jarret',\n    'Jarrett', 'Jarrod', 'Jarvis', 'Jasen', 'Jasmin', 'Jason', 'Jasper',\n    'Jaunita', 'Javier', 'Javon', 'Javonte', 'Jay', 'Jayce', 'Jaycee', 'Jayda',\n    'Jayde', 'Jayden', 'Jaydon', 'Jaylan', 'Jaylen', 'Jaylin', 'Jaylon',\n    'Jayme', 'Jayne', 'Jayson', 'Jazlyn', 'Jazmin', 'Jazmyn', 'Jazmyne', 'Jean',\n    'Jeanette', 'Jeanie', 'Jeanne', 'Jed', 'Jedediah', 'Jedidiah', 'Jeff',\n    'Jefferey', 'Jeffery', 'Jeffrey', 'Jeffry', 'Jena', 'Jenifer', 'Jennie',\n    'Jennifer', 'Jennings', 'Jennyfer', 'Jensen', 'Jerad', 'Jerald', 'Jeramie',\n    'Jeramy', 'Jerel', 'Jeremie', 'Jeremy', 'Jermain', 'Jermaine', 'Jermey',\n    'Jerod', 'Jerome', 'Jeromy', 'Jerrell', 'Jerrod', 'Jerrold', 'Jerry',\n    'Jess', 'Jesse', 'Jessica', 'Jessie', 'Jessika', 'Jessy', 'Jessyca',\n    'Jesus', 'Jett', 'Jettie', 'Jevon', 'Jewel', 'Jewell', 'Jillian', 'Jimmie',\n    'Jimmy', 'Jo', 'Joan', 'Joana', 'Joanie', 'Joanne', 'Joannie', 'Joanny',\n    'Joany', 'Joaquin', 'Jocelyn', 'Jodie', 'Jody', 'Joe', 'Joel', 'Joelle',\n    'Joesph', 'Joey', 'Johan', 'Johann', 'Johanna', 'Johathan', 'John',\n    'Johnathan', 'Johnathon', 'Johnnie', 'Johnny', 'Johnpaul', 'Johnson',\n    'Jolie', 'Jon', 'Jonas', 'Jonatan', 'Jonathan', 'Jonathon', 'Jordan',\n    'Jordane', 'Jordi', 'Jordon', 'Jordy', 'Jordyn', 'Jorge', 'Jose', 'Josefa',\n    'Josefina', 'Joseph', 'Josephine', 'Josh', 'Joshua', 'Joshuah', 'Josiah',\n    'Josiane', 'Josianne', 'Josie', 'Josue', 'Jovan', 'Jovani', 'Jovanny',\n    'Jovany', 'Joy', 'Joyce', 'Juana', 'Juanita', 'Judah', 'Judd', 'Jude',\n    'Judge', 'Judson', 'Judy', 'Jules', 'Julia', 'Julian', 'Juliana',\n    'Julianne', 'Julie', 'Julien', 'Juliet', 'Julio', 'Julius', 'June',\n    'Junior', 'Junius', 'Justen', 'Justice', 'Justina', 'Justine', 'Juston',\n    'Justus', 'Justyn', 'Juvenal', 'Juwan', 'Kacey', 'Kaci', 'Kacie', 'Kade',\n    'Kaden', 'Kadin', 'Kaela', 'Kaelyn', 'Kaia', 'Kailee', 'Kailey', 'Kailyn',\n    'Kaitlin', 'Kaitlyn', 'Kale', 'Kaleb', 'Kaleigh', 'Kaley', 'Kali', 'Kallie',\n    'Kameron', 'Kamille', 'Kamren', 'Kamron', 'Kamryn', 'Kane', 'Kara',\n    'Kareem', 'Karelle', 'Karen', 'Kari', 'Kariane', 'Karianne', 'Karina',\n    'Karine', 'Karl', 'Karlee', 'Karley', 'Karli', 'Karlie', 'Karolann',\n    'Karson', 'Kasandra', 'Kasey', 'Kassandra', 'Katarina', 'Katelin',\n    'Katelyn', 'Katelynn', 'Katharina', 'Katherine', 'Katheryn', 'Kathleen',\n    'Kathlyn', 'Kathryn', 'Kathryne', 'Katlyn', 'Katlynn', 'Katrina', 'Katrine',\n    'Kattie', 'Kavon', 'Kay', 'Kaya', 'Kaycee', 'Kayden', 'Kayla', 'Kaylah',\n    'Kaylee', 'Kayleigh', 'Kayley', 'Kayli', 'Kaylie', 'Kaylin', 'Keagan',\n    'Keanu', 'Keara', 'Keaton', 'Keegan', 'Keeley', 'Keely', 'Keenan', 'Keira',\n    'Keith', 'Kellen', 'Kelley', 'Kelli', 'Kellie', 'Kelly', 'Kelsi', 'Kelsie',\n    'Kelton', 'Kelvin', 'Ken', 'Kendall', 'Kendra', 'Kendrick', 'Kenna',\n    'Kennedi', 'Kennedy', 'Kenneth', 'Kennith', 'Kenny', 'Kenton', 'Kenya',\n    'Kenyatta', 'Kenyon', 'Keon', 'Keshaun', 'Keshawn', 'Keven', 'Kevin',\n    'Kevon', 'Keyon', 'Keyshawn', 'Khalid', 'Khalil', 'Kian', 'Kiana', 'Kianna',\n    'Kiara', 'Kiarra', 'Kiel', 'Kiera', 'Kieran', 'Kiley', 'Kim', 'Kimberly',\n    'King', 'Kip', 'Kira', 'Kirk', 'Kirsten', 'Kirstin', 'Kitty', 'Kobe',\n    'Koby', 'Kody', 'Kolby', 'Kole', 'Korbin', 'Korey', 'Kory', 'Kraig', 'Kris',\n    'Krista', 'Kristian', 'Kristin', 'Kristina', 'Kristofer', 'Kristoffer',\n    'Kristopher', 'Kristy', 'Krystal', 'Krystel', 'Krystina', 'Kurt', 'Kurtis',\n    'Kyla', 'Kyle', 'Kylee', 'Kyleigh', 'Kyler', 'Kylie', 'Kyra', 'Lacey',\n    'Lacy', 'Ladarius', 'Lafayette', 'Laila', 'Laisha', 'Lamar', 'Lambert',\n    'Lamont', 'Lance', 'Landen', 'Lane', 'Laney', 'Larissa', 'Laron', 'Larry',\n    'Larue', 'Laura', 'Laurel', 'Lauren', 'Laurence', 'Lauretta', 'Lauriane',\n    'Laurianne', 'Laurie', 'Laurine', 'Laury', 'Lauryn', 'Lavada', 'Lavern',\n    'Laverna', 'Laverne', 'Lavina', 'Lavinia', 'Lavon', 'Lavonne', 'Lawrence',\n    'Lawson', 'Layla', 'Layne', 'Lazaro', 'Lea', 'Leann', 'Leanna', 'Leanne',\n    'Leatha', 'Leda', 'Lee', 'Leif', 'Leila', 'Leilani', 'Lela', 'Lelah',\n    'Leland', 'Lelia', 'Lempi', 'Lemuel', 'Lenna', 'Lennie', 'Lenny', 'Lenora',\n    'Lenore', 'Leo', 'Leola', 'Leon', 'Leonard', 'Leonardo', 'Leone', 'Leonel',\n    'Leonie', 'Leonor', 'Leonora', 'Leopold', 'Leopoldo', 'Leora', 'Lera',\n    'Lesley', 'Leslie', 'Lesly', 'Lessie', 'Lester', 'Leta', 'Letha', 'Letitia',\n    'Levi', 'Lew', 'Lewis', 'Lexi', 'Lexie', 'Lexus', 'Lia', 'Liam', 'Liana',\n    'Libbie', 'Libby', 'Lila', 'Lilian', 'Liliana', 'Liliane', 'Lilla',\n    'Lillian', 'Lilliana', 'Lillie', 'Lilly', 'Lily', 'Lilyan', 'Lina',\n    'Lincoln', 'Linda', 'Lindsay', 'Lindsey', 'Linnea', 'Linnie', 'Linwood',\n    'Lionel', 'Lisa', 'Lisandro', 'Lisette', 'Litzy', 'Liza', 'Lizeth',\n    'Lizzie', 'Llewellyn', 'Lloyd', 'Logan', 'Lois', 'Lola', 'Lolita', 'Loma',\n    'Lon', 'London', 'Lonie', 'Lonnie', 'Lonny', 'Lonzo', 'Lora', 'Loraine',\n    'Loren', 'Lorena', 'Lorenz', 'Lorenza', 'Lorenzo', 'Lori', 'Lorine',\n    'Lorna', 'Lottie', 'Lou', 'Louie', 'Louisa', 'Lourdes', 'Louvenia',\n    'Lowell', 'Loy', 'Loyal', 'Loyce', 'Lucas', 'Luciano', 'Lucie', 'Lucienne',\n    'Lucile', 'Lucinda', 'Lucio', 'Lucious', 'Lucius', 'Lucy', 'Ludie',\n    'Ludwig', 'Lue', 'Luella', 'Luigi', 'Luis', 'Luisa', 'Lukas', 'Lula',\n    'Lulu', 'Luna', 'Lupe', 'Lura', 'Lurline', 'Luther', 'Luz', 'Lyda', 'Lydia',\n    'Lyla', 'Lynn', 'Lyric', 'Lysanne', 'Mabel', 'Mabelle', 'Mable', 'Mac',\n    'Macey', 'Maci', 'Macie', 'Mack', 'Mackenzie', 'Macy', 'Madaline',\n    'Madalyn', 'Maddison', 'Madeline', 'Madelyn', 'Madelynn', 'Madge', 'Madie',\n    'Madilyn', 'Madisen', 'Madison', 'Madisyn', 'Madonna', 'Madyson', 'Mae',\n    'Maegan', 'Maeve', 'Mafalda', 'Magali', 'Magdalen', 'Magdalena', 'Maggie',\n    'Magnolia', 'Magnus', 'Maia', 'Maida', 'Maiya', 'Major', 'Makayla',\n    'Makenna', 'Makenzie', 'Malachi', 'Malcolm', 'Malika', 'Malinda', 'Mallie',\n    'Mallory', 'Malvina', 'Mandy', 'Manley', 'Manuel', 'Manuela', 'Mara',\n    'Marc', 'Marcel', 'Marcelina', 'Marcelino', 'Marcella', 'Marcelle',\n    'Marcellus', 'Marcelo', 'Marcia', 'Marco', 'Marcos', 'Marcus', 'Margaret',\n    'Margarete', 'Margarett', 'Margaretta', 'Margarette', 'Margarita', 'Marge',\n    'Margie', 'Margot', 'Margret', 'Marguerite', 'Maria', 'Mariah', 'Mariam',\n    'Marian', 'Mariana', 'Mariane', 'Marianna', 'Marianne', 'Mariano',\n    'Maribel', 'Marie', 'Mariela', 'Marielle', 'Marietta', 'Marilie', 'Marilou',\n    'Marilyne', 'Marina', 'Mario', 'Marion', 'Marisa', 'Marisol', 'Maritza',\n    'Marjolaine', 'Marjorie', 'Marjory', 'Mark', 'Markus', 'Marlee', 'Marlen',\n    'Marlene', 'Marley', 'Marlin', 'Marlon', 'Marques', 'Marquis', 'Marquise',\n    'Marshall', 'Marta', 'Martin', 'Martina', 'Martine', 'Marty', 'Marvin',\n    'Mary', 'Maryam', 'Maryjane', 'Maryse', 'Mason', 'Mateo', 'Mathew',\n    'Mathias', 'Mathilde', 'Matilda', 'Matilde', 'Matt', 'Matteo', 'Mattie',\n    'Maud', 'Maude', 'Maudie', 'Maureen', 'Maurice', 'Mauricio', 'Maurine',\n    'Maverick', 'Mavis', 'Max', 'Maxie', 'Maxime', 'Maximilian', 'Maximillia',\n    'Maximillian', 'Maximo', 'Maximus', 'Maxine', 'Maxwell', 'May', 'Maya',\n    'Maybell', 'Maybelle', 'Maye', 'Maymie', 'Maynard', 'Mayra', 'Mazie',\n    'Mckayla', 'Mckenna', 'Mckenzie', 'Meagan', 'Meaghan', 'Meda', 'Megane',\n    'Meggie', 'Meghan', 'Mekhi', 'Melany', 'Melba', 'Melisa', 'Melissa',\n    'Mellie', 'Melody', 'Melvin', 'Melvina', 'Melyna', 'Melyssa', 'Mercedes',\n    'Meredith', 'Merl', 'Merle', 'Merlin', 'Merritt', 'Mertie', 'Mervin',\n    'Meta', 'Mia', 'Micaela', 'Micah', 'Michael', 'Michaela', 'Michale',\n    'Micheal', 'Michel', 'Michele', 'Michelle', 'Miguel', 'Mikayla', 'Mike',\n    'Mikel', 'Milan', 'Miles', 'Milford', 'Miller', 'Millie', 'Milo', 'Milton',\n    'Mina', 'Minerva', 'Minnie', 'Miracle', 'Mireille', 'Mireya', 'Misael',\n    'Missouri', 'Misty', 'Mitchel', 'Mitchell', 'Mittie', 'Modesta', 'Modesto',\n    'Mohamed', 'Mohammad', 'Mohammed', 'Moises', 'Mollie', 'Molly', 'Mona',\n    'Monica', 'Monique', 'Monroe', 'Monserrat', 'Monserrate', 'Montana',\n    'Monte', 'Monty', 'Morgan', 'Moriah', 'Morris', 'Mortimer', 'Morton',\n    'Mose', 'Moses', 'Moshe', 'Mossie', 'Mozell', 'Mozelle', 'Muhammad',\n    'Muriel', 'Murl', 'Murphy', 'Murray', 'Mustafa', 'Mya', 'Myah', 'Mylene',\n    'Myles', 'Myra', 'Myriam', 'Myrl', 'Myrna', 'Myron', 'Myrtice', 'Myrtie',\n    'Myrtis', 'Myrtle', 'Nadia', 'Nakia', 'Name', 'Nannie', 'Naomi', 'Naomie',\n    'Napoleon', 'Narciso', 'Nash', 'Nasir', 'Nat', 'Natalia', 'Natalie',\n    'Natasha', 'Nathan', 'Nathanael', 'Nathanial', 'Nathaniel', 'Nathen',\n    'Nayeli', 'Neal', 'Ned', 'Nedra', 'Neha', 'Neil', 'Nelda', 'Nella', 'Nelle',\n    'Nellie', 'Nels', 'Nelson', 'Neoma', 'Nestor', 'Nettie', 'Neva', 'Newell',\n    'Newton', 'Nia', 'Nicholas', 'Nicholaus', 'Nichole', 'Nick', 'Nicklaus',\n    'Nickolas', 'Nico', 'Nicola', 'Nicolas', 'Nicole', 'Nicolette', 'Nigel',\n    'Nikita', 'Nikki', 'Nikko', 'Niko', 'Nikolas', 'Nils', 'Nina', 'Noah',\n    'Noble', 'Noe', 'Noel', 'Noelia', 'Noemi', 'Noemie', 'Noemy', 'Nola',\n    'Nolan', 'Nona', 'Nora', 'Norbert', 'Norberto', 'Norene', 'Norma', 'Norris',\n    'Norval', 'Norwood', 'Nova', 'Novella', 'Nya', 'Nyah', 'Nyasia', 'Obie',\n    'Oceane', 'Ocie', 'Octavia', 'Oda', 'Odell', 'Odessa', 'Odie', 'Ofelia',\n    'Okey', 'Ola', 'Olaf', 'Ole', 'Olen', 'Oleta', 'Olga', 'Olin', 'Oliver',\n    'Ollie', 'Oma', 'Omari', 'Omer', 'Ona', 'Onie', 'Opal', 'Ophelia', 'Ora',\n    'Oral', 'Oran', 'Oren', 'Orie', 'Orin', 'Orion', 'Orland', 'Orlando',\n    'Orlo', 'Orpha', 'Orrin', 'Orval', 'Orville', 'Osbaldo', 'Osborne', 'Oscar',\n    'Osvaldo', 'Oswald', 'Oswaldo', 'Otha', 'Otho', 'Otilia', 'Otis', 'Ottilie',\n    'Ottis', 'Otto', 'Ova', 'Owen', 'Ozella', 'Pablo', 'Paige', 'Palma',\n    'Pamela', 'Pansy', 'Paolo', 'Paris', 'Parker', 'Pascale', 'Pasquale', 'Pat',\n    'Patience', 'Patricia', 'Patrick', 'Patsy', 'Pattie', 'Paul', 'Paula',\n    'Pauline', 'Paxton', 'Payton', 'Pearl', 'Pearlie', 'Pearline', 'Pedro',\n    'Peggie', 'Penelope', 'Percival', 'Percy', 'Perry', 'Pete', 'Peter',\n    'Petra', 'Peyton', 'Philip', 'Phoebe', 'Phyllis', 'Pierce', 'Pierre',\n    'Pietro', 'Pink', 'Pinkie', 'Piper', 'Polly', 'Porter', 'Precious',\n    'Presley', 'Preston', 'Price', 'Prince', 'Princess', 'Priscilla',\n    'Providenci', 'Prudence', 'Queen', 'Queenie', 'Quentin', 'Quincy', 'Quinn',\n    'Quinten', 'Quinton', 'Rachael', 'Rachel', 'Rachelle', 'Rae', 'Raegan',\n    'Rafael', 'Rafaela', 'Raheem', 'Rahsaan', 'Rahul', 'Raina', 'Raleigh',\n    'Ralph', 'Ramiro', 'Ramon', 'Ramona', 'Randal', 'Randall', 'Randi', 'Randy',\n    'Ransom', 'Raoul', 'Raphael', 'Raphaelle', 'Raquel', 'Rashad', 'Rashawn',\n    'Rasheed', 'Raul', 'Raven', 'Ray', 'Raymond', 'Raymundo', 'Reagan',\n    'Reanna', 'Reba', 'Rebeca', 'Rebecca', 'Rebeka', 'Rebekah', 'Reece', 'Reed',\n    'Reese', 'Regan', 'Reggie', 'Reginald', 'Reid', 'Reilly', 'Reina',\n    'Reinhold', 'Remington', 'Rene', 'Renee', 'Ressie', 'Reta', 'Retha',\n    'Retta', 'Reuben', 'Reva', 'Rex', 'Rey', 'Reyes', 'Reymundo', 'Reyna',\n    'Reynold', 'Rhea', 'Rhett', 'Rhianna', 'Rhiannon', 'Rhoda', 'Ricardo',\n    'Richard', 'Richie', 'Richmond', 'Rick', 'Rickey', 'Rickie', 'Ricky',\n    'Rico', 'Rigoberto', 'Riley', 'Rita', 'River', 'Robb', 'Robbie', 'Robert',\n    'Roberta', 'Roberto', 'Robin', 'Robyn', 'Rocio', 'Rocky', 'Rod', 'Roderick',\n    'Rodger', 'Rodolfo', 'Rodrick', 'Rodrigo', 'Roel', 'Rogelio', 'Roger',\n    'Rogers', 'Rolando', 'Rollin', 'Roma', 'Romaine', 'Roman', 'Ron', 'Ronaldo',\n    'Ronny', 'Roosevelt', 'Rory', 'Rosa', 'Rosalee', 'Rosalia', 'Rosalind',\n    'Rosalinda', 'Rosalyn', 'Rosamond', 'Rosanna', 'Rosario', 'Roscoe', 'Rose',\n    'Rosella', 'Roselyn', 'Rosemarie', 'Rosemary', 'Rosendo', 'Rosetta',\n    'Rosie', 'Rosina', 'Roslyn', 'Ross', 'Rossie', 'Rowan', 'Rowena', 'Rowland',\n    'Roxane', 'Roxanne', 'Roy', 'Royal', 'Royce', 'Rozella', 'Ruben', 'Rubie',\n    'Ruby', 'Rubye', 'Rudolph', 'Rudy', 'Rupert', 'Russ', 'Russel', 'Russell',\n    'Rusty', 'Ruth', 'Ruthe', 'Ruthie', 'Ryan', 'Ryann', 'Ryder', 'Rylan',\n    'Rylee', 'Ryleigh', 'Ryley', 'Sabina', 'Sabrina', 'Sabryna', 'Sadie',\n    'Sadye', 'Sage', 'Saige', 'Sallie', 'Sally', 'Salma', 'Salvador',\n    'Salvatore', 'Sam', 'Samanta', 'Samantha', 'Samara', 'Samir', 'Sammie',\n    'Sammy', 'Samson', 'Sandra', 'Sandrine', 'Sandy', 'Sanford', 'Santa',\n    'Santiago', 'Santina', 'Santino', 'Santos', 'Sarah', 'Sarai', 'Sarina',\n    'Sasha', 'Saul', 'Savanah', 'Savanna', 'Savannah', 'Savion', 'Scarlett',\n    'Schuyler', 'Scot', 'Scottie', 'Scotty', 'Seamus', 'Sean', 'Sebastian',\n    'Sedrick', 'Selena', 'Selina', 'Selmer', 'Serena', 'Serenity', 'Seth',\n    'Shad', 'Shaina', 'Shakira', 'Shana', 'Shane', 'Shanel', 'Shanelle',\n    'Shania', 'Shanie', 'Shaniya', 'Shanna', 'Shannon', 'Shanny', 'Shanon',\n    'Shany', 'Sharon', 'Shaun', 'Shawn', 'Shawna', 'Shaylee', 'Shayna',\n    'Shayne', 'Shea', 'Sheila', 'Sheldon', 'Shemar', 'Sheridan', 'Sherman',\n    'Sherwood', 'Shirley', 'Shyann', 'Shyanne', 'Sibyl', 'Sid', 'Sidney',\n    'Sienna', 'Sierra', 'Sigmund', 'Sigrid', 'Sigurd', 'Silas', 'Sim', 'Simeon',\n    'Simone', 'Sincere', 'Sister', 'Skye', 'Skyla', 'Skylar', 'Sofia',\n    'Soledad', 'Solon', 'Sonia', 'Sonny', 'Sonya', 'Sophia', 'Sophie',\n    'Spencer', 'Stacey', 'Stacy', 'Stan', 'Stanford', 'Stanley', 'Stanton',\n    'Stefan', 'Stefanie', 'Stella', 'Stephan', 'Stephania', 'Stephanie',\n    'Stephany', 'Stephen', 'Stephon', 'Sterling', 'Steve', 'Stevie', 'Stewart',\n    'Stone', 'Stuart', 'Summer', 'Sunny', 'Susan', 'Susana', 'Susanna', 'Susie',\n    'Suzanne', 'Sven', 'Syble', 'Sydnee', 'Sydney', 'Sydni', 'Sydnie', 'Sylvan',\n    'Sylvester', 'Sylvia', 'Tabitha', 'Tad', 'Talia', 'Talon', 'Tamara',\n    'Tamia', 'Tania', 'Tanner', 'Tanya', 'Tara', 'Taryn', 'Tate', 'Tatum',\n    'Tatyana', 'Taurean', 'Tavares', 'Taya', 'Taylor', 'Teagan', 'Ted', 'Telly',\n    'Terence', 'Teresa', 'Terrance', 'Terrell', 'Terrence', 'Terrill', 'Terry',\n    'Tess', 'Tessie', 'Tevin', 'Thad', 'Thaddeus', 'Thalia', 'Thea', 'Thelma',\n    'Theo', 'Theodora', 'Theodore', 'Theresa', 'Therese', 'Theresia', 'Theron',\n    'Thomas', 'Thora', 'Thurman', 'Tia', 'Tiana', 'Tianna', 'Tiara', 'Tierra',\n    'Tiffany', 'Tillman', 'Timmothy', 'Timmy', 'Timothy', 'Tina', 'Tito',\n    'Titus', 'Tobin', 'Toby', 'Tod', 'Tom', 'Tomas', 'Tomasa', 'Tommie',\n    'Toney', 'Toni', 'Tony', 'Torey', 'Torrance', 'Torrey', 'Toy', 'Trace',\n    'Tracey', 'Tracy', 'Travis', 'Travon', 'Tre', 'Tremaine', 'Tremayne',\n    'Trent', 'Trenton', 'Tressa', 'Tressie', 'Treva', 'Trever', 'Trevion',\n    'Trevor', 'Trey', 'Trinity', 'Trisha', 'Tristian', 'Tristin', 'Triston',\n    'Troy', 'Trudie', 'Trycia', 'Trystan', 'Turner', 'Twila', 'Tyler', 'Tyra',\n    'Tyree', 'Tyreek', 'Tyrel', 'Tyrell', 'Tyrese', 'Tyrique', 'Tyshawn',\n    'Tyson', 'Ubaldo', 'Ulices', 'Ulises', 'Una', 'Unique', 'Urban', 'Uriah',\n    'Uriel', 'Ursula', 'Vada', 'Valentin', 'Valentina', 'Valentine', 'Valerie',\n    'Vallie', 'Van', 'Vance', 'Vanessa', 'Vaughn', 'Veda', 'Velda', 'Vella',\n    'Velma', 'Velva', 'Vena', 'Verda', 'Verdie', 'Vergie', 'Verla', 'Verlie',\n    'Vern', 'Verna', 'Verner', 'Vernice', 'Vernie', 'Vernon', 'Verona',\n    'Veronica', 'Vesta', 'Vicenta', 'Vicente', 'Vickie', 'Vicky', 'Victor',\n    'Victoria', 'Vida', 'Vidal', 'Vilma', 'Vince', 'Vincent', 'Vincenza',\n    'Vincenzo', 'Vinnie', 'Viola', 'Violet', 'Violette', 'Virgie', 'Virgil',\n    'Virginia', 'Virginie', 'Vita', 'Vito', 'Viva', 'Vivian', 'Viviane',\n    'Vivianne', 'Vivien', 'Vivienne', 'Vladimir', 'Wade', 'Waino', 'Waldo',\n    'Walker', 'Wallace', 'Walter', 'Walton', 'Wanda', 'Ward', 'Warren',\n    'Watson', 'Wava', 'Waylon', 'Wayne', 'Webster', 'Weldon', 'Wellington',\n    'Wendell', 'Wendy', 'Werner', 'Westley', 'Weston', 'Whitney', 'Wilber',\n    'Wilbert', 'Wilburn', 'Wiley', 'Wilford', 'Wilfred', 'Wilfredo', 'Wilfrid',\n    'Wilhelm', 'Wilhelmine', 'Will', 'Willa', 'Willard', 'William', 'Willie',\n    'Willis', 'Willow', 'Willy', 'Wilma', 'Wilmer', 'Wilson', 'Wilton',\n    'Winfield', 'Winifred', 'Winnifred', 'Winona', 'Winston', 'Woodrow',\n    'Wyatt', 'Wyman', 'Xander', 'Xavier', 'Xzavier', 'Yadira', 'Yasmeen',\n    'Yasmin', 'Yasmine', 'Yazmin', 'Yesenia', 'Yessenia', 'Yolanda', 'Yoshiko',\n    'Yvette', 'Yvonne', 'Zachariah', 'Zachary', 'Zachery', 'Zack', 'Zackary',\n    'Zackery', 'Zakary', 'Zander', 'Zane', 'Zaria', 'Zechariah', 'Zelda',\n    'Zella', 'Zelma', 'Zena', 'Zetta', 'Zion', 'Zita', 'Zoe', 'Zoey', 'Zoie',\n    'Zoila', 'Zola', 'Zora', 'Zula'\n];\n\n/**\n * Generate random username.\n * @returns {string} random username\n */\nfunction generateUsername() {\n    const name = RandomUtil.randomElement(names);\n    const suffix = RandomUtil.randomAlphanumStr(3);\n\n    return `${name}-${suffix}`;\n}\n\nmodule.exports = {\n    generateUsername\n};\n","import browser from '../browser';\nimport { browsers } from 'js-utils';\n\nimport * as StatisticsEvents from '../../service/statistics/Events';\nimport * as MediaType from '../../service/RTC/MediaType';\n\nconst GlobalOnErrorHandler = require('../util/GlobalOnErrorHandler');\nconst logger = require('jitsi-meet-logger').getLogger(__filename);\n\n/**\n * The lib-jitsi-meet browser-agnostic names of the browser-specific keys\n * reported by RTCPeerConnection#getStats mapped by browser.\n */\nconst KEYS_BY_BROWSER_TYPE = {};\n\nKEYS_BY_BROWSER_TYPE[browsers.FIREFOX] = {\n    'ssrc': 'ssrc',\n    'packetsReceived': 'packetsReceived',\n    'packetsLost': 'packetsLost',\n    'packetsSent': 'packetsSent',\n    'bytesReceived': 'bytesReceived',\n    'bytesSent': 'bytesSent',\n    'framerateMean': 'framerateMean',\n    'ip': 'ipAddress',\n    'port': 'portNumber',\n    'protocol': 'transport'\n};\nKEYS_BY_BROWSER_TYPE[browsers.CHROME] = {\n    'receiveBandwidth': 'googAvailableReceiveBandwidth',\n    'sendBandwidth': 'googAvailableSendBandwidth',\n    'remoteAddress': 'googRemoteAddress',\n    'transportType': 'googTransportType',\n    'localAddress': 'googLocalAddress',\n    'activeConnection': 'googActiveConnection',\n    'ssrc': 'ssrc',\n    'packetsReceived': 'packetsReceived',\n    'packetsSent': 'packetsSent',\n    'packetsLost': 'packetsLost',\n    'bytesReceived': 'bytesReceived',\n    'bytesSent': 'bytesSent',\n    'googFrameHeightReceived': 'googFrameHeightReceived',\n    'googFrameWidthReceived': 'googFrameWidthReceived',\n    'googFrameHeightSent': 'googFrameHeightSent',\n    'googFrameWidthSent': 'googFrameWidthSent',\n    'googFrameRateReceived': 'googFrameRateReceived',\n    'googFrameRateSent': 'googFrameRateSent',\n    'audioInputLevel': 'audioInputLevel',\n    'audioOutputLevel': 'audioOutputLevel',\n    'currentRoundTripTime': 'googRtt',\n    'remoteCandidateType': 'googRemoteCandidateType',\n    'localCandidateType': 'googLocalCandidateType',\n    'ip': 'ip',\n    'port': 'port',\n    'protocol': 'protocol'\n};\nKEYS_BY_BROWSER_TYPE[browsers.EDGE] = {\n    'sendBandwidth': 'googAvailableSendBandwidth',\n    'remoteAddress': 'remoteAddress',\n    'transportType': 'protocol',\n    'localAddress': 'localAddress',\n    'activeConnection': 'activeConnection',\n    'ssrc': 'ssrc',\n    'packetsReceived': 'packetsReceived',\n    'packetsSent': 'packetsSent',\n    'packetsLost': 'packetsLost',\n    'bytesReceived': 'bytesReceived',\n    'bytesSent': 'bytesSent',\n    'googFrameHeightReceived': 'frameHeight',\n    'googFrameWidthReceived': 'frameWidth',\n    'googFrameHeightSent': 'frameHeight',\n    'googFrameWidthSent': 'frameWidth',\n    'googFrameRateReceived': 'framesPerSecond',\n    'googFrameRateSent': 'framesPerSecond',\n    'audioInputLevel': 'audioLevel',\n    'audioOutputLevel': 'audioLevel',\n    'currentRoundTripTime': 'roundTripTime'\n};\nKEYS_BY_BROWSER_TYPE[browsers.OPERA]\n    = KEYS_BY_BROWSER_TYPE[browsers.CHROME];\nKEYS_BY_BROWSER_TYPE[browsers.NWJS]\n    = KEYS_BY_BROWSER_TYPE[browsers.CHROME];\nKEYS_BY_BROWSER_TYPE[browsers.ELECTRON]\n    = KEYS_BY_BROWSER_TYPE[browsers.CHROME];\nKEYS_BY_BROWSER_TYPE[browsers.SAFARI]\n    = KEYS_BY_BROWSER_TYPE[browsers.CHROME];\nKEYS_BY_BROWSER_TYPE[browsers.REACT_NATIVE]\n    = KEYS_BY_BROWSER_TYPE[browsers.CHROME];\n\n/**\n * Calculates packet lost percent using the number of lost packets and the\n * number of all packet.\n * @param lostPackets the number of lost packets\n * @param totalPackets the number of all packets.\n * @returns {number} packet loss percent\n */\nfunction calculatePacketLoss(lostPackets, totalPackets) {\n    if (!totalPackets || totalPackets <= 0\n            || !lostPackets || lostPackets <= 0) {\n        return 0;\n    }\n\n    return Math.round((lostPackets / totalPackets) * 100);\n}\n\n/**\n * Holds \"statistics\" for a single SSRC.\n * @constructor\n */\nfunction SsrcStats() {\n    this.loss = {};\n    this.bitrate = {\n        download: 0,\n        upload: 0\n    };\n    this.resolution = {};\n    this.framerate = 0;\n}\n\n/**\n * Sets the \"loss\" object.\n * @param loss the value to set.\n */\nSsrcStats.prototype.setLoss = function(loss) {\n    this.loss = loss || {};\n};\n\n/**\n * Sets resolution that belong to the ssrc represented by this instance.\n * @param resolution new resolution value to be set.\n */\nSsrcStats.prototype.setResolution = function(resolution) {\n    this.resolution = resolution || {};\n};\n\n/**\n * Adds the \"download\" and \"upload\" fields from the \"bitrate\" parameter to\n * the respective fields of the \"bitrate\" field of this object.\n * @param bitrate an object holding the values to add.\n */\nSsrcStats.prototype.addBitrate = function(bitrate) {\n    this.bitrate.download += bitrate.download;\n    this.bitrate.upload += bitrate.upload;\n};\n\n/**\n * Resets the bit rate for given <tt>ssrc</tt> that belong to the peer\n * represented by this instance.\n */\nSsrcStats.prototype.resetBitrate = function() {\n    this.bitrate.download = 0;\n    this.bitrate.upload = 0;\n};\n\n/**\n * Sets the \"framerate\".\n * @param framerate the value to set.\n */\nSsrcStats.prototype.setFramerate = function(framerate) {\n    this.framerate = framerate || 0;\n};\n\n/**\n *\n */\nfunction ConferenceStats() {\n\n    /**\n     * The bandwidth\n     * @type {{}}\n     */\n    this.bandwidth = {};\n\n    /**\n     * The bit rate\n     * @type {{}}\n     */\n    this.bitrate = {};\n\n    /**\n     * The packet loss rate\n     * @type {{}}\n     */\n    this.packetLoss = null;\n\n    /**\n     * Array with the transport information.\n     * @type {Array}\n     */\n    this.transport = [];\n}\n\n/* eslint-disable max-params */\n\n/**\n * <tt>StatsCollector</tt> registers for stats updates of given\n * <tt>peerconnection</tt> in given <tt>interval</tt>. On each update particular\n * stats are extracted and put in {@link SsrcStats} objects. Once the processing\n * is done <tt>audioLevelsUpdateCallback</tt> is called with <tt>this</tt>\n * instance as an event source.\n *\n * @param peerconnection WebRTC PeerConnection object.\n * @param audioLevelsInterval\n * @param statsInterval stats refresh interval given in ms.\n * @param eventEmitter\n * @constructor\n */\nexport default function StatsCollector(\n        peerconnection,\n        audioLevelsInterval,\n        statsInterval,\n        eventEmitter) {\n    // StatsCollector depends entirely on the format of the reports returned by\n    // RTCPeerConnection#getStats. Given that the value of\n    // browser#getName() is very unlikely to change at runtime, it\n    // makes sense to discover whether StatsCollector supports the executing\n    // browser as soon as possible. Otherwise, (1) getStatValue would have to\n    // needlessly check a \"static\" condition multiple times very very often and\n    // (2) the lack of support for the executing browser would be discovered and\n    // reported multiple times very very often too late in the execution in some\n    // totally unrelated callback.\n    /**\n     * The browser type supported by this StatsCollector. In other words, the\n     * type of the browser which initialized this StatsCollector\n     * instance.\n     * @private\n     */\n    this._browserType = browser.getName();\n    const keys = KEYS_BY_BROWSER_TYPE[this._browserType];\n\n    if (!keys) {\n        // eslint-disable-next-line no-throw-literal\n        throw `The browser type '${this._browserType}' isn't supported!`;\n    }\n\n    /**\n     * Whether to use the Promise-based getStats API or not.\n     * @type {boolean}\n     */\n    this._usesPromiseGetStats\n        = browser.isSafariWithWebrtc() || browser.isFirefox();\n\n    /**\n     * The function which is to be used to retrieve the value associated in a\n     * report returned by RTCPeerConnection#getStats with a lib-jitsi-meet\n     * browser-agnostic name/key.\n     *\n     * @function\n     * @private\n     */\n    this._getStatValue\n        = this._usesPromiseGetStats\n            ? this._defineNewGetStatValueMethod(keys)\n            : this._defineGetStatValueMethod(keys);\n\n    this.peerconnection = peerconnection;\n    this.baselineAudioLevelsReport = null;\n    this.currentAudioLevelsReport = null;\n    this.currentStatsReport = null;\n    this.previousStatsReport = null;\n    this.audioLevelReportHistory = {};\n    this.audioLevelsIntervalId = null;\n    this.eventEmitter = eventEmitter;\n    this.conferenceStats = new ConferenceStats();\n\n    // Updates stats interval\n    this.audioLevelsIntervalMilis = audioLevelsInterval;\n\n    this.statsIntervalId = null;\n    this.statsIntervalMilis = statsInterval;\n\n    /**\n     * Maps SSRC numbers to {@link SsrcStats}.\n     * @type {Map<number,SsrcStats}\n     */\n    this.ssrc2stats = new Map();\n}\n\n/* eslint-enable max-params */\n\n/**\n * Stops stats updates.\n */\nStatsCollector.prototype.stop = function() {\n    if (this.audioLevelsIntervalId) {\n        clearInterval(this.audioLevelsIntervalId);\n        this.audioLevelsIntervalId = null;\n    }\n\n    if (this.statsIntervalId) {\n        clearInterval(this.statsIntervalId);\n        this.statsIntervalId = null;\n    }\n};\n\n/**\n * Callback passed to <tt>getStats</tt> method.\n * @param error an error that occurred on <tt>getStats</tt> call.\n */\nStatsCollector.prototype.errorCallback = function(error) {\n    GlobalOnErrorHandler.callErrorHandler(error);\n    logger.error('Get stats error', error);\n    this.stop();\n};\n\n/**\n * Starts stats updates.\n */\nStatsCollector.prototype.start = function(startAudioLevelStats) {\n    const self = this;\n\n    if (startAudioLevelStats) {\n        this.audioLevelsIntervalId = setInterval(\n            () => {\n                // Interval updates\n                self.peerconnection.getStats(\n                    report => {\n                        let results = null;\n\n                        if (!report || !report.result\n                            || typeof report.result !== 'function') {\n                            results = report;\n                        } else {\n                            results = report.result();\n                        }\n                        self.currentAudioLevelsReport = results;\n                        if (this._usesPromiseGetStats) {\n                            self.processNewAudioLevelReport();\n                        } else {\n                            self.processAudioLevelReport();\n                        }\n\n                        self.baselineAudioLevelsReport\n                            = self.currentAudioLevelsReport;\n                    },\n                    error => self.errorCallback(error)\n                );\n            },\n            self.audioLevelsIntervalMilis\n        );\n    }\n\n    if (browser.supportsRtpStatistics()) {\n        this.statsIntervalId = setInterval(\n            () => {\n                // Interval updates\n                self.peerconnection.getStats(\n                    report => {\n                        let results = null;\n\n                        if (!report || !report.result\n                            || typeof report.result !== 'function') {\n                            // firefox\n                            results = report;\n                        } else {\n                            // chrome\n                            results = report.result();\n                        }\n\n                        self.currentStatsReport = results;\n                        try {\n                            if (this._usesPromiseGetStats) {\n                                self.processNewStatsReport();\n                            } else {\n                                self.processStatsReport();\n                            }\n                        } catch (e) {\n                            GlobalOnErrorHandler.callErrorHandler(e);\n                            logger.error(`Unsupported key:${e}`, e);\n                        }\n\n                        self.previousStatsReport = self.currentStatsReport;\n                    },\n                    error => self.errorCallback(error)\n                );\n            },\n            self.statsIntervalMilis\n        );\n    }\n};\n\n/**\n * Defines a function which (1) is to be used as a StatsCollector method and (2)\n * gets the value from a specific report returned by RTCPeerConnection#getStats\n * associated with a lib-jitsi-meet browser-agnostic name.\n *\n * @param {Object.<string,string>} keys the map of LibJitsi browser-agnostic\n * names to RTCPeerConnection#getStats browser-specific keys\n */\nStatsCollector.prototype._defineGetStatValueMethod = function(keys) {\n    // Define the function which converts a lib-jitsi-meet browser-asnostic name\n    // to a browser-specific key of a report returned by\n    // RTCPeerConnection#getStats.\n    const keyFromName = function(name) {\n        const key = keys[name];\n\n        if (key) {\n            return key;\n        }\n\n        // eslint-disable-next-line no-throw-literal\n        throw `The property '${name}' isn't supported!`;\n    };\n\n    // Define the function which retrieves the value from a specific report\n    // returned by RTCPeerConnection#getStats associated with a given\n    // browser-specific key.\n    let itemStatByKey;\n\n    switch (this._browserType) {\n    case browsers.CHROME:\n    case browsers.OPERA:\n    case browsers.NWJS:\n    case browsers.ELECTRON:\n        // TODO What about other types of browser which are based on Chrome such\n        // as NW.js? Every time we want to support a new type browser we have to\n        // go and add more conditions (here and in multiple other places).\n        // Cannot we do a feature detection instead of a browser type check? For\n        // example, if item has a stat property of type function, then it's very\n        // likely that whoever defined it wanted you to call it in order to\n        // retrieve the value associated with a specific key.\n        itemStatByKey = (item, key) => item.stat(key);\n        break;\n    case browsers.REACT_NATIVE:\n        // The implementation provided by react-native-webrtc follows the\n        // Objective-C WebRTC API: RTCStatsReport has a values property of type\n        // Array in which each element is a key-value pair.\n        itemStatByKey = function(item, key) {\n            let value;\n\n            item.values.some(pair => {\n                if (pair.hasOwnProperty(key)) {\n                    value = pair[key];\n\n                    return true;\n                }\n\n                return false;\n\n            });\n\n            return value;\n        };\n        break;\n    case browsers.EDGE:\n        itemStatByKey = (item, key) => item[key];\n        break;\n    default:\n        itemStatByKey = (item, key) => item[key];\n    }\n\n    // Compose the 2 functions defined above to get a function which retrieves\n    // the value from a specific report returned by RTCPeerConnection#getStats\n    // associated with a specific lib-jitsi-meet browser-agnostic name.\n    return (item, name) => itemStatByKey(item, keyFromName(name));\n};\n\n/**\n * Obtains a stat value from given stat and converts it to a non-negative\n * number. If the value is either invalid or negative then 0 will be returned.\n * @param report\n * @param {string} name\n * @return {number}\n * @private\n */\nStatsCollector.prototype.getNonNegativeStat = function(report, name) {\n    let value = this._getStatValue(report, name);\n\n    if (typeof value !== 'number') {\n        value = Number(value);\n    }\n\n    if (isNaN(value)) {\n        return 0;\n    }\n\n    return Math.max(0, value);\n};\n\n/* eslint-disable no-continue */\n\n/**\n * Stats processing logic.\n */\nStatsCollector.prototype.processStatsReport = function() {\n    if (!this.previousStatsReport) {\n        return;\n    }\n\n    const getStatValue = this._getStatValue;\n    const byteSentStats = {};\n\n    for (const idx in this.currentStatsReport) {\n        if (!this.currentStatsReport.hasOwnProperty(idx)) {\n            continue;\n        }\n        const now = this.currentStatsReport[idx];\n\n        // The browser API may return \"undefined\" values in the array\n        if (!now) {\n            continue;\n        }\n\n        try {\n            const receiveBandwidth = getStatValue(now, 'receiveBandwidth');\n            const sendBandwidth = getStatValue(now, 'sendBandwidth');\n\n            if (receiveBandwidth || sendBandwidth) {\n                this.conferenceStats.bandwidth = {\n                    'download': Math.round(receiveBandwidth / 1000),\n                    'upload': Math.round(sendBandwidth / 1000)\n                };\n            }\n        } catch (e) { /* not supported*/ }\n\n        if (now.type === 'googCandidatePair') {\n            let active, ip, localCandidateType, localip,\n                remoteCandidateType, rtt, type;\n\n            try {\n                active = getStatValue(now, 'activeConnection');\n                if (!active) {\n                    continue;\n                }\n\n                ip = getStatValue(now, 'remoteAddress');\n                type = getStatValue(now, 'transportType');\n                localip = getStatValue(now, 'localAddress');\n                localCandidateType = getStatValue(now, 'localCandidateType');\n                remoteCandidateType = getStatValue(now, 'remoteCandidateType');\n                rtt = this.getNonNegativeStat(now, 'currentRoundTripTime');\n            } catch (e) { /* not supported*/ }\n            if (!ip || !type || !localip || active !== 'true') {\n                continue;\n            }\n\n            // Save the address unless it has been saved already.\n            const conferenceStatsTransport = this.conferenceStats.transport;\n\n            if (!conferenceStatsTransport.some(\n                    t =>\n                        t.ip === ip\n                            && t.type === type\n                            && t.localip === localip)) {\n                conferenceStatsTransport.push({\n                    ip,\n                    type,\n                    localip,\n                    p2p: this.peerconnection.isP2P,\n                    localCandidateType,\n                    remoteCandidateType,\n                    rtt\n                });\n            }\n            continue;\n        }\n\n        if (now.type === 'candidatepair') {\n            // we need succeeded and selected pairs only\n            if (now.state !== 'succeeded' || !now.selected) {\n                continue;\n            }\n\n            const local = this.currentStatsReport[now.localCandidateId];\n            const remote = this.currentStatsReport[now.remoteCandidateId];\n\n            this.conferenceStats.transport.push({\n                ip: `${remote.ipAddress}:${remote.portNumber}`,\n                type: local.transport,\n                localip: `${local.ipAddress}:${local.portNumber}`,\n                p2p: this.peerconnection.isP2P,\n                localCandidateType: local.candidateType,\n                remoteCandidateType: remote.candidateType\n            });\n        }\n\n        // NOTE: Edge's proprietary stats via RTCIceTransport.msGetStats().\n        if (now.msType === 'transportdiagnostics') {\n            this.conferenceStats.transport.push({\n                ip: now.remoteAddress,\n                type: now.protocol,\n                localip: now.localAddress,\n                p2p: this.peerconnection.isP2P\n            });\n        }\n\n        if (now.type !== 'ssrc' && now.type !== 'outboundrtp'\n            && now.type !== 'inboundrtp' && now.type !== 'track') {\n            continue;\n        }\n\n        // NOTE: In Edge, stats with type \"inboundrtp\" and \"outboundrtp\" are\n        // completely useless, so ignore them.\n        if (browser.isEdge()\n            && (now.type === 'inboundrtp' || now.type === 'outboundrtp')) {\n            continue;\n        }\n\n        const before = this.previousStatsReport[idx];\n        let ssrc = this.getNonNegativeStat(now, 'ssrc');\n\n        // If type=\"track\", take the first SSRC from ssrcIds.\n        if (now.type === 'track' && Array.isArray(now.ssrcIds)) {\n            ssrc = Number(now.ssrcIds[0]);\n        }\n\n        if (!before || !ssrc) {\n            continue;\n        }\n\n        // isRemote is available only in FF and is ignored in case of chrome\n        // according to the spec\n        // https://www.w3.org/TR/webrtc-stats/#dom-rtcrtpstreamstats-isremote\n        // when isRemote is true indicates that the measurements were done at\n        // the remote endpoint and reported in an RTCP RR/XR.\n        // Fixes a problem where we are calculating local stats wrong adding\n        // the sent bytes to the local download bitrate.\n        // In new W3 stats spec, type=\"track\" has a remoteSource boolean\n        // property.\n        // Edge uses the new format, so skip this check.\n        if (!browser.isEdge()\n                && (now.isRemote === true || now.remoteSource === true)) {\n            continue;\n        }\n\n        let ssrcStats = this.ssrc2stats.get(ssrc);\n\n        if (!ssrcStats) {\n            ssrcStats = new SsrcStats();\n            this.ssrc2stats.set(ssrc, ssrcStats);\n        }\n\n        let isDownloadStream = true;\n        let key = 'packetsReceived';\n        let packetsNow = getStatValue(now, key);\n\n        if (typeof packetsNow === 'undefined'\n            || packetsNow === null || packetsNow === '') {\n            isDownloadStream = false;\n            key = 'packetsSent';\n            packetsNow = getStatValue(now, key);\n            if (typeof packetsNow === 'undefined' || packetsNow === null) {\n                logger.warn('No packetsReceived nor packetsSent stat found');\n            }\n        }\n        if (!packetsNow || packetsNow < 0) {\n            packetsNow = 0;\n        }\n\n        const packetsBefore = this.getNonNegativeStat(before, key);\n        const packetsDiff = Math.max(0, packetsNow - packetsBefore);\n\n        const packetsLostNow\n            = this.getNonNegativeStat(now, 'packetsLost');\n        const packetsLostBefore\n            = this.getNonNegativeStat(before, 'packetsLost');\n        const packetsLostDiff = Math.max(0, packetsLostNow - packetsLostBefore);\n\n        ssrcStats.setLoss({\n            packetsTotal: packetsDiff + packetsLostDiff,\n            packetsLost: packetsLostDiff,\n            isDownloadStream\n        });\n\n        const bytesReceivedNow\n            = this.getNonNegativeStat(now, 'bytesReceived');\n        const bytesReceivedBefore\n            = this.getNonNegativeStat(before, 'bytesReceived');\n        const bytesReceived\n            = Math.max(0, bytesReceivedNow - bytesReceivedBefore);\n\n        let bytesSent = 0;\n\n        // TODO: clean this mess up!\n        let nowBytesTransmitted = getStatValue(now, 'bytesSent');\n\n        if (typeof nowBytesTransmitted === 'number'\n            || typeof nowBytesTransmitted === 'string') {\n            nowBytesTransmitted = Number(nowBytesTransmitted);\n            if (!isNaN(nowBytesTransmitted)) {\n                byteSentStats[ssrc] = nowBytesTransmitted;\n                if (nowBytesTransmitted > 0) {\n                    bytesSent = nowBytesTransmitted\n                        - getStatValue(before, 'bytesSent');\n                }\n            }\n        }\n        bytesSent = Math.max(0, bytesSent);\n\n        const timeMs = now.timestamp - before.timestamp;\n        let bitrateReceivedKbps = 0, bitrateSentKbps = 0;\n\n        if (timeMs > 0) {\n            // TODO is there any reason to round here?\n            bitrateReceivedKbps = Math.round((bytesReceived * 8) / timeMs);\n            bitrateSentKbps = Math.round((bytesSent * 8) / timeMs);\n        }\n\n        ssrcStats.addBitrate({\n            'download': bitrateReceivedKbps,\n            'upload': bitrateSentKbps\n        });\n\n        const resolution = {\n            height: null,\n            width: null\n        };\n\n        try {\n            let height, width;\n\n            if ((height = getStatValue(now, 'googFrameHeightReceived'))\n                && (width = getStatValue(now, 'googFrameWidthReceived'))) {\n                resolution.height = height;\n                resolution.width = width;\n            } else if ((height = getStatValue(now, 'googFrameHeightSent'))\n                && (width = getStatValue(now, 'googFrameWidthSent'))) {\n                resolution.height = height;\n                resolution.width = width;\n            }\n        } catch (e) { /* not supported*/ }\n\n        // Tries to get frame rate\n        let frameRate;\n\n        try {\n            frameRate = getStatValue(now, 'googFrameRateReceived')\n                || getStatValue(now, 'googFrameRateSent') || 0;\n        } catch (e) {\n            // if it fails with previous properties(chrome),\n            // let's try with another one (FF)\n            try {\n                frameRate = this.getNonNegativeStat(now, 'framerateMean');\n            } catch (err) { /* not supported*/ }\n        }\n        ssrcStats.setFramerate(Math.round(frameRate || 0));\n\n        if (resolution.height && resolution.width) {\n            ssrcStats.setResolution(resolution);\n        } else {\n            ssrcStats.setResolution(null);\n        }\n    }\n\n    this.eventEmitter.emit(\n        StatisticsEvents.BYTE_SENT_STATS, this.peerconnection, byteSentStats);\n\n    this._processAndEmitReport();\n};\n\n/**\n *\n */\nStatsCollector.prototype._processAndEmitReport = function() {\n    // process stats\n    const totalPackets = {\n        download: 0,\n        upload: 0\n    };\n    const lostPackets = {\n        download: 0,\n        upload: 0\n    };\n    let bitrateDownload = 0;\n    let bitrateUpload = 0;\n    const resolutions = {};\n    const framerates = {};\n    let audioBitrateDownload = 0;\n    let audioBitrateUpload = 0;\n    let videoBitrateDownload = 0;\n    let videoBitrateUpload = 0;\n\n    for (const [ ssrc, ssrcStats ] of this.ssrc2stats) {\n        // process packet loss stats\n        const loss = ssrcStats.loss;\n        const type = loss.isDownloadStream ? 'download' : 'upload';\n\n        totalPackets[type] += loss.packetsTotal;\n        lostPackets[type] += loss.packetsLost;\n\n        // process bitrate stats\n        bitrateDownload += ssrcStats.bitrate.download;\n        bitrateUpload += ssrcStats.bitrate.upload;\n\n        // collect resolutions and framerates\n        const track = this.peerconnection.getTrackBySSRC(ssrc);\n\n        if (track) {\n            if (track.isAudioTrack()) {\n                audioBitrateDownload += ssrcStats.bitrate.download;\n                audioBitrateUpload += ssrcStats.bitrate.upload;\n            } else {\n                videoBitrateDownload += ssrcStats.bitrate.download;\n                videoBitrateUpload += ssrcStats.bitrate.upload;\n            }\n\n            const participantId = track.getParticipantId();\n\n            if (participantId) {\n                const resolution = ssrcStats.resolution;\n\n                if (resolution.width\n                        && resolution.height\n                        && resolution.width !== -1\n                        && resolution.height !== -1) {\n                    const userResolutions = resolutions[participantId] || {};\n\n                    userResolutions[ssrc] = resolution;\n                    resolutions[participantId] = userResolutions;\n                }\n                if (ssrcStats.framerate !== 0) {\n                    const userFramerates = framerates[participantId] || {};\n\n                    userFramerates[ssrc] = ssrcStats.framerate;\n                    framerates[participantId] = userFramerates;\n                }\n            } else {\n                logger.error(`No participant ID returned by ${track}`);\n            }\n        }\n\n        ssrcStats.resetBitrate();\n    }\n\n    this.conferenceStats.bitrate = {\n        'upload': bitrateUpload,\n        'download': bitrateDownload\n    };\n\n    this.conferenceStats.bitrate.audio = {\n        'upload': audioBitrateUpload,\n        'download': audioBitrateDownload\n    };\n\n    this.conferenceStats.bitrate.video = {\n        'upload': videoBitrateUpload,\n        'download': videoBitrateDownload\n    };\n\n    this.conferenceStats.packetLoss = {\n        total:\n            calculatePacketLoss(\n                lostPackets.download + lostPackets.upload,\n                totalPackets.download + totalPackets.upload),\n        download:\n            calculatePacketLoss(lostPackets.download, totalPackets.download),\n        upload:\n            calculatePacketLoss(lostPackets.upload, totalPackets.upload)\n    };\n\n    const avgAudioLevels = {};\n    let localAvgAudioLevels;\n\n    Object.keys(this.audioLevelReportHistory).forEach(ssrc => {\n        const { data, isLocal } = this.audioLevelReportHistory[ssrc];\n        const avgAudioLevel = data.reduce((sum, currentValue) => sum + currentValue) / data.length;\n\n        if (isLocal) {\n            localAvgAudioLevels = avgAudioLevel;\n        } else {\n            const track = this.peerconnection.getTrackBySSRC(Number(ssrc));\n\n            if (track) {\n                const participantId = track.getParticipantId();\n\n                if (participantId) {\n                    avgAudioLevels[participantId] = avgAudioLevel;\n                }\n            }\n        }\n    });\n    this.audioLevelReportHistory = {};\n\n    this.eventEmitter.emit(\n        StatisticsEvents.CONNECTION_STATS,\n        this.peerconnection,\n        {\n            'bandwidth': this.conferenceStats.bandwidth,\n            'bitrate': this.conferenceStats.bitrate,\n            'packetLoss': this.conferenceStats.packetLoss,\n            'resolution': resolutions,\n            'framerate': framerates,\n            'transport': this.conferenceStats.transport,\n            localAvgAudioLevels,\n            avgAudioLevels\n        });\n    this.conferenceStats.transport = [];\n};\n\n/**\n * Stats processing logic.\n */\nStatsCollector.prototype.processAudioLevelReport = function() {\n    if (!this.baselineAudioLevelsReport) {\n        return;\n    }\n\n    const getStatValue = this._getStatValue;\n\n    for (const idx in this.currentAudioLevelsReport) {\n        if (!this.currentAudioLevelsReport.hasOwnProperty(idx)) {\n            continue;\n        }\n\n        const now = this.currentAudioLevelsReport[idx];\n\n        if (now.type !== 'ssrc' && now.type !== 'track') {\n            continue;\n        }\n\n        const before = this.baselineAudioLevelsReport[idx];\n        let ssrc = this.getNonNegativeStat(now, 'ssrc');\n\n        if (!ssrc && Array.isArray(now.ssrcIds)) {\n            ssrc = Number(now.ssrcIds[0]);\n        }\n\n        if (!before) {\n            logger.warn(`${ssrc} not enough data`);\n            continue;\n        }\n\n        if (!ssrc) {\n            if ((Date.now() - now.timestamp) < 3000) {\n                logger.warn('No ssrc: ');\n            }\n            continue;\n        }\n\n        // Audio level\n        let audioLevel;\n\n        try {\n            audioLevel\n                = getStatValue(now, 'audioInputLevel')\n                    || getStatValue(now, 'audioOutputLevel');\n        } catch (e) { /* not supported*/\n            logger.warn('Audio Levels are not available in the statistics.');\n            clearInterval(this.audioLevelsIntervalId);\n\n            return;\n        }\n\n        if (audioLevel) {\n            let isLocal;\n\n            // If type=\"ssrc\" (legacy) check whether they are received packets.\n            if (now.type === 'ssrc') {\n                isLocal = !getStatValue(now, 'packetsReceived');\n\n            // If type=\"track\", check remoteSource boolean property.\n            } else {\n                isLocal = !now.remoteSource;\n            }\n\n            // According to the W3C WebRTC Stats spec, audioLevel should be in\n            // 0..1 range (0 == silence). However browsers don't behave that\n            // way so we must convert it to 0..1.\n            //\n            // In Edge the range is -100..0 (-100 == silence) measured in dB,\n            // so convert to linear. The levels are set to 0 for remote tracks,\n            // so don't convert those, since 0 means \"the maximum\" in Edge.\n            if (browser.isEdge()) {\n                audioLevel = audioLevel < 0 ? Math.pow(10, audioLevel / 20) : 0;\n\n            // TODO: Can't find specs about what this value really is, but it\n            // seems to vary between 0 and around 32k.\n            } else {\n                audioLevel = audioLevel / 32767;\n            }\n\n            if (!(ssrc in this.audioLevelReportHistory)) {\n                this.audioLevelReportHistory[ssrc] = {\n                    isLocal,\n                    data: []\n                };\n            }\n            this.audioLevelReportHistory[ssrc].data.push(audioLevel);\n\n            this.eventEmitter.emit(\n                StatisticsEvents.AUDIO_LEVEL,\n                this.peerconnection,\n                ssrc,\n                audioLevel,\n                isLocal);\n        }\n    }\n};\n\n/* eslint-enable no-continue */\n\n/**\n * New promised based getStats report processing.\n * Tested with chrome, firefox and safari. Not switching it on for chrome as\n * frameRate stat is missing and calculating it using framesSent,\n * gives values double the values seen in webrtc-internals.\n * https://w3c.github.io/webrtc-stats/\n */\n\n/**\n * Defines a function which (1) is to be used as a StatsCollector method and (2)\n * gets the value from a specific report returned by RTCPeerConnection#getStats\n * associated with a lib-jitsi-meet browser-agnostic name in case of using\n * Promised based getStats.\n *\n * @param {Object.<string,string>} keys the map of LibJitsi browser-agnostic\n * names to RTCPeerConnection#getStats browser-specific keys\n */\nStatsCollector.prototype._defineNewGetStatValueMethod = function(keys) {\n    // Define the function which converts a lib-jitsi-meet browser-asnostic name\n    // to a browser-specific key of a report returned by\n    // RTCPeerConnection#getStats.\n    const keyFromName = function(name) {\n        const key = keys[name];\n\n        if (key) {\n            return key;\n        }\n\n        // eslint-disable-next-line no-throw-literal\n        throw `The property '${name}' isn't supported!`;\n    };\n\n    // Compose the 2 functions defined above to get a function which retrieves\n    // the value from a specific report returned by RTCPeerConnection#getStats\n    // associated with a specific lib-jitsi-meet browser-agnostic name.\n    return (item, name) => item[keyFromName(name)];\n};\n\n/**\n * Converts the value to a non-negative number.\n * If the value is either invalid or negative then 0 will be returned.\n * @param {*} v\n * @return {number}\n * @private\n */\nStatsCollector.prototype.getNonNegativeValue = function(v) {\n    let value = v;\n\n    if (typeof value !== 'number') {\n        value = Number(value);\n    }\n\n    if (isNaN(value)) {\n        return 0;\n    }\n\n    return Math.max(0, value);\n};\n\n/**\n * Calculates bitrate between before and now using a supplied field name and its\n * value in the stats.\n * @param {RTCInboundRtpStreamStats|RTCSentRtpStreamStats} now the current stats\n * @param {RTCInboundRtpStreamStats|RTCSentRtpStreamStats} before the\n * previous stats.\n * @param fieldName the field to use for calculations.\n * @return {number} the calculated bitrate between now and before.\n * @private\n */\nStatsCollector.prototype._calculateBitrate = function(now, before, fieldName) {\n    const bytesNow = this.getNonNegativeValue(now[fieldName]);\n    const bytesBefore = this.getNonNegativeValue(before[fieldName]);\n    const bytesProcessed = Math.max(0, bytesNow - bytesBefore);\n\n    const timeMs = now.timestamp - before.timestamp;\n    let bitrateKbps = 0;\n\n    if (timeMs > 0) {\n        // TODO is there any reason to round here?\n        bitrateKbps = Math.round((bytesProcessed * 8) / timeMs);\n    }\n\n    return bitrateKbps;\n};\n\n/**\n * Stats processing new getStats logic.\n */\nStatsCollector.prototype.processNewStatsReport = function() {\n    if (!this.previousStatsReport) {\n        return;\n    }\n\n    const getStatValue = this._getStatValue;\n    const byteSentStats = {};\n\n    this.currentStatsReport.forEach(now => {\n\n        // RTCIceCandidatePairStats\n        // https://w3c.github.io/webrtc-stats/#candidatepair-dict*\n        if (now.type === 'candidate-pair'\n            && now.nominated\n            && now.state === 'succeeded') {\n\n            const availableIncomingBitrate = now.availableIncomingBitrate;\n            const availableOutgoingBitrate = now.availableOutgoingBitrate;\n\n            if (availableIncomingBitrate || availableOutgoingBitrate) {\n                this.conferenceStats.bandwidth = {\n                    'download': Math.round(availableIncomingBitrate / 1000),\n                    'upload': Math.round(availableOutgoingBitrate / 1000)\n                };\n            }\n\n            const remoteUsedCandidate\n                = this.currentStatsReport.get(now.remoteCandidateId);\n            const localUsedCandidate\n                = this.currentStatsReport.get(now.localCandidateId);\n\n            // RTCIceCandidateStats\n            // https://w3c.github.io/webrtc-stats/#icecandidate-dict*\n            // safari currently does not provide ice candidates in stats\n            if (remoteUsedCandidate && localUsedCandidate) {\n                // FF uses non-standard ipAddress, portNumber, transport\n                // instead of ip, port, protocol\n                const remoteIpAddress = getStatValue(remoteUsedCandidate, 'ip');\n                const remotePort = getStatValue(remoteUsedCandidate, 'port');\n                const ip = `${remoteIpAddress}:${remotePort}`;\n\n                const localIpAddress = getStatValue(localUsedCandidate, 'ip');\n                const localPort = getStatValue(localUsedCandidate, 'port');\n\n                const localIp = `${localIpAddress}:${localPort}`;\n                const type = getStatValue(remoteUsedCandidate, 'protocol');\n\n                // Save the address unless it has been saved already.\n                const conferenceStatsTransport = this.conferenceStats.transport;\n\n                if (!conferenceStatsTransport.some(\n                        t =>\n                            t.ip === ip\n                            && t.type === type\n                            && t.localip === localIp)) {\n                    conferenceStatsTransport.push({\n                        ip,\n                        type,\n                        localIp,\n                        p2p: this.peerconnection.isP2P,\n                        localCandidateType: localUsedCandidate.candidateType,\n                        remoteCandidateType: remoteUsedCandidate.candidateType,\n                        networkType: localUsedCandidate.networkType,\n                        rtt: now.currentRoundTripTime * 1000\n                    });\n                }\n            }\n\n        // RTCReceivedRtpStreamStats\n        // https://w3c.github.io/webrtc-stats/#receivedrtpstats-dict*\n        // RTCSentRtpStreamStats\n        // https://w3c.github.io/webrtc-stats/#sentrtpstats-dict*\n        } else if (now.type === 'inbound-rtp' || now.type === 'outbound-rtp') {\n            const before = this.previousStatsReport.get(now.id);\n            const ssrc = this.getNonNegativeValue(now.ssrc);\n\n            if (!before || !ssrc) {\n                return;\n            }\n\n            let ssrcStats = this.ssrc2stats.get(ssrc);\n\n            if (!ssrcStats) {\n                ssrcStats = new SsrcStats();\n                this.ssrc2stats.set(ssrc, ssrcStats);\n            }\n\n            let isDownloadStream = true;\n            let key = 'packetsReceived';\n\n            if (now.type === 'outbound-rtp') {\n                isDownloadStream = false;\n                key = 'packetsSent';\n            }\n\n            let packetsNow = now[key];\n\n            if (!packetsNow || packetsNow < 0) {\n                packetsNow = 0;\n            }\n\n            const packetsBefore = this.getNonNegativeValue(before[key]);\n            const packetsDiff = Math.max(0, packetsNow - packetsBefore);\n\n            const packetsLostNow\n                = this.getNonNegativeValue(now.packetsLost);\n            const packetsLostBefore\n                = this.getNonNegativeValue(before.packetsLost);\n            const packetsLostDiff\n                = Math.max(0, packetsLostNow - packetsLostBefore);\n\n            ssrcStats.setLoss({\n                packetsTotal: packetsDiff + packetsLostDiff,\n                packetsLost: packetsLostDiff,\n                isDownloadStream\n            });\n\n            if (now.type === 'inbound-rtp') {\n\n                ssrcStats.addBitrate({\n                    'download': this._calculateBitrate(\n                                    now, before, 'bytesReceived'),\n                    'upload': 0\n                });\n\n                // RTCInboundRtpStreamStats\n                // https://w3c.github.io/webrtc-stats/#inboundrtpstats-dict*\n                // TODO: can we use framesDecoded for frame rate, available\n                // in chrome\n            } else {\n                byteSentStats[ssrc] = this.getNonNegativeValue(now.bytesSent);\n                ssrcStats.addBitrate({\n                    'download': 0,\n                    'upload': this._calculateBitrate(\n                                now, before, 'bytesSent')\n                });\n\n                // RTCOutboundRtpStreamStats\n                // https://w3c.github.io/webrtc-stats/#outboundrtpstats-dict*\n                // TODO: can we use framesEncoded for frame rate, available\n                // in chrome\n            }\n\n            // FF has framerateMean out of spec\n            const framerateMean = now.framerateMean;\n\n            if (framerateMean) {\n                ssrcStats.setFramerate(Math.round(framerateMean || 0));\n            }\n\n        // track for resolution\n        // RTCVideoHandlerStats\n        // https://w3c.github.io/webrtc-stats/#vststats-dict*\n        // RTCMediaHandlerStats\n        // https://w3c.github.io/webrtc-stats/#mststats-dict*\n        } else if (now.type === 'track') {\n\n            const resolution = {\n                height: now.frameHeight,\n                width: now.frameWidth\n            };\n\n            // Tries to get frame rate\n            let frameRate = now.framesPerSecond;\n\n            if (!frameRate) {\n                // we need to calculate it\n                const before = this.previousStatsReport.get(now.id);\n\n                if (before) {\n                    const timeMs = now.timestamp - before.timestamp;\n\n                    if (timeMs > 0 && now.framesSent) {\n                        const numberOfFramesSinceBefore\n                            = now.framesSent - before.framesSent;\n\n                        frameRate = (numberOfFramesSinceBefore / timeMs) * 1000;\n                    }\n                }\n\n                if (!frameRate) {\n                    return;\n                }\n            }\n\n            const trackIdentifier = now.trackIdentifier;\n            const ssrc = this.peerconnection.getSsrcByTrackId(trackIdentifier);\n            let ssrcStats = this.ssrc2stats.get(ssrc);\n\n            if (!ssrcStats) {\n                ssrcStats = new SsrcStats();\n                this.ssrc2stats.set(ssrc, ssrcStats);\n            }\n            ssrcStats.setFramerate(Math.round(frameRate || 0));\n\n            if (resolution.height && resolution.width) {\n                ssrcStats.setResolution(resolution);\n            } else {\n                ssrcStats.setResolution(null);\n            }\n        }\n    });\n\n    this.eventEmitter.emit(\n        StatisticsEvents.BYTE_SENT_STATS, this.peerconnection, byteSentStats);\n\n    this._processAndEmitReport();\n};\n\n/**\n * Stats processing logic.\n */\nStatsCollector.prototype.processNewAudioLevelReport = function() {\n    if (!this.baselineAudioLevelsReport) {\n        return;\n    }\n\n    this.currentAudioLevelsReport.forEach(now => {\n        if (now.type !== 'track') {\n            return;\n        }\n\n        // Audio level\n        const audioLevel = now.audioLevel;\n\n        if (!audioLevel) {\n            return;\n        }\n\n        const trackIdentifier = now.trackIdentifier;\n        const ssrc = this.peerconnection.getSsrcByTrackId(trackIdentifier);\n\n        if (ssrc) {\n            const isLocal\n                = ssrc === this.peerconnection.getLocalSSRC(\n                this.peerconnection.getLocalTracks(MediaType.AUDIO));\n\n            this.eventEmitter.emit(\n                StatisticsEvents.AUDIO_LEVEL,\n                this.peerconnection,\n                ssrc,\n                audioLevel,\n                isLocal);\n        }\n    });\n};\n\n/**\n * End new promised based getStats processing methods.\n */\n","\nimport { Strophe } from 'strophe.js';\n\nimport { getLogger } from 'jitsi-meet-logger';\n\nimport * as JitsiConferenceEvents from './JitsiConferenceEvents';\nimport { ParticipantConnectionStatus }\n    from './modules/connectivity/ParticipantConnectionStatus';\nimport * as MediaType from './service/RTC/MediaType';\n\nconst logger = getLogger(__filename);\n\n/**\n * Represents a participant in (i.e. a member of) a conference.\n */\nexport default class JitsiParticipant {\n\n    /* eslint-disable max-params */\n\n    /**\n     * Initializes a new JitsiParticipant instance.\n     *\n     * @constructor\n     * @param jid the conference XMPP jid\n     * @param conference\n     * @param displayName\n     * @param {Boolean} hidden - True if the new JitsiParticipant instance is to\n     * represent a hidden participant; otherwise, false.\n     * @param {string} statsID - optional participant statsID\n     * @param {string} status - the initial status if any.\n     * @param {object} identity - the xmpp identity\n     */\n    constructor(jid, conference, displayName, hidden, statsID, status, identity) {\n        this._jid = jid;\n        this._id = Strophe.getResourceFromJid(jid);\n        this._conference = conference;\n        this._displayName = displayName;\n        this._supportsDTMF = false;\n        this._tracks = [];\n        this._role = 'none';\n        this._status = status;\n        this._hidden = hidden;\n        this._statsID = statsID;\n        this._connectionStatus = ParticipantConnectionStatus.ACTIVE;\n        this._properties = {};\n        this._identity = identity;\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * @returns {JitsiConference} The conference that this participant belongs\n     * to.\n     */\n    getConference() {\n        return this._conference;\n    }\n\n    /**\n     * Gets the value of a property of this participant.\n     */\n    getProperty(name) {\n        return this._properties[name];\n    }\n\n    /**\n     * Checks whether this <tt>JitsiParticipant</tt> has any video tracks which\n     * are muted according to their underlying WebRTC <tt>MediaStreamTrack</tt>\n     * muted status.\n     * @return {boolean} <tt>true</tt> if this <tt>participant</tt> contains any\n     * video <tt>JitsiTrack</tt>s which are muted as defined in\n     * {@link JitsiTrack.isWebRTCTrackMuted}.\n     */\n    hasAnyVideoTrackWebRTCMuted() {\n        return (\n            this.getTracks().some(\n                jitsiTrack =>\n                    jitsiTrack.getType() === MediaType.VIDEO\n                        && jitsiTrack.isWebRTCTrackMuted()));\n    }\n\n    /**\n     * Updates participant's connection status.\n     * @param {string} state the current participant connection state.\n     * {@link ParticipantConnectionStatus}.\n     * @private\n     */\n    _setConnectionStatus(status) {\n        this._connectionStatus = status;\n    }\n\n    /**\n     * Return participant's connectivity status.\n     *\n     * @returns {string} the connection status\n     * <tt>ParticipantConnectionStatus</tt> of the user.\n     * {@link ParticipantConnectionStatus}.\n     */\n    getConnectionStatus() {\n        return this._connectionStatus;\n    }\n\n    /**\n     * Sets the value of a property of this participant, and fires an event if\n     * the value has changed.\n     * @name the name of the property.\n     * @value the value to set.\n     */\n    setProperty(name, value) {\n        const oldValue = this._properties[name];\n\n        if (value !== oldValue) {\n            this._properties[name] = value;\n            this._conference.eventEmitter.emit(\n                JitsiConferenceEvents.PARTICIPANT_PROPERTY_CHANGED,\n                this,\n                name,\n                oldValue,\n                value);\n        }\n    }\n\n    /**\n     * @returns {Array.<JitsiTrack>} The list of media tracks for this\n     * participant.\n     */\n    getTracks() {\n        return this._tracks.slice();\n    }\n\n    /**\n     * @param {MediaType} mediaType\n     * @returns {Array.<JitsiTrack>} an array of media tracks for this\n     * participant, for given media type.\n     */\n    getTracksByMediaType(mediaType) {\n        return this.getTracks().filter(track => track.getType() === mediaType);\n    }\n\n    /**\n     * @returns {String} The ID of this participant.\n     */\n    getId() {\n        return this._id;\n    }\n\n    /**\n     * @returns {String} The JID of this participant.\n     */\n    getJid() {\n        return this._jid;\n    }\n\n    /**\n     * @returns {String} The human-readable display name of this participant.\n     */\n    getDisplayName() {\n        return this._displayName;\n    }\n\n    /**\n     * @returns {String} The stats ID of this participant.\n     */\n    getStatsID() {\n        return this._statsID;\n    }\n\n    /**\n     * @returns {String} The status of the participant.\n     */\n    getStatus() {\n        return this._status;\n    }\n\n    /**\n     * @returns {Boolean} Whether this participant is a moderator or not.\n     */\n    isModerator() {\n        return this._role === 'moderator';\n    }\n\n    /**\n     * @returns {Boolean} Whether this participant is a hidden participant. Some\n     * special system participants may want to join hidden (like for example the\n     * recorder).\n     */\n    isHidden() {\n        return this._hidden;\n    }\n\n    /**\n     * @returns {Boolean} Whether this participant has muted their audio.\n     */\n    isAudioMuted() {\n        return this._isMediaTypeMuted(MediaType.AUDIO);\n    }\n\n    /**\n     * Determines whether all JitsiTracks which are of a specific MediaType and\n     * which belong to this JitsiParticipant are muted.\n     *\n     * @param {MediaType} mediaType - The MediaType of the JitsiTracks to be\n     * checked.\n     * @private\n     * @returns {Boolean} True if all JitsiTracks which are of the specified\n     * mediaType and which belong to this JitsiParticipant are muted; otherwise,\n     * false.\n     */\n    _isMediaTypeMuted(mediaType) {\n        return this.getTracks().reduce(\n            (muted, track) =>\n                muted && (track.getType() !== mediaType || track.isMuted()),\n            true);\n    }\n\n    /**\n     * @returns {Boolean} Whether this participant has muted their video.\n     */\n    isVideoMuted() {\n        return this._isMediaTypeMuted(MediaType.VIDEO);\n    }\n\n    /**\n     * @returns {String} The role of this participant.\n     */\n    getRole() {\n        return this._role;\n    }\n\n    /**\n     *\n     */\n    supportsDTMF() {\n        return this._supportsDTMF;\n    }\n\n    /**\n     * Returns a set with the features for the participant.\n     * @param {int} timeout the timeout in ms for reply from the participant.\n     * @returns {Promise<Set<String>, Error>}\n     */\n    getFeatures(timeout = 5000) {\n        return this._conference.xmpp.caps.getFeatures(this._jid, timeout)\n            .catch(error => {\n                // when we detect version mismatch we return a string as error\n                // we want to retry in such case\n                if (error && error.constructor === String) {\n                    return this._conference.xmpp.caps.getFeatures(this._jid, timeout);\n                }\n\n                logger.warn(`Failed to discover features of ${this._jid}`, error);\n\n                return Promise.reject(error);\n            });\n    }\n\n    /**\n     * Returns the bot type for the participant.\n     *\n     * @returns {string|undefined} - The bot type of the participant.\n     */\n    getBotType() {\n        return this._botType;\n    }\n}\n","import {\n    CONNECTION_DISCONNECTED,\n    CONNECTION_ESTABLISHED,\n    CONNECTION_FAILED\n} from './JitsiConnectionEvents';\nimport XMPP from './modules/xmpp/xmpp';\n\n/**\n * @typedef {Object} UpgradeRoleError\n *\n * @property {JitsiConnectionErrors} [connectionError] - One of\n * {@link JitsiConnectionErrors} which occurred when trying to connect to the\n * XMPP server.\n * @property {String} [authenticationError] - One of XMPP error conditions\n * returned by Jicofo on authentication attempt. See\n * {@link https://xmpp.org/rfcs/rfc3920.html#streams-error}.\n * @property {String} [message] - More details about the error.\n * @property {Object} [credentials] - The credentials that failed the\n * authentication.\n * @property {String} [credentials.jid] - The XMPP ID part of the credentials\n * that failed the authentication.\n * @property {string} [credentials.password] - The password part of the\n * credentials that failed the authentication.\n *\n * NOTE If neither one of the errors is present, then the operation has been\n * canceled.\n */\n\n/* eslint-disable no-invalid-this */\n\n/**\n * Connects to the XMPP server using the specified credentials and contacts\n * Jicofo in order to obtain a session ID (which is then stored in the local\n * storage). The user's role of the parent conference will be upgraded to\n * moderator (by Jicofo). It's also used to join the conference when starting\n * from anonymous domain and only authenticated users are allowed to create new\n * rooms.\n *\n * @param {Object} options\n * @param {string} options.id - XMPP user's ID to log in. For example,\n * user@xmpp-server.com.\n * @param {string} options.password - XMPP user's password to log in with.\n * @param {string} [options.roomPassword] - The password to join the MUC with.\n * @param {Function} [options.onLoginSuccessful] - Callback called when logging\n * into the XMPP server was successful. The next step will be to obtain a new\n * session ID from Jicofo and join the MUC using it which will effectively\n * upgrade the user's role to moderator.\n * @returns {Object} A <tt>thenable</tt> which (1) settles when the process of\n * authenticating and upgrading the role of the specified XMPP user finishes and\n * (2) has a <tt>cancel</tt> method that allows the caller to interrupt the\n * process. If the process finishes successfully, the session ID has been stored\n * in the settings and the <tt>thenable</tt> is resolved. If the process\n * finishes with failure, the <tt>thenable</tt> is rejected with reason of type\n * {@link UpgradeRoleError} which will have either <tt>connectionError</tt> or\n * <tt>authenticationError</tt> property set depending on which of the steps has\n * failed. If <tt>cancel</tt> is called before the process finishes, then the\n * thenable will be rejected with an empty object (i.e. no error property will\n * be set on the rejection reason).\n */\nexport default function authenticateAndUpgradeRole({\n    // 1. Log the specified XMPP user in.\n    id,\n    password,\n    onCreateResource,\n\n    // 2. Let the API client/consumer know as soon as the XMPP user has been\n    //    successfully logged in.\n    onLoginSuccessful,\n\n    // 3. Join the MUC.\n    roomPassword\n}) {\n    let canceled = false;\n    let rejectPromise;\n    let xmpp = new XMPP(this.connection.options);\n\n    const process = new Promise((resolve, reject) => {\n        // The process is represented by a Thenable with a cancel method. The\n        // Thenable is implemented using Promise and the cancel using the\n        // Promise's reject function.\n        rejectPromise = reject;\n\n\n        xmpp.addListener(\n            CONNECTION_DISCONNECTED,\n            () => {\n                xmpp = undefined;\n            });\n        xmpp.addListener(\n            CONNECTION_ESTABLISHED,\n            () => {\n                if (canceled) {\n                    return;\n                }\n\n                // Let the caller know that the XMPP login was successful.\n                onLoginSuccessful && onLoginSuccessful();\n\n                // Now authenticate with Jicofo and get a new session ID.\n                const room = xmpp.createRoom(\n                    this.options.name,\n                    this.options.config,\n                    onCreateResource\n                );\n\n                room.moderator.authenticate()\n                    .then(() => {\n                        xmpp && xmpp.disconnect();\n\n                        if (canceled) {\n                            return;\n                        }\n\n                        // At this point we should have the new session ID\n                        // stored in the settings. Jicofo will allow to join the\n                        // room.\n                        this.join(roomPassword);\n\n                        resolve();\n                    })\n                    .catch(({ error, message }) => {\n                        xmpp.disconnect();\n\n                        reject({\n                            authenticationError: error,\n                            message\n                        });\n                    });\n            });\n        xmpp.addListener(\n            CONNECTION_FAILED,\n            (connectionError, message, credentials) => {\n                reject({\n                    connectionError,\n                    credentials,\n                    message\n                });\n                xmpp = undefined;\n            });\n\n        canceled || xmpp.connect(id, password);\n    });\n\n    /**\n     * Cancels the process, if it's in progress, of authenticating and upgrading\n     * the role of the local participant/user.\n     *\n     * @public\n     * @returns {void}\n     */\n    process.cancel = () => {\n        canceled = true;\n        rejectPromise({});\n        xmpp && xmpp.disconnect();\n    };\n\n    return process;\n}\n\n/* eslint-enable no-invalid-this */\n","/* global $ */\n\nimport { getLogger } from 'jitsi-meet-logger';\nimport { Strophe } from 'strophe.js';\n\nimport ChatRoom from './ChatRoom';\nimport { ConnectionPluginListenable } from './ConnectionPlugin';\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\n\nconst logger = getLogger(__filename);\n\n/**\n * MUC connection plugin.\n */\nclass MucConnectionPlugin extends ConnectionPluginListenable {\n    /**\n     *\n     * @param xmpp\n     */\n    constructor(xmpp) {\n        super();\n        this.xmpp = xmpp;\n        this.rooms = {};\n    }\n\n    /**\n     *\n     * @param connection\n     */\n    init(connection) {\n        super.init(connection);\n\n        // add handlers (just once)\n        this.connection.addHandler(this.onPresence.bind(this), null,\n            'presence', null, null, null, null);\n        this.connection.addHandler(this.onPresenceUnavailable.bind(this),\n            null, 'presence', 'unavailable', null);\n        this.connection.addHandler(this.onPresenceError.bind(this), null,\n            'presence', 'error', null);\n        this.connection.addHandler(this.onMessage.bind(this), null,\n            'message', null, null);\n        this.connection.addHandler(this.onMute.bind(this),\n            'http://jitsi.org/jitmeet/audio', 'iq', 'set', null, null);\n    }\n\n    /**\n     *\n     * @param jid\n     * @param password\n     * @param options\n     */\n    createRoom(jid, password, options) {\n        const roomJid = Strophe.getBareJidFromJid(jid);\n\n        if (this.rooms[roomJid]) {\n            const errmsg = 'You are already in the room!';\n\n            logger.error(errmsg);\n            throw new Error(errmsg);\n        }\n        this.rooms[roomJid] = new ChatRoom(this.connection, jid,\n            password, this.xmpp, options);\n        this.eventEmitter.emit(\n            XMPPEvents.EMUC_ROOM_ADDED, this.rooms[roomJid]);\n\n        return this.rooms[roomJid];\n    }\n\n    /**\n     *\n     * @param jid\n     */\n    doLeave(jid) {\n        this.eventEmitter.emit(\n            XMPPEvents.EMUC_ROOM_REMOVED, this.rooms[jid]);\n        delete this.rooms[jid];\n    }\n\n    /**\n     *\n     * @param pres\n     */\n    onPresence(pres) {\n        const from = pres.getAttribute('from');\n\n        // What is this for? A workaround for something?\n        if (pres.getAttribute('type')) {\n            return true;\n        }\n\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        if (!room) {\n            return true;\n        }\n\n        // Parse status.\n        if ($(pres).find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]'\n            + '>status[code=\"201\"]').length) {\n            room.createNonAnonymousRoom();\n        }\n\n        room.onPresence(pres);\n\n        return true;\n    }\n\n    /**\n     *\n     * @param pres\n     */\n    onPresenceUnavailable(pres) {\n        const from = pres.getAttribute('from');\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        if (!room) {\n            return true;\n        }\n\n        room.onPresenceUnavailable(pres, from);\n\n        return true;\n    }\n\n    /**\n     *\n     * @param pres\n     */\n    onPresenceError(pres) {\n        const from = pres.getAttribute('from');\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        if (!room) {\n            return true;\n        }\n\n        room.onPresenceError(pres, from);\n\n        return true;\n    }\n\n    /**\n     *\n     * @param msg\n     */\n    onMessage(msg) {\n        // FIXME: this is a hack. but jingle on muc makes nickchanges hard\n        const from = msg.getAttribute('from');\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        if (!room) {\n            return true;\n        }\n\n        room.onMessage(msg, from);\n\n        return true;\n    }\n\n    /**\n     * TODO: Document\n     * @param iq\n     */\n    onMute(iq) {\n        const from = iq.getAttribute('from');\n        const room = this.rooms[Strophe.getBareJidFromJid(from)];\n\n        // Returning false would result in the listener being deregistered by Strophe\n        if (!room) {\n            return true;\n        }\n\n        room.onMute(iq);\n\n        return true;\n    }\n}\n\n/**\n *\n * @param XMPP\n */\nexport default function(XMPP) {\n    Strophe.addConnectionPlugin('emuc', new MucConnectionPlugin(XMPP));\n}\n","/* global $, __filename */\n\nimport { getLogger } from 'jitsi-meet-logger';\nimport { $iq, $msg, $pres, Strophe } from 'strophe.js';\n\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport * as JitsiTranscriptionStatus from '../../JitsiTranscriptionStatus';\nimport Listenable from '../util/Listenable';\nimport Settings from '../settings/Settings';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\n\nimport Moderator from './moderator';\n\nconst logger = getLogger(__filename);\n\nexport const parser = {\n    packet2JSON(xmlElement, nodes) {\n        for (const child of Array.from(xmlElement.children)) {\n            const node = {\n                attributes: {},\n                children: [],\n                tagName: child.tagName\n            };\n\n            for (const attr of Array.from(child.attributes)) {\n                node.attributes[attr.name] = attr.value;\n            }\n            const text = Strophe.getText(child);\n\n            if (text) {\n                // Using Strophe.getText will do work for traversing all direct\n                // child text nodes but returns an escaped value, which is not\n                // desirable at this point.\n                node.value = Strophe.xmlunescape(text);\n            }\n            nodes.push(node);\n            this.packet2JSON(child, node.children);\n        }\n    },\n    json2packet(nodes, packet) {\n        for (let i = 0; i < nodes.length; i++) {\n            const node = nodes[i];\n\n            if (node) {\n                packet.c(node.tagName, node.attributes);\n                if (node.value) {\n                    packet.t(node.value);\n                }\n                if (node.children) {\n                    this.json2packet(node.children, packet);\n                }\n                packet.up();\n            }\n        }\n\n        // packet.up();\n    }\n};\n\n/**\n * Returns array of JS objects from the presence JSON associated with the passed\n / nodeName\n * @param pres the presence JSON\n * @param nodeName the name of the node (videomuted, audiomuted, etc)\n */\nfunction filterNodeFromPresenceJSON(pres, nodeName) {\n    const res = [];\n\n    for (let i = 0; i < pres.length; i++) {\n        if (pres[i].tagName === nodeName) {\n            res.push(pres[i]);\n        }\n    }\n\n    return res;\n}\n\n// XXX As ChatRoom constructs XMPP stanzas and Strophe is build around the idea\n// of chaining function calls, allow long function call chains.\n/* eslint-disable newline-per-chained-call */\n\n/**\n *\n */\nexport default class ChatRoom extends Listenable {\n\n    /* eslint-disable max-params */\n\n    /**\n     *\n     * @param connection\n     * @param jid\n     * @param password\n     * @param XMPP\n     * @param options\n     * @param {boolean} options.disableFocus - when set to {@code false} will\n     * not invite Jicofo into the room. This is intended to be used only by\n     * jitsi-meet-spot.\n     */\n    constructor(connection, jid, password, XMPP, options) {\n        super();\n        this.xmpp = XMPP;\n        this.connection = connection;\n        this.roomjid = Strophe.getBareJidFromJid(jid);\n        this.myroomjid = jid;\n        this.password = password;\n        logger.info(`Joined MUC as ${this.myroomjid}`);\n        this.members = {};\n        this.presMap = {};\n        this.presHandlers = {};\n        this.joined = false;\n        this.role = null;\n        this.focusMucJid = null;\n        this.noBridgeAvailable = false;\n        this.options = options || {};\n        this.moderator\n            = new Moderator(this.roomjid, this.xmpp, this.eventEmitter, {\n                connection: this.xmpp.options,\n                conference: this.options\n            });\n        this.initPresenceMap(options);\n        this.lastPresences = {};\n        this.phoneNumber = null;\n        this.phonePin = null;\n        this.connectionTimes = {};\n        this.participantPropertyListener = null;\n\n        this.locked = false;\n        this.transcriptionStatus = JitsiTranscriptionStatus.OFF;\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     *\n     */\n    initPresenceMap(options = {}) {\n        this.presMap.to = this.myroomjid;\n        this.presMap.xns = 'http://jabber.org/protocol/muc';\n        this.presMap.nodes = [];\n\n        if (options.enableStatsID) {\n            this.presMap.nodes.push({\n                'tagName': 'stats-id',\n                'value': Settings.callStatsUserName\n            });\n        }\n\n        // We need to broadcast 'videomuted' status from the beginning, cause\n        // Jicofo makes decisions based on that. Initialize it with 'false'\n        // here.\n        this.addVideoInfoToPresence(false);\n\n        if (options.deploymentInfo && options.deploymentInfo.userRegion) {\n            this.presMap.nodes.push({\n                'tagName': 'region',\n                'attributes': {\n                    id: options.deploymentInfo.userRegion,\n                    xmlns: 'http://jitsi.org/jitsi-meet'\n                }\n            });\n        }\n    }\n\n    /**\n     * Joins the chat room.\n     * @param password\n     * @returns {Promise} - resolved when join completes. At the time of this\n     * writing it's never rejected.\n     */\n    join(password) {\n        this.password = password;\n\n        return new Promise(resolve => {\n            this.options.disableFocus\n                && logger.info('Conference focus disabled');\n\n            const preJoin\n                = this.options.disableFocus\n                    ? Promise.resolve()\n                    : this.moderator.allocateConferenceFocus();\n\n            preJoin.then(() => {\n                this.sendPresence(true);\n                resolve();\n            });\n        });\n    }\n\n    /**\n     *\n     * @param fromJoin\n     */\n    sendPresence(fromJoin) {\n        const to = this.presMap.to;\n\n        if (!to || (!this.joined && !fromJoin)) {\n            // Too early to send presence - not initialized\n            return;\n        }\n\n        const pres = $pres({ to });\n\n        // xep-0045 defines: \"including in the initial presence stanza an empty\n        // <x/> element qualified by the 'http://jabber.org/protocol/muc'\n        // namespace\" and subsequent presences should not include that or it can\n        // be considered as joining, and server can send us the message history\n        // for the room on every presence\n        if (fromJoin) {\n            pres.c('x', { xmlns: this.presMap.xns });\n\n            if (this.password) {\n                pres.c('password').t(this.password).up();\n            }\n            pres.up();\n        }\n\n        parser.json2packet(this.presMap.nodes, pres);\n        this.connection.send(pres);\n        if (fromJoin) {\n            // XXX We're pressed for time here because we're beginning a complex\n            // and/or lengthy conference-establishment process which supposedly\n            // involves multiple RTTs. We don't have the time to wait for\n            // Strophe to decide to send our IQ.\n            this.connection.flush();\n        }\n    }\n\n    /**\n     * Sends the presence unavailable, signaling the server\n     * we want to leave the room.\n     */\n    doLeave() {\n        logger.log('do leave', this.myroomjid);\n        const pres = $pres({ to: this.myroomjid,\n            type: 'unavailable' });\n\n        this.presMap.length = 0;\n\n        // XXX Strophe is asynchronously sending by default. Unfortunately, that\n        // means that there may not be enough time to send the unavailable\n        // presence. Switching Strophe to synchronous sending is not much of an\n        // option because it may lead to a noticeable delay in navigating away\n        // from the current location. As a compromise, we will try to increase\n        // the chances of sending the unavailable presence within the short time\n        // span that we have upon unloading by invoking flush() on the\n        // connection. We flush() once before sending/queuing the unavailable\n        // presence in order to attemtp to have the unavailable presence at the\n        // top of the send queue. We flush() once more after sending/queuing the\n        // unavailable presence in order to attempt to have it sent as soon as\n        // possible.\n        this.connection.flush();\n        this.connection.send(pres);\n        this.connection.flush();\n    }\n\n    /**\n     *\n     */\n    discoRoomInfo() {\n        // https://xmpp.org/extensions/xep-0045.html#disco-roominfo\n\n        const getInfo\n            = $iq({\n                type: 'get',\n                to: this.roomjid\n            })\n                .c('query', { xmlns: Strophe.NS.DISCO_INFO });\n\n        this.connection.sendIQ(getInfo, result => {\n            const locked\n                = $(result).find('>query>feature[var=\"muc_passwordprotected\"]')\n                    .length\n                    === 1;\n\n            if (locked !== this.locked) {\n                this.eventEmitter.emit(XMPPEvents.MUC_LOCK_CHANGED, locked);\n                this.locked = locked;\n            }\n        }, error => {\n            GlobalOnErrorHandler.callErrorHandler(error);\n            logger.error('Error getting room info: ', error);\n        });\n    }\n\n    /**\n     *\n     */\n    createNonAnonymousRoom() {\n        // http://xmpp.org/extensions/xep-0045.html#createroom-reserved\n\n        const getForm = $iq({ type: 'get',\n            to: this.roomjid })\n            .c('query', { xmlns: 'http://jabber.org/protocol/muc#owner' })\n            .c('x', { xmlns: 'jabber:x:data',\n                type: 'submit' });\n\n        const self = this;\n\n        this.connection.sendIQ(getForm, form => {\n            if (!$(form).find(\n                    '>query>x[xmlns=\"jabber:x:data\"]'\n                    + '>field[var=\"muc#roomconfig_whois\"]').length) {\n                const errmsg = 'non-anonymous rooms not supported';\n\n                GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\n                logger.error(errmsg);\n\n                return;\n            }\n\n            const formSubmit = $iq({ to: self.roomjid,\n                type: 'set' })\n                .c('query', { xmlns: 'http://jabber.org/protocol/muc#owner' });\n\n            formSubmit.c('x', { xmlns: 'jabber:x:data',\n                type: 'submit' });\n\n            formSubmit.c('field', { 'var': 'FORM_TYPE' })\n                .c('value')\n                .t('http://jabber.org/protocol/muc#roomconfig').up().up();\n\n            formSubmit.c('field', { 'var': 'muc#roomconfig_whois' })\n                .c('value').t('anyone').up().up();\n\n            self.connection.sendIQ(formSubmit);\n\n        }, error => {\n            GlobalOnErrorHandler.callErrorHandler(error);\n            logger.error('Error getting room configuration form: ', error);\n        });\n    }\n\n    /**\n     *\n     * @param pres\n     */\n    onPresence(pres) {\n        const from = pres.getAttribute('from');\n        const member = {};\n        const statusEl = pres.getElementsByTagName('status')[0];\n\n        if (statusEl) {\n            member.status = statusEl.textContent || '';\n        }\n        let hasStatusUpdate = false;\n        let hasVersionUpdate = false;\n        const xElement\n            = pres.getElementsByTagNameNS(\n                'http://jabber.org/protocol/muc#user', 'x')[0];\n        const mucUserItem\n            = xElement && xElement.getElementsByTagName('item')[0];\n\n        member.affiliation\n            = mucUserItem && mucUserItem.getAttribute('affiliation');\n        member.role = mucUserItem && mucUserItem.getAttribute('role');\n\n        // Focus recognition\n        const jid = mucUserItem && mucUserItem.getAttribute('jid');\n\n        member.jid = jid;\n        member.isFocus\n            = jid && jid.indexOf(`${this.moderator.getFocusUserJid()}/`) === 0;\n        member.isHiddenDomain\n            = jid && jid.indexOf('@') > 0\n                && this.options.hiddenDomain\n                    === jid.substring(jid.indexOf('@') + 1, jid.indexOf('/'));\n\n        this.eventEmitter.emit(XMPPEvents.PRESENCE_RECEIVED, {\n            fromHiddenDomain: member.isHiddenDomain,\n            presence: pres\n        });\n\n        const xEl = pres.querySelector('x');\n\n        if (xEl) {\n            xEl.remove();\n        }\n\n        const nodes = [];\n\n        parser.packet2JSON(pres, nodes);\n        this.lastPresences[from] = nodes;\n\n        // process nodes to extract data needed for MUC_JOINED and\n        // MUC_MEMBER_JOINED events\n        const extractIdentityInformation = node => {\n            const identity = {};\n            const userInfo = node.children.find(c => c.tagName === 'user');\n\n            if (userInfo) {\n                identity.user = {};\n                for (const tag of [ 'id', 'name', 'avatar' ]) {\n                    const child\n                        = userInfo.children.find(c => c.tagName === tag);\n\n                    if (child) {\n                        identity.user[tag] = child.value;\n                    }\n                }\n            }\n            const groupInfo = node.children.find(c => c.tagName === 'group');\n\n            if (groupInfo) {\n                identity.group = groupInfo.value;\n            }\n\n            return identity;\n        };\n\n        for (let i = 0; i < nodes.length; i++) {\n            const node = nodes[i];\n\n            switch (node.tagName) {\n            case 'bot': {\n                const { attributes } = node;\n\n                if (!attributes) {\n                    break;\n                }\n                const { type } = attributes;\n\n                member.botType = type;\n                break;\n            }\n            case 'nick':\n                member.nick = node.value;\n                break;\n            case 'userId':\n                member.id = node.value;\n                break;\n            case 'stats-id':\n                member.statsID = node.value;\n                break;\n            case 'identity':\n                member.identity = extractIdentityInformation(node);\n                break;\n            case 'stat': {\n                const { attributes } = node;\n\n                if (!attributes) {\n                    break;\n                }\n                const { name } = attributes;\n\n                if (name === 'version') {\n                    member.version = attributes.value;\n                }\n                break;\n            }\n            }\n        }\n\n        if (from === this.myroomjid) {\n            const newRole\n                = member.affiliation === 'owner' ? member.role : 'none';\n\n            if (this.role !== newRole) {\n                this.role = newRole;\n                this.eventEmitter.emit(\n                    XMPPEvents.LOCAL_ROLE_CHANGED,\n                    this.role);\n            }\n            if (!this.joined) {\n                this.joined = true;\n                const now = this.connectionTimes['muc.joined']\n                    = window.performance.now();\n\n                logger.log('(TIME) MUC joined:\\t', now);\n\n                // set correct initial state of locked\n                if (this.password) {\n                    this.locked = true;\n                }\n\n                // Re-send presence in case any presence updates were added,\n                // but blocked from sending, during the join process.\n                this.sendPresence();\n\n                this.eventEmitter.emit(XMPPEvents.MUC_JOINED);\n            }\n        } else if (this.members[from] === undefined) {\n            // new participant\n            this.members[from] = member;\n            logger.log('entered', from, member);\n            hasStatusUpdate = member.status !== undefined;\n            hasVersionUpdate = member.version !== undefined;\n            if (member.isFocus) {\n                this._initFocus(from, jid);\n            } else {\n                // identity is being added to member joined, so external\n                // services can be notified for that (currently identity is\n                // not used inside library)\n                this.eventEmitter.emit(\n                    XMPPEvents.MUC_MEMBER_JOINED,\n                    from,\n                    member.nick,\n                    member.role,\n                    member.isHiddenDomain,\n                    member.statsID,\n                    member.status,\n                    member.identity,\n                    member.botType);\n\n                // we are reporting the status with the join\n                // so we do not want a second event about status update\n                hasStatusUpdate = false;\n            }\n        } else {\n            // Presence update for existing participant\n            // Watch role change:\n            const memberOfThis = this.members[from];\n\n            if (memberOfThis.role !== member.role) {\n                memberOfThis.role = member.role;\n                this.eventEmitter.emit(\n                    XMPPEvents.MUC_ROLE_CHANGED, from, member.role);\n            }\n\n            // fire event that botType had changed\n            if (memberOfThis.botType !== member.botType) {\n                memberOfThis.botType = member.botType;\n                this.eventEmitter.emit(\n                    XMPPEvents.MUC_MEMBER_BOT_TYPE_CHANGED,\n                    from,\n                    member.botType);\n            }\n\n            if (member.isFocus) {\n                // From time to time first few presences of the focus are not\n                // containing it's jid. That way we can mark later the focus\n                // member instead of not marking it at all and not starting the\n                // conference.\n                // FIXME: Maybe there is a better way to handle this issue. It\n                // seems there is some period of time in prosody that the\n                // configuration form is received but not applied. And if any\n                // participant joins during that period of time the first\n                // presence from the focus won't contain\n                // <item jid=\"focus...\" />.\n                memberOfThis.isFocus = true;\n                this._initFocus(from, jid);\n            }\n\n            // store the new display name\n            if (member.displayName) {\n                memberOfThis.displayName = member.displayName;\n            }\n\n            // update stored status message to be able to detect changes\n            if (memberOfThis.status !== member.status) {\n                hasStatusUpdate = true;\n                memberOfThis.status = member.status;\n            }\n\n            if (memberOfThis.version !== member.version) {\n                hasVersionUpdate = true;\n                memberOfThis.version = member.version;\n            }\n        }\n\n        // after we had fired member or room joined events, lets fire events\n        // for the rest info we got in presence\n        for (let i = 0; i < nodes.length; i++) {\n            const node = nodes[i];\n\n            switch (node.tagName) {\n            case 'nick':\n                if (!member.isFocus) {\n                    const displayName\n                        = this.xmpp.options.displayJids\n                            ? Strophe.getResourceFromJid(from)\n                            : member.nick;\n\n                    this.eventEmitter.emit(\n                        XMPPEvents.DISPLAY_NAME_CHANGED,\n                        from,\n                        displayName);\n                }\n                break;\n            case 'bridgeNotAvailable':\n                if (member.isFocus && !this.noBridgeAvailable) {\n                    this.noBridgeAvailable = true;\n                    this.eventEmitter.emit(XMPPEvents.BRIDGE_DOWN);\n                }\n                break;\n            case 'conference-properties':\n                if (member.isFocus) {\n                    const properties = {};\n\n                    for (let j = 0; j < node.children.length; j++) {\n                        const { attributes } = node.children[j];\n\n                        if (attributes && attributes.key) {\n                            properties[attributes.key] = attributes.value;\n                        }\n                    }\n\n                    this.eventEmitter.emit(\n                        XMPPEvents.CONFERENCE_PROPERTIES_CHANGED, properties);\n                }\n                break;\n            case 'transcription-status': {\n                const { attributes } = node;\n\n                if (!attributes) {\n                    break;\n                }\n\n                const { status } = attributes;\n\n                if (status && status !== this.transcriptionStatus) {\n                    this.transcriptionStatus = status;\n                    this.eventEmitter.emit(\n                        XMPPEvents.TRANSCRIPTION_STATUS_CHANGED,\n                        status\n                    );\n                }\n\n\n                break;\n            }\n            case 'call-control': {\n                const att = node.attributes;\n\n                if (!att) {\n                    break;\n                }\n                this.phoneNumber = att.phone || null;\n                this.phonePin = att.pin || null;\n                this.eventEmitter.emit(XMPPEvents.PHONE_NUMBER_CHANGED);\n                break;\n            }\n            default:\n                this.processNode(node, from);\n            }\n        }\n\n        // Trigger status message update if necessary\n        if (hasStatusUpdate) {\n            this.eventEmitter.emit(\n                XMPPEvents.PRESENCE_STATUS,\n                from,\n                member.status);\n        }\n\n        if (hasVersionUpdate) {\n            logger.info(`Received version for ${jid}: ${member.version}`);\n        }\n    }\n\n    /**\n     * Initialize some properties when the focus participant is verified.\n     * @param from jid of the focus\n     * @param mucJid the jid of the focus in the muc\n     */\n    _initFocus(from, mucJid) {\n        this.focusMucJid = from;\n\n        logger.info(`Ignore focus: ${from}, real JID: ${mucJid}`);\n    }\n\n    /**\n     * Sets the special listener to be used for \"command\"s whose name starts\n     * with \"jitsi_participant_\".\n     */\n    setParticipantPropertyListener(listener) {\n        this.participantPropertyListener = listener;\n    }\n\n    /**\n     *\n     * @param node\n     * @param from\n     */\n    processNode(node, from) {\n        // make sure we catch all errors coming from any handler\n        // otherwise we can remove the presence handler from strophe\n        try {\n            let tagHandlers = this.presHandlers[node.tagName];\n\n            if (node.tagName.startsWith('jitsi_participant_')) {\n                tagHandlers = [ this.participantPropertyListener ];\n            }\n\n            if (tagHandlers) {\n                tagHandlers.forEach(handler => {\n                    handler(node, Strophe.getResourceFromJid(from), from);\n                });\n            }\n        } catch (e) {\n            GlobalOnErrorHandler.callErrorHandler(e);\n            logger.error(`Error processing:${node.tagName} node.`, e);\n        }\n    }\n\n    /**\n     * Send text message to the other participants in the conference\n     * @param message\n     * @param elementName\n     * @param nickname\n     */\n    sendMessage(message, elementName, nickname) {\n        const msg = $msg({ to: this.roomjid,\n            type: 'groupchat' });\n\n        // We are adding the message in a packet extension. If this element\n        // is different from 'body', we add a custom namespace.\n        // e.g. for 'json-message' extension of message stanza.\n        if (elementName === 'body') {\n            msg.c(elementName, message).up();\n        } else {\n            msg.c(elementName, { xmlns: 'http://jitsi.org/jitmeet' }, message)\n                .up();\n        }\n        if (nickname) {\n            msg.c('nick', { xmlns: 'http://jabber.org/protocol/nick' })\n                .t(nickname)\n                .up()\n                .up();\n        }\n        this.connection.send(msg);\n        this.eventEmitter.emit(XMPPEvents.SENDING_CHAT_MESSAGE, message);\n    }\n\n    /* eslint-disable max-params */\n    /**\n     * Send private text message to another participant of the conference\n     * @param id id/muc resource of the receiver\n     * @param message\n     * @param elementName\n     * @param nickname\n     */\n    sendPrivateMessage(id, message, elementName, nickname) {\n        const msg = $msg({ to: `${this.roomjid}/${id}`,\n            type: 'chat' });\n\n        // We are adding the message in packet. If this element is different\n        // from 'body', we add our custom namespace for the same.\n        // e.g. for 'json-message' message extension.\n        if (elementName === 'body') {\n            msg.c(elementName, message).up();\n        } else {\n            msg.c(elementName, { xmlns: 'http://jitsi.org/jitmeet' }, message)\n                .up();\n        }\n        if (nickname) {\n            msg.c('nick', { xmlns: 'http://jabber.org/protocol/nick' })\n                .t(nickname)\n                .up()\n                .up();\n        }\n\n        this.connection.send(msg);\n        this.eventEmitter.emit(\n            XMPPEvents.SENDING_PRIVATE_CHAT_MESSAGE, message);\n    }\n    /* eslint-enable max-params */\n\n    /**\n     *\n     * @param subject\n     */\n    setSubject(subject) {\n        const msg = $msg({ to: this.roomjid,\n            type: 'groupchat' });\n\n        msg.c('subject', subject);\n        this.connection.send(msg);\n    }\n\n    /**\n     * Called when participant leaves.\n     * @param jid the jid of the participant that leaves\n     * @param skipEvents optional params to skip any events, including check\n     * whether this is the focus that left\n     */\n    onParticipantLeft(jid, skipEvents) {\n        delete this.lastPresences[jid];\n\n        if (skipEvents) {\n            return;\n        }\n\n        this.eventEmitter.emit(XMPPEvents.MUC_MEMBER_LEFT, jid);\n\n        this.moderator.onMucMemberLeft(jid);\n    }\n\n    /**\n     *\n     * @param pres\n     * @param from\n     */\n    onPresenceUnavailable(pres, from) {\n        // ignore presence\n        if ($(pres).find('>ignore[xmlns=\"http://jitsi.org/jitmeet/\"]').length) {\n            return true;\n        }\n\n        // room destroyed ?\n        if ($(pres).find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]'\n            + '>destroy').length) {\n            let reason;\n            const reasonSelect\n                = $(pres).find(\n                    '>x[xmlns=\"http://jabber.org/protocol/muc#user\"]'\n                        + '>destroy>reason');\n\n            if (reasonSelect.length) {\n                reason = reasonSelect.text();\n            }\n\n            this.eventEmitter.emit(XMPPEvents.MUC_DESTROYED, reason);\n            this.connection.emuc.doLeave(this.roomjid);\n\n            return true;\n        }\n\n        // Status code 110 indicates that this notification is \"self-presence\".\n        const isSelfPresence\n            = $(pres)\n                .find(\n                    '>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>'\n                        + 'status[code=\"110\"]')\n                .length;\n        const isKick\n            = $(pres)\n                .find(\n                    '>x[xmlns=\"http://jabber.org/protocol/muc#user\"]'\n                        + '>status[code=\"307\"]')\n                .length;\n        const membersKeys = Object.keys(this.members);\n\n        if (isKick) {\n            const actorSelect\n                = $(pres)\n                .find('>x[xmlns=\"http://jabber.org/protocol/muc#user\"]>item>actor');\n\n            let actorNick;\n\n            if (actorSelect.length) {\n                actorNick = actorSelect.attr('nick');\n            }\n\n            // if no member is found this is the case we had kicked someone\n            // and we are not in the list of members\n            if (membersKeys.find(jid => Strophe.getResourceFromJid(jid) === actorNick)) {\n                // we first fire the kicked so we can show the participant\n                // who kicked, before notifying that participant left\n                // we fire kicked for us and for any participant kicked\n                this.eventEmitter.emit(\n                    XMPPEvents.KICKED,\n                    isSelfPresence,\n                    actorNick,\n                    Strophe.getResourceFromJid(from));\n            }\n        }\n\n        if (!isSelfPresence) {\n            delete this.members[from];\n            this.onParticipantLeft(from, false);\n        } else if (membersKeys.length > 0) {\n            // If the status code is 110 this means we're leaving and we would\n            // like to remove everyone else from our view, so we trigger the\n            // event.\n            membersKeys.forEach(jid => {\n                const member = this.members[jid];\n\n                delete this.members[jid];\n                this.onParticipantLeft(jid, member.isFocus);\n            });\n            this.connection.emuc.doLeave(this.roomjid);\n\n            // we fire muc_left only if this is not a kick,\n            // kick has both statuses 110 and 307.\n            if (!isKick) {\n                this.eventEmitter.emit(XMPPEvents.MUC_LEFT);\n            }\n        }\n    }\n\n    /**\n     *\n     * @param msg\n     * @param from\n     */\n    onMessage(msg, from) {\n        const nick\n            = $(msg).find('>nick[xmlns=\"http://jabber.org/protocol/nick\"]')\n                .text()\n            || Strophe.getResourceFromJid(from);\n\n        const txt = $(msg).find('>body').text();\n        const type = msg.getAttribute('type');\n\n        if (type === 'error') {\n            this.eventEmitter.emit(XMPPEvents.CHAT_ERROR_RECEIVED,\n                $(msg).find('>text').text(), txt);\n\n            return true;\n        }\n\n        const subject = $(msg).find('>subject');\n\n        if (subject.length) {\n            const subjectText = subject.text();\n\n            if (subjectText || subjectText === '') {\n                this.eventEmitter.emit(XMPPEvents.SUBJECT_CHANGED, subjectText);\n                logger.log(`Subject is changed to ${subjectText}`);\n            }\n        }\n\n        // xep-0203 delay\n        let stamp = $(msg).find('>delay').attr('stamp');\n\n        if (!stamp) {\n            // or xep-0091 delay, UTC timestamp\n            stamp = $(msg).find('>[xmlns=\"jabber:x:delay\"]').attr('stamp');\n\n            if (stamp) {\n                // the format is CCYYMMDDThh:mm:ss\n                const dateParts\n                    = stamp.match(/(\\d{4})(\\d{2})(\\d{2}T\\d{2}:\\d{2}:\\d{2})/);\n\n                stamp = `${dateParts[1]}-${dateParts[2]}-${dateParts[3]}Z`;\n            }\n        }\n\n        if (from === this.roomjid\n                && $(msg)\n                    .find(\n                        '>x[xmlns=\"http://jabber.org/protocol/muc#user\"]'\n                            + '>status[code=\"104\"]')\n                    .length) {\n            this.discoRoomInfo();\n        }\n        const jsonMessage = $(msg).find('>json-message').text();\n        const parsedJson = this.xmpp.tryParseJSONAndVerify(jsonMessage);\n\n        // We emit this event if the message is a valid json, and is not\n        // delivered after a delay, i.e. stamp is undefined.\n        // e.g. - subtitles should not be displayed if delayed.\n        if (parsedJson && stamp === undefined) {\n            this.eventEmitter.emit(XMPPEvents.JSON_MESSAGE_RECEIVED,\n                from, parsedJson);\n\n            return;\n        }\n\n        if (txt) {\n            if (type === 'chat') {\n                this.eventEmitter.emit(XMPPEvents.PRIVATE_MESSAGE_RECEIVED,\n                        from, nick, txt, this.myroomjid, stamp);\n            } else if (type === 'groupchat') {\n                this.eventEmitter.emit(XMPPEvents.MESSAGE_RECEIVED,\n                        from, nick, txt, this.myroomjid, stamp);\n            }\n        }\n    }\n\n    /**\n     *\n     * @param pres\n     * @param from\n     */\n    onPresenceError(pres, from) {\n        if ($(pres)\n                .find(\n                    '>error[type=\"auth\"]'\n                        + '>not-authorized['\n                        + 'xmlns=\"urn:ietf:params:xml:ns:xmpp-stanzas\"]')\n                .length) {\n            logger.log('on password required', from);\n            this.eventEmitter.emit(XMPPEvents.PASSWORD_REQUIRED);\n        } else if ($(pres)\n                .find(\n                    '>error[type=\"cancel\"]'\n                        + '>not-allowed['\n                        + 'xmlns=\"urn:ietf:params:xml:ns:xmpp-stanzas\"]')\n                .length) {\n            const toDomain = Strophe.getDomainFromJid(pres.getAttribute('to'));\n\n            if (toDomain === this.xmpp.options.hosts.anonymousdomain) {\n                // enter the room by replying with 'not-authorized'. This would\n                // result in reconnection from authorized domain.\n                // We're either missing Jicofo/Prosody config for anonymous\n                // domains or something is wrong.\n                this.eventEmitter.emit(XMPPEvents.ROOM_JOIN_ERROR);\n\n            } else {\n                logger.warn('onPresError ', pres);\n                this.eventEmitter.emit(\n                    XMPPEvents.ROOM_CONNECT_NOT_ALLOWED_ERROR);\n            }\n        } else if ($(pres).find('>error>service-unavailable').length) {\n            logger.warn('Maximum users limit for the room has been reached',\n                pres);\n            this.eventEmitter.emit(XMPPEvents.ROOM_MAX_USERS_ERROR);\n        } else {\n            logger.warn('onPresError ', pres);\n            this.eventEmitter.emit(XMPPEvents.ROOM_CONNECT_ERROR);\n        }\n    }\n\n    /**\n     *\n     * @param jid\n     */\n    kick(jid) {\n        const kickIQ = $iq({ to: this.roomjid,\n            type: 'set' })\n            .c('query', { xmlns: 'http://jabber.org/protocol/muc#admin' })\n            .c('item', { nick: Strophe.getResourceFromJid(jid),\n                role: 'none' })\n            .c('reason').t('You have been kicked.').up().up().up();\n\n        this.connection.sendIQ(\n            kickIQ,\n            result => logger.log('Kick participant with jid: ', jid, result),\n            error => logger.log('Kick participant error: ', error));\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     *\n     * @param key\n     * @param onSuccess\n     * @param onError\n     * @param onNotSupported\n     */\n    lockRoom(key, onSuccess, onError, onNotSupported) {\n        // http://xmpp.org/extensions/xep-0045.html#roomconfig\n        this.connection.sendIQ(\n            $iq({\n                to: this.roomjid,\n                type: 'get'\n            })\n                .c('query', { xmlns: 'http://jabber.org/protocol/muc#owner' }),\n            res => {\n                if ($(res)\n                        .find(\n                            '>query>x[xmlns=\"jabber:x:data\"]'\n                                + '>field[var=\"muc#roomconfig_roomsecret\"]')\n                        .length) {\n                    const formsubmit\n                        = $iq({\n                            to: this.roomjid,\n                            type: 'set'\n                        })\n                            .c('query', {\n                                xmlns: 'http://jabber.org/protocol/muc#owner'\n                            });\n\n                    formsubmit.c('x', {\n                        xmlns: 'jabber:x:data',\n                        type: 'submit'\n                    });\n                    formsubmit\n                        .c('field', { 'var': 'FORM_TYPE' })\n                        .c('value')\n                        .t('http://jabber.org/protocol/muc#roomconfig')\n                        .up()\n                        .up();\n                    formsubmit\n                        .c('field', { 'var': 'muc#roomconfig_roomsecret' })\n                        .c('value')\n                        .t(key)\n                        .up()\n                        .up();\n\n                    // Fixes a bug in prosody 0.9.+\n                    // https://prosody.im/issues/issue/373\n                    formsubmit\n                        .c('field', { 'var': 'muc#roomconfig_whois' })\n                        .c('value')\n                        .t('anyone')\n                        .up()\n                        .up();\n\n                    // FIXME: is muc#roomconfig_passwordprotectedroom required?\n                    this.connection.sendIQ(formsubmit, onSuccess, onError);\n                } else {\n                    onNotSupported();\n                }\n            },\n            onError);\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     *\n     * @param key\n     * @param values\n     */\n    addToPresence(key, values) {\n        values.tagName = key;\n        this.removeFromPresence(key);\n        this.presMap.nodes.push(values);\n    }\n\n    /**\n     * Retreives a value from the presence map.\n     *\n     * @param {string} key - The key to find the value for.\n     * @returns {Object?}\n     */\n    getFromPresence(key) {\n        return this.presMap.nodes.find(node => key === node.tagName);\n    }\n\n    /**\n     *\n     * @param key\n     */\n    removeFromPresence(key) {\n        const nodes = this.presMap.nodes.filter(node => key !== node.tagName);\n\n        this.presMap.nodes = nodes;\n    }\n\n    /**\n     *\n     * @param name\n     * @param handler\n     */\n    addPresenceListener(name, handler) {\n        if (typeof handler !== 'function') {\n            throw new Error('\"handler\" is not a function');\n        }\n        let tagHandlers = this.presHandlers[name];\n\n        if (!tagHandlers) {\n            this.presHandlers[name] = tagHandlers = [];\n        }\n        if (tagHandlers.indexOf(handler) === -1) {\n            tagHandlers.push(handler);\n        } else {\n            logger.warn(\n                `Trying to add the same handler more than once for: ${name}`);\n        }\n    }\n\n    /**\n     *\n     * @param name\n     * @param handler\n     */\n    removePresenceListener(name, handler) {\n        const tagHandlers = this.presHandlers[name];\n        const handlerIdx = tagHandlers ? tagHandlers.indexOf(handler) : -1;\n\n        // eslint-disable-next-line no-negated-condition\n        if (handlerIdx !== -1) {\n            tagHandlers.splice(handlerIdx, 1);\n        } else {\n            logger.warn(`Handler for: ${name} was not registered`);\n        }\n    }\n\n    /**\n     * Checks if the user identified by given <tt>mucJid</tt> is the conference\n     * focus.\n     * @param mucJid the full MUC address of the user to be checked.\n     * @returns {boolean|null} <tt>true</tt> if MUC user is the conference focus\n     * or <tt>false</tt> if is not. When given <tt>mucJid</tt> does not exist in\n     * the MUC then <tt>null</tt> is returned.\n     */\n    isFocus(mucJid) {\n        const member = this.members[mucJid];\n\n        if (member) {\n            return member.isFocus;\n        }\n\n        return null;\n    }\n\n    /**\n     *\n     */\n    isModerator() {\n        return this.role === 'moderator';\n    }\n\n    /**\n     *\n     * @param peerJid\n     */\n    getMemberRole(peerJid) {\n        if (this.members[peerJid]) {\n            return this.members[peerJid].role;\n        }\n\n        return null;\n    }\n\n    /**\n     *\n     * @param mute\n     * @param callback\n     */\n    setVideoMute(mute, callback) {\n        this.sendVideoInfoPresence(mute);\n        if (callback) {\n            callback(mute);\n        }\n    }\n\n    /**\n     *\n     * @param mute\n     * @param callback\n     */\n    setAudioMute(mute, callback) {\n        return this.sendAudioInfoPresence(mute, callback);\n    }\n\n    /**\n     *\n     * @param mute\n     */\n    addAudioInfoToPresence(mute) {\n        this.removeFromPresence('audiomuted');\n        this.addToPresence(\n            'audiomuted',\n            {\n                attributes: { 'xmlns': 'http://jitsi.org/jitmeet/audio' },\n                value: mute.toString()\n            });\n    }\n\n    /**\n     *\n     * @param mute\n     * @param callback\n     */\n    sendAudioInfoPresence(mute, callback) {\n        this.addAudioInfoToPresence(mute);\n        if (this.connection) {\n            this.sendPresence();\n        }\n        if (callback) {\n            callback();\n        }\n    }\n\n    /**\n     *\n     * @param mute\n     */\n    addVideoInfoToPresence(mute) {\n        this.removeFromPresence('videomuted');\n        this.addToPresence(\n            'videomuted',\n            {\n                attributes: { 'xmlns': 'http://jitsi.org/jitmeet/video' },\n                value: mute.toString()\n            });\n    }\n\n    /**\n     *\n     * @param mute\n     */\n    sendVideoInfoPresence(mute) {\n        this.addVideoInfoToPresence(mute);\n        if (!this.connection) {\n            return;\n        }\n        this.sendPresence();\n    }\n\n    /**\n     * Obtains the info about given media advertised in the MUC presence of\n     * the participant identified by the given endpoint JID.\n     * @param {string} endpointId the endpoint ID mapped to the participant\n     * which corresponds to MUC nickname.\n     * @param {MediaType} mediaType the type of the media for which presence\n     * info will be obtained.\n     * @return {PeerMediaInfo} presenceInfo an object with media presence\n     * info or <tt>null</tt> either if there is no presence available or if\n     * the media type given is invalid.\n     */\n    getMediaPresenceInfo(endpointId, mediaType) {\n        // Will figure out current muted status by looking up owner's presence\n        const pres = this.lastPresences[`${this.roomjid}/${endpointId}`];\n\n        if (!pres) {\n            // No presence available\n            return null;\n        }\n        const data = {\n            muted: false, // unmuted by default\n            videoType: undefined // no video type by default\n        };\n        let mutedNode = null;\n\n        if (mediaType === MediaType.AUDIO) {\n            mutedNode = filterNodeFromPresenceJSON(pres, 'audiomuted');\n        } else if (mediaType === MediaType.VIDEO) {\n            mutedNode = filterNodeFromPresenceJSON(pres, 'videomuted');\n            const videoTypeNode = filterNodeFromPresenceJSON(pres, 'videoType');\n\n            if (videoTypeNode.length > 0) {\n                data.videoType = videoTypeNode[0].value;\n            }\n        } else {\n            logger.error(`Unsupported media type: ${mediaType}`);\n\n            return null;\n        }\n\n        data.muted = mutedNode.length > 0 && mutedNode[0].value === 'true';\n\n        return data;\n    }\n\n    /**\n     * Returns true if the SIP calls are supported and false otherwise\n     */\n    isSIPCallingSupported() {\n        if (this.moderator) {\n            return this.moderator.isSipGatewayEnabled();\n        }\n\n        return false;\n    }\n\n    /**\n     * Dials a number.\n     * @param number the number\n     */\n    dial(number) {\n        return this.connection.rayo.dial(number, 'fromnumber',\n            Strophe.getBareJidFromJid(this.myroomjid), this.password,\n            this.focusMucJid);\n    }\n\n    /**\n     * Hangup an existing call\n     */\n    hangup() {\n        return this.connection.rayo.hangup();\n    }\n\n    /**\n     * Returns the phone number for joining the conference.\n     */\n    getPhoneNumber() {\n        return this.phoneNumber;\n    }\n\n    /**\n     * Returns the pin for joining the conference with phone.\n     */\n    getPhonePin() {\n        return this.phonePin;\n    }\n\n    /**\n     * Mutes remote participant.\n     * @param jid of the participant\n     * @param mute\n     */\n    muteParticipant(jid, mute) {\n        logger.info('set mute', mute);\n        const iqToFocus = $iq(\n            { to: this.focusMucJid,\n                type: 'set' })\n            .c('mute', {\n                xmlns: 'http://jitsi.org/jitmeet/audio',\n                jid\n            })\n            .t(mute.toString())\n            .up();\n\n        this.connection.sendIQ(\n            iqToFocus,\n            result => logger.log('set mute', result),\n            error => logger.log('set mute error', error));\n    }\n\n    /**\n     * TODO: Document\n     * @param iq\n     */\n    onMute(iq) {\n        const from = iq.getAttribute('from');\n\n        if (from !== this.focusMucJid) {\n            logger.warn('Ignored mute from non focus peer');\n\n            return;\n        }\n        const mute = $(iq).find('mute');\n\n        if (mute.length && mute.text() === 'true') {\n            this.eventEmitter.emit(XMPPEvents.AUDIO_MUTED_BY_FOCUS, mute.attr('actor'));\n        } else {\n            // XXX Why do we support anything but muting? Why do we encode the\n            // value in the text of the element? Why do we use a separate XML\n            // namespace?\n            logger.warn('Ignoring a mute request which does not explicitly '\n                + 'specify a positive mute command.');\n        }\n    }\n\n    /**\n     * Leaves the room. Closes the jingle session.\n     * @returns {Promise} which is resolved if XMPPEvents.MUC_LEFT is received\n     * less than 5s after sending presence unavailable. Otherwise the promise is\n     * rejected.\n     */\n    leave() {\n        return new Promise((resolve, reject) => {\n            const timeout = setTimeout(() => onMucLeft(true), 5000);\n            const eventEmitter = this.eventEmitter;\n\n            /**\n             *\n             * @param doReject\n             */\n            function onMucLeft(doReject = false) {\n                eventEmitter.removeListener(XMPPEvents.MUC_LEFT, onMucLeft);\n                clearTimeout(timeout);\n                if (doReject) {\n                    // the timeout expired\n                    reject(new Error('The timeout for the confirmation about '\n                        + 'leaving the room expired.'));\n                } else {\n                    resolve();\n                }\n            }\n            eventEmitter.on(XMPPEvents.MUC_LEFT, onMucLeft);\n            this.doLeave();\n        });\n    }\n}\n\n/* eslint-enable newline-per-chained-call */\n","/* global $, Promise */\n\nconst logger = require('jitsi-meet-logger').getLogger(__filename);\n\nimport { $iq, Strophe } from 'strophe.js';\n\nconst XMPPEvents = require('../../service/xmpp/XMPPEvents');\nconst AuthenticationEvents\n    = require('../../service/authentication/AuthenticationEvents');\nconst GlobalOnErrorHandler = require('../util/GlobalOnErrorHandler');\n\nimport browser from '../browser';\nimport Settings from '../settings/Settings';\n\n/**\n *\n * @param step\n */\nfunction createExpBackoffTimer(step) {\n    let count = 1;\n\n    return function(reset) {\n        // Reset call\n        if (reset) {\n            count = 1;\n\n            return;\n        }\n\n        // Calculate next timeout\n        const timeout = Math.pow(2, count - 1);\n\n        count += 1;\n\n        return timeout * step;\n    };\n}\n\n/* eslint-disable max-params */\n\n/**\n *\n * @param roomName\n * @param xmpp\n * @param emitter\n * @param options\n */\nexport default function Moderator(roomName, xmpp, emitter, options) {\n    this.roomName = roomName;\n    this.xmppService = xmpp;\n    this.getNextTimeout = createExpBackoffTimer(1000);\n    this.getNextErrorTimeout = createExpBackoffTimer(1000);\n\n    // External authentication stuff\n    this.externalAuthEnabled = false;\n    this.options = options;\n\n    // Sip gateway can be enabled by configuring Jigasi host in config.js or\n    // it will be enabled automatically if focus detects the component through\n    // service discovery.\n    this.sipGatewayEnabled\n        = this.options.connection.hosts\n            && this.options.connection.hosts.call_control !== undefined;\n\n    this.eventEmitter = emitter;\n\n    this.connection = this.xmppService.connection;\n\n    // FIXME: Message listener that talks to POPUP window\n    /**\n     *\n     * @param event\n     */\n    function listener(event) {\n        if (event.data && event.data.sessionId) {\n            if (event.origin !== window.location.origin) {\n                logger.warn(\n                    `Ignoring sessionId from different origin: ${\n                        event.origin}`);\n\n                return;\n            }\n            Settings.sessionId = event.data.sessionId;\n\n            // After popup is closed we will authenticate\n        }\n    }\n\n    // Register\n    if (window.addEventListener) {\n        window.addEventListener('message', listener, false);\n    } else {\n        window.attachEvent('onmessage', listener);\n    }\n}\n\n/* eslint-enable max-params */\n\nModerator.prototype.isExternalAuthEnabled = function() {\n    return this.externalAuthEnabled;\n};\n\nModerator.prototype.isSipGatewayEnabled = function() {\n    return this.sipGatewayEnabled;\n};\n\nModerator.prototype.onMucMemberLeft = function(jid) {\n    logger.info(`Someone left is it focus ? ${jid}`);\n    const resource = Strophe.getResourceFromJid(jid);\n\n    if (resource === 'focus') {\n        logger.info(\n            'Focus has left the room - leaving conference');\n        this.eventEmitter.emit(XMPPEvents.FOCUS_LEFT);\n    }\n};\n\nModerator.prototype.setFocusUserJid = function(focusJid) {\n    if (!this.focusUserJid) {\n        this.focusUserJid = focusJid;\n        logger.info(`Focus jid set to:  ${this.focusUserJid}`);\n    }\n};\n\nModerator.prototype.getFocusUserJid = function() {\n    return this.focusUserJid;\n};\n\nModerator.prototype.getFocusComponent = function() {\n    // Get focus component address\n    let focusComponent = this.options.connection.hosts.focus;\n\n    // If not specified use default:  'focus.domain'\n\n    if (!focusComponent) {\n        focusComponent = `focus.${this.options.connection.hosts.domain}`;\n    }\n\n    return focusComponent;\n};\n\nModerator.prototype.createConferenceIq = function() {\n    // Generate create conference IQ\n    const elem = $iq({ to: this.getFocusComponent(),\n        type: 'set' });\n\n    // Session Id used for authentication\n    const { sessionId } = Settings;\n    const machineUID = Settings.machineId;\n    const config = this.options.conference;\n\n    logger.info(`Session ID: ${sessionId} machine UID: ${machineUID}`);\n\n    elem.c('conference', {\n        xmlns: 'http://jitsi.org/protocol/focus',\n        room: this.roomName,\n        'machine-uid': machineUID\n    });\n\n    if (sessionId) {\n        elem.attrs({ 'session-id': sessionId });\n    }\n    if (this.options.connection.enforcedBridge !== undefined) {\n        elem.c(\n            'property', {\n                name: 'enforcedBridge',\n                value: this.options.connection.enforcedBridge\n            }).up();\n    }\n\n    // Tell the focus we have Jigasi configured\n    if (this.options.connection.hosts !== undefined\n        && this.options.connection.hosts.call_control !== undefined) {\n        elem.c(\n            'property', {\n                name: 'call_control',\n                value: this.options.connection.hosts.call_control\n            }).up();\n    }\n    if (config.channelLastN !== undefined) {\n        elem.c(\n            'property', {\n                name: 'channelLastN',\n                value: config.channelLastN\n            }).up();\n    }\n    elem.c(\n        'property', {\n            name: 'disableRtx',\n            value: Boolean(config.disableRtx)\n        }).up();\n\n    if (config.enableTcc !== undefined) {\n        elem.c(\n                'property', {\n                    name: 'enableTcc',\n                    value: Boolean(config.enableTcc)\n                }).up();\n    }\n    if (config.enableRemb !== undefined) {\n        elem.c(\n                'property', {\n                    name: 'enableRemb',\n                    value: Boolean(config.enableRemb)\n                }).up();\n    }\n    if (config.minParticipants !== undefined) {\n        elem.c(\n                'property', {\n                    name: 'minParticipants',\n                    value: config.minParticipants\n                }).up();\n    }\n\n    elem.c(\n        'property', {\n            name: 'enableLipSync',\n            value: this.options.connection.enableLipSync !== false\n        }).up();\n    if (config.audioPacketDelay !== undefined) {\n        elem.c(\n            'property', {\n                name: 'audioPacketDelay',\n                value: config.audioPacketDelay\n            }).up();\n    }\n    if (config.startBitrate) {\n        elem.c(\n            'property', {\n                name: 'startBitrate',\n                value: config.startBitrate\n            }).up();\n    }\n    if (config.minBitrate) {\n        elem.c(\n            'property', {\n                name: 'minBitrate',\n                value: config.minBitrate\n            }).up();\n    }\n    if (config.testing && config.testing.octo\n        && typeof config.testing.octo.probability === 'number') {\n        if (Math.random() < config.testing.octo.probability) {\n            elem.c(\n                'property', {\n                    name: 'octo',\n                    value: true\n                }).up();\n        }\n    }\n\n    let openSctp;\n\n    switch (this.options.conference.openBridgeChannel) {\n    case 'datachannel':\n    case true:\n    case undefined:\n        openSctp = true;\n        break;\n    case 'websocket':\n        openSctp = false;\n        break;\n    }\n\n    if (openSctp && !browser.supportsDataChannels()) {\n        openSctp = false;\n    }\n\n    elem.c(\n        'property', {\n            name: 'openSctp',\n            value: openSctp\n        }).up();\n\n    if (this.options.conference.startAudioMuted !== undefined) {\n        elem.c(\n            'property', {\n                name: 'startAudioMuted',\n                value: this.options.conference.startAudioMuted\n            }).up();\n    }\n    if (this.options.conference.startVideoMuted !== undefined) {\n        elem.c(\n            'property', {\n                name: 'startVideoMuted',\n                value: this.options.conference.startVideoMuted\n            }).up();\n    }\n    if (this.options.conference.stereo !== undefined) {\n        elem.c(\n            'property', {\n                name: 'stereo',\n                value: this.options.conference.stereo\n            }).up();\n    }\n    if (this.options.conference.useRoomAsSharedDocumentName !== undefined) {\n        elem.c(\n            'property', {\n                name: 'useRoomAsSharedDocumentName',\n                value: this.options.conference.useRoomAsSharedDocumentName\n            }).up();\n    }\n    elem.up();\n\n    return elem;\n};\n\n\nModerator.prototype.parseSessionId = function(resultIq) {\n    // eslint-disable-next-line newline-per-chained-call\n    const sessionId = $(resultIq).find('conference').attr('session-id');\n\n    if (sessionId) {\n        logger.info(`Received sessionId:  ${sessionId}`);\n        Settings.sessionId = sessionId;\n    }\n};\n\nModerator.prototype.parseConfigOptions = function(resultIq) {\n    // eslint-disable-next-line newline-per-chained-call\n    this.setFocusUserJid($(resultIq).find('conference').attr('focusjid'));\n\n    const authenticationEnabled\n        = $(resultIq).find(\n            '>conference>property'\n            + '[name=\\'authentication\\'][value=\\'true\\']').length > 0;\n\n    logger.info(`Authentication enabled: ${authenticationEnabled}`);\n\n    this.externalAuthEnabled = $(resultIq).find(\n        '>conference>property'\n            + '[name=\\'externalAuth\\'][value=\\'true\\']').length > 0;\n\n    logger.info(\n        `External authentication enabled: ${this.externalAuthEnabled}`);\n\n    if (!this.externalAuthEnabled) {\n        // We expect to receive sessionId in 'internal' authentication mode\n        this.parseSessionId(resultIq);\n    }\n\n    // eslint-disable-next-line newline-per-chained-call\n    const authIdentity = $(resultIq).find('>conference').attr('identity');\n\n    this.eventEmitter.emit(AuthenticationEvents.IDENTITY_UPDATED,\n        authenticationEnabled, authIdentity);\n\n    // Check if focus has auto-detected Jigasi component(this will be also\n    // included if we have passed our host from the config)\n    if ($(resultIq).find(\n        '>conference>property'\n        + '[name=\\'sipGatewayEnabled\\'][value=\\'true\\']').length) {\n        this.sipGatewayEnabled = true;\n    }\n\n    logger.info(`Sip gateway enabled:  ${this.sipGatewayEnabled}`);\n};\n\n// FIXME We need to show the fact that we're waiting for the focus to the user\n// (or that the focus is not available)\n/**\n * Allocates the conference focus.\n *\n * @param {Function} callback - the function to be called back upon the\n * successful allocation of the conference focus\n * @returns {Promise} - Resolved when Jicofo allows to join the room. It's never\n * rejected and it'll keep on pinging Jicofo forever.\n */\nModerator.prototype.allocateConferenceFocus = function() {\n    return new Promise(resolve => {\n        // Try to use focus user JID from the config\n        this.setFocusUserJid(this.options.connection.focusUserJid);\n\n        // Send create conference IQ\n        this.connection.sendIQ(\n            this.createConferenceIq(),\n            result => this._allocateConferenceFocusSuccess(result, resolve),\n            error => this._allocateConferenceFocusError(error, resolve));\n\n        // XXX We're pressed for time here because we're beginning a complex\n        // and/or lengthy conference-establishment process which supposedly\n        // involves multiple RTTs. We don't have the time to wait for Strophe to\n        // decide to send our IQ.\n        this.connection.flush();\n    });\n};\n\n/**\n * Invoked by {@link #allocateConferenceFocus} upon its request receiving an\n * error result.\n *\n * @param error - the error result of the request that\n * {@link #allocateConferenceFocus} sent\n * @param {Function} callback - the function to be called back upon the\n * successful allocation of the conference focus\n */\nModerator.prototype._allocateConferenceFocusError = function(error, callback) {\n    // If the session is invalid, remove and try again without session ID to get\n    // a new one\n    const invalidSession\n        = $(error).find('>error>session-invalid').length\n            || $(error).find('>error>not-acceptable').length;\n\n    if (invalidSession) {\n        logger.info('Session expired! - removing');\n        Settings.sessionId = undefined;\n    }\n    if ($(error).find('>error>graceful-shutdown').length) {\n        this.eventEmitter.emit(XMPPEvents.GRACEFUL_SHUTDOWN);\n\n        return;\n    }\n\n    // Check for error returned by the reservation system\n    const reservationErr = $(error).find('>error>reservation-error');\n\n    if (reservationErr.length) {\n        // Trigger error event\n        const errorCode = reservationErr.attr('error-code');\n        const errorTextNode = $(error).find('>error>text');\n        let errorMsg;\n\n        if (errorTextNode) {\n            errorMsg = errorTextNode.text();\n        }\n        this.eventEmitter.emit(\n            XMPPEvents.RESERVATION_ERROR,\n            errorCode,\n            errorMsg);\n\n        return;\n    }\n\n    // Not authorized to create new room\n    if ($(error).find('>error>not-authorized').length) {\n        logger.warn('Unauthorized to start the conference', error);\n        const toDomain = Strophe.getDomainFromJid(error.getAttribute('to'));\n\n        if (toDomain !== this.options.connection.hosts.anonymousdomain) {\n            // FIXME \"is external\" should come either from the focus or\n            // config.js\n            this.externalAuthEnabled = true;\n        }\n        this.eventEmitter.emit(XMPPEvents.AUTHENTICATION_REQUIRED);\n\n        return;\n    }\n    const waitMs = this.getNextErrorTimeout();\n    const errmsg = `Focus error, retry after ${waitMs}`;\n\n    GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\n    logger.error(errmsg, error);\n\n    // Show message\n    const focusComponent = this.getFocusComponent();\n    const retrySec = waitMs / 1000;\n\n    // FIXME: message is duplicated ? Do not show in case of session invalid\n    // which means just a retry\n\n    if (!invalidSession) {\n        this.eventEmitter.emit(\n            XMPPEvents.FOCUS_DISCONNECTED,\n            focusComponent,\n            retrySec);\n    }\n\n    // Reset response timeout\n    this.getNextTimeout(true);\n    window.setTimeout(\n        () => this.allocateConferenceFocus().then(callback),\n        waitMs);\n};\n\n/**\n * Invoked by {@link #allocateConferenceFocus} upon its request receiving a\n * success (i.e. non-error) result.\n *\n * @param result - the success (i.e. non-error) result of the request that\n * {@link #allocateConferenceFocus} sent\n * @param {Function} callback - the function to be called back upon the\n * successful allocation of the conference focus\n */\nModerator.prototype._allocateConferenceFocusSuccess = function(\n        result,\n        callback) {\n    // Setup config options\n    this.parseConfigOptions(result);\n\n    // Reset the error timeout (because we haven't failed here).\n    this.getNextErrorTimeout(true);\n\n    // eslint-disable-next-line newline-per-chained-call\n    if ($(result).find('conference').attr('ready') === 'true') {\n        // Reset the non-error timeout (because we've succeeded here).\n        this.getNextTimeout(true);\n\n        // Exec callback\n        callback();\n    } else {\n        const waitMs = this.getNextTimeout();\n\n        logger.info(`Waiting for the focus... ${waitMs}`);\n        window.setTimeout(\n            () => this.allocateConferenceFocus().then(callback),\n            waitMs);\n    }\n};\n\nModerator.prototype.authenticate = function() {\n    return new Promise((resolve, reject) => {\n        this.connection.sendIQ(\n            this.createConferenceIq(),\n            result => {\n                this.parseSessionId(result);\n                resolve();\n            },\n            errorIq => reject({\n                error: $(errorIq).find('iq>error :first')\n                    .prop('tagName'),\n                message: $(errorIq).find('iq>error>text')\n                    .text()\n            })\n        );\n    });\n};\n\nModerator.prototype.getLoginUrl = function(urlCallback, failureCallback) {\n    this._getLoginUrl(/* popup */ false, urlCallback, failureCallback);\n};\n\n/**\n *\n * @param {boolean} popup false for {@link Moderator#getLoginUrl} or true for\n * {@link Moderator#getPopupLoginUrl}\n * @param urlCb\n * @param failureCb\n */\nModerator.prototype._getLoginUrl = function(popup, urlCb, failureCb) {\n    const iq = $iq({ to: this.getFocusComponent(),\n        type: 'get' });\n    const attrs = {\n        xmlns: 'http://jitsi.org/protocol/focus',\n        room: this.roomName,\n        'machine-uid': Settings.machineId\n    };\n    let str = 'auth url'; // for logger\n\n    if (popup) {\n        attrs.popup = true;\n        str = `POPUP ${str}`;\n    }\n    iq.c('login-url', attrs);\n\n    /**\n     * Implements a failure callback which reports an error message and an error\n     * through (1) GlobalOnErrorHandler, (2) logger, and (3) failureCb.\n     *\n     * @param {string} errmsg the error messsage to report\n     * @param {*} error the error to report (in addition to errmsg)\n     */\n    function reportError(errmsg, err) {\n        GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\n        logger.error(errmsg, err);\n        failureCb(err);\n    }\n    this.connection.sendIQ(\n        iq,\n        result => {\n            // eslint-disable-next-line newline-per-chained-call\n            let url = $(result).find('login-url').attr('url');\n\n            url = decodeURIComponent(url);\n            if (url) {\n                logger.info(`Got ${str}: ${url}`);\n                urlCb(url);\n            } else {\n                reportError(`Failed to get ${str} from the focus`, result);\n            }\n        },\n        reportError.bind(undefined, `Get ${str} error`)\n    );\n};\n\nModerator.prototype.getPopupLoginUrl = function(urlCallback, failureCallback) {\n    this._getLoginUrl(/* popup */ true, urlCallback, failureCallback);\n};\n\nModerator.prototype.logout = function(callback) {\n    const iq = $iq({ to: this.getFocusComponent(),\n        type: 'set' });\n    const { sessionId } = Settings;\n\n    if (!sessionId) {\n        callback();\n\n        return;\n    }\n    iq.c('logout', {\n        xmlns: 'http://jitsi.org/protocol/focus',\n        'session-id': sessionId\n    });\n    this.connection.sendIQ(\n        iq,\n        result => {\n            // eslint-disable-next-line newline-per-chained-call\n            let logoutUrl = $(result).find('logout').attr('logout-url');\n\n            if (logoutUrl) {\n                logoutUrl = decodeURIComponent(logoutUrl);\n            }\n            logger.info(`Log out OK, url: ${logoutUrl}`, result);\n            Settings.sessionId = undefined;\n            callback(logoutUrl);\n        },\n        error => {\n            const errmsg = 'Logout error';\n\n            GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\n            logger.error(errmsg, error);\n        }\n    );\n};\n","/* global $, __filename */\n\nimport {\n    ACTION_JINGLE_TR_RECEIVED,\n    ACTION_JINGLE_TR_SUCCESS,\n    createJingleEvent\n} from '../../service/statistics/AnalyticsEvents';\nimport { getLogger } from 'jitsi-meet-logger';\nimport { $iq, Strophe } from 'strophe.js';\n\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport RandomUtil from '../util/RandomUtil';\nimport Statistics from '../statistics/statistics';\n\nimport JingleSessionPC from './JingleSessionPC';\nimport ConnectionPlugin from './ConnectionPlugin';\n\nconst logger = getLogger(__filename);\n\n// XXX Strophe is build around the idea of chaining function calls so allow long\n// function call chains.\n/* eslint-disable newline-per-chained-call */\n\n/**\n *\n */\nclass JingleConnectionPlugin extends ConnectionPlugin {\n    /**\n     * Creates new <tt>JingleConnectionPlugin</tt>\n     * @param {XMPP} xmpp\n     * @param {EventEmitter} eventEmitter\n     * @param {Object} iceConfig an object that holds the iceConfig to be passed\n     * to the p2p and the jvb <tt>PeerConnection</tt>.\n     */\n    constructor(xmpp, eventEmitter, iceConfig) {\n        super();\n        this.xmpp = xmpp;\n        this.eventEmitter = eventEmitter;\n        this.sessions = {};\n        this.jvbIceConfig = iceConfig.jvb;\n        this.p2pIceConfig = iceConfig.p2p;\n        this.mediaConstraints = {\n            offerToReceiveAudio: true,\n            offerToReceiveVideo: true\n        };\n    }\n\n    /**\n     *\n     * @param connection\n     */\n    init(connection) {\n        super.init(connection);\n        this.connection.addHandler(this.onJingle.bind(this),\n            'urn:xmpp:jingle:1', 'iq', 'set', null, null);\n    }\n\n    /**\n     *\n     * @param iq\n     */\n    onJingle(iq) {\n        const sid = $(iq).find('jingle').attr('sid');\n        const action = $(iq).find('jingle').attr('action');\n        const fromJid = iq.getAttribute('from');\n\n        // send ack first\n        const ack = $iq({ type: 'result',\n            to: fromJid,\n            id: iq.getAttribute('id')\n        });\n\n        logger.log(`on jingle ${action} from ${fromJid}`, iq);\n        let sess = this.sessions[sid];\n\n        if (action !== 'session-initiate') {\n            if (!sess) {\n                ack.attrs({ type: 'error' });\n                ack.c('error', { type: 'cancel' })\n                    .c('item-not-found', {\n                        xmlns: 'urn:ietf:params:xml:ns:xmpp-stanzas'\n                    })\n                    .up()\n                    .c('unknown-session', {\n                        xmlns: 'urn:xmpp:jingle:errors:1'\n                    });\n                logger.warn('invalid session id', iq);\n                this.connection.send(ack);\n\n                return true;\n            }\n\n            // local jid is not checked\n            if (fromJid !== sess.remoteJid) {\n                logger.warn(\n                    'jid mismatch for session id', sid, sess.remoteJid, iq);\n                ack.attrs({ type: 'error' });\n                ack.c('error', { type: 'cancel' })\n                    .c('item-not-found', {\n                        xmlns: 'urn:ietf:params:xml:ns:xmpp-stanzas'\n                    })\n                    .up()\n                    .c('unknown-session', {\n                        xmlns: 'urn:xmpp:jingle:errors:1'\n                    });\n                this.connection.send(ack);\n\n                return true;\n            }\n        } else if (sess !== undefined) {\n            // Existing session with same session id. This might be out-of-order\n            // if the sess.remoteJid is the same as from.\n            ack.attrs({ type: 'error' });\n            ack.c('error', { type: 'cancel' })\n                .c('service-unavailable', {\n                    xmlns: 'urn:ietf:params:xml:ns:xmpp-stanzas'\n                })\n                .up();\n            logger.warn('duplicate session id', sid, iq);\n            this.connection.send(ack);\n\n            return true;\n        }\n        const now = window.performance.now();\n\n        // FIXME that should work most of the time, but we'd have to\n        // think how secure it is to assume that user with \"focus\"\n        // nickname is Jicofo.\n        const isP2P = Strophe.getResourceFromJid(fromJid) !== 'focus';\n\n        // see http://xmpp.org/extensions/xep-0166.html#concepts-session\n\n        switch (action) {\n        case 'session-initiate': {\n            logger.log('(TIME) received session-initiate:\\t', now);\n            const startMuted = $(iq).find('jingle>startmuted');\n\n            if (startMuted && startMuted.length > 0) {\n                const audioMuted = startMuted.attr('audio');\n                const videoMuted = startMuted.attr('video');\n\n                this.eventEmitter.emit(\n                    XMPPEvents.START_MUTED_FROM_FOCUS,\n                    audioMuted === 'true',\n                    videoMuted === 'true');\n            }\n\n            logger.info(\n                `Marking session from ${fromJid\n                } as ${isP2P ? '' : '*not*'} P2P`);\n            sess\n                = new JingleSessionPC(\n                    $(iq).find('jingle').attr('sid'),\n                    $(iq).attr('to'),\n                    fromJid,\n                    this.connection,\n                    this.mediaConstraints,\n                    isP2P ? this.p2pIceConfig : this.jvbIceConfig,\n                    isP2P,\n                    /* initiator */ false);\n\n            this.sessions[sess.sid] = sess;\n\n            this.eventEmitter.emit(XMPPEvents.CALL_INCOMING,\n                sess, $(iq).find('>jingle'), now);\n            break;\n        }\n        case 'session-accept': {\n            this.eventEmitter.emit(\n                XMPPEvents.CALL_ACCEPTED, sess, $(iq).find('>jingle'));\n            break;\n        }\n        case 'content-modify': {\n            sess.modifyContents($(iq).find('>jingle'));\n            break;\n        }\n        case 'transport-info': {\n            this.eventEmitter.emit(\n                XMPPEvents.TRANSPORT_INFO, sess, $(iq).find('>jingle'));\n            break;\n        }\n        case 'session-terminate': {\n            logger.log('terminating...', sess.sid);\n            let reasonCondition = null;\n            let reasonText = null;\n\n            if ($(iq).find('>jingle>reason').length) {\n                reasonCondition\n                    = $(iq).find('>jingle>reason>:first')[0].tagName;\n                reasonText = $(iq).find('>jingle>reason>text').text();\n            }\n            this.terminate(sess.sid, reasonCondition, reasonText);\n            this.eventEmitter.emit(XMPPEvents.CALL_ENDED,\n                sess, reasonCondition, reasonText);\n            break;\n        }\n        case 'transport-replace':\n            logger.info('(TIME) Start transport replace', now);\n            Statistics.sendAnalytics(createJingleEvent(\n                ACTION_JINGLE_TR_RECEIVED,\n                {\n                    p2p: isP2P,\n                    value: now\n                }));\n\n            sess.replaceTransport($(iq).find('>jingle'), () => {\n                const successTime = window.performance.now();\n\n                logger.info('(TIME) Transport replace success!', successTime);\n                Statistics.sendAnalytics(createJingleEvent(\n                    ACTION_JINGLE_TR_SUCCESS,\n                    {\n                        p2p: isP2P,\n                        value: successTime\n                    }));\n            }, error => {\n                GlobalOnErrorHandler.callErrorHandler(error);\n                logger.error('Transport replace failed', error);\n                sess.sendTransportReject();\n            });\n            break;\n        case 'addsource': // FIXME: proprietary, un-jingleish\n        case 'source-add': // FIXME: proprietary\n            sess.addRemoteStream($(iq).find('>jingle>content'));\n            break;\n        case 'removesource': // FIXME: proprietary, un-jingleish\n        case 'source-remove': // FIXME: proprietary\n            sess.removeRemoteStream($(iq).find('>jingle>content'));\n            break;\n        default:\n            logger.warn('jingle action not implemented', action);\n            ack.attrs({ type: 'error' });\n            ack.c('error', { type: 'cancel' })\n                .c('bad-request',\n                    { xmlns: 'urn:ietf:params:xml:ns:xmpp-stanzas' })\n                .up();\n            break;\n        }\n        this.connection.send(ack);\n\n        return true;\n    }\n\n    /**\n     * Creates new <tt>JingleSessionPC</tt> meant to be used in a direct P2P\n     * connection, configured as 'initiator'.\n     * @param {string} me our JID\n     * @param {string} peer remote participant's JID\n     * @return {JingleSessionPC}\n     */\n    newP2PJingleSession(me, peer) {\n        const sess\n            = new JingleSessionPC(\n                RandomUtil.randomHexString(12),\n                me,\n                peer,\n                this.connection,\n                this.mediaConstraints,\n                this.p2pIceConfig,\n                /* P2P */ true,\n                /* initiator */ true);\n\n        this.sessions[sess.sid] = sess;\n\n        return sess;\n    }\n\n    /**\n     *\n     * @param sid\n     * @param reasonCondition\n     * @param reasonText\n     */\n    terminate(sid, reasonCondition, reasonText) {\n        if (this.sessions.hasOwnProperty(sid)) {\n            if (this.sessions[sid].state !== 'ended') {\n                this.sessions[sid].onTerminated(reasonCondition, reasonText);\n            }\n            delete this.sessions[sid];\n        }\n    }\n\n    /**\n     *\n     */\n    getStunAndTurnCredentials() {\n        // get stun and turn configuration from server via xep-0215\n        // uses time-limited credentials as described in\n        // http://tools.ietf.org/html/draft-uberti-behave-turn-rest-00\n        //\n        // See https://modules.prosody.im/mod_turncredentials.html\n        // for a prosody module which implements this.\n        //\n        // Currently, this doesn't work with updateIce and therefore credentials\n        // with a long validity have to be fetched before creating the\n        // peerconnection.\n        // TODO: implement refresh via updateIce as described in\n        //      https://code.google.com/p/webrtc/issues/detail?id=1650\n        this.connection.sendIQ(\n            $iq({ type: 'get',\n                to: this.connection.domain })\n                .c('services', { xmlns: 'urn:xmpp:extdisco:1' }),\n            res => {\n                const iceservers = [];\n\n                $(res).find('>services>service').each((idx, el) => {\n                    // eslint-disable-next-line no-param-reassign\n                    el = $(el);\n                    const dict = {};\n                    const type = el.attr('type');\n\n                    switch (type) {\n                    case 'stun':\n                        dict.url = `stun:${el.attr('host')}`;\n                        if (el.attr('port')) {\n                            dict.url += `:${el.attr('port')}`;\n                        }\n                        iceservers.push(dict);\n                        break;\n                    case 'turn':\n                    case 'turns': {\n                        dict.url = `${type}:`;\n                        const username = el.attr('username');\n\n                        // https://code.google.com/p/webrtc/issues/detail\n                        // ?id=1508\n\n                        if (username) {\n                            const match\n                                = navigator.userAgent.match(\n                                    /Chrom(e|ium)\\/([0-9]+)\\./);\n\n                            if (match && parseInt(match[2], 10) < 28) {\n                                dict.url += `${username}@`;\n                            } else {\n                                // only works in M28\n                                dict.username = username;\n                            }\n                        }\n                        dict.url += el.attr('host');\n                        const port = el.attr('port');\n\n                        if (port) {\n                            dict.url += `:${el.attr('port')}`;\n                        }\n                        const transport = el.attr('transport');\n\n                        if (transport && transport !== 'udp') {\n                            dict.url += `?transport=${transport}`;\n                        }\n\n                        dict.credential = el.attr('password')\n                                || dict.credential;\n                        iceservers.push(dict);\n                        break;\n                    }\n                    }\n                });\n\n                const options = this.xmpp.options;\n\n                if (options.useStunTurn) {\n                    // we want to filter and leave only tcp/turns candidates\n                    // which make sense for the jvb connections\n                    this.jvbIceConfig.iceServers\n                        = iceservers.filter(s => s.url.startsWith('turns'));\n                }\n\n                if (options.p2p && options.p2p.useStunTurn) {\n                    this.p2pIceConfig.iceServers = iceservers;\n                }\n\n            }, err => {\n                logger.warn('getting turn credentials failed', err);\n                logger.warn('is mod_turncredentials or similar installed?');\n            });\n\n        // implement push?\n    }\n\n    /**\n     * Returns the data saved in 'updateLog' in a format to be logged.\n     */\n    getLog() {\n        const data = {};\n\n        Object.keys(this.sessions).forEach(sid => {\n            const session = this.sessions[sid];\n            const pc = session.peerconnection;\n\n            if (pc && pc.updateLog) {\n                // FIXME: should probably be a .dump call\n                data[`jingle_${sid}`] = {\n                    updateLog: pc.updateLog,\n                    stats: pc.stats,\n                    url: window.location.href\n                };\n            }\n        });\n\n        return data;\n    }\n}\n\n/* eslint-enable newline-per-chained-call */\n\n/**\n *\n * @param XMPP\n * @param eventEmitter\n * @param iceConfig\n */\nexport default function initJingle(XMPP, eventEmitter, iceConfig) {\n    Strophe.addConnectionPlugin(\n        'jingle',\n        new JingleConnectionPlugin(XMPP, eventEmitter, iceConfig));\n}\n","/**\n * Implements a simple hash code for a string (see\n * https://en.wikipedia.org/wiki/Java_hashCode()).\n *\n * @param {string} The string to return a hash of.\n * @return {Number} the integer hash code of the string.\n */\nfunction integerHash(string) {\n    if (!string) {\n        return 0;\n    }\n\n    let char, hash = 0, i;\n\n    for (i = 0; i < string.length; i++) {\n        char = string.charCodeAt(i);\n        hash += char * Math.pow(31, string.length - 1 - i);\n        hash = Math.abs(hash | 0); // eslint-disable-line no-bitwise\n    }\n\n    return hash;\n}\n\nmodule.exports = { integerHash };\n","/* global __filename */\nimport { getLogger } from 'jitsi-meet-logger';\nimport * as JingleSessionState from './JingleSessionState';\n\nconst logger = getLogger(__filename);\n\n/**\n * JingleSession provides an API to manage a single Jingle session. We will\n * have different implementations depending on the underlying interface used\n * (i.e. WebRTC and ORTC) and here we hold the code common to all of them.\n */\nexport default class JingleSession {\n\n    /* eslint-disable max-params */\n\n    /**\n     * Creates new <tt>JingleSession</tt>.\n     * @param {string} sid the Jingle session identifier\n     * @param {string} localJid our JID\n     * @param {string} remoteJid the JID of the remote peer\n     * @param {Strophe.Connection} connection the XMPP connection\n     * @param {Object} mediaConstraints the media constraints object passed to\n     * the PeerConnection onCreateAnswer/Offer as defined by the WebRTC.\n     * @param {Object} iceConfig the ICE servers config object as defined by\n     * the WebRTC. Passed to the PeerConnection's constructor.\n     * @param {boolean} isInitiator indicates if it will be the side which\n     * initiates the session.\n     */\n    constructor(\n            sid,\n            localJid,\n            remoteJid,\n            connection,\n            mediaConstraints,\n            iceConfig,\n            isInitiator) {\n        this.sid = sid;\n        this.localJid = localJid;\n        this.remoteJid = remoteJid;\n        this.connection = connection;\n        this.mediaConstraints = mediaConstraints;\n        this.iceConfig = iceConfig;\n\n        /**\n         * Indicates whether this instance is an initiator or an answerer of\n         * the Jingle session.\n         * @type {boolean}\n         */\n        this.isInitiator = isInitiator;\n\n        /**\n         * Whether to use dripping or not. Dripping is sending trickle\n         * candidates not one-by-one.\n         */\n        this.usedrip = true;\n\n        /**\n         *  When dripping is used, stores ICE candidates which are to be sent.\n         */\n        this.dripContainer = [];\n\n        /**\n         * The chat room instance associated with the session.\n         * @type {ChatRoom}\n         */\n        this.room = null;\n\n        /**\n         * Jingle session state - uninitialized until {@link initialize} is\n         * called @type {JingleSessionState}\n         */\n        this.state = null;\n\n        /**\n         * The RTC service instance\n         * @type {RTC}\n         */\n        this.rtc = null;\n    }\n\n    /**\n     * Returns XMPP address of this session's initiator.\n     * @return {string}\n     */\n    get initiatorJid() {\n        return this.isInitiator ? this.localJid : this.remoteJid;\n    }\n\n    /**\n     * Returns XMPP address of this session's responder.\n     * @return {string}\n     */\n    get responderJid() {\n        return this.isInitiator ? this.remoteJid : this.localJid;\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Prepares this object to initiate a session.\n     * @param {ChatRoom} room the chat room for the conference associated with\n     * this session\n     * @param {RTC} rtc the RTC service instance\n     * @param {object} options - the options, see implementing class's\n     * {@link #doInitialize} description for more details.\n     */\n    initialize(room, rtc, options) {\n        if (this.state !== null) {\n            const errmsg\n                = `attempt to initiate on session ${this.sid}\n                   in state ${this.state}`;\n\n            logger.error(errmsg);\n            throw new Error(errmsg);\n        }\n        this.room = room;\n        this.rtc = rtc;\n        this.state = JingleSessionState.PENDING;\n        this.doInitialize(options);\n    }\n\n    /**\n     * The implementing class finishes initialization here. Called at the end of\n     * {@link initialize}.\n     * @param {Object} options - The options specific to the implementing class.\n     * @protected\n     */\n    doInitialize(options) { } // eslint-disable-line no-unused-vars, no-empty-function, max-len\n\n    /* eslint-disable no-unused-vars, no-empty-function */\n\n    /**\n     * Adds the ICE candidates found in the 'contents' array as remote\n     * candidates?\n     * Note: currently only used on transport-info\n     *\n     * @param contents\n     */\n    addIceCandidates(contents) {}\n\n    /* eslint-enable no-unused-vars, no-empty-function */\n\n    /**\n     * Returns current state of this <tt>JingleSession</tt> instance.\n     * @returns {JingleSessionState} the current state of this session instance.\n     */\n    getState() {\n        return this.state;\n    }\n\n    /* eslint-disable no-unused-vars, no-empty-function */\n\n    /**\n     * Handles an 'add-source' event.\n     *\n     * @param contents an array of Jingle 'content' elements.\n     */\n    addSources(contents) {}\n\n    /**\n     * Handles a 'remove-source' event.\n     *\n     * @param contents an array of Jingle 'content' elements.\n     */\n    removeSources(contents) {}\n\n    /**\n     * Terminates this Jingle session by sending session-terminate\n     * @param success a callback called once the 'session-terminate' packet has\n     * been acknowledged with RESULT.\n     * @param failure a callback called when either timeout occurs or ERROR\n     * response is received.\n     * @param {Object} options\n     * @param {string} [options.reason] XMPP Jingle error condition\n     * @param {string} [options.reasonDescription] some meaningful error message\n     * @param {boolean} [options.sendSessionTerminate=true] set to false to skip\n     * sending session-terminate. It may not make sense to send it if the XMPP\n     * connection has been closed already or if the remote peer has disconnected\n     */\n    terminate(success, failure, options) {}\n\n    /**\n     * Handles an offer from the remote peer (prepares to accept a session).\n     * @param jingle the 'jingle' XML element.\n     * @param success callback called when we the incoming session has been\n     * accepted\n     * @param failure callback called when we fail for any reason, will supply\n     * error object with details(which is meant more to be printed to the logger\n     * than analysed in the code, as the error is unrecoverable anyway)\n     */\n    acceptOffer(jingle, success, failure) {}\n\n    /**\n     * Returns the JID of the initiator of the jingle session.\n     */\n    _getInitiatorJid() {\n        return this.isInitiator ? this.localJid : this.remoteJid;\n    }\n\n    /* eslint-enable no-unused-vars, no-empty-function */\n}\n","/* global __filename */\n\nimport { getLogger } from 'jitsi-meet-logger';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport * as SignalingEvents from '../../service/RTC/SignalingEvents';\nimport SignalingLayer from '../../service/RTC/SignalingLayer';\n\nconst logger = getLogger(__filename);\n\n/**\n * Default XMPP implementation of the {@link SignalingLayer} interface. Obtains\n * the data from the MUC presence.\n */\nexport default class SignalingLayerImpl extends SignalingLayer {\n    /**\n     * Creates new instance.\n     */\n    constructor() {\n        super();\n\n        /**\n         * A map that stores SSRCs of remote streams. And is used only locally\n         * We store the mapping when jingle is received, and later is used\n         * onaddstream webrtc event where we have only the ssrc\n         * FIXME: This map got filled and never cleaned and can grow during long\n         * conference\n         * @type {Map<number, string>} maps SSRC number to jid\n         */\n        this.ssrcOwners = new Map();\n\n        /**\n         *\n         * @type {ChatRoom|null}\n         */\n        this.chatRoom = null;\n    }\n\n    /**\n     * Sets the <tt>ChatRoom</tt> instance used and binds presence listeners.\n     * @param {ChatRoom} room\n     */\n    setChatRoom(room) {\n        const oldChatRoom = this.chatRoom;\n\n        this.chatRoom = room;\n        if (oldChatRoom) {\n            oldChatRoom.removePresenceListener(\n                'audiomuted', this._audioMuteHandler);\n            oldChatRoom.removePresenceListener(\n                'videomuted', this._videoMuteHandler);\n            oldChatRoom.removePresenceListener(\n                'videoType', this._videoTypeHandler);\n        }\n        if (room) {\n            // SignalingEvents\n            this._audioMuteHandler = (node, from) => {\n                this.eventEmitter.emit(\n                    SignalingEvents.PEER_MUTED_CHANGED,\n                    from, MediaType.AUDIO, node.value === 'true');\n            };\n            room.addPresenceListener('audiomuted', this._audioMuteHandler);\n\n            this._videoMuteHandler = (node, from) => {\n                this.eventEmitter.emit(\n                    SignalingEvents.PEER_MUTED_CHANGED,\n                    from, MediaType.VIDEO, node.value === 'true');\n            };\n            room.addPresenceListener('videomuted', this._videoMuteHandler);\n\n            this._videoTypeHandler = (node, from) => {\n                this.eventEmitter.emit(\n                    SignalingEvents.PEER_VIDEO_TYPE_CHANGED,\n                    from, node.value);\n            };\n            room.addPresenceListener('videoType', this._videoTypeHandler);\n        }\n    }\n\n    /**\n     * @inheritDoc\n     */\n    getPeerMediaInfo(owner, mediaType) {\n        if (this.chatRoom) {\n            return this.chatRoom.getMediaPresenceInfo(owner, mediaType);\n        }\n        logger.error('Requested peer media info, before room was set');\n    }\n\n    /**\n     * @inheritDoc\n     */\n    getSSRCOwner(ssrc) {\n        return this.ssrcOwners.get(ssrc);\n    }\n\n    /**\n     * Set an SSRC owner.\n     * @param {number} ssrc an SSRC to be owned\n     * @param {string} endpointId owner's ID (MUC nickname)\n     * @throws TypeError if <tt>ssrc</tt> is not a number\n     */\n    setSSRCOwner(ssrc, endpointId) {\n        if (typeof ssrc !== 'number') {\n            throw new TypeError(`SSRC(${ssrc}) must be a number`);\n        }\n        this.ssrcOwners.set(ssrc, endpointId);\n    }\n}\n","\nimport Listenable from '../../modules/util/Listenable';\n\n/**\n * An object that carries the info about specific media type advertised by\n * participant in the signaling channel.\n * @typedef {Object} PeerMediaInfo\n * @property {boolean} muted indicates if the media is currently muted\n * @property {VideoType|undefined} videoType the type of the video if applicable\n */\n\n/**\n * Interface used to expose the information carried over the signaling channel\n * which is not available to the RTC module in the media SDP.\n *\n * @interface SignalingLayer\n */\nexport default class SignalingLayer extends Listenable {\n\n    /**\n     * Obtains the endpoint ID for given SSRC.\n     * @param {number} ssrc the SSRC number.\n     * @return {string|null} the endpoint ID for given media SSRC.\n     */\n    getSSRCOwner(ssrc) { // eslint-disable-line no-unused-vars\n        throw new Error('not implemented');\n    }\n\n    /**\n     * Obtains the info about given media advertised in the MUC presence of\n     * the participant identified by the given MUC JID.\n     * @param {string} owner the MUC jid of the participant for whom\n     * {@link PeerMediaInfo} will be obtained.\n     * @param {MediaType} mediaType the type of the media for which presence\n     * info will be obtained.\n     * @return {PeerMediaInfo|null} presenceInfo an object with media presence\n     * info or <tt>null</tt> either if there is no presence available for given\n     * JID or if the media type given is invalid.\n     */\n    getPeerMediaInfo(owner, mediaType) { // eslint-disable-line no-unused-vars\n        throw new Error('not implemented');\n    }\n}\n","import async from 'async';\n\n/**\n * A queue for async task execution.\n */\nexport default class AsyncQueue {\n    /**\n     * Creates new instance.\n     */\n    constructor() {\n        this._queue = async.queue(this._processQueueTasks.bind(this), 1);\n        this._stopped = false;\n    }\n\n    /**\n     * Removes any pending tasks from the queue.\n     */\n    clear() {\n        this._queue.kill();\n    }\n\n    /**\n     * Internal task processing implementation which makes things work.\n     */\n    _processQueueTasks(task, finishedCallback) {\n        task(finishedCallback);\n    }\n\n    /**\n     * The 'task' function will be given a callback it MUST call with either:\n     *  1) No arguments if it was successful or\n     *  2) An error argument if there was an error\n     * If the task wants to process the success or failure of the task, it\n     * should pass the {@code callback} to the push function, e.g.:\n     * queue.push(task, (err) => {\n     *     if (err) {\n     *         // error handling\n     *     } else {\n     *         // success handling\n     *     }\n     * });\n     *\n     * @param {function} task - The task to be executed. See the description above.\n     * @param {function} [callback] - Optional callback to be called after the task has been executed.\n     */\n    push(task, callback) {\n        if (this._stopped) {\n            callback && callback(new Error('The queue has been stopped'));\n\n            return;\n        }\n        this._queue.push(task, callback);\n    }\n\n    /**\n     * Shutdowns the queue. All already queued tasks will execute, but no future tasks can be added. If a task is added\n     * after the queue has been shutdown then the callback will be called with an error.\n     */\n    shutdown() {\n        this._stopped = true;\n    }\n}\n","/*!\n * async\n * https://github.com/caolan/async\n *\n * Copyright 2010-2014 Caolan McMahon\n * Released under the MIT license\n */\n/*jshint onevar: false, indent:4 */\n/*global setImmediate: false, setTimeout: false, console: false */\n(function () {\n\n    var async = {};\n\n    // global on the server, window in the browser\n    var root, previous_async;\n\n    root = this;\n    if (root != null) {\n      previous_async = root.async;\n    }\n\n    async.noConflict = function () {\n        root.async = previous_async;\n        return async;\n    };\n\n    function only_once(fn) {\n        var called = false;\n        return function() {\n            if (called) throw new Error(\"Callback was already called.\");\n            called = true;\n            fn.apply(root, arguments);\n        }\n    }\n\n    //// cross-browser compatiblity functions ////\n\n    var _toString = Object.prototype.toString;\n\n    var _isArray = Array.isArray || function (obj) {\n        return _toString.call(obj) === '[object Array]';\n    };\n\n    var _each = function (arr, iterator) {\n        if (arr.forEach) {\n            return arr.forEach(iterator);\n        }\n        for (var i = 0; i < arr.length; i += 1) {\n            iterator(arr[i], i, arr);\n        }\n    };\n\n    var _map = function (arr, iterator) {\n        if (arr.map) {\n            return arr.map(iterator);\n        }\n        var results = [];\n        _each(arr, function (x, i, a) {\n            results.push(iterator(x, i, a));\n        });\n        return results;\n    };\n\n    var _reduce = function (arr, iterator, memo) {\n        if (arr.reduce) {\n            return arr.reduce(iterator, memo);\n        }\n        _each(arr, function (x, i, a) {\n            memo = iterator(memo, x, i, a);\n        });\n        return memo;\n    };\n\n    var _keys = function (obj) {\n        if (Object.keys) {\n            return Object.keys(obj);\n        }\n        var keys = [];\n        for (var k in obj) {\n            if (obj.hasOwnProperty(k)) {\n                keys.push(k);\n            }\n        }\n        return keys;\n    };\n\n    //// exported async module functions ////\n\n    //// nextTick implementation with browser-compatible fallback ////\n    if (typeof process === 'undefined' || !(process.nextTick)) {\n        if (typeof setImmediate === 'function') {\n            async.nextTick = function (fn) {\n                // not a direct alias for IE10 compatibility\n                setImmediate(fn);\n            };\n            async.setImmediate = async.nextTick;\n        }\n        else {\n            async.nextTick = function (fn) {\n                setTimeout(fn, 0);\n            };\n            async.setImmediate = async.nextTick;\n        }\n    }\n    else {\n        async.nextTick = process.nextTick;\n        if (typeof setImmediate !== 'undefined') {\n            async.setImmediate = function (fn) {\n              // not a direct alias for IE10 compatibility\n              setImmediate(fn);\n            };\n        }\n        else {\n            async.setImmediate = async.nextTick;\n        }\n    }\n\n    async.each = function (arr, iterator, callback) {\n        callback = callback || function () {};\n        if (!arr.length) {\n            return callback();\n        }\n        var completed = 0;\n        _each(arr, function (x) {\n            iterator(x, only_once(done) );\n        });\n        function done(err) {\n          if (err) {\n              callback(err);\n              callback = function () {};\n          }\n          else {\n              completed += 1;\n              if (completed >= arr.length) {\n                  callback();\n              }\n          }\n        }\n    };\n    async.forEach = async.each;\n\n    async.eachSeries = function (arr, iterator, callback) {\n        callback = callback || function () {};\n        if (!arr.length) {\n            return callback();\n        }\n        var completed = 0;\n        var iterate = function () {\n            iterator(arr[completed], function (err) {\n                if (err) {\n                    callback(err);\n                    callback = function () {};\n                }\n                else {\n                    completed += 1;\n                    if (completed >= arr.length) {\n                        callback();\n                    }\n                    else {\n                        iterate();\n                    }\n                }\n            });\n        };\n        iterate();\n    };\n    async.forEachSeries = async.eachSeries;\n\n    async.eachLimit = function (arr, limit, iterator, callback) {\n        var fn = _eachLimit(limit);\n        fn.apply(null, [arr, iterator, callback]);\n    };\n    async.forEachLimit = async.eachLimit;\n\n    var _eachLimit = function (limit) {\n\n        return function (arr, iterator, callback) {\n            callback = callback || function () {};\n            if (!arr.length || limit <= 0) {\n                return callback();\n            }\n            var completed = 0;\n            var started = 0;\n            var running = 0;\n\n            (function replenish () {\n                if (completed >= arr.length) {\n                    return callback();\n                }\n\n                while (running < limit && started < arr.length) {\n                    started += 1;\n                    running += 1;\n                    iterator(arr[started - 1], function (err) {\n                        if (err) {\n                            callback(err);\n                            callback = function () {};\n                        }\n                        else {\n                            completed += 1;\n                            running -= 1;\n                            if (completed >= arr.length) {\n                                callback();\n                            }\n                            else {\n                                replenish();\n                            }\n                        }\n                    });\n                }\n            })();\n        };\n    };\n\n\n    var doParallel = function (fn) {\n        return function () {\n            var args = Array.prototype.slice.call(arguments);\n            return fn.apply(null, [async.each].concat(args));\n        };\n    };\n    var doParallelLimit = function(limit, fn) {\n        return function () {\n            var args = Array.prototype.slice.call(arguments);\n            return fn.apply(null, [_eachLimit(limit)].concat(args));\n        };\n    };\n    var doSeries = function (fn) {\n        return function () {\n            var args = Array.prototype.slice.call(arguments);\n            return fn.apply(null, [async.eachSeries].concat(args));\n        };\n    };\n\n\n    var _asyncMap = function (eachfn, arr, iterator, callback) {\n        arr = _map(arr, function (x, i) {\n            return {index: i, value: x};\n        });\n        if (!callback) {\n            eachfn(arr, function (x, callback) {\n                iterator(x.value, function (err) {\n                    callback(err);\n                });\n            });\n        } else {\n            var results = [];\n            eachfn(arr, function (x, callback) {\n                iterator(x.value, function (err, v) {\n                    results[x.index] = v;\n                    callback(err);\n                });\n            }, function (err) {\n                callback(err, results);\n            });\n        }\n    };\n    async.map = doParallel(_asyncMap);\n    async.mapSeries = doSeries(_asyncMap);\n    async.mapLimit = function (arr, limit, iterator, callback) {\n        return _mapLimit(limit)(arr, iterator, callback);\n    };\n\n    var _mapLimit = function(limit) {\n        return doParallelLimit(limit, _asyncMap);\n    };\n\n    // reduce only has a series version, as doing reduce in parallel won't\n    // work in many situations.\n    async.reduce = function (arr, memo, iterator, callback) {\n        async.eachSeries(arr, function (x, callback) {\n            iterator(memo, x, function (err, v) {\n                memo = v;\n                callback(err);\n            });\n        }, function (err) {\n            callback(err, memo);\n        });\n    };\n    // inject alias\n    async.inject = async.reduce;\n    // foldl alias\n    async.foldl = async.reduce;\n\n    async.reduceRight = function (arr, memo, iterator, callback) {\n        var reversed = _map(arr, function (x) {\n            return x;\n        }).reverse();\n        async.reduce(reversed, memo, iterator, callback);\n    };\n    // foldr alias\n    async.foldr = async.reduceRight;\n\n    var _filter = function (eachfn, arr, iterator, callback) {\n        var results = [];\n        arr = _map(arr, function (x, i) {\n            return {index: i, value: x};\n        });\n        eachfn(arr, function (x, callback) {\n            iterator(x.value, function (v) {\n                if (v) {\n                    results.push(x);\n                }\n                callback();\n            });\n        }, function (err) {\n            callback(_map(results.sort(function (a, b) {\n                return a.index - b.index;\n            }), function (x) {\n                return x.value;\n            }));\n        });\n    };\n    async.filter = doParallel(_filter);\n    async.filterSeries = doSeries(_filter);\n    // select alias\n    async.select = async.filter;\n    async.selectSeries = async.filterSeries;\n\n    var _reject = function (eachfn, arr, iterator, callback) {\n        var results = [];\n        arr = _map(arr, function (x, i) {\n            return {index: i, value: x};\n        });\n        eachfn(arr, function (x, callback) {\n            iterator(x.value, function (v) {\n                if (!v) {\n                    results.push(x);\n                }\n                callback();\n            });\n        }, function (err) {\n            callback(_map(results.sort(function (a, b) {\n                return a.index - b.index;\n            }), function (x) {\n                return x.value;\n            }));\n        });\n    };\n    async.reject = doParallel(_reject);\n    async.rejectSeries = doSeries(_reject);\n\n    var _detect = function (eachfn, arr, iterator, main_callback) {\n        eachfn(arr, function (x, callback) {\n            iterator(x, function (result) {\n                if (result) {\n                    main_callback(x);\n                    main_callback = function () {};\n                }\n                else {\n                    callback();\n                }\n            });\n        }, function (err) {\n            main_callback();\n        });\n    };\n    async.detect = doParallel(_detect);\n    async.detectSeries = doSeries(_detect);\n\n    async.some = function (arr, iterator, main_callback) {\n        async.each(arr, function (x, callback) {\n            iterator(x, function (v) {\n                if (v) {\n                    main_callback(true);\n                    main_callback = function () {};\n                }\n                callback();\n            });\n        }, function (err) {\n            main_callback(false);\n        });\n    };\n    // any alias\n    async.any = async.some;\n\n    async.every = function (arr, iterator, main_callback) {\n        async.each(arr, function (x, callback) {\n            iterator(x, function (v) {\n                if (!v) {\n                    main_callback(false);\n                    main_callback = function () {};\n                }\n                callback();\n            });\n        }, function (err) {\n            main_callback(true);\n        });\n    };\n    // all alias\n    async.all = async.every;\n\n    async.sortBy = function (arr, iterator, callback) {\n        async.map(arr, function (x, callback) {\n            iterator(x, function (err, criteria) {\n                if (err) {\n                    callback(err);\n                }\n                else {\n                    callback(null, {value: x, criteria: criteria});\n                }\n            });\n        }, function (err, results) {\n            if (err) {\n                return callback(err);\n            }\n            else {\n                var fn = function (left, right) {\n                    var a = left.criteria, b = right.criteria;\n                    return a < b ? -1 : a > b ? 1 : 0;\n                };\n                callback(null, _map(results.sort(fn), function (x) {\n                    return x.value;\n                }));\n            }\n        });\n    };\n\n    async.auto = function (tasks, callback) {\n        callback = callback || function () {};\n        var keys = _keys(tasks);\n        var remainingTasks = keys.length\n        if (!remainingTasks) {\n            return callback();\n        }\n\n        var results = {};\n\n        var listeners = [];\n        var addListener = function (fn) {\n            listeners.unshift(fn);\n        };\n        var removeListener = function (fn) {\n            for (var i = 0; i < listeners.length; i += 1) {\n                if (listeners[i] === fn) {\n                    listeners.splice(i, 1);\n                    return;\n                }\n            }\n        };\n        var taskComplete = function () {\n            remainingTasks--\n            _each(listeners.slice(0), function (fn) {\n                fn();\n            });\n        };\n\n        addListener(function () {\n            if (!remainingTasks) {\n                var theCallback = callback;\n                // prevent final callback from calling itself if it errors\n                callback = function () {};\n\n                theCallback(null, results);\n            }\n        });\n\n        _each(keys, function (k) {\n            var task = _isArray(tasks[k]) ? tasks[k]: [tasks[k]];\n            var taskCallback = function (err) {\n                var args = Array.prototype.slice.call(arguments, 1);\n                if (args.length <= 1) {\n                    args = args[0];\n                }\n                if (err) {\n                    var safeResults = {};\n                    _each(_keys(results), function(rkey) {\n                        safeResults[rkey] = results[rkey];\n                    });\n                    safeResults[k] = args;\n                    callback(err, safeResults);\n                    // stop subsequent errors hitting callback multiple times\n                    callback = function () {};\n                }\n                else {\n                    results[k] = args;\n                    async.setImmediate(taskComplete);\n                }\n            };\n            var requires = task.slice(0, Math.abs(task.length - 1)) || [];\n            var ready = function () {\n                return _reduce(requires, function (a, x) {\n                    return (a && results.hasOwnProperty(x));\n                }, true) && !results.hasOwnProperty(k);\n            };\n            if (ready()) {\n                task[task.length - 1](taskCallback, results);\n            }\n            else {\n                var listener = function () {\n                    if (ready()) {\n                        removeListener(listener);\n                        task[task.length - 1](taskCallback, results);\n                    }\n                };\n                addListener(listener);\n            }\n        });\n    };\n\n    async.retry = function(times, task, callback) {\n        var DEFAULT_TIMES = 5;\n        var attempts = [];\n        // Use defaults if times not passed\n        if (typeof times === 'function') {\n            callback = task;\n            task = times;\n            times = DEFAULT_TIMES;\n        }\n        // Make sure times is a number\n        times = parseInt(times, 10) || DEFAULT_TIMES;\n        var wrappedTask = function(wrappedCallback, wrappedResults) {\n            var retryAttempt = function(task, finalAttempt) {\n                return function(seriesCallback) {\n                    task(function(err, result){\n                        seriesCallback(!err || finalAttempt, {err: err, result: result});\n                    }, wrappedResults);\n                };\n            };\n            while (times) {\n                attempts.push(retryAttempt(task, !(times-=1)));\n            }\n            async.series(attempts, function(done, data){\n                data = data[data.length - 1];\n                (wrappedCallback || callback)(data.err, data.result);\n            });\n        }\n        // If a callback is passed, run this as a controll flow\n        return callback ? wrappedTask() : wrappedTask\n    };\n\n    async.waterfall = function (tasks, callback) {\n        callback = callback || function () {};\n        if (!_isArray(tasks)) {\n          var err = new Error('First argument to waterfall must be an array of functions');\n          return callback(err);\n        }\n        if (!tasks.length) {\n            return callback();\n        }\n        var wrapIterator = function (iterator) {\n            return function (err) {\n                if (err) {\n                    callback.apply(null, arguments);\n                    callback = function () {};\n                }\n                else {\n                    var args = Array.prototype.slice.call(arguments, 1);\n                    var next = iterator.next();\n                    if (next) {\n                        args.push(wrapIterator(next));\n                    }\n                    else {\n                        args.push(callback);\n                    }\n                    async.setImmediate(function () {\n                        iterator.apply(null, args);\n                    });\n                }\n            };\n        };\n        wrapIterator(async.iterator(tasks))();\n    };\n\n    var _parallel = function(eachfn, tasks, callback) {\n        callback = callback || function () {};\n        if (_isArray(tasks)) {\n            eachfn.map(tasks, function (fn, callback) {\n                if (fn) {\n                    fn(function (err) {\n                        var args = Array.prototype.slice.call(arguments, 1);\n                        if (args.length <= 1) {\n                            args = args[0];\n                        }\n                        callback.call(null, err, args);\n                    });\n                }\n            }, callback);\n        }\n        else {\n            var results = {};\n            eachfn.each(_keys(tasks), function (k, callback) {\n                tasks[k](function (err) {\n                    var args = Array.prototype.slice.call(arguments, 1);\n                    if (args.length <= 1) {\n                        args = args[0];\n                    }\n                    results[k] = args;\n                    callback(err);\n                });\n            }, function (err) {\n                callback(err, results);\n            });\n        }\n    };\n\n    async.parallel = function (tasks, callback) {\n        _parallel({ map: async.map, each: async.each }, tasks, callback);\n    };\n\n    async.parallelLimit = function(tasks, limit, callback) {\n        _parallel({ map: _mapLimit(limit), each: _eachLimit(limit) }, tasks, callback);\n    };\n\n    async.series = function (tasks, callback) {\n        callback = callback || function () {};\n        if (_isArray(tasks)) {\n            async.mapSeries(tasks, function (fn, callback) {\n                if (fn) {\n                    fn(function (err) {\n                        var args = Array.prototype.slice.call(arguments, 1);\n                        if (args.length <= 1) {\n                            args = args[0];\n                        }\n                        callback.call(null, err, args);\n                    });\n                }\n            }, callback);\n        }\n        else {\n            var results = {};\n            async.eachSeries(_keys(tasks), function (k, callback) {\n                tasks[k](function (err) {\n                    var args = Array.prototype.slice.call(arguments, 1);\n                    if (args.length <= 1) {\n                        args = args[0];\n                    }\n                    results[k] = args;\n                    callback(err);\n                });\n            }, function (err) {\n                callback(err, results);\n            });\n        }\n    };\n\n    async.iterator = function (tasks) {\n        var makeCallback = function (index) {\n            var fn = function () {\n                if (tasks.length) {\n                    tasks[index].apply(null, arguments);\n                }\n                return fn.next();\n            };\n            fn.next = function () {\n                return (index < tasks.length - 1) ? makeCallback(index + 1): null;\n            };\n            return fn;\n        };\n        return makeCallback(0);\n    };\n\n    async.apply = function (fn) {\n        var args = Array.prototype.slice.call(arguments, 1);\n        return function () {\n            return fn.apply(\n                null, args.concat(Array.prototype.slice.call(arguments))\n            );\n        };\n    };\n\n    var _concat = function (eachfn, arr, fn, callback) {\n        var r = [];\n        eachfn(arr, function (x, cb) {\n            fn(x, function (err, y) {\n                r = r.concat(y || []);\n                cb(err);\n            });\n        }, function (err) {\n            callback(err, r);\n        });\n    };\n    async.concat = doParallel(_concat);\n    async.concatSeries = doSeries(_concat);\n\n    async.whilst = function (test, iterator, callback) {\n        if (test()) {\n            iterator(function (err) {\n                if (err) {\n                    return callback(err);\n                }\n                async.whilst(test, iterator, callback);\n            });\n        }\n        else {\n            callback();\n        }\n    };\n\n    async.doWhilst = function (iterator, test, callback) {\n        iterator(function (err) {\n            if (err) {\n                return callback(err);\n            }\n            var args = Array.prototype.slice.call(arguments, 1);\n            if (test.apply(null, args)) {\n                async.doWhilst(iterator, test, callback);\n            }\n            else {\n                callback();\n            }\n        });\n    };\n\n    async.until = function (test, iterator, callback) {\n        if (!test()) {\n            iterator(function (err) {\n                if (err) {\n                    return callback(err);\n                }\n                async.until(test, iterator, callback);\n            });\n        }\n        else {\n            callback();\n        }\n    };\n\n    async.doUntil = function (iterator, test, callback) {\n        iterator(function (err) {\n            if (err) {\n                return callback(err);\n            }\n            var args = Array.prototype.slice.call(arguments, 1);\n            if (!test.apply(null, args)) {\n                async.doUntil(iterator, test, callback);\n            }\n            else {\n                callback();\n            }\n        });\n    };\n\n    async.queue = function (worker, concurrency) {\n        if (concurrency === undefined) {\n            concurrency = 1;\n        }\n        function _insert(q, data, pos, callback) {\n          if (!q.started){\n            q.started = true;\n          }\n          if (!_isArray(data)) {\n              data = [data];\n          }\n          if(data.length == 0) {\n             // call drain immediately if there are no tasks\n             return async.setImmediate(function() {\n                 if (q.drain) {\n                     q.drain();\n                 }\n             });\n          }\n          _each(data, function(task) {\n              var item = {\n                  data: task,\n                  callback: typeof callback === 'function' ? callback : null\n              };\n\n              if (pos) {\n                q.tasks.unshift(item);\n              } else {\n                q.tasks.push(item);\n              }\n\n              if (q.saturated && q.tasks.length === q.concurrency) {\n                  q.saturated();\n              }\n              async.setImmediate(q.process);\n          });\n        }\n\n        var workers = 0;\n        var q = {\n            tasks: [],\n            concurrency: concurrency,\n            saturated: null,\n            empty: null,\n            drain: null,\n            started: false,\n            paused: false,\n            push: function (data, callback) {\n              _insert(q, data, false, callback);\n            },\n            kill: function () {\n              q.drain = null;\n              q.tasks = [];\n            },\n            unshift: function (data, callback) {\n              _insert(q, data, true, callback);\n            },\n            process: function () {\n                if (!q.paused && workers < q.concurrency && q.tasks.length) {\n                    var task = q.tasks.shift();\n                    if (q.empty && q.tasks.length === 0) {\n                        q.empty();\n                    }\n                    workers += 1;\n                    var next = function () {\n                        workers -= 1;\n                        if (task.callback) {\n                            task.callback.apply(task, arguments);\n                        }\n                        if (q.drain && q.tasks.length + workers === 0) {\n                            q.drain();\n                        }\n                        q.process();\n                    };\n                    var cb = only_once(next);\n                    worker(task.data, cb);\n                }\n            },\n            length: function () {\n                return q.tasks.length;\n            },\n            running: function () {\n                return workers;\n            },\n            idle: function() {\n                return q.tasks.length + workers === 0;\n            },\n            pause: function () {\n                if (q.paused === true) { return; }\n                q.paused = true;\n                q.process();\n            },\n            resume: function () {\n                if (q.paused === false) { return; }\n                q.paused = false;\n                q.process();\n            }\n        };\n        return q;\n    };\n    \n    async.priorityQueue = function (worker, concurrency) {\n        \n        function _compareTasks(a, b){\n          return a.priority - b.priority;\n        };\n        \n        function _binarySearch(sequence, item, compare) {\n          var beg = -1,\n              end = sequence.length - 1;\n          while (beg < end) {\n            var mid = beg + ((end - beg + 1) >>> 1);\n            if (compare(item, sequence[mid]) >= 0) {\n              beg = mid;\n            } else {\n              end = mid - 1;\n            }\n          }\n          return beg;\n        }\n        \n        function _insert(q, data, priority, callback) {\n          if (!q.started){\n            q.started = true;\n          }\n          if (!_isArray(data)) {\n              data = [data];\n          }\n          if(data.length == 0) {\n             // call drain immediately if there are no tasks\n             return async.setImmediate(function() {\n                 if (q.drain) {\n                     q.drain();\n                 }\n             });\n          }\n          _each(data, function(task) {\n              var item = {\n                  data: task,\n                  priority: priority,\n                  callback: typeof callback === 'function' ? callback : null\n              };\n              \n              q.tasks.splice(_binarySearch(q.tasks, item, _compareTasks) + 1, 0, item);\n\n              if (q.saturated && q.tasks.length === q.concurrency) {\n                  q.saturated();\n              }\n              async.setImmediate(q.process);\n          });\n        }\n        \n        // Start with a normal queue\n        var q = async.queue(worker, concurrency);\n        \n        // Override push to accept second parameter representing priority\n        q.push = function (data, priority, callback) {\n          _insert(q, data, priority, callback);\n        };\n        \n        // Remove unshift function\n        delete q.unshift;\n\n        return q;\n    };\n\n    async.cargo = function (worker, payload) {\n        var working     = false,\n            tasks       = [];\n\n        var cargo = {\n            tasks: tasks,\n            payload: payload,\n            saturated: null,\n            empty: null,\n            drain: null,\n            drained: true,\n            push: function (data, callback) {\n                if (!_isArray(data)) {\n                    data = [data];\n                }\n                _each(data, function(task) {\n                    tasks.push({\n                        data: task,\n                        callback: typeof callback === 'function' ? callback : null\n                    });\n                    cargo.drained = false;\n                    if (cargo.saturated && tasks.length === payload) {\n                        cargo.saturated();\n                    }\n                });\n                async.setImmediate(cargo.process);\n            },\n            process: function process() {\n                if (working) return;\n                if (tasks.length === 0) {\n                    if(cargo.drain && !cargo.drained) cargo.drain();\n                    cargo.drained = true;\n                    return;\n                }\n\n                var ts = typeof payload === 'number'\n                            ? tasks.splice(0, payload)\n                            : tasks.splice(0, tasks.length);\n\n                var ds = _map(ts, function (task) {\n                    return task.data;\n                });\n\n                if(cargo.empty) cargo.empty();\n                working = true;\n                worker(ds, function () {\n                    working = false;\n\n                    var args = arguments;\n                    _each(ts, function (data) {\n                        if (data.callback) {\n                            data.callback.apply(null, args);\n                        }\n                    });\n\n                    process();\n                });\n            },\n            length: function () {\n                return tasks.length;\n            },\n            running: function () {\n                return working;\n            }\n        };\n        return cargo;\n    };\n\n    var _console_fn = function (name) {\n        return function (fn) {\n            var args = Array.prototype.slice.call(arguments, 1);\n            fn.apply(null, args.concat([function (err) {\n                var args = Array.prototype.slice.call(arguments, 1);\n                if (typeof console !== 'undefined') {\n                    if (err) {\n                        if (console.error) {\n                            console.error(err);\n                        }\n                    }\n                    else if (console[name]) {\n                        _each(args, function (x) {\n                            console[name](x);\n                        });\n                    }\n                }\n            }]));\n        };\n    };\n    async.log = _console_fn('log');\n    async.dir = _console_fn('dir');\n    /*async.info = _console_fn('info');\n    async.warn = _console_fn('warn');\n    async.error = _console_fn('error');*/\n\n    async.memoize = function (fn, hasher) {\n        var memo = {};\n        var queues = {};\n        hasher = hasher || function (x) {\n            return x;\n        };\n        var memoized = function () {\n            var args = Array.prototype.slice.call(arguments);\n            var callback = args.pop();\n            var key = hasher.apply(null, args);\n            if (key in memo) {\n                async.nextTick(function () {\n                    callback.apply(null, memo[key]);\n                });\n            }\n            else if (key in queues) {\n                queues[key].push(callback);\n            }\n            else {\n                queues[key] = [callback];\n                fn.apply(null, args.concat([function () {\n                    memo[key] = arguments;\n                    var q = queues[key];\n                    delete queues[key];\n                    for (var i = 0, l = q.length; i < l; i++) {\n                      q[i].apply(null, arguments);\n                    }\n                }]));\n            }\n        };\n        memoized.memo = memo;\n        memoized.unmemoized = fn;\n        return memoized;\n    };\n\n    async.unmemoize = function (fn) {\n      return function () {\n        return (fn.unmemoized || fn).apply(null, arguments);\n      };\n    };\n\n    async.times = function (count, iterator, callback) {\n        var counter = [];\n        for (var i = 0; i < count; i++) {\n            counter.push(i);\n        }\n        return async.map(counter, iterator, callback);\n    };\n\n    async.timesSeries = function (count, iterator, callback) {\n        var counter = [];\n        for (var i = 0; i < count; i++) {\n            counter.push(i);\n        }\n        return async.mapSeries(counter, iterator, callback);\n    };\n\n    async.seq = function (/* functions... */) {\n        var fns = arguments;\n        return function () {\n            var that = this;\n            var args = Array.prototype.slice.call(arguments);\n            var callback = args.pop();\n            async.reduce(fns, args, function (newargs, fn, cb) {\n                fn.apply(that, newargs.concat([function () {\n                    var err = arguments[0];\n                    var nextargs = Array.prototype.slice.call(arguments, 1);\n                    cb(err, nextargs);\n                }]))\n            },\n            function (err, results) {\n                callback.apply(that, [err].concat(results));\n            });\n        };\n    };\n\n    async.compose = function (/* functions... */) {\n      return async.seq.apply(null, Array.prototype.reverse.call(arguments));\n    };\n\n    var _applyEach = function (eachfn, fns /*args...*/) {\n        var go = function () {\n            var that = this;\n            var args = Array.prototype.slice.call(arguments);\n            var callback = args.pop();\n            return eachfn(fns, function (fn, cb) {\n                fn.apply(that, args.concat([cb]));\n            },\n            callback);\n        };\n        if (arguments.length > 2) {\n            var args = Array.prototype.slice.call(arguments, 2);\n            return go.apply(this, args);\n        }\n        else {\n            return go;\n        }\n    };\n    async.applyEach = doParallel(_applyEach);\n    async.applyEachSeries = doSeries(_applyEach);\n\n    async.forever = function (fn, callback) {\n        function next(err) {\n            if (err) {\n                if (callback) {\n                    return callback(err);\n                }\n                throw err;\n            }\n            fn(next);\n        }\n        next();\n    };\n\n    // Node.js\n    if (typeof module !== 'undefined' && module.exports) {\n        module.exports = async;\n    }\n    // AMD / RequireJS\n    else if (typeof define !== 'undefined' && define.amd) {\n        define([], function () {\n            return async;\n        });\n    }\n    // included directly via <script> tag\n    else {\n        root.async = async;\n    }\n\n}());\n","/* global __filename */\n/**\n * Strophe logger implementation. Logs from level WARN and above.\n */\nimport { getLogger } from 'jitsi-meet-logger';\nimport { Strophe } from 'strophe.js';\n\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\n\nconst logger = getLogger(__filename);\n\n/**\n * This is the last HTTP error status captured from Strophe debug logs.\n * The purpose of storing it is to distinguish between the network and\n * infrastructure reason for connection being dropped (see connectionHandler in\n * xmpp.js). The value will be cleared (-1) if the subsequent request succeeds\n * which means that the failure could be transient.\n *\n * FIXME in the latest Strophe (not released on npm) there is API to handle\n * particular HTTP errors, but there is no way to learn if the subsequent\n * request succeeded in order to tell if the error was one time incident or if\n * it was the reason for dropping the connection by Strophe (the connection is\n * dropped after 5 subsequent failures). Ideally Strophe should provide more\n * details about the reason on why the connection stopped.\n *\n * @type {number}\n */\nlet lastErrorStatus = -1;\n\n/**\n * A regular expression used to catch Strophe's log message indicating that the\n * last BOSH request was successful. When there is such message seen the\n * {@link lastErrorStatus} will be set back to '-1'.\n * @type {RegExp}\n */\nconst resetLastErrorStatusRegExpr = /request id \\d+.\\d+ got 200/;\n\n/**\n * A regular expression used to capture the current value of the BOSH request\n * error status (HTTP error code or '0' or something else).\n * @type {RegExp}\n */\nconst lastErrorStatusRegExpr\n    = /request errored, status: (\\d+), number of errors: \\d+/;\n\n/**\n *\n */\nexport default function() {\n\n    Strophe.log = function(level, msg) {\n        // Our global handler reports uncaught errors to the stats which may\n        // interpret those as partial call failure.\n        // Strophe log entry about secondary request timeout does not mean that\n        // it's a final failure(the request will be restarted), so we lower it's\n        // level here to a warning.\n        logger.trace('Strophe', level, msg);\n        if (typeof msg === 'string'\n                && msg.indexOf('Request ') !== -1\n                && msg.indexOf('timed out (secondary), restarting') !== -1) {\n            // eslint-disable-next-line no-param-reassign\n            level = Strophe.LogLevel.WARN;\n        }\n\n        /* eslint-disable no-case-declarations */\n        switch (level) {\n        case Strophe.LogLevel.DEBUG:\n            // The log message which reports successful status is logged on\n            // Strophe's DEBUG level.\n            if (lastErrorStatus !== -1\n                    && resetLastErrorStatusRegExpr.test(msg)) {\n                logger.debug('Reset lastErrorStatus');\n                lastErrorStatus = -1;\n            }\n            break;\n        case Strophe.LogLevel.WARN:\n            logger.warn(`Strophe: ${msg}`);\n            const errStatusCapture = lastErrorStatusRegExpr.exec(msg);\n\n            if (errStatusCapture && errStatusCapture.length === 2) {\n                lastErrorStatus = parseInt(errStatusCapture[1], 10);\n                logger.debug(`lastErrorStatus set to: ${lastErrorStatus}`);\n            }\n            break;\n        case Strophe.LogLevel.ERROR:\n        case Strophe.LogLevel.FATAL:\n            // eslint-disable-next-line no-param-reassign\n            msg = `Strophe: ${msg}`;\n            GlobalOnErrorHandler.callErrorHandler(new Error(msg));\n            logger.error(msg);\n            break;\n        }\n\n        /* eslint-enable no-case-declarations */\n    };\n\n    /**\n     * Returns error status (HTTP error code) of the last BOSH request.\n     *\n     * @return {number} HTTP error code, '0' for unknown or \"god knows what\"\n     * (this is a hack).\n     */\n    Strophe.getLastErrorStatus = function() {\n        return lastErrorStatus;\n    };\n\n    Strophe.getStatusString = function(status) {\n        switch (status) {\n        case Strophe.Status.ERROR:\n            return 'ERROR';\n        case Strophe.Status.CONNECTING:\n            return 'CONNECTING';\n        case Strophe.Status.CONNFAIL:\n            return 'CONNFAIL';\n        case Strophe.Status.AUTHENTICATING:\n            return 'AUTHENTICATING';\n        case Strophe.Status.AUTHFAIL:\n            return 'AUTHFAIL';\n        case Strophe.Status.CONNECTED:\n            return 'CONNECTED';\n        case Strophe.Status.DISCONNECTED:\n            return 'DISCONNECTED';\n        case Strophe.Status.DISCONNECTING:\n            return 'DISCONNECTING';\n        case Strophe.Status.ATTACHED:\n            return 'ATTACHED';\n        default:\n            return 'unknown';\n        }\n    };\n}\n","import { getLogger } from 'jitsi-meet-logger';\nimport { $iq, Strophe } from 'strophe.js';\n\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\n\nimport ConnectionPlugin from './ConnectionPlugin';\n\n\nconst logger = getLogger(__filename);\n\n/**\n * Ping every 10 sec\n */\nconst PING_INTERVAL = 10000;\n\n/**\n * Ping timeout error after 15 sec of waiting.\n */\nconst PING_TIMEOUT = 15000;\n\n/**\n * Will close the connection after 3 consecutive ping errors.\n */\nconst PING_THRESHOLD = 3;\n\n/**\n * The number of timestamps of send pings to keep.\n * The current value is 2 minutes.\n * @type {number} number of timestamps.\n */\nconst PING_TIMESTAMPS_TO_KEEP = 120000 / PING_INTERVAL;\n\n/**\n * XEP-0199 ping plugin.\n *\n * Registers \"urn:xmpp:ping\" namespace under Strophe.NS.PING.\n */\nclass PingConnectionPlugin extends ConnectionPlugin {\n    /**\n     * Contructs new object\n     * @param {XMPP} xmpp the xmpp module.\n     * @constructor\n     */\n    constructor(xmpp) {\n        super();\n        this.failedPings = 0;\n        this.xmpp = xmpp;\n        this.pingExecIntervals = new Array(PING_TIMESTAMPS_TO_KEEP);\n    }\n\n    /**\n     * Initializes the plugin. Method called by Strophe.\n     * @param connection Strophe connection instance.\n     */\n    init(connection) {\n        super.init(connection);\n        Strophe.addNamespace('PING', 'urn:xmpp:ping');\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     * Sends \"ping\" to given <tt>jid</tt>\n     * @param jid the JID to which ping request will be sent.\n     * @param success callback called on success.\n     * @param error callback called on error.\n     * @param timeout ms how long are we going to wait for the response. On\n     * timeout <tt>error<//t> callback is called with undefined error argument.\n     */\n    ping(jid, success, error, timeout) {\n        this._addPingExecutionTimestamp();\n\n        const iq = $iq({\n            type: 'get',\n            to: jid\n        });\n\n        iq.c('ping', { xmlns: Strophe.NS.PING });\n        this.connection.sendIQ(iq, success, error, timeout);\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     * Starts to send ping in given interval to specified remote JID.\n     * This plugin supports only one such task and <tt>stopInterval</tt>\n     * must be called before starting a new one.\n     * @param remoteJid remote JID to which ping requests will be sent to.\n     * @param interval task interval in ms.\n     */\n    startInterval(remoteJid, interval = PING_INTERVAL) {\n        if (this.intervalId) {\n            const errmsg = 'Ping task scheduled already';\n\n            GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\n            logger.error(errmsg);\n\n            return;\n        }\n        this.intervalId = window.setInterval(() => {\n            this.ping(remoteJid, () => {\n                this.failedPings = 0;\n            }, error => {\n                this.failedPings += 1;\n                const errmsg = `Ping ${error ? 'error' : 'timeout'}`;\n\n                if (this.failedPings >= PING_THRESHOLD) {\n                    GlobalOnErrorHandler.callErrorHandler(new Error(errmsg));\n                    logger.error(errmsg, error);\n\n                    // FIXME it doesn't help to disconnect when 3rd PING\n                    // times out, it only stops Strophe from retrying.\n                    // Not really sure what's the right thing to do in that\n                    // situation, but just closing the connection makes no\n                    // sense.\n                    // self.connection.disconnect();\n                } else {\n                    logger.warn(errmsg, error);\n                }\n            }, PING_TIMEOUT);\n        }, interval);\n        logger.info(`XMPP pings will be sent every ${interval} ms`);\n    }\n\n    /**\n     * Stops current \"ping\"  interval task.\n     */\n    stopInterval() {\n        if (this.intervalId) {\n            window.clearInterval(this.intervalId);\n            this.intervalId = null;\n            this.failedPings = 0;\n            logger.info('Ping interval cleared');\n        }\n    }\n\n    /**\n     * Adds the current time to the array of send ping timestamps.\n     * @private\n     */\n    _addPingExecutionTimestamp() {\n        this.pingExecIntervals.push(new Date().getTime());\n\n        // keep array length to PING_TIMESTAMPS_TO_KEEP\n        if (this.pingExecIntervals.length > PING_TIMESTAMPS_TO_KEEP) {\n            this.pingExecIntervals.shift();\n        }\n    }\n\n    /**\n     * Returns the maximum time between the recent sent pings, if there is a\n     * big value it means the computer was inactive for some time(suspended).\n     * Checks the maximum gap between sending pings, considering and the\n     * current time. Trying to detect computer inactivity (sleep).\n     *\n     * @returns {int} the time ping was suspended, if it was not 0 is returned.\n     */\n    getPingSuspendTime() {\n        const pingIntervals = this.pingExecIntervals.slice();\n\n        // we need current time, as if ping was sent now\n        // if computer sleeps we will get correct interval after next\n        // scheduled ping, bet we sometimes need that interval before waiting\n        // for the next ping, on closing the connection on error.\n        pingIntervals.push(new Date().getTime());\n\n        let maxInterval = 0;\n        let previousTS = pingIntervals[0];\n\n        pingIntervals.forEach(e => {\n            const currentInterval = e - previousTS;\n\n            if (currentInterval > maxInterval) {\n                maxInterval = currentInterval;\n            }\n\n            previousTS = e;\n        });\n\n        // remove the interval between the ping sent\n        // this way in normal execution there is no suspend and the return\n        // will be 0 or close to 0.\n        maxInterval -= PING_INTERVAL;\n\n        // make sure we do not return less than 0\n        return Math.max(maxInterval, 0);\n    }\n}\n\n/**\n *\n * @param xmpp\n */\nexport default function(xmpp) {\n    Strophe.addConnectionPlugin('ping', new PingConnectionPlugin(xmpp));\n}\n","/* global $ */\n\nimport { getLogger } from 'jitsi-meet-logger';\nimport { $iq, Strophe } from 'strophe.js';\n\nimport ConnectionPlugin from './ConnectionPlugin';\n\nconst logger = getLogger(__filename);\n\nconst RAYO_XMLNS = 'urn:xmpp:rayo:1';\n\n/**\n *\n */\nclass RayoConnectionPlugin extends ConnectionPlugin {\n    /**\n     *\n     * @param connection\n     */\n    init(connection) {\n        super.init(connection);\n\n        this.connection.addHandler(\n            this.onRayo.bind(this), RAYO_XMLNS, 'iq', 'set', null, null);\n    }\n\n    /**\n     *\n     * @param iq\n     */\n    onRayo(iq) {\n        logger.info('Rayo IQ', iq);\n    }\n\n    /* eslint-disable max-params */\n\n    /**\n     *\n     * @param to\n     * @param from\n     * @param roomName\n     * @param roomPass\n     * @param focusMucJid\n     */\n    dial(to, from, roomName, roomPass, focusMucJid) {\n        return new Promise((resolve, reject) => {\n            if (!focusMucJid) {\n                reject(new Error('Internal error!'));\n\n                return;\n            }\n            const req = $iq({\n                type: 'set',\n                to: focusMucJid\n            });\n\n            req.c('dial', {\n                xmlns: RAYO_XMLNS,\n                to,\n                from\n            });\n            req.c('header', {\n                name: 'JvbRoomName',\n                value: roomName\n            }).up();\n\n            if (roomPass && roomPass.length) {\n                req.c('header', {\n                    name: 'JvbRoomPassword',\n                    value: roomPass\n                }).up();\n            }\n\n            this.connection.sendIQ(\n                req,\n                result => {\n                    logger.info('Dial result ', result);\n\n                    // eslint-disable-next-line newline-per-chained-call\n                    const resource = $(result).find('ref').attr('uri');\n\n                    this.callResource = resource.substr('xmpp:'.length);\n                    logger.info(`Received call resource: ${this.callResource}`);\n                    resolve();\n                },\n                error => {\n                    logger.info('Dial error ', error);\n                    reject(error);\n                });\n        });\n    }\n\n    /* eslint-enable max-params */\n\n    /**\n     *\n     */\n    hangup() {\n        return new Promise((resolve, reject) => {\n            if (!this.callResource) {\n                reject(new Error('No call in progress'));\n                logger.warn('No call in progress');\n\n                return;\n            }\n\n            const req = $iq({\n                type: 'set',\n                to: this.callResource\n            });\n\n            req.c('hangup', {\n                xmlns: RAYO_XMLNS\n            });\n\n            this.connection.sendIQ(req, result => {\n                logger.info('Hangup result ', result);\n                this.callResource = null;\n                resolve();\n            }, error => {\n                logger.info('Hangup error ', error);\n                this.callResource = null;\n                reject(new Error('Hangup error '));\n            });\n        });\n    }\n}\n\n/**\n *\n */\nexport default function() {\n    Strophe.addConnectionPlugin('rayo', new RayoConnectionPlugin());\n}\n","import { Strophe } from 'strophe.js';\n\nimport ConnectionPlugin from './ConnectionPlugin';\n\n/**\n *  Logs raw stanzas and makes them available for download as JSON\n */\nclass StropheLogger extends ConnectionPlugin {\n    /**\n     *\n     */\n    constructor() {\n        super();\n        this.log = [];\n    }\n\n    /**\n     *\n     * @param connection\n     */\n    init(connection) {\n        super.init(connection);\n        this.connection.rawInput = this.logIncoming.bind(this);\n        this.connection.rawOutput = this.logOutgoing.bind(this);\n    }\n\n    /**\n     *\n     * @param stanza\n     */\n    logIncoming(stanza) {\n        this.log.push([ new Date().getTime(), 'incoming', stanza ]);\n    }\n\n    /**\n     *\n     * @param stanza\n     */\n    logOutgoing(stanza) {\n        this.log.push([ new Date().getTime(), 'outgoing', stanza ]);\n    }\n}\n\n/**\n *\n */\nexport default function() {\n    Strophe.addConnectionPlugin('logger', new StropheLogger());\n}\n","/**\n * Class attaches to Strophe BOSH connection and tracks the time of last successful request.\n * It does that by overriding {@code nextValidRid} method and tracking how the RID value changes.\n * A request was successful if the number has increased by 1 since the last time the method was called.\n */\nexport default class LastRequestTracker {\n    /**\n     * Initializes new instance.\n     */\n    constructor() {\n        this._nextValidRid = null;\n        this._lastSuccess = null;\n    }\n\n    /**\n     * Starts tracking requests on the given connection.\n     *\n     * @param {Object} stropheConnection - Strophe connection instance.\n     */\n    startTracking(stropheConnection) {\n        stropheConnection.nextValidRid = rid => {\n            // Just before connect and on disconnect RID will get assigned a new random value.\n            // A request was successful only when the value got increased exactly by 1.\n            if (this._nextValidRid === rid - 1) {\n                this._lastSuccess = new Date().getTime();\n            }\n            this._nextValidRid = rid;\n        };\n    }\n\n    /**\n     * Returns how many milliseconds have passed since the last successful BOSH request.\n     *\n     * @returns {number|null}\n     */\n    getTimeSinceLastSuccess() {\n        return this._lastSuccess\n            ? new Date().getTime() - this._lastSuccess\n            : null;\n    }\n}\n","/* global $ */\n\nimport { b64_sha1, Strophe } from 'strophe.js'; // eslint-disable-line camelcase\n\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\nimport Listenable from '../util/Listenable';\n\nconst logger = require('jitsi-meet-logger').getLogger(__filename);\n\n/**\n * The property\n */\nconst IDENTITY_PROPERTIES = [ 'category', 'type', 'lang', 'name' ];\nconst IDENTITY_PROPERTIES_FOR_COMPARE = [ 'category', 'type', 'lang' ];\nconst HASH = 'sha-1';\n\n/**\n *\n * @param a\n * @param b\n */\nfunction compareIdentities(a, b) {\n    let res = 0;\n\n    IDENTITY_PROPERTIES_FOR_COMPARE.some(key =>\n        (res = ((a[key] > b[key]) && 1) || ((a[key] < b[key]) && -1)) !== 0\n    );\n\n    return res;\n}\n\n/**\n * Produces a sha-1 from provided identity and features values.\n *\n * @param {Array<Object>} identities - The identity objects.\n * @param {Array<string>} features - The features.\n * @returns {string}\n */\nfunction generateSha(identities, features) {\n    const sortedIdentities = identities.sort(compareIdentities).reduce(\n        (accumulatedValue, identity) => `${\n            IDENTITY_PROPERTIES.reduce(\n                (tmp, key, idx) =>\n                    tmp\n                        + (idx === 0 ? '' : '/')\n                        + (identity[key] ? identity[key] : ''),\n                '')\n        }<`, '');\n    const sortedFeatures = features.sort().reduce(\n        (tmp, feature) => `${tmp + feature}<`, '');\n\n    return b64_sha1(sortedIdentities + sortedFeatures);\n}\n\n/**\n * Implements xep-0115 ( http://xmpp.org/extensions/xep-0115.html )\n */\nexport default class Caps extends Listenable {\n    /**\n     * Constructs new Caps instance.\n     * @param {Strophe.Connection} connection the strophe connection object\n     * @param {String} node the value of the node attribute of the \"c\" xml node\n     * that will be sent to the other participants\n     */\n    constructor(connection = {}, node = 'http://jitsi.org/jitsimeet') {\n        super();\n        this.node = node;\n        this.disco = connection.disco;\n        if (!this.disco) {\n            throw new Error(\n                'Missing strophe-plugins '\n                + '(disco plugin is required)!');\n        }\n\n        this.versionToCapabilities = Object.create(null);\n        this.jidToVersion = Object.create(null);\n        this.version = '';\n        this.rooms = new Set();\n\n        const emuc = connection.emuc;\n\n        emuc.addListener(XMPPEvents.EMUC_ROOM_ADDED,\n            room => this._addChatRoom(room));\n        emuc.addListener(XMPPEvents.EMUC_ROOM_REMOVED,\n            room => this._removeChatRoom(room));\n        Object.keys(emuc.rooms).forEach(jid => {\n            this._addChatRoom(emuc.rooms[jid]);\n        });\n\n        Strophe.addNamespace('CAPS', 'http://jabber.org/protocol/caps');\n        this.disco.addFeature(Strophe.NS.CAPS);\n        connection.addHandler(this._handleCaps.bind(this), Strophe.NS.CAPS);\n\n        this._onMucMemberLeft = this._removeJidToVersionEntry.bind(this);\n    }\n\n    /**\n     * Adds new feature to the list of supported features for the local\n     * participant\n     * @param {String} feature the name of the feature.\n     * @param {boolean} submit if true - new presence with updated \"c\" node\n     * will be sent.\n     */\n    addFeature(feature, submit = false) {\n        this.disco.addFeature(feature);\n        this._generateVersion();\n        if (submit) {\n            this.submit();\n        }\n    }\n\n    /**\n     * Removes a feature from the list of supported features for the local\n     * participant\n     * @param {String} feature the name of the feature.\n     * @param {boolean} submit if true - new presence with updated \"c\" node\n     * will be sent.\n     */\n    removeFeature(feature, submit = false) {\n        this.disco.removeFeature(feature);\n        this._generateVersion();\n        if (submit) {\n            this.submit();\n        }\n    }\n\n    /**\n     * Sends new presence stanza for every room from the list of rooms.\n     */\n    submit() {\n        this.rooms.forEach(room => room.sendPresence());\n    }\n\n    /**\n     * Returns a set with the features for a participant.\n     * @param {String} jid the jid of the participant\n     * @param {int} timeout the timeout in ms for reply from the participant.\n     * @returns {Promise<Set<String>, Error>}\n     */\n    getFeatures(jid, timeout = 5000) {\n        const user\n            = jid in this.jidToVersion ? this.jidToVersion[jid] : null;\n\n        if (!user || !(user.version in this.versionToCapabilities)) {\n            const node = user ? `${user.node}#${user.version}` : null;\n\n            return this._getDiscoInfo(jid, node, timeout)\n                .then(({ features, identities }) => {\n                    if (user) {\n                        const sha = generateSha(\n                            Array.from(identities),\n                            Array.from(features)\n                        );\n                        const receivedNode = `${user.node}#${sha}`;\n\n                        if (receivedNode === node) {\n                            this.versionToCapabilities[receivedNode] = features;\n\n                            return features;\n                        }\n\n                        // Check once if it has been cached asynchronously.\n                        if (this.versionToCapabilities[receivedNode]) {\n                            return this.versionToCapabilities[receivedNode];\n                        }\n\n                        logger.error(`Expected node ${node} but received ${\n                            receivedNode}`);\n\n                        return Promise.reject('Feature version mismatch');\n                    }\n                });\n        }\n\n        return Promise.resolve(this.versionToCapabilities[user.version]);\n    }\n\n    /**\n     * Returns a set with the features for a host.\n     * @param {String} jid the jid of the host\n     * @param {int} timeout the timeout in ms for reply from the host.\n     * @returns {Promise<Set<String>, Error>}\n     */\n    getFeaturesAndIdentities(jid, timeout = 5000) {\n        return this._getDiscoInfo(jid, null, timeout);\n    }\n\n    /**\n     * Returns a set with the features and identities for a host.\n     * @param {String} jid the jid of the host\n     * @param {String|null} node the node to query\n     * @param {int} timeout the timeout in ms for reply from the host.\n     * @returns {Promise<Object>}\n     * @private\n     */\n    _getDiscoInfo(jid, node, timeout) {\n        return new Promise((resolve, reject) =>\n            this.disco.info(jid, node, response => {\n                const features = new Set();\n                const identities = new Set();\n\n                $(response)\n                    .find('>query>feature')\n                    .each(\n                        (_, el) => features.add(el.getAttribute('var')));\n                $(response)\n                    .find('>query>identity')\n                    .each(\n                        (_, el) => identities.add({\n                            type: el.getAttribute('type'),\n                            name: el.getAttribute('name'),\n                            category: el.getAttribute('category')\n                        }));\n                resolve({\n                    features,\n                    identities });\n            }, reject, timeout)\n        );\n    }\n\n    /**\n     * Adds ChatRoom instance to the list of rooms. Adds listeners to the room\n     * and adds \"c\" element to the presences of the room.\n     * @param {ChatRoom} room the room.\n     */\n    _addChatRoom(room) {\n        this.rooms.add(room);\n        room.addListener(XMPPEvents.MUC_MEMBER_LEFT, this._onMucMemberLeft);\n        this._fixChatRoomPresenceMap(room);\n    }\n\n    /**\n     * Removes ChatRoom instance from the list of rooms. Removes listeners\n     * added from the Caps class.\n     * @param {ChatRoom} room the room.\n     */\n    _removeChatRoom(room) {\n        this.rooms.delete(room);\n        room.removeListener(XMPPEvents.MUC_MEMBER_LEFT, this._onMucMemberLeft);\n    }\n\n    /**\n     * Creates/updates the \"c\" xml node into the presence of the passed room.\n     * @param {ChatRoom} room the room.\n     */\n    _fixChatRoomPresenceMap(room) {\n        room.addToPresence('c', {\n            attributes: {\n                xmlns: Strophe.NS.CAPS,\n                hash: HASH,\n                node: this.node,\n                ver: this.version\n            }\n        });\n    }\n\n    /**\n     * Handles this.version changes.\n     */\n    _notifyVersionChanged() {\n        // update the version for all rooms\n        this.rooms.forEach(room => this._fixChatRoomPresenceMap(room));\n    }\n\n    /**\n     * Generates the value for the \"ver\" attribute.\n     */\n    _generateVersion() {\n        this.version\n            = generateSha(this.disco._identities, this.disco._features);\n\n        this._notifyVersionChanged();\n    }\n\n    /**\n     * Parses the \"c\" xml node from presence.\n     * @param {DOMElement} stanza the presence packet\n     */\n    _handleCaps(stanza) {\n        const from = stanza.getAttribute('from');\n        const caps = stanza.querySelector('c');\n        const version = caps.getAttribute('ver');\n        const node = caps.getAttribute('node');\n        const oldVersion = this.jidToVersion[from];\n\n        this.jidToVersion[from] = { version,\n            node };\n        if (oldVersion && oldVersion.version !== version) {\n            this.eventEmitter.emit(XMPPEvents.PARTCIPANT_FEATURES_CHANGED,\n                from);\n        }\n\n        // return true to not remove the handler from Strophe\n        return true;\n    }\n\n    /**\n     * Removes entry from this.jidToVersion map.\n     * @param {String} jid the jid to be removed.\n     */\n    _removeJidToVersionEntry(jid) {\n        if (jid in this.jidToVersion) {\n            delete this.jidToVersion[jid];\n        }\n    }\n}\n","const logger = require('jitsi-meet-logger').getLogger(__filename);\n\n/**\n *\n * @param localAudio\n * @param peerConnection\n */\nfunction JitsiDTMFManager(localAudio, peerConnection) {\n    const audioTrack = localAudio.getTrack();\n\n    if (!audioTrack) {\n        throw new Error('Failed to initialize DTMFSender: no audio track.');\n    }\n    this.dtmfSender\n        = peerConnection.peerconnection.createDTMFSender(audioTrack);\n    logger.debug('Initialized DTMFSender');\n}\n\nJitsiDTMFManager.prototype.sendTones = function(tones, duration, pause) {\n    this.dtmfSender.insertDTMF(tones, duration || 200, pause || 200);\n};\n\nmodule.exports = JitsiDTMFManager;\n\n","import * as JitsiConferenceEvents from '../JitsiConferenceEvents';\nimport RTCEvents from '../service/RTC/RTCEvents';\n\n/**\n * The value which we use to say, every sound over this threshold\n * is talking on the mic.\n * @type {number}\n */\nconst SPEECH_DETECT_THRESHOLD = 0.6;\n\n/**\n * The <tt>P2PDominantSpeakerDetection</tt> is activated only when p2p is\n * currently used.\n * Listens for changes in the audio level changes of the local p2p audio track\n * or remote p2p one and fires dominant speaker events to be able to use\n * features depending on those events (speaker stats), to make them work without\n * the video bridge.\n */\nexport default class P2PDominantSpeakerDetection {\n    /**\n     * Creates P2PDominantSpeakerDetection\n     * @param conference the JitsiConference instance that created us.\n     * @constructor\n     */\n    constructor(conference) {\n        this.conference = conference;\n\n        conference.addEventListener(\n            JitsiConferenceEvents.TRACK_AUDIO_LEVEL_CHANGED,\n            this._audioLevel.bind(this));\n\n        this.myUserID = this.conference.myUserId();\n    }\n\n    /**\n     * Receives audio level events for all streams in the conference.\n     *\n     * @param {String} id - The participant id\n     * @param {number} audioLevel - The audio level.\n     */\n    _audioLevel(id, audioLevel) {\n\n        // we do not process if p2p is not active\n        // or audio level is under certain threshold\n        // or if the audio level is for local audio track which is muted\n        if (!this.conference.isP2PActive()\n            || audioLevel <= SPEECH_DETECT_THRESHOLD\n            || (id === this.myUserID\n                    && this.conference.getLocalAudioTrack().isMuted())) {\n            return;\n        }\n\n        this.conference.rtc.eventEmitter.emit(\n            RTCEvents.DOMINANT_SPEAKER_CHANGED,\n            id);\n    }\n}\n","import { getLogger } from 'jitsi-meet-logger';\n\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport { createBridgeChannelClosedEvent } from '../../service/statistics/AnalyticsEvents';\nimport Statistics from '../statistics/statistics';\nimport GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\n\nconst logger = getLogger(__filename);\n\n/**\n * Handles a WebRTC RTCPeerConnection or a WebSocket instance to communicate\n * with the videobridge.\n */\nexport default class BridgeChannel {\n    /**\n     * Binds \"ondatachannel\" event listener on the given RTCPeerConnection\n     * instance, or creates a WebSocket connection with the videobridge.\n     * At least one of both, peerconnection or wsUrl parameters, must be\n     * given.\n     * @param {RTCPeerConnection} [peerconnection] WebRTC peer connection\n     * instance.\n     * @param {string} [wsUrl] WebSocket URL.\n     * @param {EventEmitter} eventEmitter EventEmitter instance.\n     */\n    constructor(peerconnection, wsUrl, emitter) {\n        if (!peerconnection && !wsUrl) {\n            throw new TypeError(\n                'At least peerconnection or wsUrl must be given');\n        } else if (peerconnection && wsUrl) {\n            throw new TypeError(\n                'Just one of peerconnection or wsUrl must be given');\n        }\n\n        if (peerconnection) {\n            logger.debug('constructor() with peerconnection');\n        } else {\n            logger.debug(`constructor() with wsUrl:\"${wsUrl}\"`);\n        }\n\n        // The underlying WebRTC RTCDataChannel or WebSocket instance.\n        // @type {RTCDataChannel|WebSocket}\n        this._channel = null;\n\n        // @type {EventEmitter}\n        this._eventEmitter = emitter;\n\n        // Whether a RTCDataChannel or WebSocket is internally used.\n        // @type {string} \"datachannel\" / \"websocket\"\n        this._mode = null;\n\n        // Indicates whether the connection retries are enabled or not.\n        this._areRetriesEnabled = false;\n\n        // Indicates whether the connection was closed from the client or not.\n        this._closedFromClient = false;\n\n        // If a RTCPeerConnection is given, listen for new RTCDataChannel\n        // event.\n        if (peerconnection) {\n            const datachannel\n                = peerconnection.createDataChannel(\n                    'JVB data channel', {\n                        protocol: 'http://jitsi.org/protocols/colibri'\n                    });\n\n            // Handle the RTCDataChannel.\n            this._handleChannel(datachannel);\n            this._mode = 'datachannel';\n\n        // Otherwise create a WebSocket connection.\n        } else if (wsUrl) {\n            this._areRetriesEnabled = true;\n            this._wsUrl = wsUrl;\n            this._initWebSocket();\n        }\n    }\n\n    /**\n     * Initializes the web socket channel.\n     *\n     * @returns {void}\n     */\n    _initWebSocket() {\n        // Create a WebSocket instance.\n        const ws = new WebSocket(this._wsUrl);\n\n        // Handle the WebSocket.\n        this._handleChannel(ws);\n        this._mode = 'websocket';\n    }\n\n    /**\n     * Starts the websocket connection retries.\n     *\n     * @returns {void}\n     */\n    _startConnectionRetries() {\n        let timeoutS = 1;\n\n        const reload = () => {\n            if (this.isOpen()) {\n                return;\n            }\n            this._initWebSocket(this._wsUrl);\n            timeoutS = Math.min(timeoutS * 2, 60);\n            this._retryTimeout = setTimeout(reload, timeoutS * 1000);\n        };\n\n        this._retryTimeout = setTimeout(reload, timeoutS * 1000);\n    }\n\n    /**\n     * Stops the websocket connection retries.\n     *\n     * @returns {void}\n     */\n    _stopConnectionRetries() {\n        if (this._retryTimeout) {\n            clearTimeout(this._retryTimeout);\n            this._retryTimeout = undefined;\n        }\n    }\n\n    /**\n     * Retries to establish the websocket connection after the connection was closed by the server.\n     *\n     * @param {CloseEvent} closeEvent - The close event that triggered the retries.\n     * @returns {void}\n     */\n    _retryWebSocketConnection(closeEvent) {\n        if (!this._areRetriesEnabled) {\n            return;\n        }\n        const { code, reason } = closeEvent;\n\n        Statistics.sendAnalytics(createBridgeChannelClosedEvent(code, reason));\n        this._areRetriesEnabled = false;\n        this._eventEmitter.once(RTCEvents.DATA_CHANNEL_OPEN, () => {\n            this._stopConnectionRetries();\n            this._areRetriesEnabled = true;\n        });\n        this._startConnectionRetries();\n    }\n\n    /**\n     * The channel mode.\n     * @return {string} \"datachannel\" or \"websocket\" (or null if not yet set).\n     */\n    get mode() {\n        return this._mode;\n    }\n\n    /**\n     * Closes the currently opened channel.\n     */\n    close() {\n        this._closedFromClient = true;\n        this._stopConnectionRetries();\n        this._areRetriesEnabled = false;\n        if (this._channel) {\n            try {\n                this._channel.close();\n            } catch (error) {} // eslint-disable-line no-empty\n\n            this._channel = null;\n        }\n    }\n\n    /**\n     * Whether there is an underlying RTCDataChannel or WebSocket and it's\n     * open.\n     * @return {boolean}\n     */\n    isOpen() {\n        return this._channel && (this._channel.readyState === 'open'\n            || this._channel.readyState === WebSocket.OPEN);\n    }\n\n    /**\n     * Sends message via the channel.\n     * @param {string} to The id of the endpoint that should receive the\n     * message. If \"\" the message will be sent to all participants.\n     * @param  {object} payload The payload of the message.\n     * @throws NetworkError or InvalidStateError from RTCDataChannel#send (@see\n     * {@link https://developer.mozilla.org/docs/Web/API/RTCDataChannel/send})\n     * or from WebSocket#send or Error with \"No opened channel\" message.\n     */\n    sendMessage(to, payload) {\n        this._send({\n            colibriClass: 'EndpointMessage',\n            msgPayload: payload,\n            to\n        });\n    }\n\n    /**\n     * Sends a \"lastN value changed\" message via the channel.\n     * @param {number} value The new value for lastN. -1 means unlimited.\n     */\n    sendSetLastNMessage(value) {\n        const jsonObject = {\n            colibriClass: 'LastNChangedEvent',\n            lastN: value\n        };\n\n        this._send(jsonObject);\n        logger.log(`Channel lastN set to: ${value}`);\n    }\n\n    /**\n     * Sends a \"pinned endpoint changed\" message via the channel.\n     * @param {string} endpointId The id of the pinned endpoint.\n     * @throws NetworkError or InvalidStateError from RTCDataChannel#send (@see\n     * {@link https://developer.mozilla.org/docs/Web/API/RTCDataChannel/send})\n     * or from WebSocket#send or Error with \"No opened channel\" message.\n     */\n    sendPinnedEndpointMessage(endpointId) {\n        logger.log(\n            'sending pinned changed notification to the bridge for endpoint ',\n            endpointId);\n\n        this._send({\n            colibriClass: 'PinnedEndpointChangedEvent',\n            pinnedEndpoint: endpointId || null\n        });\n    }\n\n    /**\n     * Sends a \"selected endpoints changed\" message via the channel.\n     *\n     * @param {Array<string>} endpointIds - The ids of the selected endpoints.\n     * @throws NetworkError or InvalidStateError from RTCDataChannel#send (@see\n     * {@link https://developer.mozilla.org/docs/Web/API/RTCDataChannel/send})\n     * or from WebSocket#send or Error with \"No opened channel\" message.\n     */\n    sendSelectedEndpointsMessage(endpointIds) {\n        logger.log(\n            'sending selected changed notification to the bridge for endpoints',\n            endpointIds);\n\n        this._send({\n            colibriClass: 'SelectedEndpointsChangedEvent',\n            selectedEndpoints: endpointIds\n        });\n    }\n\n    /**\n     * Sends a \"receiver video constraint\" message via the channel.\n     * @param {Number} maxFrameHeightPixels the maximum frame height,\n     * in pixels, this receiver is willing to receive\n     */\n    sendReceiverVideoConstraintMessage(maxFrameHeightPixels) {\n        logger.log('sending a ReceiverVideoConstraint message with '\n            + `a maxFrameHeight of ${maxFrameHeightPixels} pixels`);\n        this._send({\n            colibriClass: 'ReceiverVideoConstraint',\n            maxFrameHeight: maxFrameHeightPixels\n        });\n    }\n\n    /**\n     * Set events on the given RTCDataChannel or WebSocket instance.\n     */\n    _handleChannel(channel) {\n        const emitter = this._eventEmitter;\n\n        channel.onopen = () => {\n            logger.info(`${this._mode} channel opened`);\n\n            // Code sample for sending string and/or binary data.\n            // Sends string message to the bridge:\n            //     channel.send(\"Hello bridge!\");\n            // Sends 12 bytes binary message to the bridge:\n            //     channel.send(new ArrayBuffer(12));\n\n            emitter.emit(RTCEvents.DATA_CHANNEL_OPEN);\n        };\n\n        channel.onerror = event => {\n            // WS error events contain no information about the failure (this is available in the onclose event) and\n            // the event references the WS object itself, which causes hangs on mobile.\n            if (this._mode !== 'websocket') {\n                logger.error(`Channel error: ${event.message}`);\n            }\n        };\n\n        channel.onmessage = ({ data }) => {\n            // JSON object.\n            let obj;\n\n            try {\n                obj = JSON.parse(data);\n            } catch (error) {\n                GlobalOnErrorHandler.callErrorHandler(error);\n                logger.error(\n                    'Failed to parse channel message as JSON: ',\n                    data, error);\n\n                return;\n            }\n\n            const colibriClass = obj.colibriClass;\n\n            switch (colibriClass) {\n            case 'DominantSpeakerEndpointChangeEvent': {\n                // Endpoint ID from the Videobridge.\n                const dominantSpeakerEndpoint = obj.dominantSpeakerEndpoint;\n\n                logger.info(\n                    'Channel new dominant speaker event: ',\n                    dominantSpeakerEndpoint);\n                emitter.emit(\n                    RTCEvents.DOMINANT_SPEAKER_CHANGED,\n                    dominantSpeakerEndpoint);\n                break;\n            }\n            case 'EndpointConnectivityStatusChangeEvent': {\n                const endpoint = obj.endpoint;\n                const isActive = obj.active === 'true';\n\n                logger.info(\n                    `Endpoint connection status changed: ${endpoint} active ? ${\n                        isActive}`);\n                emitter.emit(RTCEvents.ENDPOINT_CONN_STATUS_CHANGED,\n                    endpoint, isActive);\n\n                break;\n            }\n            case 'EndpointMessage': {\n                emitter.emit(\n                    RTCEvents.ENDPOINT_MESSAGE_RECEIVED, obj.from,\n                    obj.msgPayload);\n\n                break;\n            }\n            case 'LastNEndpointsChangeEvent': {\n                // The new/latest list of last-n endpoint IDs.\n                const lastNEndpoints = obj.lastNEndpoints;\n\n                logger.info('Channel new last-n event: ',\n                    lastNEndpoints, obj);\n                emitter.emit(RTCEvents.LASTN_ENDPOINT_CHANGED,\n                    lastNEndpoints, obj);\n\n                break;\n            }\n            case 'SelectedUpdateEvent': {\n                const isSelected = obj.isSelected;\n\n                logger.info(`SelectedUpdateEvent isSelected? ${isSelected}`);\n                emitter.emit(RTCEvents.IS_SELECTED_CHANGED, isSelected);\n                break;\n            }\n            default: {\n                logger.debug('Channel JSON-formatted message: ', obj);\n\n                // The received message appears to be appropriately formatted\n                // (i.e. is a JSON object which assigns a value to the\n                // mandatory property colibriClass) so don't just swallow it,\n                // expose it to public consumption.\n                emitter.emit(`rtc.datachannel.${colibriClass}`, obj);\n            }\n            }\n        };\n\n        channel.onclose = event => {\n            logger.info(`Channel closed by ${this._closedFromClient ? 'client' : 'server'}`);\n\n            if (this._mode === 'websocket') {\n                if (!this._closedFromClient) {\n                    logger.error(`Channel closed: ${event.code} ${event.reason}`);\n                    this._retryWebSocketConnection(event);\n                }\n            }\n\n            // Remove the channel.\n            this._channel = null;\n        };\n\n        // Store the channel.\n        this._channel = channel;\n    }\n\n    /**\n     * Sends passed object via the channel.\n     * @param {object} jsonObject The object that will be sent.\n     * @throws NetworkError or InvalidStateError from RTCDataChannel#send (@see\n     * {@link https://developer.mozilla.org/docs/Web/API/RTCDataChannel/send})\n     * or from WebSocket#send or Error with \"No opened channel\" message.\n     */\n    _send(jsonObject) {\n        const channel = this._channel;\n\n        if (!this.isOpen()) {\n            logger.error('Bridge Channel send: no opened channel.');\n            throw new Error('No opened channel');\n        }\n\n        channel.send(JSON.stringify(jsonObject));\n    }\n}\n","/* global __filename, RTCSessionDescription */\n\nimport { getLogger } from 'jitsi-meet-logger';\nimport transform from 'sdp-transform';\n\nimport * as GlobalOnErrorHandler from '../util/GlobalOnErrorHandler';\nimport JitsiRemoteTrack from './JitsiRemoteTrack';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport LocalSdpMunger from './LocalSdpMunger';\nimport RTC from './RTC';\nimport RTCUtils from './RTCUtils';\nimport browser from '../browser';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport RtxModifier from '../xmpp/RtxModifier';\n\n// FIXME SDP tools should end up in some kind of util module\nimport SDP from '../xmpp/SDP';\nimport SdpConsistency from '../xmpp/SdpConsistency';\nimport { SdpTransformWrap } from '../xmpp/SdpTransformUtil';\nimport SDPUtil from '../xmpp/SDPUtil';\nimport * as SignalingEvents from '../../service/RTC/SignalingEvents';\n\nconst logger = getLogger(__filename);\nconst SIMULCAST_LAYERS = 3;\nconst SIM_LAYER_1_RID = '1';\nconst SIM_LAYER_2_RID = '2';\nconst SIM_LAYER_3_RID = '3';\nconst SIM_LAYER_RIDS = [ SIM_LAYER_1_RID, SIM_LAYER_2_RID, SIM_LAYER_3_RID ];\n\n/* eslint-disable max-params */\n\n/**\n * Creates new instance of 'TraceablePeerConnection'.\n *\n * @param {RTC} rtc the instance of <tt>RTC</tt> service\n * @param {number} id the peer connection id assigned by the parent RTC module.\n * @param {SignalingLayer} signalingLayer the signaling layer instance\n * @param {object} iceConfig WebRTC 'PeerConnection' ICE config\n * @param {object} constraints WebRTC 'PeerConnection' constraints\n * @param {boolean} isP2P indicates whether or not the new instance will be used\n * in a peer to peer connection\n * @param {object} options <tt>TracablePeerConnection</tt> config options.\n * @param {boolean} options.disableSimulcast if set to 'true' will disable\n * the simulcast.\n * @param {boolean} options.disableRtx if set to 'true' will disable the RTX\n * @param {boolean} options.enableFirefoxSimulcast if set to 'true' will enable\n * experimental simulcast support on Firefox.\n * @param {boolean} options.disableH264 If set to 'true' H264 will be\n *      disabled by removing it from the SDP.\n * @param {boolean} options.preferH264 if set to 'true' H264 will be preferred\n * over other video codecs.\n * @param {boolean} options.enableLayerSuspension if set to 'true', we will\n * cap the video send bitrate when we are told we have not been selected by\n * any endpoints (and therefore the non-thumbnail streams are not in use).\n * @param {boolean} options.startSilent If set to 'true' no audio will be sent or received.\n *\n * FIXME: initially the purpose of TraceablePeerConnection was to be able to\n * debug the peer connection. Since many other responsibilities have been added\n * it would make sense to extract a separate class from it and come up with\n * a more suitable name.\n *\n * @constructor\n */\nexport default function TraceablePeerConnection(\n        rtc,\n        id,\n        signalingLayer,\n        iceConfig,\n        constraints,\n        isP2P,\n        options) {\n\n    /**\n     * Indicates whether or not this peer connection instance is actively\n     * sending/receiving audio media. When set to <tt>false</tt> the SDP audio\n     * media direction will be adjusted to 'inactive' in order to suspend\n     * the transmission.\n     * @type {boolean}\n     * @private\n     */\n    this.audioTransferActive = !(options.startSilent === true);\n\n    /**\n     * Indicates whether or not this peer connection instance is actively\n     * sending/receiving video media. When set to <tt>false</tt> the SDP video\n     * media direction will be adjusted to 'inactive' in order to suspend\n     * the transmission.\n     * @type {boolean}\n     * @private\n     */\n    this.videoTransferActive = true;\n\n    /**\n     * The parent instance of RTC service which created this\n     * <tt>TracablePeerConnection</tt>.\n     * @type {RTC}\n     */\n    this.rtc = rtc;\n\n    /**\n     * The peer connection identifier assigned by the RTC module.\n     * @type {number}\n     */\n    this.id = id;\n\n    /**\n     * Indicates whether or not this instance is used in a peer to peer\n     * connection.\n     * @type {boolean}\n     */\n    this.isP2P = isP2P;\n\n    // FIXME: We should support multiple streams per jid.\n    /**\n     * The map holds remote tracks associated with this peer connection.\n     * It maps user's JID to media type and remote track\n     * (one track per media type per user's JID).\n     * @type {Map<string, Map<MediaType, JitsiRemoteTrack>>}\n     */\n    this.remoteTracks = new Map();\n\n    /**\n     * A map which stores local tracks mapped by {@link JitsiLocalTrack.rtcId}\n     * @type {Map<number, JitsiLocalTrack>}\n     */\n    this.localTracks = new Map();\n\n    /**\n     * Keeps tracks of the WebRTC <tt>MediaStream</tt>s that have been added to\n     * the underlying WebRTC PeerConnection.\n     * @type {Array}\n     * @private\n     */\n    this._addedStreams = [];\n\n    /**\n     * @typedef {Object} TPCGroupInfo\n     * @property {string} semantics the SSRC groups semantics\n     * @property {Array<number>} ssrcs group's SSRCs in order where the first\n     * one is group's primary SSRC, the second one is secondary (RTX) and so\n     * on...\n     */\n    /**\n     * @typedef {Object} TPCSSRCInfo\n     * @property {Array<number>} ssrcs an array which holds all track's SSRCs\n     * @property {Array<TPCGroupInfo>} groups an array stores all track's SSRC\n     * groups\n     */\n    /**\n     * Holds the info about local track's SSRCs mapped per their\n     * {@link JitsiLocalTrack.rtcId}\n     * @type {Map<number, TPCSSRCInfo>}\n     */\n    this.localSSRCs = new Map();\n\n    /**\n     * The local ICE username fragment for this session.\n     */\n    this.localUfrag = null;\n\n    /**\n     * The remote ICE username fragment for this session.\n     */\n    this.remoteUfrag = null;\n\n    /**\n     * The signaling layer which operates this peer connection.\n     * @type {SignalingLayer}\n     */\n    this.signalingLayer = signalingLayer;\n\n    // SignalingLayer listeners\n    this._peerVideoTypeChanged = this._peerVideoTypeChanged.bind(this);\n    this.signalingLayer.on(\n        SignalingEvents.PEER_VIDEO_TYPE_CHANGED,\n        this._peerVideoTypeChanged);\n\n    this._peerMutedChanged = this._peerMutedChanged.bind(this);\n    this.signalingLayer.on(\n        SignalingEvents.PEER_MUTED_CHANGED,\n        this._peerMutedChanged);\n    this.options = options;\n\n    this.peerconnection\n        = new RTCUtils.RTCPeerConnectionType(iceConfig, constraints);\n    this.updateLog = [];\n    this.stats = {};\n    this.statsinterval = null;\n\n    /**\n     * @type {number} The max number of stats to keep in this.stats. Limit to\n     * 300 values, i.e. 5 minutes; set to 0 to disable\n     */\n    this.maxstats = options.maxstats;\n    const Interop = require('@jitsi/sdp-interop').Interop;\n\n    this.interop = new Interop();\n    const Simulcast = require('@jitsi/sdp-simulcast');\n\n    this.simulcast = new Simulcast({ numOfLayers: SIMULCAST_LAYERS,\n        explodeRemoteSimulcast: false });\n    this.sdpConsistency = new SdpConsistency(this.toString());\n\n    /**\n     * Munges local SDP provided to the Jingle Session in order to prevent from\n     * sending SSRC updates on attach/detach and mute/unmute (for video).\n     * @type {LocalSdpMunger}\n     */\n    this.localSdpMunger = new LocalSdpMunger(this);\n\n    /**\n     * TracablePeerConnection uses RTC's eventEmitter\n     * @type {EventEmitter}\n     */\n    this.eventEmitter = rtc.eventEmitter;\n    this.rtxModifier = new RtxModifier();\n\n    // override as desired\n    this.trace = (what, info) => {\n        logger.debug(what, info);\n\n        this.updateLog.push({\n            time: new Date(),\n            type: what,\n            value: info || ''\n        });\n    };\n    this.onicecandidate = null;\n    this.peerconnection.onicecandidate = event => {\n        this.trace(\n            'onicecandidate',\n            JSON.stringify(event.candidate, null, ' '));\n\n        if (this.onicecandidate !== null) {\n            this.onicecandidate(event);\n        }\n    };\n    this.peerconnection.onaddstream\n        = event => this._remoteStreamAdded(event.stream);\n    this.peerconnection.onremovestream\n        = event => this._remoteStreamRemoved(event.stream);\n    this.onsignalingstatechange = null;\n    this.peerconnection.onsignalingstatechange = event => {\n        this.trace('onsignalingstatechange', this.signalingState);\n        if (this.onsignalingstatechange !== null) {\n            this.onsignalingstatechange(event);\n        }\n    };\n    this.oniceconnectionstatechange = null;\n    this.peerconnection.oniceconnectionstatechange = event => {\n        this.trace('oniceconnectionstatechange', this.iceConnectionState);\n        if (this.oniceconnectionstatechange !== null) {\n            this.oniceconnectionstatechange(event);\n        }\n    };\n    this.onnegotiationneeded = null;\n    this.peerconnection.onnegotiationneeded = event => {\n        this.trace('onnegotiationneeded');\n        if (this.onnegotiationneeded !== null) {\n            this.onnegotiationneeded(event);\n        }\n    };\n    this.ondatachannel = null;\n    this.peerconnection.ondatachannel = event => {\n        this.trace('ondatachannel');\n        if (this.ondatachannel !== null) {\n            this.ondatachannel(event);\n        }\n    };\n\n    if (this.maxstats) {\n        this.statsinterval = window.setInterval(() => {\n            this.getStats(stats => {\n                if (stats.result\n                    && typeof stats.result === 'function') {\n                    const results = stats.result();\n\n                    for (let i = 0; i < results.length; ++i) {\n                        const res = results[i];\n\n                        res.names().forEach(name => {\n                            this._processStat(res, name, res.stat(name));\n                        });\n                    }\n                } else {\n                    stats.forEach(r => this._processStat(r, '', r));\n                }\n            }, () => {\n\n                // empty error callback\n            });\n        }, 1000);\n    }\n\n    logger.info(`Create new ${this}`);\n}\n\n/* eslint-enable max-params */\n\n/**\n * Process stat and adds it to the array of stats we store.\n * @param report the current stats report.\n * @param name the name of the report, if available\n * @param statValue the value to add.\n * @private\n */\nTraceablePeerConnection.prototype._processStat\n    = function(report, name, statValue) {\n        const id = `${report.id}-${name}`;\n        let s = this.stats[id];\n        const now = new Date();\n\n        if (!s) {\n            this.stats[id] = s = {\n                startTime: now,\n                endTime: now,\n                values: [],\n                times: []\n            };\n        }\n        s.values.push(statValue);\n        s.times.push(now.getTime());\n        if (s.values.length > this.maxstats) {\n            s.values.shift();\n            s.times.shift();\n        }\n        s.endTime = now;\n    };\n\n/**\n * Returns a string representation of a SessionDescription object.\n */\nconst dumpSDP = function(description) {\n    if (typeof description === 'undefined' || description === null) {\n        return '';\n    }\n\n    return `type: ${description.type}\\r\\n${description.sdp}`;\n};\n\n\n/**\n * Forwards the {@link peerconnection.iceConnectionState} state except that it\n * will convert \"completed\" into \"connected\" where both mean that the ICE has\n * succeeded and is up and running. We never see \"completed\" state for\n * the JVB connection, but it started appearing for the P2P one. This method\n * allows to adapt old logic to this new situation.\n * @return {string}\n */\nTraceablePeerConnection.prototype.getConnectionState = function() {\n    const state = this.peerconnection.iceConnectionState;\n\n    if (state === 'completed') {\n        return 'connected';\n    }\n\n    return state;\n};\n\n/**\n * Obtains the media direction for given {@link MediaType}. The method takes\n * into account whether or not there are any local tracks for media and\n * the {@link audioTransferActive} and {@link videoTransferActive} flags.\n * @param {MediaType} mediaType\n * @return {string} one of the SDP direction constants ('sendrecv, 'recvonly'\n * etc.) which should be used when setting local description on the peer\n * connection.\n * @private\n */\nTraceablePeerConnection.prototype._getDesiredMediaDirection = function(\n        mediaType) {\n    let mediaTransferActive = true;\n\n    if (mediaType === MediaType.AUDIO) {\n        mediaTransferActive = this.audioTransferActive;\n    } else if (mediaType === MediaType.VIDEO) {\n        mediaTransferActive = this.videoTransferActive;\n    }\n    if (mediaTransferActive) {\n        return this.hasAnyTracksOfType(mediaType) ? 'sendrecv' : 'recvonly';\n    }\n\n    return 'inactive';\n};\n\n/**\n * Tells whether or not this TPC instance is using Simulcast.\n * @return {boolean} <tt>true</tt> if simulcast is enabled and active or\n * <tt>false</tt> if it's turned off.\n */\nTraceablePeerConnection.prototype.isSimulcastOn = function() {\n    return !this.options.disableSimulcast\n        && browser.supportsSimulcast()\n\n        // Firefox has been added as supporting simulcast, but it is\n        // experimental so we only want to do it for firefox if the config\n        // option is set.  Unfortunately, browser::supportsSimulcast()\n        // doesn't have a reference to the config options, so we have\n        // to do it here\n        && (!browser.isFirefox()\n            || this.options.enableFirefoxSimulcast);\n};\n\n/**\n * Handles {@link SignalingEvents.PEER_VIDEO_TYPE_CHANGED}\n * @param {string} endpointId the video owner's ID (MUC nickname)\n * @param {VideoType} videoType the new value\n * @private\n */\nTraceablePeerConnection.prototype._peerVideoTypeChanged = function(\n        endpointId,\n        videoType) {\n    // Check if endpointId has a value to avoid action on random track\n    if (!endpointId) {\n        logger.error(`No endpointID on peerVideoTypeChanged ${this}`);\n\n        return;\n    }\n    const videoTrack = this.getRemoteTracks(endpointId, MediaType.VIDEO);\n\n    if (videoTrack.length) {\n        // NOTE 1 track per media type is assumed\n        videoTrack[0]._setVideoType(videoType);\n    }\n};\n\n/**\n * Handles remote track mute / unmute events.\n * @param {string} endpointId the track owner's identifier (MUC nickname)\n * @param {MediaType} mediaType \"audio\" or \"video\"\n * @param {boolean} isMuted the new mute state\n * @private\n */\nTraceablePeerConnection.prototype._peerMutedChanged = function(\n        endpointId,\n        mediaType,\n        isMuted) {\n    // Check if endpointId is a value to avoid doing action on all remote tracks\n    if (!endpointId) {\n        logger.error('On peerMuteChanged - no endpoint ID');\n\n        return;\n    }\n    const track = this.getRemoteTracks(endpointId, mediaType);\n\n    if (track.length) {\n        // NOTE 1 track per media type is assumed\n        track[0].setMute(isMuted);\n    }\n};\n\n/**\n * Obtains local tracks for given {@link MediaType}. If the <tt>mediaType</tt>\n * argument is omitted the list of all local tracks will be returned.\n * @param {MediaType} [mediaType]\n * @return {Array<JitsiLocalTrack>}\n */\nTraceablePeerConnection.prototype.getLocalTracks = function(mediaType) {\n    let tracks = Array.from(this.localTracks.values());\n\n    if (mediaType !== undefined) {\n        tracks = tracks.filter(track => track.getType() === mediaType);\n    }\n\n    return tracks;\n};\n\n/**\n * Checks whether or not this {@link TraceablePeerConnection} instance contains\n * any local tracks for given <tt>mediaType</tt>.\n * @param {MediaType} mediaType\n * @return {boolean}\n */\nTraceablePeerConnection.prototype.hasAnyTracksOfType = function(mediaType) {\n    if (!mediaType) {\n        throw new Error('\"mediaType\" is required');\n    }\n\n    return this.getLocalTracks(mediaType).length > 0;\n};\n\n/**\n * Obtains all remote tracks currently known to this PeerConnection instance.\n * @param {string} [endpointId] the track owner's identifier (MUC nickname)\n * @param {MediaType} [mediaType] the remote tracks will be filtered\n * by their media type if this argument is specified.\n * @return {Array<JitsiRemoteTrack>}\n */\nTraceablePeerConnection.prototype.getRemoteTracks = function(\n        endpointId,\n        mediaType) {\n    const remoteTracks = [];\n    const endpoints\n        = endpointId ? [ endpointId ] : this.remoteTracks.keys();\n\n    for (const endpoint of endpoints) {\n        const endpointTrackMap = this.remoteTracks.get(endpoint);\n\n        if (!endpointTrackMap) {\n\n            // Otherwise an empty Map() would have to be allocated above\n            // eslint-disable-next-line no-continue\n            continue;\n        }\n\n        for (const trackMediaType of endpointTrackMap.keys()) {\n            // per media type filtering\n            if (!mediaType || mediaType === trackMediaType) {\n                const mediaTrack = endpointTrackMap.get(trackMediaType);\n\n                if (mediaTrack) {\n                    remoteTracks.push(mediaTrack);\n                }\n            }\n        }\n    }\n\n    return remoteTracks;\n};\n\n/**\n * Tries to find {@link JitsiTrack} for given SSRC number. It will search both\n * local and remote tracks bound to this instance.\n * @param {number} ssrc\n * @return {JitsiTrack|null}\n */\nTraceablePeerConnection.prototype.getTrackBySSRC = function(ssrc) {\n    if (typeof ssrc !== 'number') {\n        throw new Error(`SSRC ${ssrc} is not a number`);\n    }\n    for (const localTrack of this.localTracks.values()) {\n        if (this.getLocalSSRC(localTrack) === ssrc) {\n            return localTrack;\n        }\n    }\n    for (const remoteTrack of this.getRemoteTracks()) {\n        if (remoteTrack.getSSRC() === ssrc) {\n            return remoteTrack;\n        }\n    }\n\n    return null;\n};\n\n/**\n * Tries to find SSRC number for given {@link JitsiTrack} id. It will search\n * both local and remote tracks bound to this instance.\n * @param {string} id\n * @return {number|null}\n */\nTraceablePeerConnection.prototype.getSsrcByTrackId = function(id) {\n\n    const findTrackById = track => track.getTrack().id === id;\n    const localTrack = this.getLocalTracks().find(findTrackById);\n\n    if (localTrack) {\n        return this.getLocalSSRC(localTrack);\n    }\n\n    const remoteTrack = this.getRemoteTracks().find(findTrackById);\n\n    if (remoteTrack) {\n        return remoteTrack.getSSRC();\n    }\n\n    return null;\n};\n\n/**\n * Called when new remote MediaStream is added to the PeerConnection.\n * @param {MediaStream} stream the WebRTC MediaStream for remote participant\n */\nTraceablePeerConnection.prototype._remoteStreamAdded = function(stream) {\n    const streamId = RTC.getStreamID(stream);\n\n    if (!RTC.isUserStreamById(streamId)) {\n        logger.info(\n            `${this} ignored remote 'stream added' event for non-user stream`\n             + `id: ${streamId}`);\n\n        return;\n    }\n\n    // Bind 'addtrack'/'removetrack' event handlers\n    if (browser.isChromiumBased() || browser.isEdge()) {\n        stream.onaddtrack = event => {\n            this._remoteTrackAdded(stream, event.track);\n        };\n        stream.onremovetrack = event => {\n            this._remoteTrackRemoved(stream, event.track);\n        };\n    }\n\n    // Call remoteTrackAdded for each track in the stream\n    const streamAudioTracks = stream.getAudioTracks();\n\n    for (const audioTrack of streamAudioTracks) {\n        this._remoteTrackAdded(stream, audioTrack);\n    }\n    const streamVideoTracks = stream.getVideoTracks();\n\n    for (const videoTrack of streamVideoTracks) {\n        this._remoteTrackAdded(stream, videoTrack);\n    }\n};\n\n\n/**\n * Called on \"track added\" and \"stream added\" PeerConnection events (because we\n * handle streams on per track basis). Finds the owner and the SSRC for\n * the track and passes that to ChatRoom for further processing.\n * @param {MediaStream} stream the WebRTC MediaStream instance which is\n * the parent of the track\n * @param {MediaStreamTrack} track the WebRTC MediaStreamTrack added for remote\n * participant\n */\nTraceablePeerConnection.prototype._remoteTrackAdded = function(stream, track) {\n    const streamId = RTC.getStreamID(stream);\n    const mediaType = track.kind;\n\n    logger.info(`${this} remote track added:`, streamId, mediaType);\n\n    // look up an associated JID for a stream id\n    if (!mediaType) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(\n                `MediaType undefined for remote track, stream id: ${streamId}`\n            ));\n\n        // Abort\n        return;\n    }\n\n    const remoteSDP = new SDP(this.remoteDescription.sdp);\n    const mediaLines\n        = remoteSDP.media.filter(mls => mls.startsWith(`m=${mediaType}`));\n\n    if (!mediaLines.length) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(\n                `No media lines for type ${\n                    mediaType} found in remote SDP for remote track: ${\n                    streamId}`));\n\n        // Abort\n        return;\n    }\n\n    let ssrcLines = SDPUtil.findLines(mediaLines[0], 'a=ssrc:');\n\n    ssrcLines\n        = ssrcLines.filter(line => line.indexOf(`msid:${streamId}`) !== -1);\n    if (!ssrcLines.length) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(\n                `No SSRC lines for streamId ${\n                    streamId} for remote track, media type: ${mediaType}`));\n\n        // Abort\n        return;\n    }\n\n    // FIXME the length of ssrcLines[0] not verified, but it will fail\n    // with global error handler anyway\n    const ssrcStr = ssrcLines[0].substring(7).split(' ')[0];\n    const trackSsrc = Number(ssrcStr);\n    const ownerEndpointId = this.signalingLayer.getSSRCOwner(trackSsrc);\n\n    if (isNaN(trackSsrc) || trackSsrc < 0) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(\n                `Invalid SSRC: ${ssrcStr} for remote track, msid: ${\n                    streamId} media type: ${mediaType}`));\n\n        // Abort\n        return;\n    } else if (!ownerEndpointId) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(\n                `No SSRC owner known for: ${\n                    trackSsrc} for remote track, msid: ${\n                    streamId} media type: ${mediaType}`));\n\n        // Abort\n        return;\n    }\n\n    logger.log(`${this} associated ssrc`, ownerEndpointId, trackSsrc);\n\n    const peerMediaInfo\n        = this.signalingLayer.getPeerMediaInfo(ownerEndpointId, mediaType);\n\n    if (!peerMediaInfo) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(\n                `${this}: no peer media info available for ${\n                    ownerEndpointId}`));\n\n        return;\n    }\n\n    const muted = peerMediaInfo.muted;\n    const videoType = peerMediaInfo.videoType; // can be undefined\n\n    this._createRemoteTrack(\n        ownerEndpointId, stream, track, mediaType, videoType, trackSsrc, muted);\n};\n\n// FIXME cleanup params\n/* eslint-disable max-params */\n\n/**\n * Initializes a new JitsiRemoteTrack instance with the data provided by\n * the signaling layer and SDP.\n *\n * @param {string} ownerEndpointId the owner's endpoint ID (MUC nickname)\n * @param {MediaStream} stream the WebRTC stream instance\n * @param {MediaStreamTrack} track the WebRTC track instance\n * @param {MediaType} mediaType the track's type of the media\n * @param {VideoType} [videoType] the track's type of the video (if applicable)\n * @param {number} ssrc the track's main SSRC number\n * @param {boolean} muted the initial muted status\n */\nTraceablePeerConnection.prototype._createRemoteTrack = function(\n        ownerEndpointId,\n        stream,\n        track,\n        mediaType,\n        videoType,\n        ssrc,\n        muted) {\n    let remoteTracksMap = this.remoteTracks.get(ownerEndpointId);\n\n    if (!remoteTracksMap) {\n        remoteTracksMap = new Map();\n        this.remoteTracks.set(ownerEndpointId, remoteTracksMap);\n    }\n\n    const existingTrack = remoteTracksMap.get(mediaType);\n\n    if (existingTrack && existingTrack.getTrack() === track) {\n        // Ignore duplicated event which can originate either from\n        // 'onStreamAdded' or 'onTrackAdded'.\n        logger.info(\n            `${this} ignored duplicated remote track added event for: `\n                + `${ownerEndpointId}, ${mediaType}`);\n\n        return;\n    } else if (existingTrack) {\n        logger.error(\n            `${this} overwriting remote track for`\n                + `${ownerEndpointId} ${mediaType}`);\n    }\n\n    const remoteTrack\n        = new JitsiRemoteTrack(\n                this.rtc,\n                this.rtc.conference,\n                ownerEndpointId,\n                stream,\n                track,\n                mediaType,\n                videoType,\n                ssrc,\n                muted,\n                this.isP2P);\n\n    remoteTracksMap.set(mediaType, remoteTrack);\n\n    this.eventEmitter.emit(RTCEvents.REMOTE_TRACK_ADDED, remoteTrack);\n};\n\n/* eslint-enable max-params */\n\n/**\n * Handles remote stream removal.\n * @param stream the WebRTC MediaStream object which is being removed from the\n * PeerConnection\n */\nTraceablePeerConnection.prototype._remoteStreamRemoved = function(stream) {\n    if (!RTC.isUserStream(stream)) {\n        const id = RTC.getStreamID(stream);\n\n        logger.info(\n            `Ignored remote 'stream removed' event for non-user stream ${id}`);\n\n        return;\n    }\n\n    // Call remoteTrackRemoved for each track in the stream\n    const streamVideoTracks = stream.getVideoTracks();\n\n    for (const videoTrack of streamVideoTracks) {\n        this._remoteTrackRemoved(stream, videoTrack);\n    }\n    const streamAudioTracks = stream.getAudioTracks();\n\n    for (const audioTrack of streamAudioTracks) {\n        this._remoteTrackRemoved(stream, audioTrack);\n    }\n};\n\n/**\n * Handles remote media track removal.\n * @param {MediaStream} stream WebRTC MediaStream instance which is the parent\n * of the track.\n * @param {MediaStreamTrack} track the WebRTC MediaStreamTrack which has been\n * removed from the PeerConnection.\n */\nTraceablePeerConnection.prototype._remoteTrackRemoved = function(\n        stream,\n        track) {\n    const streamId = RTC.getStreamID(stream);\n    const trackId = track && RTC.getTrackID(track);\n\n    logger.info(`${this} - remote track removed: ${streamId}, ${trackId}`);\n\n    if (!streamId) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(`${this} remote track removal failed - no stream ID`));\n\n        return;\n    }\n\n    if (!trackId) {\n        GlobalOnErrorHandler.callErrorHandler(\n            new Error(`${this} remote track removal failed - no track ID`));\n\n        return;\n    }\n\n    if (!this._removeRemoteTrackById(streamId, trackId)) {\n        // NOTE this warning is always printed when user leaves the room,\n        // because we remove remote tracks manually on MUC member left event,\n        // before the SSRCs are removed by Jicofo. In most cases it is fine to\n        // ignore this warning, but still it's better to keep it printed for\n        // debugging purposes.\n        //\n        // We could change the behaviour to emit track removed only from here,\n        // but the order of the events will change and consuming apps could\n        // behave unexpectedly (the \"user left\" event would come before \"track\n        // removed\" events).\n        logger.warn(\n            `${this} Removed track not found for msid: ${streamId},\n             track id: ${trackId}`);\n    }\n};\n\n/**\n * Finds remote track by it's stream and track ids.\n * @param {string} streamId the media stream id as defined by the WebRTC\n * @param {string} trackId the media track id as defined by the WebRTC\n * @return {JitsiRemoteTrack|undefined} the track's instance or\n * <tt>undefined</tt> if not found.\n * @private\n */\nTraceablePeerConnection.prototype._getRemoteTrackById = function(\n        streamId,\n        trackId) {\n    // .find will break the loop once the first match is found\n    for (const endpointTrackMap of this.remoteTracks.values()) {\n        for (const mediaTrack of endpointTrackMap.values()) {\n            // FIXME verify and try to use ===\n            /* eslint-disable eqeqeq */\n            if (mediaTrack.getStreamId() == streamId\n                && mediaTrack.getTrackId() == trackId) {\n                return mediaTrack;\n            }\n\n            /* eslint-enable eqeqeq */\n        }\n    }\n\n    return undefined;\n};\n\n/**\n * Removes all JitsiRemoteTracks associated with given MUC nickname\n * (resource part of the JID). Returns array of removed tracks.\n *\n * @param {string} owner - The resource part of the MUC JID.\n * @returns {JitsiRemoteTrack[]}\n */\nTraceablePeerConnection.prototype.removeRemoteTracks = function(owner) {\n    const removedTracks = [];\n    const remoteTracksMap = this.remoteTracks.get(owner);\n\n    if (remoteTracksMap) {\n        const removedAudioTrack = remoteTracksMap.get(MediaType.AUDIO);\n        const removedVideoTrack = remoteTracksMap.get(MediaType.VIDEO);\n\n        removedAudioTrack && removedTracks.push(removedAudioTrack);\n        removedVideoTrack && removedTracks.push(removedVideoTrack);\n\n        this.remoteTracks.delete(owner);\n    }\n\n    logger.debug(\n        `${this} removed remote tracks for ${owner} count: ${\n            removedTracks.length}`);\n\n    return removedTracks;\n};\n\n/**\n * Removes and disposes given <tt>JitsiRemoteTrack</tt> instance. Emits\n * {@link RTCEvents.REMOTE_TRACK_REMOVED}.\n * @param {JitsiRemoteTrack} toBeRemoved\n */\nTraceablePeerConnection.prototype._removeRemoteTrack = function(toBeRemoved) {\n    toBeRemoved.dispose();\n    const participantId = toBeRemoved.getParticipantId();\n    const remoteTracksMap = this.remoteTracks.get(participantId);\n\n    if (!remoteTracksMap) {\n        logger.error(\n            `removeRemoteTrack: no remote tracks map for ${participantId}`);\n    } else if (!remoteTracksMap.delete(toBeRemoved.getType())) {\n        logger.error(\n            `Failed to remove ${toBeRemoved} - type mapping messed up ?`);\n    }\n    this.eventEmitter.emit(RTCEvents.REMOTE_TRACK_REMOVED, toBeRemoved);\n};\n\n/**\n * Removes and disposes <tt>JitsiRemoteTrack</tt> identified by given stream and\n * track ids.\n *\n * @param {string} streamId the media stream id as defined by the WebRTC\n * @param {string} trackId the media track id as defined by the WebRTC\n * @returns {JitsiRemoteTrack|undefined} the track which has been removed or\n * <tt>undefined</tt> if no track matching given stream and track ids was\n * found.\n */\nTraceablePeerConnection.prototype._removeRemoteTrackById = function(\n        streamId,\n        trackId) {\n    const toBeRemoved = this._getRemoteTrackById(streamId, trackId);\n\n    if (toBeRemoved) {\n        this._removeRemoteTrack(toBeRemoved);\n    }\n\n    return toBeRemoved;\n};\n\n/**\n * @typedef {Object} SSRCGroupInfo\n * @property {Array<number>} ssrcs group's SSRCs\n * @property {string} semantics\n */\n/**\n * @typedef {Object} TrackSSRCInfo\n * @property {Array<number>} ssrcs track's SSRCs\n * @property {Array<SSRCGroupInfo>} groups track's SSRC groups\n */\n/**\n * Returns map with keys msid and <tt>TrackSSRCInfo</tt> values.\n * @param {Object} desc the WebRTC SDP instance.\n * @return {Map<string,TrackSSRCInfo>}\n */\nfunction extractSSRCMap(desc) {\n    /**\n     * Track SSRC infos mapped by stream ID (msid)\n     * @type {Map<string,TrackSSRCInfo>}\n     */\n    const ssrcMap = new Map();\n\n    /**\n     * Groups mapped by primary SSRC number\n     * @type {Map<number,Array<SSRCGroupInfo>>}\n     */\n    const groupsMap = new Map();\n\n    if (typeof desc !== 'object' || desc === null\n        || typeof desc.sdp !== 'string') {\n        logger.warn('An empty description was passed as an argument.');\n\n        return ssrcMap;\n    }\n\n    const session = transform.parse(desc.sdp);\n\n    if (!Array.isArray(session.media)) {\n        return ssrcMap;\n    }\n\n    for (const mLine of session.media) {\n        if (!Array.isArray(mLine.ssrcs)) {\n            continue; // eslint-disable-line no-continue\n        }\n\n        if (Array.isArray(mLine.ssrcGroups)) {\n            for (const group of mLine.ssrcGroups) {\n                if (typeof group.semantics !== 'undefined'\n                    && typeof group.ssrcs !== 'undefined') {\n                    // Parse SSRCs and store as numbers\n                    const groupSSRCs\n                        = group.ssrcs.split(' ').map(\n                            ssrcStr => parseInt(ssrcStr, 10));\n                    const primarySSRC = groupSSRCs[0];\n\n                    // Note that group.semantics is already present\n\n                    group.ssrcs = groupSSRCs;\n\n                    // eslint-disable-next-line max-depth\n                    if (!groupsMap.has(primarySSRC)) {\n                        groupsMap.set(primarySSRC, []);\n                    }\n                    groupsMap.get(primarySSRC).push(group);\n                }\n            }\n        }\n        for (const ssrc of mLine.ssrcs) {\n            if (ssrc.attribute !== 'msid') {\n                continue; // eslint-disable-line no-continue\n            }\n\n            const msid = ssrc.value;\n            let ssrcInfo = ssrcMap.get(msid);\n\n            if (!ssrcInfo) {\n                ssrcInfo = {\n                    ssrcs: [],\n                    groups: [],\n                    msid\n                };\n                ssrcMap.set(msid, ssrcInfo);\n            }\n\n            const ssrcNumber = ssrc.id;\n\n            ssrcInfo.ssrcs.push(ssrcNumber);\n\n            if (groupsMap.has(ssrcNumber)) {\n                const ssrcGroups = groupsMap.get(ssrcNumber);\n\n                for (const group of ssrcGroups) {\n                    ssrcInfo.groups.push(group);\n                }\n            }\n        }\n    }\n\n    return ssrcMap;\n}\n\n/**\n * Takes a SessionDescription object and returns a \"normalized\" version.\n * Currently it takes care of ordering the a=ssrc lines and denoting receive\n * only SSRCs.\n */\nconst normalizePlanB = function(desc) {\n    if (typeof desc !== 'object' || desc === null\n        || typeof desc.sdp !== 'string') {\n        logger.warn('An empty description was passed as an argument.');\n\n        return desc;\n    }\n\n    // eslint-disable-next-line no-shadow\n    const transform = require('sdp-transform');\n    const session = transform.parse(desc.sdp);\n\n    if (typeof session !== 'undefined'\n            && typeof session.media !== 'undefined'\n            && Array.isArray(session.media)) {\n        session.media.forEach(mLine => {\n\n            // Chrome appears to be picky about the order in which a=ssrc lines\n            // are listed in an m-line when rtx is enabled (and thus there are\n            // a=ssrc-group lines with FID semantics). Specifically if we have\n            // \"a=ssrc-group:FID S1 S2\" and the \"a=ssrc:S2\" lines appear before\n            // the \"a=ssrc:S1\" lines, SRD fails.\n            // So, put SSRC which appear as the first SSRC in an FID ssrc-group\n            // first.\n            const firstSsrcs = [];\n            const newSsrcLines = [];\n\n            if (typeof mLine.ssrcGroups !== 'undefined'\n                && Array.isArray(mLine.ssrcGroups)) {\n                mLine.ssrcGroups.forEach(group => {\n                    if (typeof group.semantics !== 'undefined'\n                        && group.semantics === 'FID') {\n                        if (typeof group.ssrcs !== 'undefined') {\n                            firstSsrcs.push(Number(group.ssrcs.split(' ')[0]));\n                        }\n                    }\n                });\n            }\n\n            if (Array.isArray(mLine.ssrcs)) {\n                let i;\n\n                for (i = 0; i < mLine.ssrcs.length; i++) {\n                    if (typeof mLine.ssrcs[i] === 'object'\n                        && typeof mLine.ssrcs[i].id !== 'undefined'\n                        && firstSsrcs.indexOf(mLine.ssrcs[i].id) >= 0) {\n                        newSsrcLines.push(mLine.ssrcs[i]);\n                        delete mLine.ssrcs[i];\n                    }\n                }\n\n                for (i = 0; i < mLine.ssrcs.length; i++) {\n                    if (typeof mLine.ssrcs[i] !== 'undefined') {\n                        newSsrcLines.push(mLine.ssrcs[i]);\n                    }\n                }\n\n                mLine.ssrcs = replaceDefaultUnifiedPlanMsid(newSsrcLines);\n            }\n        });\n    }\n\n    const resStr = transform.write(session);\n\n\n    return new RTCSessionDescription({\n        type: desc.type,\n        sdp: resStr\n    });\n};\n\n/**\n * Unified plan differentiates a remote track not associated with a stream using\n * the msid \"-\", which can incorrectly trigger an onaddstream event in plan-b.\n * For jitsi, these tracks are actually receive-only ssrcs. To prevent\n * onaddstream from firing, remove the ssrcs with msid \"-\" except the cname\n * line. Normally the ssrcs are not used by the client, as the bridge controls\n * media flow, but keep one reference to the ssrc for the p2p case.\n *\n * @param {Array<Object>} ssrcLines - The ssrc lines from a remote description.\n * @private\n * @returns {Array<Object>} ssrcLines with removed lines referencing msid \"-\".\n */\nfunction replaceDefaultUnifiedPlanMsid(ssrcLines = []) {\n    if (!browser.isChrome() || !browser.isVersionGreaterThan(70)) {\n        return ssrcLines;\n    }\n\n    let filteredLines = [ ...ssrcLines ];\n\n    const problematicSsrcIds = ssrcLines.filter(ssrcLine =>\n        ssrcLine.attribute === 'mslabel' && ssrcLine.value === '-')\n        .map(ssrcLine => ssrcLine.id);\n\n    problematicSsrcIds.forEach(ssrcId => {\n        // Find the cname which is to be modified and left in.\n        const cnameLine = filteredLines.find(line =>\n            line.id === ssrcId && line.attribute === 'cname');\n\n        cnameLine.value = `recvonly-${ssrcId}`;\n\n        // Remove all of lines for the ssrc.\n        filteredLines\n            = filteredLines.filter(line => line.id !== ssrcId);\n\n        // But re-add the cname line so there is a reference kept to the ssrc\n        // in the SDP.\n        filteredLines.push(cnameLine);\n    });\n\n    return filteredLines;\n}\n\n/**\n * Makes sure that both audio and video directions are configured as 'sendrecv'.\n * @param {Object} localDescription the SDP object as defined by WebRTC.\n * @param {object} options <tt>TracablePeerConnection</tt> config options.\n */\nconst enforceSendRecv = function(localDescription, options) {\n    if (!localDescription) {\n        throw new Error('No local description passed in.');\n    }\n\n    const transformer = new SdpTransformWrap(localDescription.sdp);\n    const audioMedia = transformer.selectMedia('audio');\n    let changed = false;\n\n    if (audioMedia && audioMedia.direction !== 'sendrecv') {\n        if (options.startSilent) {\n            audioMedia.direction = 'inactive';\n        } else {\n            audioMedia.direction = 'sendrecv';\n        }\n\n        changed = true;\n    }\n\n    const videoMedia = transformer.selectMedia('video');\n\n    if (videoMedia && videoMedia.direction !== 'sendrecv') {\n        videoMedia.direction = 'sendrecv';\n        changed = true;\n    }\n\n    if (changed) {\n        return new RTCSessionDescription({\n            type: localDescription.type,\n            sdp: transformer.toRawSDP()\n        });\n    }\n\n    return localDescription;\n};\n\n/**\n *\n * @param {JitsiLocalTrack} localTrack\n */\nTraceablePeerConnection.prototype.getLocalSSRC = function(localTrack) {\n    const ssrcInfo = this._getSSRC(localTrack.rtcId);\n\n    return ssrcInfo && ssrcInfo.ssrcs[0];\n};\n\n/**\n * When doing unified plan simulcast, we'll have a set of ssrcs with the\n * same msid but no ssrc-group, since unified plan signals the simulcast\n * group via the a=simulcast line.  Unfortunately, Jicofo will complain\n * if it sees ssrcs with matching msids but no ssrc-group, so we'll inject\n * an ssrc-group line to make Jicofo happy.\n * NOTE: unlike plan B simulcast, the ssrcs in this inject ssrc-group will\n * NOT necessarily be in order of quality (low to high) because:\n * a) when translating between unified plan and plan b the order of the ssrcs\n * is not preserved and\n * b) it isn't guaranteed that firefox will give them to us in order to begin\n * with\n * @param desc A session description object (with 'type' and 'sdp' fields)\n * @return A session description object with its sdp field modified to\n * contain an inject ssrc-group for simulcast\n */\nTraceablePeerConnection.prototype._injectSsrcGroupForUnifiedSimulcast\n    = function(desc) {\n        const sdp = transform.parse(desc.sdp);\n        const video = sdp.media.find(mline => mline.type === 'video');\n\n        if (video.simulcast_03) {\n            const ssrcs = [];\n\n            video.ssrcs.forEach(ssrc => {\n                if (ssrc.attribute === 'msid') {\n                    ssrcs.push(ssrc.id);\n                }\n            });\n            video.ssrcGroups = video.ssrcGroups || [];\n            if (video.ssrcGroups.find(group => group.semantics === 'SIM')) {\n                // Group already exists, no need to do anything\n                return desc;\n            }\n            video.ssrcGroups.push({\n                semantics: 'SIM',\n                ssrcs: ssrcs.join(' ')\n            });\n        }\n\n        return new RTCSessionDescription({\n            type: desc.type,\n            sdp: transform.write(sdp)\n        });\n    };\n\n/* eslint-disable-next-line vars-on-top */\nconst getters = {\n    signalingState() {\n        return this.peerconnection.signalingState;\n    },\n    iceConnectionState() {\n        return this.peerconnection.iceConnectionState;\n    },\n    localDescription() {\n        let desc = this.peerconnection.localDescription;\n\n        if (!desc) {\n            logger.debug('getLocalDescription no localDescription found');\n\n            return {};\n        }\n\n        this.trace('getLocalDescription::preTransform', dumpSDP(desc));\n\n        // if we're running on FF, transform to Plan B first.\n        if (browser.usesUnifiedPlan()) {\n            desc = this.interop.toPlanB(desc);\n            this.trace('getLocalDescription::postTransform (Plan B)',\n                dumpSDP(desc));\n\n            desc = this._injectSsrcGroupForUnifiedSimulcast(desc);\n            this.trace('getLocalDescription::postTransform (inject ssrc group)',\n                dumpSDP(desc));\n        }\n\n        if (browser.doesVideoMuteByStreamRemove()) {\n            desc = this.localSdpMunger.maybeAddMutedLocalVideoTracksToSDP(desc);\n            logger.debug(\n                'getLocalDescription::postTransform (munge local SDP)', desc);\n        }\n\n        // What comes out of this getter will be signalled over Jingle to\n        // the other peer, so we need to make sure the media direction is\n        // 'sendrecv' because we won't change the direction later and don't want\n        // the other peer to think we can't send or receive.\n        //\n        // Note that the description we set in chrome does have the accurate\n        // direction (e.g. 'recvonly'), since that is technically what is\n        // happening (check setLocalDescription impl).\n        desc = enforceSendRecv(desc, this.options);\n\n        // See the method's doc for more info about this transformation.\n        desc = this.localSdpMunger.transformStreamIdentifiers(desc);\n\n        return desc;\n    },\n    remoteDescription() {\n        let desc = this.peerconnection.remoteDescription;\n\n        this.trace('getRemoteDescription::preTransform', dumpSDP(desc));\n\n        // if we're running on FF, transform to Plan B first.\n        if (browser.usesUnifiedPlan()) {\n            desc = this.interop.toPlanB(desc);\n            this.trace(\n                'getRemoteDescription::postTransform (Plan B)', dumpSDP(desc));\n        }\n\n        return desc || {};\n    }\n};\n\nObject.keys(getters).forEach(prop => {\n    Object.defineProperty(\n        TraceablePeerConnection.prototype,\n        prop, {\n            get: getters[prop]\n        }\n    );\n});\n\nTraceablePeerConnection.prototype._getSSRC = function(rtcId) {\n    return this.localSSRCs.get(rtcId);\n};\n\n/**\n * Add {@link JitsiLocalTrack} to this TPC.\n * @param {JitsiLocalTrack} track\n */\nTraceablePeerConnection.prototype.addTrack = function(track) {\n    const rtcId = track.rtcId;\n\n    logger.info(`add ${track} to: ${this}`);\n\n    if (this.localTracks.has(rtcId)) {\n        logger.error(`${track} is already in ${this}`);\n\n        return;\n    }\n\n    this.localTracks.set(rtcId, track);\n\n    const webrtcStream = track.getOriginalStream();\n\n    if (webrtcStream) {\n        this._addStream(webrtcStream);\n\n    // It's not ok for a track to not have a WebRTC stream if:\n    } else if (!browser.doesVideoMuteByStreamRemove()\n                || track.isAudioTrack()\n                || (track.isVideoTrack() && !track.isMuted())) {\n        logger.error(`${this} no WebRTC stream for: ${track}`);\n    }\n\n    // Muted video tracks do not have WebRTC stream\n    if (browser.doesVideoMuteByStreamRemove()\n            && track.isVideoTrack() && track.isMuted()) {\n        const ssrcInfo = this.generateNewStreamSSRCInfo(track);\n\n        this.sdpConsistency.setPrimarySsrc(ssrcInfo.ssrcs[0]);\n        const simGroup\n            = ssrcInfo.groups.find(groupInfo => groupInfo.semantics === 'SIM');\n\n        if (simGroup) {\n            this.simulcast.setSsrcCache(simGroup.ssrcs);\n        }\n        const fidGroups\n            = ssrcInfo.groups.filter(\n                groupInfo => groupInfo.semantics === 'FID');\n\n        if (fidGroups) {\n            const rtxSsrcMapping = new Map();\n\n            fidGroups.forEach(fidGroup => {\n                const primarySsrc = fidGroup.ssrcs[0];\n                const rtxSsrc = fidGroup.ssrcs[1];\n\n                rtxSsrcMapping.set(primarySsrc, rtxSsrc);\n            });\n            this.rtxModifier.setSsrcCache(rtxSsrcMapping);\n        }\n    }\n};\n\n/**\n * Adds local track as part of the unmute operation.\n * @param {JitsiLocalTrack} track the track to be added as part of the unmute\n * operation\n * @return {boolean} <tt>true</tt> if the state of underlying PC has changed and\n * the renegotiation is required or <tt>false</tt> otherwise.\n */\nTraceablePeerConnection.prototype.addTrackUnmute = function(track) {\n    if (!this._assertTrackBelongs('addTrackUnmute', track)) {\n        // Abort\n        return false;\n    }\n\n    logger.info(`Adding ${track} as unmute to ${this}`);\n    const webRtcStream = track.getOriginalStream();\n\n    if (!webRtcStream) {\n        logger.error(\n            `Unable to add ${track} as unmute to ${this} - no WebRTC stream`);\n\n        return false;\n    }\n    this._addStream(webRtcStream);\n\n    return true;\n};\n\n/**\n * Adds WebRTC media stream to the underlying PeerConnection\n * @param {MediaStream} mediaStream\n * @private\n */\nTraceablePeerConnection.prototype._addStream = function(mediaStream) {\n    this.peerconnection.addStream(mediaStream);\n    this._addedStreams.push(mediaStream);\n};\n\n/**\n * Removes WebRTC media stream from the underlying PeerConection\n * @param {MediaStream} mediaStream\n */\nTraceablePeerConnection.prototype._removeStream = function(mediaStream) {\n    if (browser.supportsRtpSender()) {\n        this._handleSenderRemoveStream(mediaStream);\n    } else {\n        this.peerconnection.removeStream(mediaStream);\n    }\n    this._addedStreams\n        = this._addedStreams.filter(stream => stream !== mediaStream);\n};\n\n/**\n * This method when called will check if given <tt>localTrack</tt> belongs to\n * this TPC (that it has been previously added using {@link addTrack}). If the\n * track does not belong an error message will be logged.\n * @param {string} methodName the method name that will be logged in an error\n * message\n * @param {JitsiLocalTrack} localTrack\n * @return {boolean} <tt>true</tt> if given local track belongs to this TPC or\n * <tt>false</tt> otherwise.\n * @private\n */\nTraceablePeerConnection.prototype._assertTrackBelongs = function(\n        methodName,\n        localTrack) {\n    const doesBelong = this.localTracks.has(localTrack.rtcId);\n\n    if (!doesBelong) {\n        logger.error(\n            `${methodName}: ${localTrack} does not belong to ${this}`);\n    }\n\n    return doesBelong;\n};\n\n/**\n * Tells if the given WebRTC <tt>MediaStream</tt> has been added to\n * the underlying WebRTC PeerConnection.\n * @param {MediaStream} mediaStream\n * @returns {boolean}\n */\nTraceablePeerConnection.prototype.isMediaStreamInPc = function(mediaStream) {\n    return this._addedStreams.indexOf(mediaStream) > -1;\n};\n\n/**\n * Remove local track from this TPC.\n * @param {JitsiLocalTrack} localTrack the track to be removed from this TPC.\n *\n * FIXME It should probably remove a boolean just like {@link removeTrackMute}\n *       The same applies to addTrack.\n */\nTraceablePeerConnection.prototype.removeTrack = function(localTrack) {\n    const webRtcStream = localTrack.getOriginalStream();\n\n    this.trace(\n        'removeStream',\n        localTrack.rtcId, webRtcStream ? webRtcStream.id : undefined);\n\n    if (!this._assertTrackBelongs('removeStream', localTrack)) {\n        // Abort - nothing to be done here\n        return;\n    }\n    this.localTracks.delete(localTrack.rtcId);\n    this.localSSRCs.delete(localTrack.rtcId);\n\n    if (webRtcStream) {\n        if (browser.supportsRtpSender()) {\n            this._handleSenderRemoveStream(webRtcStream);\n        } else {\n            this.peerconnection.removeStream(webRtcStream);\n        }\n    }\n};\n\n/**\n * Returns the sender corresponding to the given MediaStream.\n *\n * @param {MediaStream} stream - The media stream used for the search.\n * @returns {RTPSender|undefined} - The found sender or undefined if no sender\n * was found.\n */\nTraceablePeerConnection.prototype.findSenderByStream = function(stream) {\n    const track = stream.getTracks()[0];\n\n    if (!track) {\n        logger.error('Cannot find sender: no tracks.');\n\n        return;\n    }\n\n    // Find the right sender (for audio or video)\n    return this.peerconnection.getSenders().find(s => s.track === track);\n};\n\n/**\n * Replaces <tt>oldTrack</tt> with <tt>newTrack</tt> from the peer connection.\n * Either <tt>oldTrack</tt> or <tt>newTrack</tt> can be null; replacing a valid\n * <tt>oldTrack</tt> with a null <tt>newTrack</tt> effectively just removes\n * <tt>oldTrack</tt>\n *\n * @param {JitsiLocalTrack|null} oldTrack - The current track in use to be\n * replaced\n * @param {JitsiLocalTrack|null} newTrack - The new track to use\n * @returns {Promise<boolean>} - If the promise resolves with true,\n * renegotiation will be needed. Otherwise no renegotiation is needed.\n */\nTraceablePeerConnection.prototype.replaceTrack = function(oldTrack, newTrack) {\n    if (browser.supportsRtpSender() && oldTrack && newTrack) {\n        // Add and than remove stream in FF leads to wrong local SDP. In order\n        // to workaround the issue we need to use sender.replaceTrack().\n        const sender = this.findSenderByStream(oldTrack.getOriginalStream());\n        const stream = newTrack.getOriginalStream();\n\n        if (sender && stream) {\n            const track = stream.getTracks()[0];\n\n            if (track) {\n                return sender.replaceTrack(track, stream).then(() => {\n                    // Since there is no need to do renegotiations we need to\n                    // fix all ssrc-msid mappings here.\n                    // NOTE: after sender.replaceTrack the sdp will remain the\n                    // same but the stream attach to the new JitsiLocalTrack\n                    // will have different msid. Luckily on FF we are not doing\n                    // all the transformations related to video mute.\n\n                    const ssrc = this.localSSRCs.get(oldTrack.rtcId);\n\n                    this.localTracks.delete(oldTrack.rtcId);\n                    this.localSSRCs.delete(oldTrack.rtcId);\n                    this._addedStreams\n                        = this._addedStreams.filter(s => s !== stream);\n\n                    this.localTracks.set(newTrack.rtcId, newTrack);\n\n                    // Override the msid of JitsiLocalTrack in order to be\n                    // consistent with the SDP values.\n                    newTrack.storedMSID = oldTrack.storedMSID;\n                    this._addedStreams.push(stream);\n\n                    this.localSSRCs.set(newTrack.rtcId, ssrc);\n                    this.eventEmitter.emit(\n                        RTCEvents.LOCAL_TRACK_SSRC_UPDATED,\n                        newTrack,\n                        extractPrimarySSRC(ssrc));\n\n                    return false;\n                });\n            }\n        }\n    }\n\n    if (oldTrack) {\n        this.removeTrack(oldTrack);\n    }\n    if (newTrack) {\n        this.addTrack(newTrack);\n    }\n\n    return Promise.resolve(true);\n};\n\n/**\n * Removes local track as part of the mute operation.\n * @param {JitsiLocalTrack} localTrack the local track to be remove as part of\n * the mute operation.\n * @return {boolean} <tt>true</tt> if the underlying PeerConnection's state has\n * changed and the renegotiation is required or <tt>false</tt> otherwise.\n */\nTraceablePeerConnection.prototype.removeTrackMute = function(localTrack) {\n    const webRtcStream = localTrack.getOriginalStream();\n\n    this.trace(\n        'removeStreamMute',\n        localTrack.rtcId, webRtcStream ? webRtcStream.id : null);\n\n    if (!this._assertTrackBelongs('removeStreamMute', localTrack)) {\n        // Abort - nothing to be done here\n        return false;\n    }\n\n    if (webRtcStream) {\n        logger.info(\n            `Removing ${localTrack} as mute from ${this}`);\n        this._removeStream(webRtcStream);\n\n        return true;\n    }\n\n    logger.error(`removeStreamMute - no WebRTC stream for ${localTrack}`);\n\n    return false;\n};\n\n/**\n * Remove stream handling for browsers supporting RTPSender\n * @param stream: webrtc media stream\n */\nTraceablePeerConnection.prototype._handleSenderRemoveStream = function(\n        stream) {\n    if (!stream) {\n        // There is nothing to be changed\n        return;\n    }\n\n    const sender = this.findSenderByStream(stream);\n\n    if (sender) {\n        this.peerconnection.removeTrack(sender);\n    } else {\n        logger.log('Cannot remove tracks: no RTPSender.');\n    }\n};\n\nTraceablePeerConnection.prototype.createDataChannel = function(label, opts) {\n    this.trace('createDataChannel', label, opts);\n\n    return this.peerconnection.createDataChannel(label, opts);\n};\n\n/**\n * Ensures that the simulcast ssrc-group appears after any other ssrc-groups\n * in the SDP so that simulcast is properly activated.\n *\n * @param {Object} localSdp the WebRTC session description instance for\n * the local description.\n * @private\n */\nTraceablePeerConnection.prototype._ensureSimulcastGroupIsLast = function(\n        localSdp) {\n    let sdpStr = localSdp.sdp;\n\n    const videoStartIndex = sdpStr.indexOf('m=video');\n    const simStartIndex = sdpStr.indexOf('a=ssrc-group:SIM', videoStartIndex);\n    let otherStartIndex = sdpStr.lastIndexOf('a=ssrc-group');\n\n    if (simStartIndex === -1\n        || otherStartIndex === -1\n        || otherStartIndex === simStartIndex) {\n        return localSdp;\n    }\n\n    const simEndIndex = sdpStr.indexOf('\\r\\n', simStartIndex);\n    const simStr = sdpStr.substring(simStartIndex, simEndIndex + 2);\n\n    sdpStr = sdpStr.replace(simStr, '');\n    otherStartIndex = sdpStr.lastIndexOf('a=ssrc-group');\n    const otherEndIndex = sdpStr.indexOf('\\r\\n', otherStartIndex);\n    const sdpHead = sdpStr.slice(0, otherEndIndex);\n    const simStrTrimmed = simStr.trim();\n    const sdpTail = sdpStr.slice(otherEndIndex);\n\n    sdpStr = `${sdpHead}\\r\\n${simStrTrimmed}${sdpTail}`;\n\n    return new RTCSessionDescription({\n        type: localSdp.type,\n        sdp: sdpStr\n    });\n};\n\n/**\n * Will adjust audio and video media direction in the given SDP object to\n * reflect the current status of the {@link audioTransferActive} and\n * {@link videoTransferActive} flags.\n * @param {Object} localDescription the WebRTC session description instance for\n * the local description.\n * @private\n */\nTraceablePeerConnection.prototype._adjustLocalMediaDirection = function(\n        localDescription) {\n    const transformer = new SdpTransformWrap(localDescription.sdp);\n    let modifiedDirection = false;\n    const audioMedia = transformer.selectMedia('audio');\n\n    if (audioMedia) {\n        const desiredAudioDirection\n            = this._getDesiredMediaDirection(MediaType.AUDIO);\n\n        if (audioMedia.direction !== desiredAudioDirection) {\n            audioMedia.direction = desiredAudioDirection;\n            logger.info(\n                `Adjusted local audio direction to ${desiredAudioDirection}`);\n            modifiedDirection = true;\n        }\n    } else {\n        logger.warn('No \"audio\" media found int the local description');\n    }\n\n    const videoMedia = transformer.selectMedia('video');\n\n    if (videoMedia) {\n        const desiredVideoDirection\n            = this._getDesiredMediaDirection(MediaType.VIDEO);\n\n        if (videoMedia.direction !== desiredVideoDirection) {\n            videoMedia.direction = desiredVideoDirection;\n            logger.info(\n                `Adjusted local video direction to ${desiredVideoDirection}`);\n            modifiedDirection = true;\n        }\n    } else {\n        logger.warn('No \"video\" media found in the local description');\n    }\n\n    if (modifiedDirection) {\n        return new RTCSessionDescription({\n            type: localDescription.type,\n            sdp: transformer.toRawSDP()\n        });\n    }\n\n    return localDescription;\n};\n\nTraceablePeerConnection.prototype.setLocalDescription = function(description) {\n    let localSdp = description;\n\n    this.trace('setLocalDescription::preTransform', dumpSDP(localSdp));\n\n    if (this.options.disableH264 || this.options.preferH264) {\n        const parsedSdp = transform.parse(localSdp.sdp);\n        const videoMLine = parsedSdp.media.find(m => m.type === 'video');\n\n        if (this.options.disableH264) {\n            SDPUtil.stripVideoCodec(videoMLine, 'h264');\n        } else {\n            SDPUtil.preferVideoCodec(videoMLine, 'h264');\n        }\n\n        localSdp = new RTCSessionDescription({\n            type: localSdp.type,\n            sdp: transform.write(parsedSdp)\n        });\n\n        this.trace('setLocalDescription::postTransform (H264)',\n            dumpSDP(localSdp));\n    }\n\n    localSdp = this._adjustLocalMediaDirection(localSdp);\n\n    localSdp = this._ensureSimulcastGroupIsLast(localSdp);\n\n    // if we're using unified plan, transform to it first.\n    if (browser.usesUnifiedPlan()) {\n        localSdp = this.interop.toUnifiedPlan(localSdp);\n        this.trace(\n            'setLocalDescription::postTransform (Unified Plan)',\n            dumpSDP(localSdp));\n    }\n\n    return new Promise((resolve, reject) => {\n        this.peerconnection.setLocalDescription(localSdp)\n            .then(() => {\n                this.trace('setLocalDescriptionOnSuccess');\n                const localUfrag = SDPUtil.getUfrag(localSdp.sdp);\n\n                if (localUfrag !== this.localUfrag) {\n                    this.localUfrag = localUfrag;\n                    this.eventEmitter.emit(\n                        RTCEvents.LOCAL_UFRAG_CHANGED, this, localUfrag);\n                }\n                resolve();\n            }, err => {\n                this.trace('setLocalDescriptionOnFailure', err);\n                this.eventEmitter.emit(\n                    RTCEvents.SET_LOCAL_DESCRIPTION_FAILED,\n                    err, this);\n                reject(err);\n            });\n    });\n};\n\n/**\n * Enables/disables audio media transmission on this peer connection. When\n * disabled the SDP audio media direction in the local SDP will be adjusted to\n * 'inactive' which means that no data will be sent nor accepted, but\n * the connection should be kept alive.\n * @param {boolean} active <tt>true</tt> to enable audio media transmission or\n * <tt>false</tt> to disable. If the value is not a boolean the call will have\n * no effect.\n * @return {boolean} <tt>true</tt> if the value has changed and sRD/sLD cycle\n * needs to be executed in order for the changes to take effect or\n * <tt>false</tt> if the given value was the same as the previous one.\n * @public\n */\nTraceablePeerConnection.prototype.setAudioTransferActive = function(active) {\n    logger.debug(`${this} audio transfer active: ${active}`);\n    const changed = this.audioTransferActive !== active;\n\n    this.audioTransferActive = active;\n\n    return changed;\n};\n\n/**\n * Takes in a *unified plan* offer and inserts the appropriate\n * parameters for adding simulcast receive support.\n * @param {Object} desc - A session description object\n * @param {String} desc.type - the type (offer/answer)\n * @param {String} desc.sdp - the sdp content\n *\n * @return {Object} A session description (same format as above) object\n * with its sdp field modified to advertise simulcast receive support\n */\nTraceablePeerConnection.prototype._insertUnifiedPlanSimulcastReceive\n    = function(desc) {\n        const sdp = transform.parse(desc.sdp);\n        const video = sdp.media.find(mline => mline.type === 'video');\n\n        // In order of lowest to highest spatial quality\n        video.rids = [\n            {\n                id: SIM_LAYER_1_RID,\n                direction: 'recv'\n            },\n            {\n                id: SIM_LAYER_2_RID,\n                direction: 'recv'\n            },\n            {\n                id: SIM_LAYER_3_RID,\n                direction: 'recv'\n            }\n        ];\n        // eslint-disable-next-line camelcase\n        video.simulcast_03 = {\n            value: `recv rid=${SIM_LAYER_RIDS.join(';')}`\n        };\n\n        return new RTCSessionDescription({\n            type: desc.type,\n            sdp: transform.write(sdp)\n        });\n    };\n\nTraceablePeerConnection.prototype.setRemoteDescription = function(description) {\n    this.trace('setRemoteDescription::preTransform', dumpSDP(description));\n\n    // TODO the focus should squeze or explode the remote simulcast\n    // eslint-disable-next-line no-param-reassign\n    description = this.simulcast.mungeRemoteDescription(description);\n    this.trace(\n        'setRemoteDescription::postTransform (simulcast)',\n        dumpSDP(description));\n\n    if (this.options.preferH264) {\n        const parsedSdp = transform.parse(description.sdp);\n        const videoMLine = parsedSdp.media.find(m => m.type === 'video');\n\n        SDPUtil.preferVideoCodec(videoMLine, 'h264');\n\n        // eslint-disable-next-line no-param-reassign\n        description = new RTCSessionDescription({\n            type: description.type,\n            sdp: transform.write(parsedSdp)\n        });\n    }\n\n    // If the browser uses unified plan, transform to it first\n    if (browser.usesUnifiedPlan()) {\n        // eslint-disable-next-line no-param-reassign\n        description = new RTCSessionDescription({\n            type: description.type,\n            sdp: this.rtxModifier.stripRtx(description.sdp)\n        });\n\n        this.trace(\n            'setRemoteDescription::postTransform (stripRtx)',\n            dumpSDP(description));\n\n        // eslint-disable-next-line no-param-reassign\n        description = this.interop.toUnifiedPlan(description);\n        this.trace(\n            'setRemoteDescription::postTransform (Plan A)',\n            dumpSDP(description));\n\n        if (this.isSimulcastOn()) {\n            // eslint-disable-next-line no-param-reassign\n            description = this._insertUnifiedPlanSimulcastReceive(description);\n            this.trace(\n                'setRemoteDescription::postTransform (sim receive)',\n                dumpSDP(description));\n        }\n    } else {\n        // Plan B\n        // eslint-disable-next-line no-param-reassign\n        description = normalizePlanB(description);\n    }\n\n    // Safari WebRTC errors when no supported video codec is found in the offer.\n    // To prevent the error, inject H264 into the video mLine.\n    if (browser.isSafariWithWebrtc() && !browser.isSafariWithVP8()) {\n        logger.debug('Maybe injecting H264 into the remote description');\n\n        // eslint-disable-next-line no-param-reassign\n        description = this._injectH264IfNotPresent(description);\n    }\n\n    return new Promise((resolve, reject) => {\n        this.peerconnection.setRemoteDescription(description)\n            .then(() => {\n                this.trace('setRemoteDescriptionOnSuccess');\n                const remoteUfrag = SDPUtil.getUfrag(description.sdp);\n\n                if (remoteUfrag !== this.remoteUfrag) {\n                    this.remoteUfrag = remoteUfrag;\n                    this.eventEmitter.emit(\n                        RTCEvents.REMOTE_UFRAG_CHANGED, this, remoteUfrag);\n                }\n                resolve();\n            }, err => {\n                this.trace('setRemoteDescriptionOnFailure', err);\n                this.eventEmitter.emit(\n                    RTCEvents.SET_REMOTE_DESCRIPTION_FAILED,\n                    err,\n                    this);\n                reject(err);\n            });\n    });\n};\n\n/**\n * Inserts an H264 payload into the description if not already present. This is\n * need for Safari WebRTC, which errors when no supported video codec is found\n * in the offer. Related bug reports:\n * https://bugs.webkit.org/show_bug.cgi?id=173141\n * https://bugs.chromium.org/p/webrtc/issues/detail?id=4957\n *\n * @param {RTCSessionDescription} description - An RTCSessionDescription\n * to inject with an H264 payload.\n * @private\n * @returns {RTCSessionDescription}\n */\nTraceablePeerConnection.prototype._injectH264IfNotPresent = function(\n        description) {\n    const parsedSdp = transform.parse(description.sdp);\n    const videoMLine = parsedSdp.media.find(m => m.type === 'video');\n\n    if (!videoMLine) {\n        logger.debug('No videoMLine found, no need to inject H264.');\n\n        return description;\n    }\n\n    if (videoMLine.rtp.some(rtp => rtp.codec.toLowerCase() === 'h264')) {\n        logger.debug('H264 codec found in video mLine, no need to inject.');\n\n        return description;\n    }\n\n    const { fmtp, payloads, rtp } = videoMLine;\n    const payloadsArray = payloads.toString().split(' ');\n    let dummyPayloadType;\n\n    for (let i = 127; i >= 96; i--) {\n        if (!payloadsArray.includes(i)) {\n            dummyPayloadType = i;\n            payloadsArray.push(i);\n            videoMLine.payloads = payloadsArray.join(' ');\n            break;\n        }\n    }\n\n    if (typeof dummyPayloadType === 'undefined') {\n        logger.error('Could not find valid payload type to inject.');\n\n        return description;\n    }\n\n    rtp.push({\n        codec: 'H264',\n        payload: dummyPayloadType,\n        rate: 90000\n    });\n\n    fmtp.push({\n        config: 'level-asymmetry-allowed=1;'\n            + 'packetization-mode=1;'\n            + 'profile-level-id=42e01f',\n        payload: dummyPayloadType\n    });\n\n    logger.debug(\n        `Injecting H264 payload type ${dummyPayloadType} into video mLine.`);\n\n    return new RTCSessionDescription({\n        type: description.type,\n        sdp: transform.write(parsedSdp)\n    });\n};\n\n/**\n * Enables/disables video media transmission on this peer connection. When\n * disabled the SDP video media direction in the local SDP will be adjusted to\n * 'inactive' which means that no data will be sent nor accepted, but\n * the connection should be kept alive.\n * @param {boolean} active <tt>true</tt> to enable video media transmission or\n * <tt>false</tt> to disable. If the value is not a boolean the call will have\n * no effect.\n * @return {boolean} <tt>true</tt> if the value has changed and sRD/sLD cycle\n * needs to be executed in order for the changes to take effect or\n * <tt>false</tt> if the given value was the same as the previous one.\n * @public\n */\nTraceablePeerConnection.prototype.setVideoTransferActive = function(active) {\n    logger.debug(`${this} video transfer active: ${active}`);\n    const changed = this.videoTransferActive !== active;\n\n    this.videoTransferActive = active;\n\n    return changed;\n};\n\n/**\n * Makes the underlying TraceablePeerConnection generate new SSRC for\n * the recvonly video stream.\n */\nTraceablePeerConnection.prototype.generateRecvonlySsrc = function() {\n    const newSSRC = SDPUtil.generateSsrc();\n\n    logger.info(`${this} generated new recvonly SSRC: ${newSSRC}`);\n    this.sdpConsistency.setPrimarySsrc(newSSRC);\n};\n\n/**\n * Makes the underlying TraceablePeerConnection forget the current primary video\n * SSRC.\n */\nTraceablePeerConnection.prototype.clearRecvonlySsrc = function() {\n    logger.info('Clearing primary video SSRC!');\n    this.sdpConsistency.clearVideoSsrcCache();\n};\n\n/**\n * Closes underlying WebRTC PeerConnection instance and removes all remote\n * tracks by emitting {@link RTCEvents.REMOTE_TRACK_REMOVED} for each one of\n * them.\n */\nTraceablePeerConnection.prototype.close = function() {\n    this.trace('stop');\n\n    // Off SignalingEvents\n    this.signalingLayer.off(\n        SignalingEvents.PEER_MUTED_CHANGED, this._peerMutedChanged);\n    this.signalingLayer.off(\n        SignalingEvents.PEER_VIDEO_TYPE_CHANGED, this._peerVideoTypeChanged);\n\n    for (const peerTracks of this.remoteTracks.values()) {\n        for (const remoteTrack of peerTracks.values()) {\n            this._removeRemoteTrack(remoteTrack);\n        }\n    }\n    this.remoteTracks.clear();\n\n    this._addedStreams = [];\n\n    if (!this.rtc._removePeerConnection(this)) {\n        logger.error('RTC._removePeerConnection returned false');\n    }\n    if (this.statsinterval !== null) {\n        window.clearInterval(this.statsinterval);\n        this.statsinterval = null;\n    }\n    logger.info(`Closing ${this}...`);\n    this.peerconnection.close();\n};\n\n/**\n * Modifies the values of the setup attributes (defined by\n * {@link http://tools.ietf.org/html/rfc4145#section-4}) of a specific SDP\n * answer in order to overcome a delay of 1 second in the connection\n * establishment between some devices and Videobridge.\n *\n * @param {SDP} offer - the SDP offer to which the specified SDP answer is\n * being prepared to respond\n * @param {SDP} answer - the SDP to modify\n * @private\n */\nconst _fixAnswerRFC4145Setup = function(offer, answer) {\n    if (!(browser.isChromiumBased() || browser.isReactNative())) {\n        // It looks like Firefox doesn't agree with the fix (at least in its\n        // current implementation) because it effectively remains active even\n        // after we tell it to become passive. Apart from Firefox which I tested\n        // after the fix was deployed, I tested Chrome only. In order to prevent\n        // issues with other browsers, limit the fix to known devices for the\n        // time being.\n        return;\n    }\n\n    // XXX Videobridge is the (SDP) offerer and WebRTC (e.g. Chrome) is the\n    // answerer (as orchestrated by Jicofo). In accord with\n    // http://tools.ietf.org/html/rfc5245#section-5.2 and because both peers\n    // are ICE FULL agents, Videobridge will take on the controlling role and\n    // WebRTC will take on the controlled role. In accord with\n    // https://tools.ietf.org/html/rfc5763#section-5, Videobridge will use the\n    // setup attribute value of setup:actpass and WebRTC will be allowed to\n    // choose either the setup attribute value of setup:active or\n    // setup:passive. Chrome will by default choose setup:active because it is\n    // RECOMMENDED by the respective RFC since setup:passive adds additional\n    // latency. The case of setup:active allows WebRTC to send a DTLS\n    // ClientHello as soon as an ICE connectivity check of its succeeds.\n    // Unfortunately, Videobridge will be unable to respond immediately because\n    // may not have WebRTC's answer or may have not completed the ICE\n    // connectivity establishment. Even more unfortunate is that in the\n    // described scenario Chrome's DTLS implementation will insist on\n    // retransmitting its ClientHello after a second (the time is in accord\n    // with the respective RFC) and will thus cause the whole connection\n    // establishment to exceed at least 1 second. To work around Chrome's\n    // idiosyncracy, don't allow it to send a ClientHello i.e. change its\n    // default choice of setup:active to setup:passive.\n    if (offer && answer\n            && offer.media && answer.media\n            && offer.media.length === answer.media.length) {\n        answer.media.forEach((a, i) => {\n            if (SDPUtil.findLine(\n                    offer.media[i],\n                    'a=setup:actpass',\n                    offer.session)) {\n                answer.media[i]\n                    = a.replace(/a=setup:active/g, 'a=setup:passive');\n            }\n        });\n        answer.raw = answer.session + answer.media.join('');\n    }\n};\n\nTraceablePeerConnection.prototype.createAnswer = function(constraints) {\n    if (browser.isFirefox() && this.isSimulcastOn()) {\n        const videoSender\n            = this.peerconnection.getSenders().find(sender =>\n                sender.track !== null && sender.track.kind === 'video');\n        const simParams = {\n            encodings: [\n                {\n                    rid: SIM_LAYER_1_RID,\n                    scaleResolutionDownBy: 4\n                },\n                {\n                    rid: SIM_LAYER_2_RID,\n                    scaleResolutionDownBy: 2\n                },\n                {\n                    rid: SIM_LAYER_3_RID\n                }\n            ]\n        };\n\n        videoSender.setParameters(simParams);\n    }\n\n    return this._createOfferOrAnswer(false /* answer */, constraints);\n};\n\nTraceablePeerConnection.prototype.createOffer = function(constraints) {\n    return this._createOfferOrAnswer(true /* offer */, constraints);\n};\n\nTraceablePeerConnection.prototype._createOfferOrAnswer = function(\n        isOffer,\n        constraints) {\n    const logName = isOffer ? 'Offer' : 'Answer';\n\n    this.trace(`create${logName}`, JSON.stringify(constraints, null, ' '));\n\n    const handleSuccess = (resultSdp, resolveFn, rejectFn) => {\n        try {\n            this.trace(\n                `create${logName}OnSuccess::preTransform`, dumpSDP(resultSdp));\n\n            // if we're using unified plan, transform to Plan B.\n            if (browser.usesUnifiedPlan()) {\n                // eslint-disable-next-line no-param-reassign\n                resultSdp = this.interop.toPlanB(resultSdp);\n                this.trace(\n                    `create${logName}OnSuccess::postTransform (Plan B)`,\n                    dumpSDP(resultSdp));\n                if (this.isSimulcastOn()) {\n                    // eslint-disable-next-line no-param-reassign\n                    resultSdp\n                        = this._injectSsrcGroupForUnifiedSimulcast(resultSdp);\n                    this.trace(\n                        `create${logName}OnSuccess::postTransform`\n                        + '(inject ssrc group)', dumpSDP(resultSdp));\n                }\n            }\n\n            /**\n             * We don't keep ssrcs consitent for Firefox because rewriting\n             *  the ssrcs between createAnswer and setLocalDescription breaks\n             *  the caching in sdp-interop (sdp-interop must know about all\n             *  ssrcs, and it updates its cache in toPlanB so if we rewrite them\n             *  after that, when we try and go back to unified plan it will\n             *  complain about unmapped ssrcs)\n             */\n            if (!browser.usesUnifiedPlan()) {\n                // If there are no local video tracks, then a \"recvonly\"\n                // SSRC needs to be generated\n                if (!this.hasAnyTracksOfType(MediaType.VIDEO)\n                    && !this.sdpConsistency.hasPrimarySsrcCached()) {\n                    this.generateRecvonlySsrc();\n                }\n\n                // eslint-disable-next-line no-param-reassign\n                resultSdp = new RTCSessionDescription({\n                    type: resultSdp.type,\n                    sdp: this.sdpConsistency.makeVideoPrimarySsrcsConsistent(\n                        resultSdp.sdp)\n                });\n\n                this.trace(\n                    `create${logName}OnSuccess::postTransform `\n                         + '(make primary audio/video ssrcs consistent)',\n                    dumpSDP(resultSdp));\n            }\n\n            // Add simulcast streams if simulcast is enabled\n            if (this.isSimulcastOn()) {\n                // eslint-disable-next-line no-param-reassign\n                resultSdp = this.simulcast.mungeLocalDescription(resultSdp);\n                this.trace(\n                    `create${logName}`\n                        + 'OnSuccess::postTransform (simulcast)',\n                    dumpSDP(resultSdp));\n            }\n\n            if (!this.options.disableRtx && browser.supportsRtx()) {\n                // eslint-disable-next-line no-param-reassign\n                resultSdp = new RTCSessionDescription({\n                    type: resultSdp.type,\n                    sdp: this.rtxModifier.modifyRtxSsrcs(resultSdp.sdp)\n                });\n\n                this.trace(\n                    `create${logName}`\n                         + 'OnSuccess::postTransform (rtx modifier)',\n                    dumpSDP(resultSdp));\n            }\n\n            // Fix the setup attribute (see _fixAnswerRFC4145Setup for\n            //  details)\n            if (!isOffer) {\n                const remoteDescription\n                    = new SDP(this.remoteDescription.sdp);\n                const localDescription = new SDP(resultSdp.sdp);\n\n                _fixAnswerRFC4145Setup(remoteDescription, localDescription);\n\n                // eslint-disable-next-line no-param-reassign\n                resultSdp = new RTCSessionDescription({\n                    type: resultSdp.type,\n                    sdp: localDescription.raw\n                });\n            }\n\n            const ssrcMap = extractSSRCMap(resultSdp);\n\n            logger.debug('Got local SSRCs MAP: ', ssrcMap);\n            this._processLocalSSRCsMap(ssrcMap);\n\n            resolveFn(resultSdp);\n        } catch (e) {\n            this.trace(`create${logName}OnError`, e);\n            this.trace(`create${logName}OnError`, dumpSDP(resultSdp));\n            logger.error(`create${logName}OnError`, e, dumpSDP(resultSdp));\n\n            rejectFn(e);\n        }\n    };\n\n    const handleFailure = (err, rejectFn) => {\n        this.trace(`create${logName}OnFailure`, err);\n        const eventType\n            = isOffer\n                ? RTCEvents.CREATE_OFFER_FAILED\n                : RTCEvents.CREATE_ANSWER_FAILED;\n\n        this.eventEmitter.emit(eventType, err, this);\n\n        rejectFn(err);\n    };\n\n    return new Promise((resolve, reject) => {\n        let oaPromise;\n\n        if (isOffer) {\n            oaPromise = this.peerconnection.createOffer(constraints);\n        } else {\n            oaPromise = this.peerconnection.createAnswer(constraints);\n        }\n\n        oaPromise\n            .then(\n                sdp => handleSuccess(sdp, resolve, reject),\n                error => handleFailure(error, reject));\n    });\n};\n\n/**\n * Extract primary SSRC from given {@link TrackSSRCInfo} object.\n * @param {TrackSSRCInfo} ssrcObj\n * @return {number|null} the primary SSRC or <tt>null</tt>\n */\nfunction extractPrimarySSRC(ssrcObj) {\n    if (ssrcObj && ssrcObj.groups && ssrcObj.groups.length) {\n        return ssrcObj.groups[0].ssrcs[0];\n    } else if (ssrcObj && ssrcObj.ssrcs && ssrcObj.ssrcs.length) {\n        return ssrcObj.ssrcs[0];\n    }\n\n    return null;\n}\n\n/**\n * Goes over the SSRC map extracted from the latest local description and tries\n * to match them with the local tracks (by MSID). Will update the values\n * currently stored in the {@link TraceablePeerConnection.localSSRCs} map.\n * @param {Map<string,TrackSSRCInfo>} ssrcMap\n * @private\n */\nTraceablePeerConnection.prototype._processLocalSSRCsMap = function(ssrcMap) {\n    for (const track of this.localTracks.values()) {\n        const trackMSID = track.storedMSID;\n\n        if (ssrcMap.has(trackMSID)) {\n            const newSSRC = ssrcMap.get(trackMSID);\n\n            if (!newSSRC) {\n                logger.error(`No SSRC found for: ${trackMSID} in ${this}`);\n\n                return;\n            }\n            const oldSSRC = this.localSSRCs.get(track.rtcId);\n            const newSSRCNum = extractPrimarySSRC(newSSRC);\n            const oldSSRCNum = extractPrimarySSRC(oldSSRC);\n\n            // eslint-disable-next-line no-negated-condition\n            if (newSSRCNum !== oldSSRCNum) {\n                if (oldSSRCNum === null) {\n                    logger.info(\n                        `Storing new local SSRC for ${track} in ${this}`,\n                        newSSRC);\n                } else {\n                    logger.error(\n                        `Overwriting SSRC for ${track} ${trackMSID} in ${this\n                        } with: `, newSSRC);\n                }\n                this.localSSRCs.set(track.rtcId, newSSRC);\n\n                this.eventEmitter.emit(\n                    RTCEvents.LOCAL_TRACK_SSRC_UPDATED, track, newSSRCNum);\n            } else {\n                logger.debug(\n                    `The local SSRC(${newSSRCNum}) for ${track} ${trackMSID}`\n                     + `is still up to date in ${this}`);\n            }\n        } else if (!track.isVideoTrack() && !track.isMuted()) {\n            // It is normal to find no SSRCs for a muted video track in\n            // the local SDP as the recv-only SSRC is no longer munged in.\n            // So log the warning only if it's not a muted video track.\n            logger.warn(`No SSRCs found in the local SDP for ${track} MSID: ${trackMSID} in ${this}`);\n        }\n    }\n};\n\nTraceablePeerConnection.prototype.addIceCandidate = function(candidate) {\n    this.trace('addIceCandidate', JSON.stringify({\n        candidate: candidate.candidate,\n        sdpMid: candidate.sdpMid,\n        sdpMLineIndex: candidate.sdpMLineIndex,\n        usernameFragment: candidate.usernameFragment\n    }, null, ' '));\n\n    return this.peerconnection.addIceCandidate(candidate);\n};\n\n/**\n * Obtains call-related stats from the peer connection.\n *\n * @param {Function} callback - The function to invoke after successfully\n * obtaining stats.\n * @param {Function} errback - The function to invoke after failing to obtain\n * stats.\n * @returns {void}\n */\nTraceablePeerConnection.prototype.getStats = function(callback, errback) {\n    // TODO (brian): After moving all browsers to adapter, check if adapter is\n    // accounting for different getStats apis, making the browser-checking-if\n    // unnecessary.\n    if (browser.isSafariWithWebrtc() || browser.isFirefox()\n            || browser.isReactNative()) {\n        // uses the new Promise based getStats\n        this.peerconnection.getStats()\n            .then(callback)\n            .catch(errback || (() => {\n\n                // Making sure that getStats won't fail if error callback is\n                // not passed.\n            }));\n    } else {\n        this.peerconnection.getStats(callback);\n    }\n};\n\n/**\n * Generates and stores new SSRC info object for given local track.\n * The method should be called only for a video track being added to this TPC\n * in the muted state (given that the current browser uses this strategy).\n * @param {JitsiLocalTrack} track\n * @return {TPCSSRCInfo}\n */\nTraceablePeerConnection.prototype.generateNewStreamSSRCInfo = function(track) {\n    const rtcId = track.rtcId;\n    let ssrcInfo = this._getSSRC(rtcId);\n\n    if (ssrcInfo) {\n        logger.error(`Will overwrite local SSRCs for track ID: ${rtcId}`);\n    }\n    if (this.isSimulcastOn()) {\n        ssrcInfo = {\n            ssrcs: [],\n            groups: []\n        };\n        for (let i = 0; i < SIMULCAST_LAYERS; i++) {\n            ssrcInfo.ssrcs.push(SDPUtil.generateSsrc());\n        }\n        ssrcInfo.groups.push({\n            ssrcs: ssrcInfo.ssrcs.slice(),\n            semantics: 'SIM'\n        });\n    } else {\n        ssrcInfo = {\n            ssrcs: [ SDPUtil.generateSsrc() ],\n            groups: []\n        };\n    }\n    if (!this.options.disableRtx && browser.supportsRtx()) {\n        // Specifically use a for loop here because we'll\n        //  be adding to the list we're iterating over, so we\n        //  only want to iterate through the items originally\n        //  on the list\n        const currNumSsrcs = ssrcInfo.ssrcs.length;\n\n        for (let i = 0; i < currNumSsrcs; ++i) {\n            const primarySsrc = ssrcInfo.ssrcs[i];\n            const rtxSsrc = SDPUtil.generateSsrc();\n\n            ssrcInfo.ssrcs.push(rtxSsrc);\n            ssrcInfo.groups.push({\n                ssrcs: [ primarySsrc, rtxSsrc ],\n                semantics: 'FID'\n            });\n        }\n    }\n    ssrcInfo.msid = track.storedMSID;\n    this.localSSRCs.set(rtcId, ssrcInfo);\n\n    return ssrcInfo;\n};\n\nconst handleLayerSuspension = function(peerConnection, isSelected) {\n    if (!peerConnection.getSenders) {\n        logger.debug('Browser doesn\\'t support RTPSender');\n\n        return;\n    }\n\n    const videoSender = peerConnection.getSenders()\n        .find(sender => sender.track.kind === 'video');\n\n    if (!videoSender) {\n        logger.warn('handleLayerSuspension unable to find video sender');\n\n        return;\n    }\n    if (!videoSender.getParameters) {\n        logger.debug('Browser doesn\\'t support RTPSender parameters');\n\n        return;\n    }\n    const parameters = videoSender.getParameters();\n\n    if (isSelected) {\n        logger.debug('Currently selected, enabling all sim layers');\n\n        // Make sure all encodings are enabled\n        parameters.encodings.forEach(e => {\n            e.active = true;\n        });\n    } else {\n        logger.debug('Not currently selected, disabling upper layers');\n\n        // Turn off the upper simulcast layers\n        [ 1, 2 ].forEach(simIndex => {\n            if (parameters.encodings[simIndex]) {\n                parameters.encodings[simIndex].active = false;\n            }\n        });\n    }\n    videoSender.setParameters(parameters);\n};\n\n/**\n * Set whether or not the endpoint is 'selected' by other endpoints, meaning\n * it appears on their main stage\n */\nTraceablePeerConnection.prototype.setIsSelected = function(isSelected) {\n    if (this.options.enableLayerSuspension) {\n        logger.debug('Layer suspension enabled,'\n            + `currently selected? ${isSelected}`);\n        handleLayerSuspension(this.peerconnection, isSelected);\n    }\n};\n\n/**\n * Creates a text representation of this <tt>TraceablePeerConnection</tt>\n * instance.\n * @return {string}\n */\nTraceablePeerConnection.prototype.toString = function() {\n    return `TPC[${this.id},p2p:${this.isP2P}]`;\n};\n","import { createTtfmEvent } from '../../service/statistics/AnalyticsEvents';\nimport JitsiTrack from './JitsiTrack';\nimport * as JitsiTrackEvents from '../../JitsiTrackEvents';\nimport Statistics from '../statistics/statistics';\n\nconst logger = require('jitsi-meet-logger').getLogger(__filename);\nconst RTCEvents = require('../../service/RTC/RTCEvents');\n\nlet ttfmTrackerAudioAttached = false;\nlet ttfmTrackerVideoAttached = false;\n\n/**\n * List of container events that we are going to process. _onContainerEventHandler will be added as listener to the\n * container for every event in the list.\n */\nconst containerEvents = [\n    'abort', 'canplay', 'canplaythrough', 'emptied', 'ended', 'error', 'loadeddata', 'loadedmetadata', 'loadstart',\n    'pause', 'play', 'playing', 'ratechange', 'stalled', 'suspend', 'waiting'\n];\n\n/* eslint-disable max-params */\n\n/**\n * Represents a single media track (either audio or video).\n */\nexport default class JitsiRemoteTrack extends JitsiTrack {\n    /**\n     * Creates new JitsiRemoteTrack instance.\n     * @param {RTC} rtc the RTC service instance.\n     * @param {JitsiConference} conference the conference to which this track\n     *        belongs to\n     * @param {string} ownerEndpointId the endpoint ID of the track owner\n     * @param {MediaStream} stream WebRTC MediaStream, parent of the track\n     * @param {MediaStreamTrack} track underlying WebRTC MediaStreamTrack for\n     *        the new JitsiRemoteTrack\n     * @param {MediaType} mediaType the type of the media\n     * @param {VideoType} videoType the type of the video if applicable\n     * @param {number} ssrc the SSRC number of the Media Stream\n     * @param {boolean} muted the initial muted state\n     * @param {boolean} isP2P indicates whether or not this track belongs to a\n     * P2P session\n     * @throws {TypeError} if <tt>ssrc</tt> is not a number.\n     * @constructor\n     */\n    constructor(\n            rtc,\n            conference,\n            ownerEndpointId,\n            stream,\n            track,\n            mediaType,\n            videoType,\n            ssrc,\n            muted,\n            isP2P) {\n        super(\n            conference,\n            stream,\n            track,\n            () => {\n                // Nothing to do if the track is inactive.\n            },\n            mediaType,\n            videoType);\n        this.rtc = rtc;\n\n        // Prevent from mixing up type of SSRC which should be a number\n        if (typeof ssrc !== 'number') {\n            throw new TypeError(`SSRC ${ssrc} is not a number`);\n        }\n        this.ssrc = ssrc;\n        this.ownerEndpointId = ownerEndpointId;\n        this.muted = muted;\n        this.isP2P = isP2P;\n\n        logger.debug(`New remote track added: ${this}`);\n\n        // we want to mark whether the track has been ever muted\n        // to detect ttfm events for startmuted conferences, as it can\n        // significantly increase ttfm values\n        this.hasBeenMuted = muted;\n\n        // Bind 'onmute' and 'onunmute' event handlers\n        if (this.rtc && this.track) {\n            this._bindTrackHandlers();\n        }\n        this._containerHandlers = {};\n        containerEvents.forEach(event => {\n            this._containerHandlers[event] = this._containerEventHandler.bind(this, event);\n        });\n    }\n\n    /* eslint-enable max-params */\n    /**\n     * Attaches the track handlers.\n     *\n     * @returns {void}\n     */\n    _bindTrackHandlers() {\n        this.track.addEventListener('mute', () => this._onTrackMute());\n        this.track.addEventListener('unmute', () => this._onTrackUnmute());\n        this.track.addEventListener('ended', () => {\n            logger.debug(`\"onended\" event(${Date.now()}): ${this}`);\n        });\n    }\n\n    /**\n     * Callback invoked when the track is muted. Emits an event notifying\n     * listeners of the mute event.\n     *\n     * @private\n     * @returns {void}\n     */\n    _onTrackMute() {\n        logger.debug(`\"onmute\" event(${Date.now()}): ${this}`);\n\n        this.rtc.eventEmitter.emit(RTCEvents.REMOTE_TRACK_MUTE, this);\n    }\n\n    /**\n     * Callback invoked when the track is unmuted. Emits an event notifying\n     * listeners of the mute event.\n     *\n     * @private\n     * @returns {void}\n     */\n    _onTrackUnmute() {\n        logger.debug(`\"onunmute\" event(${Date.now()}): ${this}`);\n\n        this.rtc.eventEmitter.emit(RTCEvents.REMOTE_TRACK_UNMUTE, this);\n    }\n\n    /**\n     * Sets current muted status and fires an events for the change.\n     * @param value the muted status.\n     */\n    setMute(value) {\n        if (this.muted === value) {\n            return;\n        }\n\n        if (value) {\n            this.hasBeenMuted = true;\n        }\n\n        // we can have a fake video stream\n        if (this.stream) {\n            this.stream.muted = value;\n        }\n\n        this.muted = value;\n        this.emit(JitsiTrackEvents.TRACK_MUTE_CHANGED, this);\n    }\n\n    /**\n     * Returns the current muted status of the track.\n     * @returns {boolean|*|JitsiRemoteTrack.muted} <tt>true</tt> if the track is\n     * muted and <tt>false</tt> otherwise.\n     */\n    isMuted() {\n        return this.muted;\n    }\n\n    /**\n     * Returns the participant id which owns the track.\n     *\n     * @returns {string} the id of the participants. It corresponds to the\n     * Colibri endpoint id/MUC nickname in case of Jitsi-meet.\n     */\n    getParticipantId() {\n        return this.ownerEndpointId;\n    }\n\n    /**\n     * Return false;\n     */\n    isLocal() {\n        return false;\n    }\n\n    /**\n     * Returns the synchronization source identifier (SSRC) of this remote\n     * track.\n     *\n     * @returns {number} the SSRC of this remote track.\n     */\n    getSSRC() {\n        return this.ssrc;\n    }\n\n    /**\n     * Changes the video type of the track.\n     *\n     * @param {string} type - The new video type(\"camera\", \"desktop\").\n     */\n    _setVideoType(type) {\n        if (this.videoType === type) {\n            return;\n        }\n        this.videoType = type;\n        this.emit(JitsiTrackEvents.TRACK_VIDEOTYPE_CHANGED, type);\n    }\n\n    /**\n     * Handles track play events.\n     */\n    _playCallback() {\n        const type = this.isVideoTrack() ? 'video' : 'audio';\n\n        const now = window.performance.now();\n\n        console.log(`(TIME) Render ${type}:\\t`, now);\n        this.conference.getConnectionTimes()[`${type}.render`] = now;\n\n        // The conference can be started without calling GUM\n        // FIXME if there would be a module for connection times this kind\n        // of logic (gumDuration or ttfm) should end up there\n        const gumStart = window.connectionTimes['obtainPermissions.start'];\n        const gumEnd = window.connectionTimes['obtainPermissions.end'];\n        const gumDuration\n            = !isNaN(gumEnd) && !isNaN(gumStart) ? gumEnd - gumStart : 0;\n\n        // Subtract the muc.joined-to-session-initiate duration because jicofo\n        // waits until there are 2 participants to start Jingle sessions.\n        const ttfm = now\n            - (this.conference.getConnectionTimes()['session.initiate']\n                - this.conference.getConnectionTimes()['muc.joined'])\n            - gumDuration;\n\n        this.conference.getConnectionTimes()[`${type}.ttfm`] = ttfm;\n        console.log(`(TIME) TTFM ${type}:\\t`, ttfm);\n\n        Statistics.sendAnalytics(createTtfmEvent(\n            {\n                'media_type': type,\n                muted: this.hasBeenMuted,\n                value: ttfm\n            }));\n\n    }\n\n    /**\n     * Attach time to first media tracker only if there is conference and only\n     * for the first element.\n     * @param container the HTML container which can be 'video' or 'audio'\n     * element.\n     * @private\n     */\n    _attachTTFMTracker(container) {\n        if ((ttfmTrackerAudioAttached && this.isAudioTrack())\n            || (ttfmTrackerVideoAttached && this.isVideoTrack())) {\n            return;\n        }\n\n        if (this.isAudioTrack()) {\n            ttfmTrackerAudioAttached = true;\n        }\n        if (this.isVideoTrack()) {\n            ttfmTrackerVideoAttached = true;\n        }\n\n        container.addEventListener('canplay', this._playCallback.bind(this));\n    }\n\n    /**\n     * Called when the track has been attached to a new container.\n     *\n     * @param {HTMLElement} container the HTML container which can be 'video' or\n     * 'audio' element.\n     * @private\n     */\n    _onTrackAttach(container) {\n        logger.debug(`Track has been attached to a container: ${this}`);\n\n        containerEvents.forEach(event => {\n            container.addEventListener(event, this._containerHandlers[event]);\n        });\n    }\n\n    /**\n     * Called when the track has been detached from a container.\n     *\n     * @param {HTMLElement} container the HTML container which can be 'video' or\n     * 'audio' element.\n     * @private\n     */\n    _onTrackDetach(container) {\n        logger.debug(`Track has been detached from a container: ${this}`);\n\n        containerEvents.forEach(event => {\n            container.removeEventListener(event, this._containerHandlers[event]);\n        });\n    }\n\n    /**\n     * An event handler for events triggered by the attached container.\n     *\n     * @param {string} type - The type of the event.\n     */\n    _containerEventHandler(type) {\n        logger.debug(`${type} handler was called for a container with attached ${this}`);\n    }\n\n    /**\n     * Returns a string with a description of the current status of the track.\n     *\n     * @returns {string}\n     */\n    _getStatus() {\n        const { enabled, muted, readyState } = this.track;\n\n        return `readyState: ${readyState}, muted: ${muted}, enabled: ${enabled}`;\n    }\n\n    /**\n     * Creates a text representation of this remote track instance.\n     * @return {string}\n     */\n    toString() {\n        return `RemoteTrack[userID: ${this.getParticipantId()}, type: ${this.getType()}, ssrc: ${\n            this.getSSRC()}, p2p: ${this.isP2P}, status: ${this._getStatus()}]`;\n    }\n}\n","/* global __filename */\n\nimport { getLogger } from 'jitsi-meet-logger';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport { SdpTransformWrap } from '../xmpp/SdpTransformUtil';\n\nconst logger = getLogger(__filename);\n\n/**\n * Fakes local SDP exposed to {@link JingleSessionPC} through the local\n * description getter. Modifies the SDP, so that it will contain muted local\n * video tracks description, even though their underlying {MediaStreamTrack}s\n * are no longer in the WebRTC peerconnection. That prevents from SSRC updates\n * being sent to Jicofo/remote peer and prevents sRD/sLD cycle on the remote\n * side.\n */\nexport default class LocalSdpMunger {\n\n    /**\n     * Creates new <tt>LocalSdpMunger</tt> instance.\n     *\n     * @param {TraceablePeerConnection} tpc\n     */\n    constructor(tpc) {\n        this.tpc = tpc;\n    }\n\n    /**\n     * Makes sure that muted local video tracks associated with the parent\n     * {@link TraceablePeerConnection} are described in the local SDP. It's done\n     * in order to prevent from sending 'source-remove'/'source-add' Jingle\n     * notifications when local video track is muted (<tt>MediaStream</tt> is\n     * removed from the peerconnection).\n     *\n     * NOTE 1 video track is assumed\n     *\n     * @param {SdpTransformWrap} transformer the transformer instance which will\n     * be used to process the SDP.\n     * @return {boolean} <tt>true</tt> if there were any modifications to\n     * the SDP wrapped by <tt>transformer</tt>.\n     * @private\n     */\n    _addMutedLocalVideoTracksToSDP(transformer) {\n        // Go over each video tracks and check if the SDP has to be changed\n        const localVideos = this.tpc.getLocalTracks(MediaType.VIDEO);\n\n        if (!localVideos.length) {\n            return false;\n        } else if (localVideos.length !== 1) {\n            logger.error(\n                `${this.tpc} there is more than 1 video track ! `\n                    + 'Strange things may happen !', localVideos);\n        }\n\n        const videoMLine = transformer.selectMedia('video');\n\n        if (!videoMLine) {\n            logger.debug(\n                `${this.tpc} unable to hack local video track SDP`\n                    + '- no \"video\" media');\n\n            return false;\n        }\n\n        let modified = false;\n\n        for (const videoTrack of localVideos) {\n            const muted = videoTrack.isMuted();\n            const mediaStream = videoTrack.getOriginalStream();\n\n            // During the mute/unmute operation there are periods of time when\n            // the track's underlying MediaStream is not added yet to\n            // the PeerConnection. The SDP needs to be munged in such case.\n            const isInPeerConnection\n                = mediaStream && this.tpc.isMediaStreamInPc(mediaStream);\n            const shouldFakeSdp = muted || !isInPeerConnection;\n\n            logger.debug(\n                `${this.tpc} ${videoTrack} muted: ${\n                    muted}, is in PeerConnection: ${\n                    isInPeerConnection} => should fake sdp ? : ${\n                    shouldFakeSdp}`);\n\n            if (!shouldFakeSdp) {\n                continue; // eslint-disable-line no-continue\n            }\n\n            // Inject removed SSRCs\n            const requiredSSRCs\n                = this.tpc.isSimulcastOn()\n                    ? this.tpc.simulcast.ssrcCache\n                    : [ this.tpc.sdpConsistency.cachedPrimarySsrc ];\n\n            if (!requiredSSRCs.length) {\n                logger.error(\n                    `No SSRCs stored for: ${videoTrack} in ${this.tpc}`);\n\n                continue; // eslint-disable-line no-continue\n            }\n\n            modified = true;\n\n            // We need to fake sendrecv.\n            // NOTE the SDP produced here goes only to Jicofo and is never set\n            // as localDescription. That's why\n            // TraceablePeerConnection.mediaTransferActive is ignored here.\n            videoMLine.direction = 'sendrecv';\n\n            // Check if the recvonly has MSID\n            const primarySSRC = requiredSSRCs[0];\n\n            // FIXME The cname could come from the stream, but may turn out to\n            // be too complex. It is fine to come up with any value, as long as\n            // we only care about the actual SSRC values when deciding whether\n            // or not an update should be sent.\n            const primaryCname = `injected-${primarySSRC}`;\n\n            for (const ssrcNum of requiredSSRCs) {\n                // Remove old attributes\n                videoMLine.removeSSRC(ssrcNum);\n\n                // Inject\n                logger.debug(\n                    `${this.tpc} injecting video SSRC: ${ssrcNum} for ${\n                        videoTrack}`);\n                videoMLine.addSSRCAttribute({\n                    id: ssrcNum,\n                    attribute: 'cname',\n                    value: primaryCname\n                });\n                videoMLine.addSSRCAttribute({\n                    id: ssrcNum,\n                    attribute: 'msid',\n                    value: videoTrack.storedMSID\n                });\n            }\n            if (requiredSSRCs.length > 1) {\n                const group = {\n                    ssrcs: requiredSSRCs.join(' '),\n                    semantics: 'SIM'\n                };\n\n                if (!videoMLine.findGroup(group.semantics, group.ssrcs)) {\n                    // Inject the group\n                    logger.debug(\n                        `${this.tpc} injecting SIM group for ${videoTrack}`,\n                        group);\n                    videoMLine.addSSRCGroup(group);\n                }\n            }\n\n            // Insert RTX\n            // FIXME in P2P RTX is used by Chrome regardless of config option\n            // status. Because of that 'source-remove'/'source-add'\n            // notifications are still sent to remove/add RTX SSRC and FID group\n            if (!this.tpc.options.disableRtx) {\n                this.tpc.rtxModifier.modifyRtxSsrcs2(videoMLine);\n            }\n        }\n\n        return modified;\n    }\n\n    /**\n     * Modifies 'cname', 'msid', 'label' and 'mslabel' by appending\n     * the id of {@link LocalSdpMunger#tpc} at the end, preceding by a dash\n     * sign.\n     *\n     * @param {MLineWrap} mediaSection - The media part (audio or video) of the\n     * session description which will be modified in place.\n     * @returns {void}\n     * @private\n     */\n    _transformMediaIdentifiers(mediaSection) {\n        const pcId = this.tpc.id;\n\n        for (const ssrcLine of mediaSection.ssrcs) {\n            switch (ssrcLine.attribute) {\n            case 'cname':\n            case 'label':\n            case 'mslabel':\n                ssrcLine.value = ssrcLine.value && `${ssrcLine.value}-${pcId}`;\n                break;\n            case 'msid': {\n                if (ssrcLine.value) {\n                    const streamAndTrackIDs = ssrcLine.value.split(' ');\n\n                    if (streamAndTrackIDs.length === 2) {\n                        const streamId = streamAndTrackIDs[0];\n                        const trackId = streamAndTrackIDs[1];\n\n                        ssrcLine.value\n                            = `${streamId}-${pcId} ${trackId}-${pcId}`;\n                    } else {\n                        logger.warn(\n                            'Unable to munge local MSID'\n                                + `- weird format detected: ${ssrcLine.value}`);\n                    }\n                }\n                break;\n            }\n            }\n        }\n    }\n\n    /**\n     * Maybe modifies local description to fake local video tracks SDP when\n     * those are muted.\n     *\n     * @param {object} desc the WebRTC SDP object instance for the local\n     * description.\n     * @returns {RTCSessionDescription}\n     */\n    maybeAddMutedLocalVideoTracksToSDP(desc) {\n        if (!desc) {\n            throw new Error('No local description passed in.');\n        }\n\n        const transformer = new SdpTransformWrap(desc.sdp);\n\n        if (this._addMutedLocalVideoTracksToSDP(transformer)) {\n            return new RTCSessionDescription({\n                type: desc.type,\n                sdp: transformer.toRawSDP()\n            });\n        }\n\n        return desc;\n    }\n\n    /**\n     * This transformation will make sure that stream identifiers are unique\n     * across all of the local PeerConnections even if the same stream is used\n     * by multiple instances at the same time.\n     * Each PeerConnection assigns different SSRCs to the same local\n     * MediaStream, but the MSID remains the same as it's used to identify\n     * the stream by the WebRTC backend. The transformation will append\n     * {@link TraceablePeerConnection#id} at the end of each stream's identifier\n     * (\"cname\", \"msid\", \"label\" and \"mslabel\").\n     *\n     * @param {RTCSessionDescription} sessionDesc - The local session\n     * description (this instance remains unchanged).\n     * @return {RTCSessionDescription} - Transformed local session description\n     * (a modified copy of the one given as the input).\n     */\n    transformStreamIdentifiers(sessionDesc) {\n        // FIXME similar check is probably duplicated in all other transformers\n        if (!sessionDesc || !sessionDesc.sdp || !sessionDesc.type) {\n            return sessionDesc;\n        }\n\n        const transformer = new SdpTransformWrap(sessionDesc.sdp);\n        const audioMLine = transformer.selectMedia('audio');\n\n        if (audioMLine) {\n            this._transformMediaIdentifiers(audioMLine);\n        }\n\n        const videoMLine = transformer.selectMedia('video');\n\n        if (videoMLine) {\n            this._transformMediaIdentifiers(videoMLine);\n        }\n\n        return new RTCSessionDescription({\n            type: sessionDesc.type,\n            sdp: transformer.toRawSDP()\n        });\n    }\n}\n","/* global __filename */\n\nimport { getLogger } from 'jitsi-meet-logger';\nimport { parseSecondarySSRC, SdpTransformWrap } from './SdpTransformUtil';\nimport SDPUtil from './SDPUtil';\n\nconst logger = getLogger(__filename);\n\n/**\n * Begin helper functions\n */\n/**\n * Updates or inserts the appropriate rtx information for primarySsrc with\n *  the given rtxSsrc.  If no rtx ssrc for primarySsrc currently exists, it will\n *  add the appropriate ssrc and ssrc group lines.  If primarySsrc already has\n *  an rtx ssrc, the appropriate ssrc and group lines will be updated\n * @param {MLineWrap} mLine\n * @param {object} primarySsrcInfo the info (ssrc, msid & cname) for the\n *  primary ssrc\n * @param {number} rtxSsrc the rtx ssrc to associate with the primary ssrc\n */\nfunction updateAssociatedRtxStream(mLine, primarySsrcInfo, rtxSsrc) {\n    logger.debug(\n        `Updating mline to associate ${rtxSsrc}`\n        + `rtx ssrc with primary stream, ${primarySsrcInfo.id}`);\n    const primarySsrc = primarySsrcInfo.id;\n    const primarySsrcMsid = primarySsrcInfo.msid;\n    const primarySsrcCname = primarySsrcInfo.cname;\n\n    const previousRtxSSRC = mLine.getRtxSSRC(primarySsrc);\n\n    if (previousRtxSSRC === rtxSsrc) {\n        logger.debug(`${rtxSsrc} was already associated with ${primarySsrc}`);\n\n        return;\n    }\n    if (previousRtxSSRC) {\n        logger.debug(\n            `${primarySsrc} was previously associated with rtx`\n            + `${previousRtxSSRC}, removing all references to it`);\n\n        // Stream already had an rtx ssrc that is different than the one given,\n        //  remove all trace of the old one\n        mLine.removeSSRC(previousRtxSSRC);\n\n        logger.debug(`groups before filtering for ${previousRtxSSRC}`);\n        logger.debug(mLine.dumpSSRCGroups());\n\n        mLine.removeGroupsWithSSRC(previousRtxSSRC);\n    }\n    mLine.addSSRCAttribute({\n        id: rtxSsrc,\n        attribute: 'cname',\n        value: primarySsrcCname\n    });\n    mLine.addSSRCAttribute({\n        id: rtxSsrc,\n        attribute: 'msid',\n        value: primarySsrcMsid\n    });\n    mLine.addSSRCGroup({\n        semantics: 'FID',\n        ssrcs: `${primarySsrc} ${rtxSsrc}`\n    });\n}\n\n/**\n * End helper functions\n */\n\n/**\n * Adds any missing RTX streams for video streams\n *  and makes sure that they remain consistent\n */\nexport default class RtxModifier {\n    /**\n     * Constructor\n     */\n    constructor() {\n        /**\n         * Map of video ssrc to corresponding RTX\n         *  ssrc\n         */\n        this.correspondingRtxSsrcs = new Map();\n    }\n\n    /**\n     * Clear the cached map of primary video ssrcs to\n     *  their corresponding rtx ssrcs so that they will\n     *  not be used for the next call to modifyRtxSsrcs\n     */\n    clearSsrcCache() {\n        this.correspondingRtxSsrcs.clear();\n    }\n\n    /**\n     * Explicitly set the primary video ssrc -> rtx ssrc\n     *  mapping to be used in modifyRtxSsrcs\n     * @param {Map} ssrcMapping a mapping of primary video\n     *  ssrcs to their corresponding rtx ssrcs\n     */\n    setSsrcCache(ssrcMapping) {\n        logger.debug('Setting ssrc cache to ', ssrcMapping);\n        this.correspondingRtxSsrcs = ssrcMapping;\n    }\n\n    /**\n     * Adds RTX ssrcs for any video ssrcs that don't\n     *  already have them.  If the video ssrc has been\n     *  seen before, and already had an RTX ssrc generated,\n     *  the same RTX ssrc will be used again.\n     * @param {string} sdpStr sdp in raw string format\n     */\n    modifyRtxSsrcs(sdpStr) {\n        const sdpTransformer = new SdpTransformWrap(sdpStr);\n        const videoMLine = sdpTransformer.selectMedia('video');\n\n        if (!videoMLine) {\n            logger.debug(`No 'video' media found in the sdp: ${sdpStr}`);\n\n            return sdpStr;\n        }\n\n        return this.modifyRtxSsrcs2(videoMLine)\n            ? sdpTransformer.toRawSDP() : sdpStr;\n    }\n\n    /**\n     * Does the same thing as {@link modifyRtxSsrcs}, but takes the\n     *  {@link MLineWrap} instance wrapping video media as an argument.\n     * @param {MLineWrap} videoMLine\n     * @return {boolean} <tt>true</tt> if the SDP wrapped by\n     *  {@link SdpTransformWrap} has been modified or <tt>false</tt> otherwise.\n     */\n    modifyRtxSsrcs2(videoMLine) {\n        if (videoMLine.direction === 'recvonly') {\n            logger.debug('RtxModifier doing nothing, video m line is recvonly');\n\n            return false;\n        }\n        if (videoMLine.getSSRCCount() < 1) {\n            logger.debug('RtxModifier doing nothing, no video ssrcs present');\n\n            return false;\n        }\n        logger.debug('Current ssrc mapping: ', this.correspondingRtxSsrcs);\n        const primaryVideoSsrcs = videoMLine.getPrimaryVideoSSRCs();\n\n        logger.debug('Parsed primary video ssrcs ', primaryVideoSsrcs,\n            ' making sure all have rtx streams');\n        for (const ssrc of primaryVideoSsrcs) {\n            const msid = videoMLine.getSSRCAttrValue(ssrc, 'msid');\n            const cname = videoMLine.getSSRCAttrValue(ssrc, 'cname');\n            let correspondingRtxSsrc = this.correspondingRtxSsrcs.get(ssrc);\n\n            if (correspondingRtxSsrc) {\n                logger.debug(\n                    'Already have an associated rtx ssrc for'\n                    + `video ssrc ${ssrc}: ${correspondingRtxSsrc}`);\n            } else {\n                logger.debug(\n                    `No previously associated rtx ssrc for video ssrc ${ssrc}`);\n\n                // If there's one in the sdp already for it, we'll just set\n                //  that as the corresponding one\n                const previousAssociatedRtxStream = videoMLine.getRtxSSRC(ssrc);\n\n                if (previousAssociatedRtxStream) {\n                    logger.debug(\n                        `Rtx stream ${previousAssociatedRtxStream} `\n                        + 'already existed in the sdp as an rtx stream for '\n                        + `${ssrc}`);\n                    correspondingRtxSsrc = previousAssociatedRtxStream;\n                } else {\n                    correspondingRtxSsrc = SDPUtil.generateSsrc();\n                    logger.debug(`Generated rtx ssrc ${correspondingRtxSsrc} `\n                                 + `for ssrc ${ssrc}`);\n                }\n                logger.debug(`Caching rtx ssrc ${correspondingRtxSsrc} `\n                             + `for video ssrc ${ssrc}`);\n                this.correspondingRtxSsrcs.set(ssrc, correspondingRtxSsrc);\n            }\n            updateAssociatedRtxStream(\n                videoMLine,\n                {\n                    id: ssrc,\n                    cname,\n                    msid\n                },\n                correspondingRtxSsrc);\n        }\n\n        // FIXME we're not looking into much details whether the SDP has been\n        // modified or not once the precondition requirements are met.\n        return true;\n    }\n\n    /**\n     * Strip all rtx streams from the given sdp\n     * @param {string} sdpStr sdp in raw string format\n     * @returns {string} sdp string with all rtx streams stripped\n     */\n    stripRtx(sdpStr) {\n        const sdpTransformer = new SdpTransformWrap(sdpStr);\n        const videoMLine = sdpTransformer.selectMedia('video');\n\n        if (!videoMLine) {\n            logger.debug(`No 'video' media found in the sdp: ${sdpStr}`);\n\n            return sdpStr;\n        }\n        if (videoMLine.direction === 'recvonly') {\n            logger.debug('RtxModifier doing nothing, video m line is recvonly');\n\n            return sdpStr;\n        }\n        if (videoMLine.getSSRCCount() < 1) {\n            logger.debug('RtxModifier doing nothing, no video ssrcs present');\n\n            return sdpStr;\n        }\n        if (!videoMLine.containsAnySSRCGroups()) {\n            logger.debug('RtxModifier doing nothing, '\n              + 'no video ssrcGroups present');\n\n            return sdpStr;\n        }\n        const fidGroups = videoMLine.findGroups('FID');\n\n        // Remove the fid groups from the mline\n\n        videoMLine.removeGroupsBySemantics('FID');\n\n        // Get the rtx ssrcs and remove them from the mline\n        for (const fidGroup of fidGroups) {\n            const rtxSsrc = parseSecondarySSRC(fidGroup);\n\n            videoMLine.removeSSRC(rtxSsrc);\n        }\n\n        return sdpTransformer.toRawSDP();\n    }\n}\n","/* global __filename */\n\nimport { getLogger } from 'jitsi-meet-logger';\nimport {\n    parsePrimarySSRC,\n    parseSecondarySSRC,\n    SdpTransformWrap\n} from './SdpTransformUtil';\n\nconst logger = getLogger(__filename);\n\n/**\n * Handles the work of keeping video ssrcs consistent across multiple\n * o/a cycles, making it such that all stream operations can be\n * kept local and do not need to be signaled.\n * NOTE: This only keeps the 'primary' video ssrc consistent: meaning\n * the primary video stream\n */\nexport default class SdpConsistency {\n    /**\n     * Constructor\n     * @param {string} logPrefix the log prefix appended to every logged\n     * message, currently used to distinguish for which\n     * <tt>TraceablePeerConnection</tt> the instance works.\n     */\n    constructor(logPrefix) {\n        this.clearVideoSsrcCache();\n        this.logPrefix = logPrefix;\n    }\n\n    /**\n     * Clear the cached video primary and primary rtx ssrcs so that\n     *  they will not be used for the next call to\n     *  makeVideoPrimarySsrcsConsistent\n     */\n    clearVideoSsrcCache() {\n        this.cachedPrimarySsrc = null;\n        this.injectRecvOnly = false;\n    }\n\n    /**\n     * Explicitly set the primary ssrc to be used in\n     *  makeVideoPrimarySsrcsConsistent\n     * @param {number} primarySsrc the primarySsrc to be used\n     *  in future calls to makeVideoPrimarySsrcsConsistent\n     * @throws Error if <tt>primarySsrc</tt> is not a number\n     */\n    setPrimarySsrc(primarySsrc) {\n        if (typeof primarySsrc !== 'number') {\n            throw new Error('Primary SSRC must be a number!');\n        }\n        this.cachedPrimarySsrc = primarySsrc;\n    }\n\n    /**\n     * Checks whether or not there is a primary video SSRC cached already.\n     * @return {boolean}\n     */\n    hasPrimarySsrcCached() {\n        return Boolean(this.cachedPrimarySsrc);\n    }\n\n    /**\n     * Given an sdp string, either:\n     *  1) record the primary video and primary rtx ssrcs to be\n     *   used in future calls to makeVideoPrimarySsrcsConsistent or\n     *  2) change the primary and primary rtx ssrcs in the given sdp\n     *   to match the ones previously cached\n     * @param {string} sdpStr the sdp string to (potentially)\n     *  change to make the video ssrcs consistent\n     * @returns {string} a (potentially) modified sdp string\n     *  with ssrcs consistent with this class' cache\n     */\n    makeVideoPrimarySsrcsConsistent(sdpStr) {\n        const sdpTransformer = new SdpTransformWrap(sdpStr);\n        const videoMLine = sdpTransformer.selectMedia('video');\n\n        if (!videoMLine) {\n            logger.debug(\n                `${this.logPrefix} no 'video' media found in the sdp: `\n                    + `${sdpStr}`);\n\n            return sdpStr;\n        }\n\n        if (videoMLine.direction === 'recvonly') {\n            // If the mline is recvonly, we'll add the primary\n            //  ssrc as a recvonly ssrc\n            if (this.cachedPrimarySsrc && this.injectRecvOnly) {\n                videoMLine.addSSRCAttribute({\n                    id: this.cachedPrimarySsrc,\n                    attribute: 'cname',\n                    value: `recvonly-${this.cachedPrimarySsrc}`\n                });\n            } else {\n                logger.info(\n                    `${this.logPrefix} no SSRC found for the recvonly video`\n                        + 'stream!');\n            }\n        } else {\n            const newPrimarySsrc = videoMLine.getPrimaryVideoSsrc();\n\n            if (!newPrimarySsrc) {\n                logger.info(\n                    `${this.logPrefix} sdp-consistency couldn't`\n                        + ' parse new primary ssrc');\n\n                return sdpStr;\n            }\n            if (this.cachedPrimarySsrc) {\n                logger.info(\n                    `${this.logPrefix} sdp-consistency replacing new ssrc`\n                        + `${newPrimarySsrc} with cached `\n                        + `${this.cachedPrimarySsrc}`);\n                videoMLine.replaceSSRC(newPrimarySsrc, this.cachedPrimarySsrc);\n                for (const group of videoMLine.ssrcGroups) {\n                    if (group.semantics === 'FID') {\n                        const primarySsrc = parsePrimarySSRC(group);\n                        const rtxSsrc = parseSecondarySSRC(group);\n\n                        // eslint-disable-next-line max-depth\n                        if (primarySsrc === newPrimarySsrc) {\n                            group.ssrcs\n                                = `${this.cachedPrimarySsrc} ${rtxSsrc}`;\n                        }\n                    }\n                }\n            } else {\n                this.cachedPrimarySsrc = newPrimarySsrc;\n                logger.info(\n                    `${this.logPrefix} sdp-consistency caching primary ssrc`\n                        + `${this.cachedPrimarySsrc}`);\n            }\n\n            this.injectRecvOnly = true;\n        }\n\n        return sdpTransformer.toRawSDP();\n    }\n}\n","import * as JitsiConferenceEvents from '../JitsiConferenceEvents';\n\n/**\n * The value which we use to say, every sound over this threshold\n * is talking on the mic.\n * @type {number}\n */\nconst SPEECH_DETECT_THRESHOLD = 0.6;\n\n/**\n * Detect user trying to speek while is locally muted and fires an event.\n */\nexport default class TalkMutedDetection {\n    /**\n     * Creates TalkMutedDetection\n     * @param conference the JitsiConference instance that created us.\n     * @param callback the callback to call when detected that the local user is\n     * talking while her microphone is muted.\n     * @constructor\n     */\n    constructor(conference, callback) {\n        /**\n         * The callback to call when detected that the local user is talking\n         * while her microphone is muted.\n         *\n         * @private\n         */\n        this._callback = callback;\n\n        /**\n         * The indicator which determines whether <tt>callback</tt> has been\n         * invoked for the current local audio track of <tt>conference</tt> so\n         * that it is invoked once only.\n         *\n         * @private\n         */\n        this._eventFired = false;\n\n        // XXX I went back and forth on the subject of where to put the access\n        // to statistics. On the one had, (1) statistics is likely intended to\n        // be private to conference and (2) there is a desire to keep the\n        // dependencies of modules to the minimum (i.e. not have\n        // TalkMutedDetection depend on statistics). On the other hand, (1)\n        // statistics is technically not private because\n        // JitsiConferenceEventManager accesses it and (2) TalkMutedDetection\n        // works exactly because it knows that there are no audio levels for\n        // JitsiLocalTrack but there are audio levels for the local participant\n        // through statistics.\n        conference.statistics.addAudioLevelListener(\n            this._audioLevel.bind(this));\n\n        conference.on(\n            JitsiConferenceEvents.TRACK_MUTE_CHANGED,\n            this._trackMuteChanged.bind(this));\n        conference.on(\n            JitsiConferenceEvents.TRACK_ADDED,\n            this._trackAdded.bind(this));\n    }\n\n    /* eslint-disable max-params */\n    /**\n     * Receives audio level events for all send and receive streams.\n     *\n     * @param {TraceablePeerConnection} pc - WebRTC PeerConnection object of the\n     * @param {number} ssrc - The synchronization source identifier (SSRC) of\n     * the endpoint/participant/stream being reported.\n     * @param {number} audioLevel - The audio level of <tt>ssrc</tt>.\n     * @param {boolean} isLocal - <tt>true</tt> if <tt>ssrc</tt> represents a\n     * local/send stream or <tt>false</tt> for a remote/receive stream.\n     */\n    _audioLevel(tpc, ssrc, audioLevel, isLocal) {\n        // We are interested in the local audio stream only and if event is not\n        // sent yet.\n        if (!isLocal || !this.audioTrack || this._eventFired) {\n            return;\n        }\n\n        if (this.audioTrack.isMuted()\n            && audioLevel > SPEECH_DETECT_THRESHOLD) {\n            this._eventFired = true;\n            this._callback();\n        }\n    }\n    /* eslint-enable max-params */\n\n    /**\n     * Determines whether a specific {@link JitsiTrack} represents a local audio\n     * track.\n     *\n     * @param {JitsiTrack} track - The <tt>JitsiTrack</tt> to be checked whether\n     * it represents a local audio track.\n     * @private\n     * @return {boolean} - <tt>true</tt> if the specified <tt>track</tt>\n     * represents a local audio track; otherwise, <tt>false</tt>.\n     */\n    _isLocalAudioTrack(track) {\n        return track.isAudioTrack() && track.isLocal();\n    }\n\n    /**\n     * Notifies this <tt>TalkMutedDetection</tt> that a {@link JitsiTrack} was\n     * added to the associated {@link JitsiConference}. Looks for the local\n     * audio track only.\n     *\n     * @param {JitsiTrack} track - The added <tt>JitsiTrack</tt>.\n     * @private\n     */\n    _trackAdded(track) {\n        if (this._isLocalAudioTrack(track)) {\n            this.audioTrack = track;\n        }\n    }\n\n    /**\n     * Notifies this <tt>TalkMutedDetection</tt> that the mute state of a\n     * {@link JitsiTrack} has changed. Looks for the local audio track only.\n     *\n     * @param {JitsiTrack} track - The <tt>JitsiTrack</tt> whose mute state has\n     * changed.\n     * @private\n     */\n    _trackMuteChanged(track) {\n        if (this._isLocalAudioTrack(track) && track.isMuted()) {\n            this._eventFired = false;\n        }\n    }\n}\n","import * as ConnectionQualityEvents\n    from '../../service/connectivity/ConnectionQualityEvents';\nimport * as ConferenceEvents from '../../JitsiConferenceEvents';\nimport { getLogger } from 'jitsi-meet-logger';\n\nconst XMPPEvents = require('../../service/xmpp/XMPPEvents');\nconst VideoType = require('../../service/RTC/VideoType');\nconst Resolutions = require('../../service/RTC/Resolutions');\n\nconst logger = getLogger(__filename);\n\n/**\n * The value to use for the \"type\" field for messages sent by ConnectionQuality\n * over the data channel.\n */\nconst STATS_MESSAGE_TYPE = 'stats';\n\n/**\n * See media/engine/simulcast.ss from webrtc.org\n */\nconst kSimulcastFormats = [\n    { width: 1920,\n        height: 1080,\n        layers: 3,\n        max: 5000,\n        target: 4000,\n        min: 800 },\n    { width: 1280,\n        height: 720,\n        layers: 3,\n        max: 2500,\n        target: 2500,\n        min: 600 },\n    { width: 960,\n        height: 540,\n        layers: 3,\n        max: 900,\n        target: 900,\n        min: 450 },\n    { width: 640,\n        height: 360,\n        layers: 2,\n        max: 700,\n        target: 500,\n        min: 150 },\n    { width: 480,\n        height: 270,\n        layers: 2,\n        max: 450,\n        target: 350,\n        min: 150 },\n    { width: 320,\n        height: 180,\n        layers: 1,\n        max: 200,\n        target: 150,\n        min: 30 }\n];\n\n/**\n * The maximum bitrate to use as a measurement against the participant's current\n * bitrate. This cap helps in the cases where the participant's bitrate is high\n * but not enough to fulfill high targets, such as with 1080p.\n */\nconst MAX_TARGET_BITRATE = 2500;\n\n/**\n * The initial bitrate for video in kbps.\n */\nlet startBitrate = 800;\n\n\n/**\n * The current cap (in kbps) put on the video stream (or null if there isn't\n * a cap).  If there is a cap, we'll take it into account when calculating\n * the current quality.\n */\nlet videoBitrateCap = null;\n\n/**\n * Gets the expected bitrate (in kbps) in perfect network conditions.\n * @param simulcast {boolean} whether simulcast is enabled or not.\n * @param resolution {Resolution} the resolution.\n * @param millisSinceStart {number} the number of milliseconds since sending\n * video started.\n */\nfunction getTarget(simulcast, resolution, millisSinceStart) {\n    // Completely ignore the bitrate in the first 5 seconds, as the first\n    // event seems to fire very early and the value is suspicious and causes\n    // false positives.\n    if (millisSinceStart < 15000) {\n        return 1;\n    }\n\n    let target = 0;\n    let height = Math.min(resolution.height, resolution.width);\n\n    if (simulcast) {\n        // Find the first format with height no bigger than ours.\n        let simulcastFormat = kSimulcastFormats.find(f => f.height <= height);\n\n        if (simulcastFormat) {\n            // Sum the target fields from all simulcast layers for the given\n            // resolution (e.g. 720p + 360p + 180p).\n            for (height = simulcastFormat.height; height >= 180; height /= 2) {\n                const targetHeight = height;\n\n                simulcastFormat\n                    = kSimulcastFormats.find(f => f.height === targetHeight);\n                if (simulcastFormat) {\n                    target += simulcastFormat.target;\n                } else {\n                    break;\n                }\n            }\n        }\n    } else {\n        // See GetMaxDefaultVideoBitrateKbps in\n        // media/engine/webrtcvideoengine2.cc from webrtc.org\n        const pixels = resolution.width * resolution.height;\n\n        if (pixels <= 320 * 240) {\n            target = 600;\n        } else if (pixels <= 640 * 480) {\n            target = 1700;\n        } else if (pixels <= 960 * 540) {\n            target = 2000;\n        } else {\n            target = 2500;\n        }\n    }\n\n    // Allow for an additional 1 second for ramp up -- delay any initial drop\n    // of connection quality by 1 second.\n    return Math.min(target, rampUp(Math.max(0, millisSinceStart - 1000)));\n}\n\n/**\n * Gets the bitrate to which GCC would have ramped up in perfect network\n * conditions after millisSinceStart milliseconds.\n * @param millisSinceStart {number} the number of milliseconds since sending\n * video was enabled.\n */\nfunction rampUp(millisSinceStart) {\n    if (millisSinceStart > 60000) {\n        return Number.MAX_SAFE_INTEGER;\n    }\n\n    // According to GCC the send side bandwidth estimation grows with at most\n    // 8% per second.\n    // https://tools.ietf.org/html/draft-ietf-rmcat-gcc-02#section-5.5\n    return startBitrate * Math.pow(1.08, millisSinceStart / 1000);\n}\n\n/**\n * A class which monitors the local statistics coming from the RTC modules, and\n * calculates a \"connection quality\" value, in percent, for the media\n * connection. A value of 100% indicates a very good network connection, and a\n * value of 0% indicates a poor connection.\n */\nexport default class ConnectionQuality {\n    /**\n     *\n     * @param conference\n     * @param eventEmitter\n     * @param options\n     */\n    constructor(conference, eventEmitter, options) {\n        this.eventEmitter = eventEmitter;\n\n        /**\n         * The owning JitsiConference.\n         */\n        this._conference = conference;\n\n        /**\n         * Holds statistics about the local connection quality.\n         */\n        this._localStats = {\n            connectionQuality: 100,\n            jvbRTT: undefined\n        };\n\n        /**\n         * The time this._localStats.connectionQuality was last updated.\n         */\n        this._lastConnectionQualityUpdate = -1;\n\n        /**\n         * Maps a participant ID to an object holding connection quality\n         * statistics received from this participant.\n         */\n        this._remoteStats = {};\n\n        /**\n         * The time that the ICE state last changed to CONNECTED. We use this\n         * to calculate how much time we as a sender have had to ramp-up.\n         */\n        this._timeIceConnected = -1;\n\n        /**\n         * The time that local video was unmuted. We use this to calculate how\n         * much time we as a sender have had to ramp-up.\n         */\n        this._timeVideoUnmuted = -1;\n\n        /**\n         * The time at which a video bitrate cap was last removed.  We use\n         * this to calculate how much time we, as a sender, have had to\n         * ramp-up\n         */\n        this._timeLastBwCapRemoved = -1;\n\n        // We assume a global startBitrate value for the sake of simplicity.\n        if (options.config.startBitrate && options.config.startBitrate > 0) {\n            startBitrate = options.config.startBitrate;\n        }\n\n        // TODO: consider ignoring these events and letting the user of\n        // lib-jitsi-meet handle these separately.\n        conference.on(\n            ConferenceEvents.CONNECTION_INTERRUPTED,\n            () => {\n                this._updateLocalConnectionQuality(0);\n                this.eventEmitter.emit(\n                    ConnectionQualityEvents.LOCAL_STATS_UPDATED,\n                    this._localStats);\n                this._broadcastLocalStats();\n            });\n\n        conference.room.addListener(\n            XMPPEvents.ICE_CONNECTION_STATE_CHANGED,\n            (jingleSession, newState) => {\n                if (!jingleSession.isP2P && newState === 'connected') {\n                    this._timeIceConnected = window.performance.now();\n                }\n            });\n\n        // Listen to DataChannel message from other participants in the\n        // conference, and update the _remoteStats field accordingly.\n        conference.on(\n            ConferenceEvents.ENDPOINT_MESSAGE_RECEIVED,\n            (participant, payload) => {\n                if (payload.type === STATS_MESSAGE_TYPE) {\n                    this._updateRemoteStats(\n                        participant.getId(), payload.values);\n                }\n            });\n\n        // Listen to local statistics events originating from the RTC module\n        // and update the _localStats field.\n        // Oh, and by the way, the resolutions of all remote participants are\n        // also piggy-backed in these \"local\" statistics. It's obvious, really,\n        // if one carefully reads the *code* (but not the docs) in\n        // UI/VideoLayout/VideoLayout.js#updateLocalConnectionStats in\n        // jitsi-meet\n        // TODO: We should keep track of the remote resolution in _remoteStats,\n        // and notify about changes via separate events.\n        conference.statistics.addConnectionStatsListener(\n            this._updateLocalStats.bind(this));\n\n        // Save the last time we were unmuted.\n        conference.on(\n            ConferenceEvents.TRACK_MUTE_CHANGED,\n            track => {\n                if (track.isVideoTrack()) {\n                    if (track.isMuted()) {\n                        this._timeVideoUnmuted = -1;\n                    } else {\n                        this._maybeUpdateUnmuteTime();\n                    }\n                }\n            });\n        conference.on(\n            ConferenceEvents.TRACK_ADDED,\n            track => {\n                if (track.isVideoTrack() && !track.isMuted()) {\n                    this._maybeUpdateUnmuteTime();\n                }\n            });\n\n        conference.on(\n            ConferenceEvents.SERVER_REGION_CHANGED,\n            serverRegion => {\n                this._localStats.serverRegion = serverRegion;\n            });\n\n        conference.on(\n            ConferenceEvents.PROPERTIES_CHANGED,\n            properties => {\n                this._localStats.bridgeCount\n                    = Number((properties || {})['bridge-count']);\n            }\n        );\n    }\n\n    /**\n     * Sets _timeVideoUnmuted if it was previously unset. If it was already set,\n     * doesn't change it.\n     */\n    _maybeUpdateUnmuteTime() {\n        if (this._timeVideoUnmuted < 0) {\n            this._timeVideoUnmuted = window.performance.now();\n        }\n    }\n\n    /**\n     * Calculates a new \"connection quality\" value.\n     * @param videoType {VideoType} the type of the video source (camera or\n     * a screen capture).\n     * @param isMuted {boolean} whether the local video is muted.\n     * @param resolutionName {Resolution} the input resolution used by the\n     * camera.\n     * @returns {*} the newly calculated connection quality.\n     */\n    _calculateConnectionQuality(videoType, isMuted, resolutionName) {\n\n        // resolutionName is an index into Resolutions (where \"720\" is\n        // \"1280x720\" and \"960\" is \"960x720\" ...).\n        const resolution = Resolutions[resolutionName];\n\n        let quality = 100;\n        let packetLoss;\n\n        // TODO: take into account packet loss for received streams\n\n        if (this._localStats.packetLoss) {\n            packetLoss = this._localStats.packetLoss.upload;\n\n            // Ugly Hack Alert (UHA):\n            // The packet loss for the upload direction is calculated based on\n            // incoming RTCP Receiver Reports. Since we don't have RTCP\n            // termination for audio, these reports come from the actual\n            // receivers in the conference and therefore the reported packet\n            // loss includes loss from the bridge to the receiver.\n            // When we are sending video this effect is small, because the\n            // number of video packets is much larger than the number of audio\n            // packets (and our calculation is based on the total number of\n            // received and lost packets).\n            // When video is muted, however, the effect might be significant,\n            // but we don't know what it is. We do know that it is positive, so\n            // as a temporary solution, until RTCP termination is implemented\n            // for the audio streams, we relax the packet loss checks here.\n            if (isMuted) {\n                packetLoss *= 0.5;\n            }\n        }\n\n        if (isMuted || !resolution || videoType === VideoType.DESKTOP\n            || this._timeIceConnected < 0\n            || this._timeVideoUnmuted < 0) {\n\n            // Calculate a value based on packet loss only.\n            if (packetLoss === undefined) {\n                logger.error('Cannot calculate connection quality, unknown '\n                    + 'packet loss.');\n                quality = 100;\n            } else if (packetLoss <= 2) {\n                quality = 100; // Full 5 bars.\n            } else if (packetLoss <= 4) {\n                quality = 70; // 4 bars\n            } else if (packetLoss <= 6) {\n                quality = 50; // 3 bars\n            } else if (packetLoss <= 8) {\n                quality = 30; // 2 bars\n            } else if (packetLoss <= 12) {\n                quality = 10; // 1 bars\n            } else {\n                quality = 0; // Still 1 bar, but slower climb-up.\n            }\n        } else {\n            // Calculate a value based on the sending bitrate.\n\n            // Figure out if simulcast is in use\n            const activeTPC = this._conference.getActivePeerConnection();\n            const isSimulcastOn\n                = Boolean(activeTPC && activeTPC.isSimulcastOn());\n\n            const newVideoBitrateCap\n                = activeTPC && activeTPC.bandwidthLimiter\n                && activeTPC.bandwidthLimiter.getBandwidthLimit('video');\n\n            // If we had a cap set but there isn't one now, then it has\n            // just been 'lifted', so we should treat this like a new\n            // ramp up.\n            if (!newVideoBitrateCap && videoBitrateCap) {\n                this._timeLastBwCapRemoved = window.performance.now();\n\n                // Set the start bitrate to whatever we were just capped to\n                startBitrate = videoBitrateCap;\n            }\n            videoBitrateCap = newVideoBitrateCap;\n\n            // time since sending of video was enabled.\n            const millisSinceStart = window.performance.now()\n                - Math.max(this._timeVideoUnmuted,\n                    this._timeIceConnected,\n                    this._timeLastBwCapRemoved);\n\n            // expected sending bitrate in perfect conditions\n            let target\n                = getTarget(isSimulcastOn, resolution, millisSinceStart);\n\n            target = Math.min(0.9 * target, MAX_TARGET_BITRATE);\n\n            if (videoBitrateCap) {\n                target = Math.min(target, videoBitrateCap);\n            }\n\n            quality = 100 * this._localStats.bitrate.upload / target;\n\n            // Whatever the bitrate, drop early if there is significant loss\n            if (packetLoss && packetLoss >= 10) {\n                quality = Math.min(quality, 30);\n            }\n        }\n\n        // Make sure that the quality doesn't climb quickly\n        if (this._lastConnectionQualityUpdate > 0) {\n            const maxIncreasePerSecond = 2;\n            const prevConnectionQuality = this._localStats.connectionQuality;\n            const diffSeconds\n                = (window.performance.now() - this._lastConnectionQualityUpdate)\n                    / 1000;\n\n            quality\n                = Math.min(\n                    quality,\n                    prevConnectionQuality\n                        + (diffSeconds * maxIncreasePerSecond));\n        }\n\n        return Math.min(100, quality);\n    }\n\n    /**\n     * Updates the localConnectionQuality value\n     * @param values {number} the new value. Should be in [0, 100].\n     */\n    _updateLocalConnectionQuality(value) {\n        this._localStats.connectionQuality = value;\n        this._lastConnectionQualityUpdate = window.performance.now();\n    }\n\n    /**\n     * Broadcasts the local statistics to all other participants in the\n     * conference.\n     */\n    _broadcastLocalStats() {\n        // Send only the data that remote participants care about.\n        const data = {\n            bitrate: this._localStats.bitrate,\n            packetLoss: this._localStats.packetLoss,\n            connectionQuality: this._localStats.connectionQuality,\n            jvbRTT: this._localStats.jvbRTT,\n            serverRegion: this._localStats.serverRegion,\n            avgAudioLevels: this._localStats.localAvgAudioLevels\n        };\n\n        try {\n            this._conference.broadcastEndpointMessage({\n                type: STATS_MESSAGE_TYPE,\n                values: data });\n        } catch (e) {\n            // We often hit this in the beginning of a call, before the data\n            // channel is ready. It is not a big problem, because we will\n            // send the statistics again after a few seconds, and the error is\n            // already logged elsewhere. So just ignore it.\n\n            // let errorMsg = \"Failed to broadcast local stats\";\n            // logger.error(errorMsg, e);\n            // GlobalOnErrorHandler.callErrorHandler(\n            //    new Error(errorMsg + \": \" + e));\n        }\n    }\n\n    /**\n     * Updates the local statistics\n     * @param {TraceablePeerConnection} tpc the peerconnection which emitted\n     * the stats\n     * @param data new statistics\n     */\n    _updateLocalStats(tpc, data) {\n        // Update jvbRTT\n        if (!tpc.isP2P) {\n            const jvbRTT\n                = data.transport\n                    && data.transport.length && data.transport[0].rtt;\n\n            this._localStats.jvbRTT = jvbRTT ? jvbRTT : undefined;\n        }\n\n        // Do not continue with processing of other stats if they do not\n        // originate from the active peerconnection\n        if (tpc !== this._conference.getActivePeerConnection()) {\n            return;\n        }\n\n        let key;\n        const updateLocalConnectionQuality\n            = !this._conference.isConnectionInterrupted();\n        const localVideoTrack\n            = this._conference.getLocalVideoTrack();\n        const videoType\n            = localVideoTrack ? localVideoTrack.videoType : undefined;\n        const isMuted = localVideoTrack ? localVideoTrack.isMuted() : true;\n        const resolution = localVideoTrack ? localVideoTrack.resolution : null;\n\n        if (!isMuted) {\n            this._maybeUpdateUnmuteTime();\n        }\n\n        // Copy the fields already in 'data'.\n        for (key in data) {\n            if (data.hasOwnProperty(key)) {\n                this._localStats[key] = data[key];\n            }\n        }\n\n        // And re-calculate the connectionQuality field.\n        if (updateLocalConnectionQuality) {\n            this._updateLocalConnectionQuality(\n                this._calculateConnectionQuality(\n                    videoType,\n                    isMuted,\n                    resolution));\n        }\n\n        this.eventEmitter.emit(\n            ConnectionQualityEvents.LOCAL_STATS_UPDATED,\n            this._localStats);\n        this._broadcastLocalStats();\n    }\n\n    /**\n     * Updates remote statistics\n     * @param id the id of the remote participant\n     * @param data the statistics received\n     */\n    _updateRemoteStats(id, data) {\n        // Use only the fields we need\n        this._remoteStats[id] = {\n            bitrate: data.bitrate,\n            packetLoss: data.packetLoss,\n            connectionQuality: data.connectionQuality,\n            jvbRTT: data.jvbRTT,\n            serverRegion: data.serverRegion,\n            avgAudioLevels: data.avgAudioLevels\n        };\n\n        this.eventEmitter.emit(\n            ConnectionQualityEvents.REMOTE_STATS_UPDATED,\n            id,\n            this._remoteStats[id]);\n    }\n\n    /**\n     * Returns the local statistics.\n     * Exported only for use in jitsi-meet-torture.\n     */\n    getStats() {\n        return this._localStats;\n    }\n}\n","/* global __filename */\nimport { getLogger } from 'jitsi-meet-logger';\n\nconst logger = getLogger(__filename);\n\n/**\n * A delayed ICE failed notification which is triggered only if the ICE\n * connection does not recover soon after or before the XMPP connection is\n * restored (if it was ever broken). If ICE fails while the XMPP connection is\n * not broken then the notifications will be sent after 2 seconds delay. This\n * extra delay is not intentional just a side effect of the code.\n * NOTE that this delayed task can only be used if PING is supported by the XMPP\n * server.\n */\nexport default class IceFailedNotification {\n    /**\n     * Creates new {@code DelayedIceFailed} task.\n     * @param {JitsiConference} conference\n     */\n    constructor(conference) {\n        this._conference = conference;\n    }\n\n    /**\n     * Starts the task.\n     * @param {JingleSessionPC} session - the JVB Jingle session.\n     */\n    start(session) {\n        // The 65 seconds are greater than the default Prosody's BOSH\n        // timeout of 60. This gives some time for the XMPP connection\n        // to recover.\n        this._conference.xmpp.ping(65000).then(\n            () => {\n                if (this._canceled) {\n                    return;\n                }\n\n                if (this._conference.isJvbConnectionInterrupted) {\n                    this._iceFailedTimeout = window.setTimeout(() => {\n                        logger.info(\n                            'Sending ICE failed'\n                            + ' - the connection has not recovered');\n                        this._iceFailedTimeout = undefined;\n                        session.sendIceFailedNotification();\n                    }, 2000);\n                } else {\n                    logger.info(\n                        'ICE connection restored - not sending ICE failed');\n                }\n            },\n            error => {\n                logger.error(\n                    'PING error/timeout - not sending ICE failed', error);\n            });\n    }\n\n    /**\n     * Cancels the task.\n     */\n    cancel() {\n        this._canceled = true;\n        if (this._iceFailedTimeout) {\n            window.clearTimeout(this._iceFailedTimeout);\n        }\n    }\n}\n","/* global __filename */\nimport { getLogger } from 'jitsi-meet-logger';\nimport { createE2eRttEvent } from '../../service/statistics/AnalyticsEvents';\nimport * as E2ePingEvents\n    from '../../service/e2eping/E2ePingEvents';\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport Statistics from '../statistics/statistics';\n\nconst logger = getLogger(__filename);\n\n/**\n * The 'type' of a message which designates an e2e ping request.\n * @type {string}\n */\nconst E2E_PING_REQUEST = 'e2e-ping-request';\n\n/**\n * The 'type' of a message which designates an e2e ping response.\n * @type {string}\n */\nconst E2E_PING_RESPONSE = 'e2e-ping-response';\n\n/**\n * Saves e2e ping related state for a single JitsiParticipant.\n */\nclass ParticipantWrapper {\n    /**\n     * Creates a ParticipantWrapper\n     * @param {JitsiParticipant} participant - The remote participant that this\n     * object wraps.\n     * @param {E2ePing} e2eping\n     */\n    constructor(participant, e2eping) {\n        // The JitsiParticipant\n        this.participant = participant;\n\n        // The E2ePing\n        this.e2eping = e2eping;\n\n        // Caches the ID\n        this.id = participant.getId();\n\n        // Recently sent requests\n        this.requests = {};\n\n        // The ID of the last sent request. We just increment it for each new\n        // request. Start at 1 so we can consider only thruthy values valid.\n        this.lastRequestId = 1;\n\n        this.clearIntervals = this.clearIntervals.bind(this);\n        this.sendRequest = this.sendRequest.bind(this);\n        this.handleResponse = this.handleResponse.bind(this);\n        this.maybeSendAnalytics = this.maybeSendAnalytics.bind(this);\n        this.sendAnalytics = this.sendAnalytics.bind(this);\n\n        // If the data channel was already open (this is likely a participant\n        // joining an existing conference) send a request immediately.\n        if (e2eping.isDataChannelOpen) {\n            this.sendRequest();\n        }\n\n        this.pingInterval = window.setInterval(\n            this.sendRequest, e2eping.pingIntervalMs);\n        this.analyticsInterval = window.setTimeout(\n            this.maybeSendAnalytics, this.e2eping.analyticsIntervalMs);\n    }\n\n    /**\n     * Clears the interval which sends pings.\n     * @type {*}\n     */\n    clearIntervals() {\n        if (this.pingInterval) {\n            window.clearInterval(this.pingInterval);\n        }\n        if (this.analyticsInterval) {\n            window.clearInterval(this.analyticsInterval);\n        }\n    }\n\n    /**\n     * Sends the next ping request.\n     * @type {*}\n     */\n    sendRequest() {\n        const requestId = this.lastRequestId++;\n        const requestMessage = {\n            type: E2E_PING_REQUEST,\n            id: requestId\n        };\n\n        this.e2eping.sendMessage(requestMessage, this.id);\n        this.requests[requestId] = {\n            id: requestId,\n            timeSent: window.performance.now()\n        };\n    }\n\n    /**\n     * Handles a response from this participant.\n     * @type {*}\n     */\n    handleResponse(response) {\n        const request = this.requests[response.id];\n\n        if (request) {\n            request.rtt = window.performance.now() - request.timeSent;\n            this.e2eping.eventEmitter.emit(\n                E2ePingEvents.E2E_RTT_CHANGED,\n                this.participant,\n                request.rtt);\n        }\n\n        this.maybeSendAnalytics();\n    }\n\n    /**\n     * Goes over the requests, clearing ones which we don't need anymore, and\n     * if it finds at least one request with a valid RTT in the last\n     * 'analyticsIntervalMs' then sends an analytics event.\n     * @type {*}\n     */\n    maybeSendAnalytics() {\n        const now = window.performance.now();\n\n        // The RTT we'll report is the minimum RTT measured in the last\n        // analyticsInterval\n        let rtt = Infinity;\n        let request, requestId;\n\n        // It's time to send analytics. Clean up all requests and find the\n        for (requestId in this.requests) {\n            if (this.requests.hasOwnProperty(requestId)) {\n                request = this.requests[requestId];\n\n                if (request.timeSent < now - this.e2eping.analyticsIntervalMs) {\n                    // An old request. We don't care about it anymore.\n                    delete this.requests[requestId];\n                } else if (request.rtt) {\n                    rtt = Math.min(rtt, request.rtt);\n                }\n            }\n        }\n\n        if (rtt < Infinity) {\n            this.sendAnalytics(rtt);\n        }\n    }\n\n    /**\n     * Sends an analytics event for this participant with the given RTT.\n     * @type {*}\n     */\n    sendAnalytics(rtt) {\n        Statistics.sendAnalytics(createE2eRttEvent(\n            this.id,\n            this.participant.getProperty('region'),\n            rtt));\n    }\n}\n\n/**\n * Implements end-to-end ping (from one conference participant to another) via\n * the jitsi-videobridge channel (either WebRTC data channel or web socket).\n *\n * TODO: use a broadcast message instead of individual pings to each remote\n * participant.\n *\n * This class:\n * 1. Sends periodic ping requests to all other participants in the\n * conference.\n * 2. Responds to ping requests from other participants.\n * 3. Fires events with the end-to-end RTT to each participant whenever a\n * response is received.\n * 4. Fires analytics events with the end-to-end RTT periodically.\n */\nexport default class E2ePing {\n    /**\n     * @param {JitsiConference} conference - The conference.\n     * @param {Function} sendMessage - The function to use to send a message.\n     * @param {Object} options\n     */\n    constructor(conference, options, sendMessage) {\n        this.conference = conference;\n        this.eventEmitter = conference.eventEmitter;\n        this.sendMessage = sendMessage;\n\n        // The interval at which pings will be sent (<= 0 disables sending).\n        this.pingIntervalMs = 10000;\n\n        // The interval at which analytics events will be sent.\n        this.analyticsIntervalMs = 60000;\n\n        // Maps a participant ID to its ParticipantWrapper\n        this.participants = {};\n\n        // Whether the WebRTC channel has been opened or not.\n        this.isDataChannelOpen = false;\n\n        if (options && options.e2eping) {\n            if (typeof options.e2eping.pingInterval === 'number') {\n                this.pingIntervalMs = options.e2eping.pingInterval;\n            }\n            if (typeof options.e2eping.analyticsInterval === 'number') {\n                this.analyticsIntervalMs = options.e2eping.analyticsInterval;\n            }\n\n            // We want to report at most once a ping interval.\n            if (this.analyticsIntervalMs > 0 && this.analyticsIntervalMs\n                < this.pingIntervalMs) {\n                this.analyticsIntervalMs = this.pingIntervalMs;\n            }\n        }\n        logger.info(\n            `Initializing e2e ping; pingInterval=${\n                this.pingIntervalMs}, analyticsInterval=${\n                this.analyticsIntervalMs}.`);\n\n        this.participantJoined = this.participantJoined.bind(this);\n        conference.on(\n            JitsiConferenceEvents.USER_JOINED,\n            this.participantJoined);\n\n        this.participantLeft = this.participantLeft.bind(this);\n        conference.on(\n            JitsiConferenceEvents.USER_LEFT,\n            this.participantLeft);\n\n        this.messageReceived = this.messageReceived.bind(this);\n        conference.on(\n            JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED,\n            this.messageReceived);\n\n        this.dataChannelOpened = this.dataChannelOpened.bind(this);\n        conference.on(\n            JitsiConferenceEvents.DATA_CHANNEL_OPENED,\n            this.dataChannelOpened);\n    }\n\n    /**\n     * Notifies this instance that the communications channel has been opened\n     * and it can now send messages via sendMessage.\n     */\n    dataChannelOpened() {\n        this.isDataChannelOpen = true;\n\n        // We don't want to wait the whole interval before sending the first\n        // request, but we can't send it immediately after the participant joins\n        // either, because our data channel might not have initialized.\n        // So once the data channel initializes, send requests to everyone.\n        // Wait an additional 200ms to give a chance to the remote side (if it\n        // also just connected as is the case for the first 2 participants in a\n        // conference) to open its data channel.\n        for (const id in this.participants) {\n            if (this.participants.hasOwnProperty(id)) {\n                const participantWrapper = this.participants[id];\n\n                window.setTimeout(participantWrapper.sendRequest, 200);\n            }\n        }\n    }\n\n    /**\n     * Handles a message that was received.\n     *\n     * @param participant - The message sender.\n     * @param payload - The payload of the message.\n     */\n    messageReceived(participant, payload) {\n        // Listen to E2E PING requests and responses from other participants\n        // in the conference.\n        if (payload.type === E2E_PING_REQUEST) {\n            this.handleRequest(participant.getId(), payload);\n        } else if (payload.type === E2E_PING_RESPONSE) {\n            this.handleResponse(participant.getId(), payload);\n        }\n    }\n\n    /**\n     * Handles a participant joining the conference. Starts to send ping\n     * requests to the participant.\n     *\n     * @param {String} id - The ID of the participant.\n     * @param {JitsiParticipant} participant - The participant that joined.\n     */\n    participantJoined(id, participant) {\n        if (this.pingIntervalMs <= 0) {\n            return;\n        }\n\n        if (this.participants[id]) {\n            logger.info(\n                `Participant wrapper already exists for ${id}. Clearing.`);\n            this.participants[id].clearIntervals();\n            delete this.participants[id];\n        }\n\n        this.participants[id] = new ParticipantWrapper(participant, this);\n    }\n\n    /**\n     * Handles a participant leaving the conference. Stops sending requests.\n     *\n     * @param {String} id - The ID of the participant.\n     */\n    participantLeft(id) {\n        if (this.pingIntervalMs <= 0) {\n            return;\n        }\n\n        if (this.participants[id]) {\n            this.participants[id].clearIntervals();\n            delete this.participants[id];\n        }\n    }\n\n    /**\n     * Handles a ping request coming from another participant.\n     *\n     * @param {string} participantId - The ID of the participant who sent the\n     * request.\n     * @param {Object} request - The request.\n     */\n    handleRequest(participantId, request) {\n        // If it's a valid request, just send a response.\n        if (request && request.id) {\n            const response = {\n                type: E2E_PING_RESPONSE,\n                id: request.id\n            };\n\n            this.sendMessage(response, participantId);\n        } else {\n            logger.info(\n                `Received an invalid e2e ping request from ${participantId}.`);\n        }\n    }\n\n    /**\n     * Handles a ping response coming from another participant\n     * @param {string} participantId - The ID of the participant who sent the\n     * response.\n     * @param {Object} response - The response.\n     */\n    handleResponse(participantId, response) {\n        const participantWrapper = this.participants[participantId];\n\n        if (participantWrapper) {\n            participantWrapper.handleResponse(response);\n        }\n    }\n\n    /**\n     * Stops this E2ePing (i.e. stop sending requests).\n     */\n    stop() {\n        logger.info('Stopping e2eping');\n\n        this.conference.off(\n            JitsiConferenceEvents.USER_JOINED,\n            this.participantJoined);\n        this.conference.off(\n            JitsiConferenceEvents.USER_LEFT,\n            this.participantLeft);\n        this.conference.off(\n            JitsiConferenceEvents.ENDPOINT_MESSAGE_RECEIVED,\n            this.messageReceived);\n        this.conference.off(\n            JitsiConferenceEvents.DATA_CHANNEL_OPENED,\n            this.dataChannelOpened);\n\n        for (const id in this.participants) {\n            if (this.participants.hasOwnProperty(id)) {\n                this.participants[id].clearIntervals();\n            }\n        }\n\n        this.participants = {};\n    }\n}\n\n","/* global __filename */\n\nimport { getLogger } from 'jitsi-meet-logger';\nimport * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\n\nconst logger = getLogger(__filename);\n\n/**\n * Emits {@link JitsiConferenceEvents.JVB121_STATUS} events based on the current\n * P2P status and the conference participants count. See the event description\n * for more info.\n */\nexport default class Jvb121EventGenerator {\n    /**\n     * Creates new <tt>Jvb121EventGenerator</tt> for the given conference.\n     * @param {JitsiConference} conference\n     */\n    constructor(conference) {\n        this._conference = conference;\n\n        /**\n         * Indicates whether it's a one to one JVB conference (<tt>true</tt>)\n         * or a multiparty (<tt>false</tt>). Will be also <tt>false</tt> if\n         * the conference is currently in the P2P mode.\n         * @type {boolean}\n         * @private\n         */\n        this._jvb121 = true;\n\n        this._conference.addEventListener(\n            JitsiConferenceEvents.USER_JOINED, () => this.evaluateStatus());\n        this._conference.addEventListener(\n            JitsiConferenceEvents.USER_LEFT, () => this.evaluateStatus());\n        this._conference.addEventListener(\n            JitsiConferenceEvents.P2P_STATUS, () => this.evaluateStatus());\n    }\n\n    /**\n     * Checks whether the JVB121 value should be updated and a new event\n     * emitted.\n     */\n    evaluateStatus() {\n        const oldStatus = this._jvb121;\n        const newStatus\n            = !this._conference.isP2PActive()\n                && this._conference.getParticipantCount() <= 2;\n\n        if (oldStatus !== newStatus) {\n            this._jvb121 = newStatus;\n            logger.debug(`JVB121 status ${oldStatus} => ${newStatus}`);\n            this._conference.eventEmitter.emit(\n                JitsiConferenceEvents.JVB121_STATUS, oldStatus, newStatus);\n        }\n    }\n}\n","import { getLogger } from 'jitsi-meet-logger';\n\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\n\nimport JibriSession from './JibriSession';\nimport recordingXMLUtils from './recordingXMLUtils';\n\nconst logger = getLogger(__filename);\n\n/**\n * A class responsible for starting and stopping recording sessions and emitting\n * state updates for them.\n */\nclass RecordingManager {\n    /**\n     * Initialize {@code RecordingManager} with other objects that are necessary\n     * for starting a recording.\n     *\n     * @param {ChatRoom} chatRoom - The chat room to handle.\n     * @returns {void}\n     */\n    constructor(chatRoom) {\n        /**\n         * All known recording sessions from the current conference.\n         */\n        this._sessions = {};\n\n        this._chatRoom = chatRoom;\n\n        this.onPresence = this.onPresence.bind(this);\n\n        this._chatRoom.eventEmitter.addListener(\n            XMPPEvents.PRESENCE_RECEIVED, this.onPresence);\n    }\n\n    /**\n     * Finds an existing recording session by session ID.\n     *\n     * @param {string} sessionID - The session ID associated with the recording.\n     * @returns {JibriSession|undefined}\n     */\n    getSession(sessionID) {\n        return this._sessions[sessionID];\n    }\n\n    /**\n     * Callback to invoke to parse through a presence update to find recording\n     * related updates (from Jibri participant doing the recording and the\n     * focus which controls recording).\n     *\n     * @param {Object} event - The presence data from the pubsub event.\n     * @param {Node} event.presence - An XMPP presence update.\n     * @param {boolean} event.fromHiddenDomain - Whether or not the update comes\n     * from a participant that is trusted but not visible, as would be the case\n     * with the Jibri recorder participant.\n     * @returns {void}\n     */\n    onPresence({ fromHiddenDomain, presence }) {\n        if (recordingXMLUtils.isFromFocus(presence)) {\n            this._handleFocusPresence(presence);\n        } else if (fromHiddenDomain) {\n            this._handleJibriPresence(presence);\n        }\n    }\n\n    /**\n     * Start a recording session.\n     *\n     * @param {Object} options - Configuration for the recording.\n     * @param {string} [options.appData] - Data specific to the app/service that\n     * the result file will be uploaded.\n     * @param {string} [optional] options.broadcastId - The channel on which a\n     * live stream will occur.\n     * @param {string} options.mode - The mode in which recording should be\n     * started. Recognized values are \"file\" and \"stream\".\n     * @param {string} [optional] options.streamId - The stream key to be used\n     * for live stream broadcasting. Required for live streaming.\n     * @returns {Promise} A promise for starting a recording, which will pass\n     * back the session on success. The promise resolves after receiving an\n     * acknowledgment of the start request success or fail.\n     */\n    startRecording(options) {\n        const session = new JibriSession({\n            ...options,\n            connection: this._chatRoom.connection\n        });\n\n        return session.start({\n            appData: options.appData,\n            broadcastId: options.broadcastId,\n            focusMucJid: this._chatRoom.focusMucJid,\n            streamId: options.streamId\n        })\n            .then(() => {\n                // Only store the session and emit if the session has not been\n                // added already. This is a workaround for the session getting\n                // created due to a presence update to announce a \"pending\"\n                // recording being received before JibriSession#start finishes.\n                if (!this.getSession(session.getID())) {\n                    this._addSession(session);\n                    this._emitSessionUpdate(session);\n                }\n\n                return session;\n            })\n            .catch(error => {\n                this._emitSessionUpdate(session);\n\n                return Promise.reject(error);\n            });\n    }\n\n    /**\n     * Stop a recording session.\n     *\n     * @param {string} sessionID - The ID associated with the recording session\n     * to be stopped.\n     * @returns {Promise} The promise resolves after receiving an\n     * acknowledgment of the stop request success or fail.\n     */\n    stopRecording(sessionID) {\n        const session = this.getSession(sessionID);\n\n        if (session) {\n            return session.stop({ focusMucJid: this._chatRoom.focusMucJid });\n        }\n\n        return Promise.reject(new Error('Could not find session'));\n    }\n\n    /**\n     * Stores a reference to the passed in JibriSession.\n     *\n     * @param {string} session - The JibriSession instance to store.\n     * @returns {void}\n     */\n    _addSession(session) {\n        this._sessions[session.getID()] = session;\n    }\n\n    /**\n     * Create a new instance of a recording session and stores a reference to\n     * it.\n     *\n     * @param {string} sessionID - The session ID of the recording in progress.\n     * @param {string} status - The current status of the recording session.\n     * @param {string} mode - The recording mode of the session.\n     * @returns {JibriSession}\n     */\n    _createSession(sessionID, status, mode) {\n        const session = new JibriSession({\n            connection: this._chatRoom.connection,\n            focusMucJid: this._chatRoom.focusMucJid,\n            mode,\n            sessionID,\n            status\n        });\n\n        this._addSession(session);\n\n        return session;\n    }\n\n    /**\n     * Notifies listeners of an update to a recording session.\n     *\n     * @param {JibriSession} session - The session that has been updated.\n     */\n    _emitSessionUpdate(session) {\n        this._chatRoom.eventEmitter.emit(\n            XMPPEvents.RECORDER_STATE_CHANGED, session);\n    }\n\n    /**\n     * Parses presence to update an existing JibriSession or to create a new\n     * JibriSession.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {void}\n     */\n    _handleFocusPresence(presence) {\n        const jibriStatus = recordingXMLUtils.getFocusRecordingUpdate(presence);\n\n        if (!jibriStatus) {\n            return;\n        }\n\n        const { sessionID, status, error, recordingMode } = jibriStatus;\n\n        // We'll look for an existing session or create one (in case we're a\n        // participant joining a call with an existing recording going on).\n        let session = this.getSession(sessionID);\n\n        // Handle the case where a status update is received in presence but\n        // the local participant has joined while the JibriSession has already\n        // ended.\n        if (!session && status === 'off') {\n            logger.warn(\n                'Ignoring recording presence update',\n                'Received a new session with status off.');\n\n            return;\n        }\n\n        // Jicofo sends updates via presence, and any extension in presence\n        // is sent until it is explicitly removed.  It's difficult for\n        // Jicofo to know when a presence has been sent once, so it won't\n        // remove jibri status extension.  This means we may receive the same\n        // status update more than once, so check for that here\n        if (session\n            && session.getStatus() === status\n            && session.getError() === error) {\n            logger.warn('Ignoring duplicate presence update: ',\n                JSON.stringify(jibriStatus));\n\n            return;\n        }\n\n        if (!session) {\n            session = this._createSession(sessionID, status, recordingMode);\n        }\n\n        session.setStatus(status);\n\n        if (error) {\n            session.setError(error);\n        }\n\n        this._emitSessionUpdate(session);\n    }\n\n    /**\n     * Handles updates from the Jibri which can broadcast a YouTube URL that\n     * needs to be updated in a JibriSession.\n     *\n     * @param {Node} presence - An XMPP presence update.\n     * @returns {void}\n     */\n    _handleJibriPresence(presence) {\n        const { liveStreamViewURL, mode, sessionID }\n            = recordingXMLUtils.getHiddenDomainUpdate(presence);\n\n        if (!sessionID) {\n            logger.warn(\n                'Ignoring potential jibri presence due to no session id.');\n\n            return;\n        }\n\n        let session = this.getSession(sessionID);\n\n        if (!session) {\n            session = this._createSession(sessionID, '', mode);\n        }\n\n        session.setLiveStreamViewURL(liveStreamViewURL);\n\n        this._emitSessionUpdate(session);\n    }\n}\n\nexport default RecordingManager;\n","import browser from '../browser';\nimport { createRttByRegionEvent }\n    from '../../service/statistics/AnalyticsEvents';\nimport { getLogger } from 'jitsi-meet-logger';\nimport RTCUtils from '../RTC/RTCUtils';\nimport Statistics from '../statistics/statistics';\n\nconst logger = getLogger(__filename);\n\n/**\n * The options to pass to createOffer (we need to offer to receive *something*\n * for the PC to gather candidates.\n */\nconst offerOptions = {\n    offerToReceiveAudio: 1,\n    offerToReceiveVideo: 0\n};\n\n\n/**\n * The interval at which the webrtc engine sends STUN keep alive requests.\n * @type {number}\n */\nconst stunKeepAliveIntervalMs = 10000;\n\n/**\n * Wraps a PeerConnection with one specific STUN server and measures the RTT\n * to the STUN server.\n */\nclass PCMonitor {\n    /* eslint-disable max-params */\n    /**\n     *\n     * @param {String} region - The region of the STUN server.\n     * @param {String} address - The address of the STUN server.\n     * @param {number} getStatsIntervalMs how often to call getStats.\n     * @param {number} delay the delay after which the PeerConnection will be\n     * started (that is, createOffer and setLocalDescription will be invoked).\n     *\n     */\n    constructor(region, address, getStatsIntervalMs, delay) {\n        /* eslint-disable max-params */\n        this.region = region;\n        this.getStatsIntervalMs = getStatsIntervalMs;\n        this.getStatsInterval = null;\n\n        // What we consider the current RTT. It is Math.min(this.rtts).\n        this.rtt = Infinity;\n\n        // The RTT measurements we've made from the latest getStats() calls.\n        this.rtts = [];\n\n        const iceServers = [ { 'url': `stun:${address}` } ];\n\n        this.pc = new RTCUtils.RTCPeerConnectionType(\n            {\n                'iceServers': iceServers\n            });\n\n        // Maps a key consisting of the IP address, port and priority of a\n        // candidate to some state related to it. If we have more than one\n        // network interface we will might multiple srflx candidates and this\n        // helps to distinguish between then.\n        this.candidates = {};\n\n        this.stopped = false;\n\n        this.start = this.start.bind(this);\n        this.stop = this.stop.bind(this);\n        this.startStatsInterval = this.startStatsInterval.bind(this);\n        this.handleCandidateRtt = this.handleCandidateRtt.bind(this);\n\n        window.setTimeout(this.start, delay);\n    }\n\n    /**\n     * Starts this PCMonitor. That is, invokes createOffer and\n     * setLocalDescription on the PeerConnection and starts an interval which\n     * calls getStats.\n     */\n    start() {\n        if (this.stopped) {\n            return;\n        }\n\n        this.pc.createOffer(offerOptions).then(offer => {\n            this.pc.setLocalDescription(\n                offer,\n                () => {\n                    logger.info(\n                        `setLocalDescription success for ${this.region}`);\n                    this.startStatsInterval();\n                },\n                error => {\n                    logger.warn(\n                        `setLocalDescription failed for ${this.region}: ${\n                            error}`);\n                }\n            );\n        });\n    }\n\n    /**\n     * Starts an interval which invokes getStats on the PeerConnection and\n     * measures the RTTs for the different candidates.\n     */\n    startStatsInterval() {\n        this.getStatsInterval = window.setInterval(\n            () => {\n                // Note that the data that we use to measure the RTT is only\n                // available in the legacy (callback based) getStats API.\n                this.pc.getStats(stats => {\n                    const results = stats.result();\n\n                    for (let i = 0; i < results.length; ++i) {\n                        const res = results[i];\n                        const rttTotal\n                            = Number(res.stat('stunKeepaliveRttTotal'));\n\n                        // We recognize the results that we care for (local\n                        // candidates of type srflx) by the existance of the\n                        // stunKeepaliveRttTotal stat.\n                        if (rttTotal > 0) {\n                            const candidateKey\n                                = `${res.stat('ipAddress')}_${\n                                    res.stat('portNumber')}_${\n                                    res.stat('priority')}`;\n\n                            this.handleCandidateRtt(\n                                candidateKey,\n                                rttTotal,\n                                Number(\n                                    res.stat('stunKeepaliveResponsesReceived')),\n                                Number(\n                                    res.stat('stunKeepaliveRequestsSent')));\n                        }\n                    }\n\n                    // After we've measured the RTT for all candidates we,\n                    // update the state of the PC with the shortest one.\n                    let rtt = Infinity;\n\n                    for (const key in this.candidates) {\n                        if (this.candidates.hasOwnProperty(key)\n                            && this.candidates[key].rtt > 0) {\n                            rtt = Math.min(rtt, this.candidates[key].rtt);\n                        }\n                    }\n\n                    // We keep the last 6 measured RTTs and choose the shortest\n                    // one to export to analytics. This is because we often see\n                    // failures get a real measurement which end up as Infinity.\n                    this.rtts.push(rtt);\n                    if (this.rtts.length > 6) {\n                        this.rtts = this.rtts.splice(1, 7);\n                    }\n                    this.rtt = Math.min(...this.rtts);\n                });\n            },\n            this.getStatsIntervalMs\n        );\n    }\n\n    /* eslint-disable max-params */\n    /**\n     * Updates the RTT for a candidate identified by \"key\" based on the values\n     * from getStats() and the previously saved state (i.e. old values).\n     *\n     * @param {String} key the ID for the candidate\n     * @param {number} rttTotal the value of the 'stunKeepaliveRttTotal' just\n     * measured.\n     * @param {number} responsesReceived the value of the\n     * 'stunKeepaliveResponsesReceived' stat just measured.\n     * @param {number} requestsSent the value of the 'stunKeepaliveRequestsSent'\n     * stat just measured.\n     */\n    handleCandidateRtt(key, rttTotal, responsesReceived, requestsSent) {\n        /* eslist-enable max-params */\n        if (!this.candidates[key]) {\n            this.candidates[key] = {\n                rttTotal: 0,\n                responsesReceived: 0,\n                requestsSent: 0,\n                rtt: NaN\n            };\n        }\n\n        const rttTotalDiff = rttTotal - this.candidates[key].rttTotal;\n        const responsesReceivedDiff\n            = responsesReceived - this.candidates[key].responsesReceived;\n\n        // We observe that when the difference between the number of requests\n        // and responses has grown (i.q. when the value below is positive), the\n        // the RTT measurements are incorrect (too low). For this reason we\n        // ignore these measurement (setting rtt=NaN), but update our state.\n        const requestsResponsesDiff\n            = (requestsSent - responsesReceived)\n            - (this.candidates[key].requestsSent\n                - this.candidates[key].responsesReceived);\n        let rtt = NaN;\n\n        if (responsesReceivedDiff > 0 && requestsResponsesDiff === 0) {\n            rtt = rttTotalDiff / responsesReceivedDiff;\n        }\n\n        this.candidates[key].rttTotal = rttTotal;\n        this.candidates[key].responsesReceived = responsesReceived;\n        this.candidates[key].requestsSent = requestsSent;\n        this.candidates[key].rtt = rtt;\n    }\n\n\n    /**\n     * Stops this PCMonitor, clearing its intervals and stopping the\n     * PeerConnection.\n     */\n    stop() {\n        if (this.getStatsInterval) {\n            window.clearInterval(this.getStatsInterval);\n        }\n\n        this.pc.close();\n\n        this.stopped = true;\n    }\n}\n\n/**\n * A class which monitors the round-trip time (RTT) to a set of STUN servers.\n * The measured RTTs are sent as analytics events. It uses a separate\n * PeerConnection (represented as a PCMonitor) for each STUN server.\n */\nexport default class RttMonitor {\n    /**\n     * Initializes a new RttMonitor.\n     * @param {Object} config the object holding the configuration.\n     */\n    constructor(config) {\n        if (!config || !config.enabled\n            || !browser.supportsLocalCandidateRttStatistics()) {\n            return;\n        }\n\n        // Maps a region to the PCMonitor instance for that region.\n        this.pcMonitors = {};\n\n        this.startPCMonitors = this.startPCMonitors.bind(this);\n        this.sendAnalytics = this.sendAnalytics.bind(this);\n        this.stop = this.stop.bind(this);\n\n        this.analyticsInterval = null;\n        this.stopped = false;\n\n        const initialDelay = config.initialDelay || 60000;\n\n\n        logger.info(\n            `Starting RTT monitor with an initial delay of ${initialDelay}`);\n\n\n        window.setTimeout(\n            () => this.startPCMonitors(config),\n            initialDelay);\n    }\n\n    /**\n     * Starts the PCMonitors according to the configuration.\n     */\n    startPCMonitors(config) {\n        if (!config.stunServers) {\n            logger.warn('No stun servers configured.');\n\n            return;\n        }\n\n        if (this.stopped) {\n            return;\n        }\n\n        const getStatsIntervalMs\n            = config.getStatsInterval || stunKeepAliveIntervalMs;\n        const analyticsIntervalMs\n            = config.analyticsInterval || getStatsIntervalMs;\n        const count = Object.keys(config.stunServers).length;\n        const offset = getStatsIntervalMs / count;\n\n        // We delay the initialization of each PC so that they are uniformly\n        // distributed across the getStatsIntervalMs.\n        let i = 0;\n\n        for (const region in config.stunServers) {\n            if (config.stunServers.hasOwnProperty(region)) {\n                const address = config.stunServers[region];\n\n                this.pcMonitors[region]\n                    = new PCMonitor(\n                        region,\n                        address,\n                        getStatsIntervalMs,\n                        offset * i);\n                i++;\n            }\n        }\n\n        window.setTimeout(\n            () => {\n                if (!this.stopped) {\n                    this.analyticsInterval\n                        = window.setInterval(\n                        this.sendAnalytics, analyticsIntervalMs);\n                }\n            },\n            1000);\n    }\n\n    /**\n     * Sends an analytics event with the measured RTT to each region/STUN\n     * server.\n     */\n    sendAnalytics() {\n        const rtts = {};\n\n        for (const region in this.pcMonitors) {\n            if (this.pcMonitors.hasOwnProperty(region)) {\n                const rtt = this.pcMonitors[region].rtt;\n\n                if (!isNaN(rtt) && rtt !== Infinity) {\n                    rtts[region.replace('-', '_')] = rtt;\n                }\n            }\n        }\n\n        if (rtts) {\n            Statistics.sendAnalytics(createRttByRegionEvent(rtts));\n        }\n    }\n\n    /**\n     * Stops this RttMonitor, clearing all intervals and closing all\n     * PeerConnections.\n     */\n    stop() {\n        logger.info('Stopping RttMonitor.');\n        this.stopped = true;\n        for (const region in this.pcMonitors) {\n            if (this.pcMonitors.hasOwnProperty(region)) {\n                this.pcMonitors[region].stop();\n            }\n        }\n        this.pcMonitors = {};\n\n        if (this.analyticsInterval) {\n            window.clearInterval(this.analyticsInterval);\n        }\n    }\n}\n","/* global __filename */\n\nimport { createRtpStatsEvent } from '../../service/statistics/AnalyticsEvents';\nimport { getLogger } from 'jitsi-meet-logger';\nimport * as ConnectionQualityEvents\n    from '../../service/connectivity/ConnectionQualityEvents';\nimport * as ConferenceEvents from '../../JitsiConferenceEvents';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport browser from '../browser';\nimport Statistics from './statistics';\nimport * as VideoType from '../../service/RTC/VideoType';\n\nconst logger = getLogger(__filename);\n\n/**\n * This will calculate an average for one, named stat and submit it to\n * the analytics module when requested. It automatically counts the samples.\n */\nclass AverageStatReport {\n    /**\n     * Creates new <tt>AverageStatReport</tt> for given name.\n     * @param {string} name that's the name of the event that will be reported\n     * to the analytics module.\n     */\n    constructor(name) {\n        this.name = name;\n        this.count = 0;\n        this.sum = 0;\n        this.samples = [];\n    }\n\n    /**\n     * Adds the next value that will be included in the average when\n     * {@link calculate} is called.\n     * @param {number} nextValue\n     */\n    addNext(nextValue) {\n        if (typeof nextValue !== 'number') {\n            logger.error(\n                `${this.name} - invalid value for idx: ${this.count}`,\n                nextValue);\n        } else if (!isNaN(nextValue)) {\n            this.sum += nextValue;\n            this.samples.push(nextValue);\n            this.count += 1;\n        }\n    }\n\n    /**\n     * Calculates an average for the samples collected using {@link addNext}.\n     * @return {number|NaN} an average of all collected samples or <tt>NaN</tt>\n     * if no samples were collected.\n     */\n    calculate() {\n        return this.sum / this.count;\n    }\n\n    /**\n     * Appends the report to the analytics \"data\" object. The object will be\n     * set under <tt>prefix</tt> + {@link this.name} key.\n     * @param {Object} report the analytics \"data\" object\n     */\n    appendReport(report) {\n        report[`${this.name}_avg`] = this.calculate();\n        report[`${this.name}_samples`] = JSON.stringify(this.samples);\n    }\n\n    /**\n     * Clears all memory of any samples collected, so that new average can be\n     * calculated using this instance.\n     */\n    reset() {\n        this.samples = [];\n        this.sum = 0;\n        this.count = 0;\n    }\n}\n\n/**\n * Class gathers the stats that are calculated and reported for a\n * {@link TraceablePeerConnection} even if it's not currently active. For\n * example we want to monitor RTT for the JVB connection while in P2P mode.\n */\nclass ConnectionAvgStats {\n    /**\n     * Creates new <tt>ConnectionAvgStats</tt>\n     * @param {AvgRTPStatsReporter} avgRtpStatsReporter\n     * @param {boolean} isP2P\n     * @param {number} n the number of samples, before arithmetic mean is to be\n     * calculated and values submitted to the analytics module.\n     */\n    constructor(avgRtpStatsReporter, isP2P, n) {\n        /**\n         * Is this instance for JVB or P2P connection ?\n         * @type {boolean}\n         */\n        this.isP2P = isP2P;\n\n        /**\n         * How many samples are to be included in arithmetic mean calculation.\n         * @type {number}\n         * @private\n         */\n        this._n = n;\n\n        /**\n         * The current sample index. Starts from 0 and goes up to {@link _n})\n         * when analytics report will be submitted.\n         * @type {number}\n         * @private\n         */\n        this._sampleIdx = 0;\n\n        /**\n         * Average round trip time reported by the ICE candidate pair.\n         * @type {AverageStatReport}\n         */\n        this._avgRTT = new AverageStatReport('rtt');\n\n        /**\n         * Map stores average RTT to the JVB reported by remote participants.\n         * Mapped per participant id {@link JitsiParticipant.getId}.\n         *\n         * This is used only when {@link ConnectionAvgStats.isP2P} equals to\n         * <tt>false</tt>.\n         *\n         * @type {Map<string,AverageStatReport>}\n         * @private\n         */\n        this._avgRemoteRTTMap = new Map();\n\n        /**\n         * The conference for which stats will be collected and reported.\n         * @type {JitsiConference}\n         * @private\n         */\n        this._avgRtpStatsReporter = avgRtpStatsReporter;\n\n        /**\n         * The latest average E2E RTT for the JVB connection only.\n         *\n         * This is used only when {@link ConnectionAvgStats.isP2P} equals to\n         * <tt>false</tt>.\n         *\n         * @type {number}\n         */\n        this._avgEnd2EndRTT = undefined;\n\n        this._onConnectionStats = (tpc, stats) => {\n            if (this.isP2P === tpc.isP2P) {\n                this._calculateAvgStats(stats);\n            }\n        };\n\n        const conference = avgRtpStatsReporter._conference;\n\n        conference.statistics.addConnectionStatsListener(\n            this._onConnectionStats);\n\n        if (!this.isP2P) {\n            this._onUserLeft = id => this._avgRemoteRTTMap.delete(id);\n            conference.on(ConferenceEvents.USER_LEFT, this._onUserLeft);\n\n            this._onRemoteStatsUpdated\n                = (id, data) => this._processRemoteStats(id, data);\n            conference.on(\n                ConnectionQualityEvents.REMOTE_STATS_UPDATED,\n                this._onRemoteStatsUpdated);\n        }\n    }\n\n    /**\n     * Processes next batch of stats.\n     * @param {go figure} data\n     * @private\n     */\n    _calculateAvgStats(data) {\n        if (!data) {\n            logger.error('No stats');\n\n            return;\n        }\n\n        if (browser.supportsRTTStatistics()) {\n            if (data.transport && data.transport.length) {\n                this._avgRTT.addNext(data.transport[0].rtt);\n            }\n        }\n\n        this._sampleIdx += 1;\n\n        if (this._sampleIdx >= this._n) {\n            if (browser.supportsRTTStatistics()) {\n                const conference = this._avgRtpStatsReporter._conference;\n\n                const batchReport = {\n                    p2p: this.isP2P,\n                    'conference_size': conference.getParticipantCount()\n                };\n\n                if (data.transport && data.transport.length) {\n                    Object.assign(batchReport, {\n                        'local_candidate_type':\n                            data.transport[0].localCandidateType,\n                        'remote_candidate_type':\n                            data.transport[0].remoteCandidateType,\n                        'transport_type': data.transport[0].type\n                    });\n                }\n\n                this._avgRTT.appendReport(batchReport);\n\n                if (this.isP2P) {\n                    // Report RTT diff only for P2P.\n                    const jvbEnd2EndRTT = this\n                        ._avgRtpStatsReporter.jvbStatsMonitor._avgEnd2EndRTT;\n\n                    if (!isNaN(jvbEnd2EndRTT)) {\n                        // eslint-disable-next-line dot-notation\n                        batchReport['rtt_diff']\n                            = this._avgRTT.calculate() - jvbEnd2EndRTT;\n                    }\n                } else {\n                    // Report end to end RTT only for JVB.\n                    const avgRemoteRTT = this._calculateAvgRemoteRTT();\n                    const avgLocalRTT = this._avgRTT.calculate();\n\n                    this._avgEnd2EndRTT = avgLocalRTT + avgRemoteRTT;\n\n                    if (!isNaN(avgLocalRTT) && !isNaN(avgRemoteRTT)) {\n                        // eslint-disable-next-line dot-notation\n                        batchReport['end2end_rtt_avg'] = this._avgEnd2EndRTT;\n                    }\n                }\n\n                Statistics.sendAnalytics(createRtpStatsEvent(batchReport));\n            }\n\n            this._resetAvgStats();\n        }\n    }\n\n    /**\n     * Calculates arithmetic mean of all RTTs towards the JVB reported by\n     * participants.\n     * @return {number|NaN} NaN if not available (not enough data)\n     * @private\n     */\n    _calculateAvgRemoteRTT() {\n        let count = 0, sum = 0;\n\n        // FIXME should we ignore RTT for participant\n        // who \"is having connectivity issues\" ?\n        for (const remoteAvg of this._avgRemoteRTTMap.values()) {\n            const avg = remoteAvg.calculate();\n\n            if (!isNaN(avg)) {\n                sum += avg;\n                count += 1;\n                remoteAvg.reset();\n            }\n        }\n\n        return sum / count;\n    }\n\n    /**\n     * Processes {@link ConnectionQualityEvents.REMOTE_STATS_UPDATED} to analyse\n     * RTT towards the JVB reported by each participant.\n     * @param {string} id {@link JitsiParticipant.getId}\n     * @param {go figure in ConnectionQuality.js} data\n     * @private\n     */\n    _processRemoteStats(id, data) {\n        const validData = typeof data.jvbRTT === 'number';\n        let rttAvg = this._avgRemoteRTTMap.get(id);\n\n        if (!rttAvg && validData) {\n            rttAvg = new AverageStatReport(`${id}_stat_rtt`);\n            this._avgRemoteRTTMap.set(id, rttAvg);\n        }\n\n        if (validData) {\n            rttAvg.addNext(data.jvbRTT);\n        } else if (rttAvg) {\n            this._avgRemoteRTTMap.delete(id);\n        }\n    }\n\n    /**\n     * Reset cache of all averages and {@link _sampleIdx}.\n     * @private\n     */\n    _resetAvgStats() {\n        this._avgRTT.reset();\n        if (this._avgRemoteRTTMap) {\n            this._avgRemoteRTTMap.clear();\n        }\n        this._sampleIdx = 0;\n    }\n\n    /**\n     *\n     */\n    dispose() {\n\n        const conference = this._avgRtpStatsReporter._conference;\n\n        conference.statistics.removeConnectionStatsListener(\n            this._onConnectionStats);\n        if (!this.isP2P) {\n            conference.off(\n                ConnectionQualityEvents.REMOTE_STATS_UPDATED,\n                this._onRemoteStatsUpdated);\n            conference.off(\n                ConferenceEvents.USER_LEFT,\n                this._onUserLeft);\n        }\n    }\n}\n\n/**\n * Reports average RTP statistics values (arithmetic mean) to the analytics\n * module for things like bit rate, bandwidth, packet loss etc. It keeps track\n * of the P2P vs JVB conference modes and submits the values under different\n * namespaces (the events for P2P mode have 'p2p.' prefix). Every switch between\n * P2P mode resets the data collected so far and averages are calculated from\n * scratch.\n */\nexport default class AvgRTPStatsReporter {\n    /**\n     * Creates new instance of <tt>AvgRTPStatsReporter</tt>\n     * @param {JitsiConference} conference\n     * @param {number} n the number of samples, before arithmetic mean is to be\n     * calculated and values submitted to the analytics module.\n     */\n    constructor(conference, n) {\n        /**\n         * How many {@link ConnectionQualityEvents.LOCAL_STATS_UPDATED} samples\n         * are to be included in arithmetic mean calculation.\n         * @type {number}\n         * @private\n         */\n        this._n = n;\n\n        if (n > 0) {\n            logger.info(`Avg RTP stats will be calculated every ${n} samples`);\n        } else {\n            logger.info('Avg RTP stats reports are disabled.');\n\n            // Do not initialize\n            return;\n        }\n\n        /**\n         * The current sample index. Starts from 0 and goes up to {@link _n})\n         * when analytics report will be submitted.\n         * @type {number}\n         * @private\n         */\n        this._sampleIdx = 0;\n\n        /**\n         * The conference for which stats will be collected and reported.\n         * @type {JitsiConference}\n         * @private\n         */\n        this._conference = conference;\n\n        /**\n         * Average audio upload bitrate\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgAudioBitrateUp\n            = new AverageStatReport('bitrate_audio_upload');\n\n        /**\n         * Average audio download bitrate\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgAudioBitrateDown\n            = new AverageStatReport('bitrate_audio_download');\n\n        /**\n         * Average video upload bitrate\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgVideoBitrateUp\n            = new AverageStatReport('bitrate_video_upload');\n\n        /**\n         * Average video download bitrate\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgVideoBitrateDown\n            = new AverageStatReport('bitrate_video_download');\n\n        /**\n         * Average upload bandwidth\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgBandwidthUp\n            = new AverageStatReport('bandwidth_upload');\n\n        /**\n         * Average download bandwidth\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgBandwidthDown\n            = new AverageStatReport('bandwidth_download');\n\n        /**\n         * Average total packet loss\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgPacketLossTotal\n            = new AverageStatReport('packet_loss_total');\n\n        /**\n         * Average upload packet loss\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgPacketLossUp\n            = new AverageStatReport('packet_loss_upload');\n\n        /**\n         * Average download packet loss\n         * XXX What are the units?\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgPacketLossDown\n            = new AverageStatReport('packet_loss_download');\n\n        /**\n         * Average FPS for remote videos\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgRemoteFPS = new AverageStatReport('framerate_remote');\n\n        /**\n         * Average FPS for remote screen streaming videos (reported only if not\n         * a <tt>NaN</tt>).\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgRemoteScreenFPS\n            = new AverageStatReport('framerate_screen_remote');\n\n        /**\n         * Average FPS for local video (camera)\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgLocalFPS = new AverageStatReport('framerate_local');\n\n        /**\n         * Average FPS for local screen streaming video (reported only if not\n         * a <tt>NaN</tt>).\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgLocalScreenFPS\n            = new AverageStatReport('framerate_screen_local');\n\n        /**\n         * Average pixels for remote screen streaming videos (reported only if\n         * not a <tt>NaN</tt>).\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgRemoteCameraPixels\n            = new AverageStatReport('pixels_remote');\n\n        /**\n         * Average pixels for remote screen streaming videos (reported only if\n         * not a <tt>NaN</tt>).\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgRemoteScreenPixels\n            = new AverageStatReport('pixels_screen_remote');\n\n        /**\n         * Average pixels for local video (camera)\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgLocalCameraPixels\n            = new AverageStatReport('pixels_local');\n\n        /**\n         * Average pixels for local screen streaming video (reported only if not\n         * a <tt>NaN</tt>).\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgLocalScreenPixels\n            = new AverageStatReport('pixels_screen_local');\n\n        /**\n         * Average connection quality as defined by\n         * the {@link ConnectionQuality} module.\n         * @type {AverageStatReport}\n         * @private\n         */\n        this._avgCQ = new AverageStatReport('connection_quality');\n\n        this._onLocalStatsUpdated = data => this._calculateAvgStats(data);\n        conference.on(\n            ConnectionQualityEvents.LOCAL_STATS_UPDATED,\n            this._onLocalStatsUpdated);\n\n        this._onP2PStatusChanged = () => {\n            logger.debug('Resetting average stats calculation');\n            this._resetAvgStats();\n            this.jvbStatsMonitor._resetAvgStats();\n            this.p2pStatsMonitor._resetAvgStats();\n        };\n        conference.on(\n            ConferenceEvents.P2P_STATUS,\n            this._onP2PStatusChanged);\n\n        this._onJvb121StatusChanged = (oldStatus, newStatus) => {\n            // We want to reset only on the transition from false => true,\n            // because otherwise those stats are resetted on JVB <=> P2P\n            // transition.\n            if (newStatus === true) {\n                logger.info('Resetting JVB avg RTP stats');\n                this._resetAvgJvbStats();\n            }\n        };\n        conference.on(\n            ConferenceEvents.JVB121_STATUS,\n            this._onJvb121StatusChanged);\n\n        this.jvbStatsMonitor\n            = new ConnectionAvgStats(this, false /* JVB */, n);\n\n        this.p2pStatsMonitor\n            = new ConnectionAvgStats(this, true /* P2P */, n);\n    }\n\n    /**\n     * Processes next batch of stats reported on\n     * {@link ConnectionQualityEvents.LOCAL_STATS_UPDATED}.\n     * @param {go figure} data\n     * @private\n     */\n    _calculateAvgStats(data) {\n\n        if (!data) {\n            logger.error('No stats');\n\n            return;\n        }\n\n        const isP2P = this._conference.isP2PActive();\n        const confSize = this._conference.getParticipantCount();\n\n        if (!isP2P && confSize < 2) {\n\n            // There's no point in collecting stats for a JVB conference of 1.\n            // That happens for short period of time after everyone leaves\n            // the room, until Jicofo terminates the session.\n            return;\n        }\n\n        /* Uncomment to figure out stats structure\n        for (const key in data) {\n            if (data.hasOwnProperty(key)) {\n                logger.info(`local stat ${key}: `, data[key]);\n            }\n        } */\n\n        const bitrate = data.bitrate;\n        const bandwidth = data.bandwidth;\n        const packetLoss = data.packetLoss;\n        const frameRate = data.framerate;\n        const resolution = data.resolution;\n\n        if (!bitrate) {\n            logger.error('No \"bitrate\"');\n\n            return;\n        } else if (!bandwidth) {\n            logger.error('No \"bandwidth\"');\n\n            return;\n        } else if (!packetLoss) {\n            logger.error('No \"packetloss\"');\n\n            return;\n        } else if (!frameRate) {\n            logger.error('No \"framerate\"');\n\n            return;\n        } else if (!resolution) {\n            logger.error('No resolution');\n\n            return;\n        }\n\n        this._avgAudioBitrateUp.addNext(bitrate.audio.upload);\n        this._avgAudioBitrateDown.addNext(bitrate.audio.download);\n\n        this._avgVideoBitrateUp.addNext(bitrate.video.upload);\n        this._avgVideoBitrateDown.addNext(bitrate.video.download);\n\n        if (browser.supportsBandwidthStatistics()) {\n            this._avgBandwidthUp.addNext(bandwidth.upload);\n            this._avgBandwidthDown.addNext(bandwidth.download);\n        }\n\n        this._avgPacketLossUp.addNext(packetLoss.upload);\n        this._avgPacketLossDown.addNext(packetLoss.download);\n        this._avgPacketLossTotal.addNext(packetLoss.total);\n\n        this._avgCQ.addNext(data.connectionQuality);\n\n        if (frameRate) {\n            this._avgRemoteFPS.addNext(\n                this._calculateAvgVideoFps(\n                    frameRate, false /* remote */, VideoType.CAMERA));\n            this._avgRemoteScreenFPS.addNext(\n                this._calculateAvgVideoFps(\n                    frameRate, false /* remote */, VideoType.DESKTOP));\n\n            this._avgLocalFPS.addNext(\n                this._calculateAvgVideoFps(\n                    frameRate, true /* local */, VideoType.CAMERA));\n            this._avgLocalScreenFPS.addNext(\n                this._calculateAvgVideoFps(\n                    frameRate, true /* local */, VideoType.DESKTOP));\n        }\n\n        if (resolution) {\n            this._avgRemoteCameraPixels.addNext(\n                this._calculateAvgVideoPixels(\n                    resolution, false /* remote */, VideoType.CAMERA));\n\n            this._avgRemoteScreenPixels.addNext(\n                this._calculateAvgVideoPixels(\n                    resolution, false /* remote */, VideoType.DESKTOP));\n\n            this._avgLocalCameraPixels.addNext(\n                this._calculateAvgVideoPixels(\n                    resolution, true /* local */, VideoType.CAMERA));\n\n            this._avgLocalScreenPixels.addNext(\n                this._calculateAvgVideoPixels(\n                    resolution, true /* local */, VideoType.DESKTOP));\n        }\n\n        this._sampleIdx += 1;\n\n        if (this._sampleIdx >= this._n) {\n\n            const batchReport = {\n                p2p: isP2P,\n                'conference_size': confSize\n            };\n\n            if (data.transport && data.transport.length) {\n                Object.assign(batchReport, {\n                    'local_candidate_type':\n                        data.transport[0].localCandidateType,\n                    'remote_candidate_type':\n                        data.transport[0].remoteCandidateType,\n                    'transport_type': data.transport[0].type\n                });\n            }\n\n            this._avgAudioBitrateUp.appendReport(batchReport);\n            this._avgAudioBitrateDown.appendReport(batchReport);\n\n            this._avgVideoBitrateUp.appendReport(batchReport);\n            this._avgVideoBitrateDown.appendReport(batchReport);\n\n            if (browser.supportsBandwidthStatistics()) {\n                this._avgBandwidthUp.appendReport(batchReport);\n                this._avgBandwidthDown.appendReport(batchReport);\n            }\n            this._avgPacketLossUp.appendReport(batchReport);\n            this._avgPacketLossDown.appendReport(batchReport);\n            this._avgPacketLossTotal.appendReport(batchReport);\n\n            this._avgRemoteFPS.appendReport(batchReport);\n            if (!isNaN(this._avgRemoteScreenFPS.calculate())) {\n                this._avgRemoteScreenFPS.appendReport(batchReport);\n            }\n            this._avgLocalFPS.appendReport(batchReport);\n            if (!isNaN(this._avgLocalScreenFPS.calculate())) {\n                this._avgLocalScreenFPS.appendReport(batchReport);\n            }\n\n            this._avgRemoteCameraPixels.appendReport(batchReport);\n            if (!isNaN(this._avgRemoteScreenPixels.calculate())) {\n                this._avgRemoteScreenPixels.appendReport(batchReport);\n            }\n            this._avgLocalCameraPixels.appendReport(batchReport);\n            if (!isNaN(this._avgLocalScreenPixels.calculate())) {\n                this._avgLocalScreenPixels.appendReport(batchReport);\n            }\n\n            this._avgCQ.appendReport(batchReport);\n\n            Statistics.sendAnalytics(createRtpStatsEvent(batchReport));\n\n            this._resetAvgStats();\n        }\n    }\n\n    /**\n     * Calculates average number of pixels for the report\n     *\n     * @param {map} peerResolutions a map of peer resolutions\n     * @param {boolean} isLocal if the average is to be calculated for the local\n     * video or <tt>false</tt> if for remote videos.\n     * @param {VideoType} videoType\n     * @return {number|NaN} average number of pixels or <tt>NaN</tt> if there\n     * are no samples.\n     * @private\n     */\n    _calculateAvgVideoPixels(peerResolutions, isLocal, videoType) {\n        let peerPixelsSum = 0;\n        let peerCount = 0;\n        const myID = this._conference.myUserId();\n\n        for (const peerID of Object.keys(peerResolutions)) {\n            if (isLocal ? peerID === myID : peerID !== myID) {\n                const participant\n                    = isLocal\n                        ? null\n                        : this._conference.getParticipantById(peerID);\n                const videosResolution = peerResolutions[peerID];\n\n                // Do not continue without participant for non local peerID\n                if ((isLocal || participant) && videosResolution) {\n                    const peerAvgPixels = this._calculatePeerAvgVideoPixels(\n                        videosResolution, participant, videoType);\n\n                    if (!isNaN(peerAvgPixels)) {\n                        peerPixelsSum += peerAvgPixels;\n                        peerCount += 1;\n                    }\n                }\n            }\n        }\n\n        return peerPixelsSum / peerCount;\n    }\n\n    /**\n     * Calculate average pixels for either remote or local participant\n     * @param {object} videos maps resolution per video SSRC\n     * @param {JitsiParticipant|null} participant remote participant or\n     * <tt>null</tt> for local video pixels calculation.\n     * @param {VideoType} videoType the type of the video for which an average\n     * will be calculated.\n     * @return {number|NaN} average video pixels of all participant's videos or\n     * <tt>NaN</tt> if currently not available\n     * @private\n     */\n    _calculatePeerAvgVideoPixels(videos, participant, videoType) {\n        let ssrcs = Object.keys(videos).map(ssrc => Number(ssrc));\n        let videoTracks = null;\n\n        // NOTE that this method is supposed to be called for the stats\n        // received from the current peerconnection.\n        const tpc = this._conference.getActivePeerConnection();\n\n        if (participant) {\n            videoTracks = participant.getTracksByMediaType(MediaType.VIDEO);\n            if (videoTracks) {\n                ssrcs\n                    = ssrcs.filter(\n                        ssrc => videoTracks.find(\n                            track =>\n                                !track.isMuted()\n                                    && track.getSSRC() === ssrc\n                                    && track.videoType === videoType));\n            }\n        } else {\n            videoTracks = this._conference.getLocalTracks(MediaType.VIDEO);\n            ssrcs\n                = ssrcs.filter(\n                    ssrc => videoTracks.find(\n                        track =>\n                            !track.isMuted()\n                                && tpc.getLocalSSRC(track) === ssrc\n                                && track.videoType === videoType));\n        }\n\n        let peerPixelsSum = 0;\n        let peerSsrcCount = 0;\n\n        for (const ssrc of ssrcs) {\n            const peerSsrcPixels\n                = Number(videos[ssrc].height) * Number(videos[ssrc].width);\n\n            // FPS is reported as 0 for users with no video\n            if (!isNaN(peerSsrcPixels) && peerSsrcPixels > 0) {\n                peerPixelsSum += peerSsrcPixels;\n                peerSsrcCount += 1;\n            }\n        }\n\n        return peerPixelsSum / peerSsrcCount;\n    }\n\n\n    /**\n     * Calculates average FPS for the report\n     * @param {go figure} frameRate\n     * @param {boolean} isLocal if the average is to be calculated for the local\n     * video or <tt>false</tt> if for remote videos.\n     * @param {VideoType} videoType\n     * @return {number|NaN} average FPS or <tt>NaN</tt> if there are no samples.\n     * @private\n     */\n    _calculateAvgVideoFps(frameRate, isLocal, videoType) {\n        let peerFpsSum = 0;\n        let peerCount = 0;\n        const myID = this._conference.myUserId();\n\n        for (const peerID of Object.keys(frameRate)) {\n            if (isLocal ? peerID === myID : peerID !== myID) {\n                const participant\n                    = isLocal\n                        ? null : this._conference.getParticipantById(peerID);\n                const videosFps = frameRate[peerID];\n\n                // Do not continue without participant for non local peerID\n                if ((isLocal || participant) && videosFps) {\n                    const peerAvgFPS\n                        = this._calculatePeerAvgVideoFps(\n                            videosFps, participant, videoType);\n\n                    if (!isNaN(peerAvgFPS)) {\n                        peerFpsSum += peerAvgFPS;\n                        peerCount += 1;\n                    }\n                }\n            }\n        }\n\n        return peerFpsSum / peerCount;\n    }\n\n    /**\n     * Calculate average FPS for either remote or local participant\n     * @param {object} videos maps FPS per video SSRC\n     * @param {JitsiParticipant|null} participant remote participant or\n     * <tt>null</tt> for local FPS calculation.\n     * @param {VideoType} videoType the type of the video for which an average\n     * will be calculated.\n     * @return {number|NaN} average FPS of all participant's videos or\n     * <tt>NaN</tt> if currently not available\n     * @private\n     */\n    _calculatePeerAvgVideoFps(videos, participant, videoType) {\n        let ssrcs = Object.keys(videos).map(ssrc => Number(ssrc));\n        let videoTracks = null;\n\n        // NOTE that this method is supposed to be called for the stats\n        // received from the current peerconnection.\n        const tpc = this._conference.getActivePeerConnection();\n\n        if (participant) {\n            videoTracks = participant.getTracksByMediaType(MediaType.VIDEO);\n            if (videoTracks) {\n                ssrcs\n                    = ssrcs.filter(\n                        ssrc => videoTracks.find(\n                            track => !track.isMuted()\n                                && track.getSSRC() === ssrc\n                                && track.videoType === videoType));\n            }\n        } else {\n            videoTracks = this._conference.getLocalTracks(MediaType.VIDEO);\n            ssrcs\n                = ssrcs.filter(\n                    ssrc => videoTracks.find(\n                        track => !track.isMuted()\n                            && tpc.getLocalSSRC(track) === ssrc\n                            && track.videoType === videoType));\n        }\n\n        let peerFpsSum = 0;\n        let peerSsrcCount = 0;\n\n        for (const ssrc of ssrcs) {\n            const peerSsrcFps = Number(videos[ssrc]);\n\n            // FPS is reported as 0 for users with no video\n            if (!isNaN(peerSsrcFps) && peerSsrcFps > 0) {\n                peerFpsSum += peerSsrcFps;\n                peerSsrcCount += 1;\n            }\n        }\n\n        return peerFpsSum / peerSsrcCount;\n    }\n\n    /**\n     * Resets the stats related to JVB connection. Must not be called when in\n     * P2P mode, because then the {@link AverageStatReport} instances are\n     * tracking P2P stats. Note that this should never happen unless something\n     * is wrong with the P2P and JVB121 events.\n     * @private\n     */\n    _resetAvgJvbStats() {\n        this._resetAvgStats();\n        this.jvbStatsMonitor._resetAvgStats();\n    }\n\n    /**\n     * Reset cache of all averages and {@link _sampleIdx}.\n     * @private\n     */\n    _resetAvgStats() {\n        this._avgAudioBitrateUp.reset();\n        this._avgAudioBitrateDown.reset();\n\n        this._avgVideoBitrateUp.reset();\n        this._avgVideoBitrateDown.reset();\n\n        this._avgBandwidthUp.reset();\n        this._avgBandwidthDown.reset();\n\n        this._avgPacketLossUp.reset();\n        this._avgPacketLossDown.reset();\n        this._avgPacketLossTotal.reset();\n\n        this._avgRemoteFPS.reset();\n        this._avgRemoteScreenFPS.reset();\n        this._avgLocalFPS.reset();\n        this._avgLocalScreenFPS.reset();\n\n        this._avgRemoteCameraPixels.reset();\n        this._avgRemoteScreenPixels.reset();\n        this._avgLocalCameraPixels.reset();\n        this._avgLocalScreenPixels.reset();\n\n        this._avgCQ.reset();\n\n        this._sampleIdx = 0;\n    }\n\n    /**\n     * Unregisters all event listeners and stops working.\n     */\n    dispose() {\n        this._conference.off(\n            ConferenceEvents.P2P_STATUS,\n            this._onP2PStatusChanged);\n        this._conference.off(\n            ConnectionQualityEvents.LOCAL_STATS_UPDATED,\n            this._onLocalStatsUpdated);\n        this._conference.off(\n            ConferenceEvents.JVB121_STATUS,\n            this._onJvb121StatusChanged);\n        this.jvbStatsMonitor.dispose();\n        this.p2pStatsMonitor.dispose();\n    }\n}\n","import { getLogger } from 'jitsi-meet-logger';\n\nimport * as ConferenceEvents from '../../JitsiConferenceEvents';\nimport * as ConnectionQualityEvents from '../../service/connectivity/ConnectionQualityEvents';\nimport * as MediaType from '../../service/RTC/MediaType';\nimport { createAudioOutputProblemEvent } from '../../service/statistics/AnalyticsEvents';\n\nimport Statistics from './statistics';\n\nconst logger = getLogger(__filename);\n\n/**\n * Number of local samples that will be used for comparison before and after the remote sample is received.\n */\nconst NUMBER_OF_LOCAL_SAMPLES = 2;\n\n/**\n * Collects the average audio levels per participant from the local stats and the stats received by every remote\n * participant and compares them to detect potential audio problem for a participant.\n */\nexport default class AudioOutputProblemDetector {\n\n    /**\n     * Creates new <tt>AudioOutputProblemDetector</tt> instance.\n     *\n     * @param {JitsiCofnerence} conference - The conference instance to be monitored.\n     */\n    constructor(conference) {\n        this._conference = conference;\n        this._localAudioLevelCache = {};\n        this._reportedParticipants = [];\n        this._audioProblemCandidates = {};\n        this._numberOfRemoteAudioLevelsReceived = {};\n        this._onLocalAudioLevelsReport = this._onLocalAudioLevelsReport.bind(this);\n        this._onRemoteAudioLevelReceived = this._onRemoteAudioLevelReceived.bind(this);\n        this._clearUserData = this._clearUserData.bind(this);\n        this._conference.on(ConnectionQualityEvents.REMOTE_STATS_UPDATED, this._onRemoteAudioLevelReceived);\n        this._conference.statistics.addConnectionStatsListener(this._onLocalAudioLevelsReport);\n        this._conference.on(ConferenceEvents.USER_LEFT, this._clearUserData);\n    }\n\n    /**\n     * A listener for audio level data received by a remote participant.\n     *\n     * @param {string} userID - The user id of the participant that sent the data.\n     * @param {number} audioLevel - The average audio level value.\n     * @returns {void}\n     */\n    _onRemoteAudioLevelReceived(userID, { avgAudioLevels }) {\n        const numberOfReports = (this._numberOfRemoteAudioLevelsReceived[userID] + 1) || 0;\n\n        this._numberOfRemoteAudioLevelsReceived[userID] = numberOfReports;\n\n        if (this._reportedParticipants.indexOf(userID) !== -1 || (userID in this._audioProblemCandidates)\n                || avgAudioLevels <= 0 || numberOfReports < 3) {\n            return;\n        }\n\n        const participant = this._conference.getParticipantById(userID);\n\n        if (participant) {\n            const tracks = participant.getTracksByMediaType(MediaType.AUDIO);\n\n            if (tracks.length > 0 && participant.isAudioMuted()) {\n                // We don't need to report an error if everything seems fine with the participant and its tracks but\n                // the participant is audio muted. Since those are average audio levels we potentially can receive non\n                // zero values for muted track.\n                return;\n            }\n        }\n\n        const localAudioLevels = this._localAudioLevelCache[userID];\n\n        if (!Array.isArray(localAudioLevels) || localAudioLevels.every(audioLevel => audioLevel === 0)) {\n            this._audioProblemCandidates[userID] = {\n                remoteAudioLevels: avgAudioLevels,\n                localAudioLevels: []\n            };\n        }\n    }\n\n    /**\n     * A listener for audio level data retrieved by the local stats.\n     *\n     * @param {TraceablePeerConnection} tpc - The <tt>TraceablePeerConnection</tt> instance used to gather the data.\n     * @param {Object} avgAudioLevels - The average audio levels per participant.\n     * @returns {void}\n     */\n    _onLocalAudioLevelsReport(tpc, { avgAudioLevels }) {\n        if (tpc !== this._conference.getActivePeerConnection()) {\n            return;\n        }\n\n        Object.keys(avgAudioLevels).forEach(userID => {\n            if (this._reportedParticipants.indexOf(userID) !== -1) {\n                return;\n            }\n\n            const localAudioLevels = this._localAudioLevelCache[userID];\n\n            if (!Array.isArray(localAudioLevels)) {\n                this._localAudioLevelCache[userID] = [ ];\n            } else if (localAudioLevels.length >= NUMBER_OF_LOCAL_SAMPLES) {\n                localAudioLevels.shift();\n            }\n\n            this._localAudioLevelCache[userID].push(avgAudioLevels[userID]);\n        });\n\n\n        Object.keys(this._audioProblemCandidates).forEach(userID => {\n            const { localAudioLevels, remoteAudioLevels } = this._audioProblemCandidates[userID];\n\n            localAudioLevels.push(avgAudioLevels[userID]);\n\n            if (localAudioLevels.length === NUMBER_OF_LOCAL_SAMPLES) {\n                if (localAudioLevels.every(audioLevel => typeof audioLevel === 'undefined' || audioLevel === 0)) {\n                    const localAudioLevelsString = JSON.stringify(localAudioLevels);\n\n                    Statistics.sendAnalytics(\n                        createAudioOutputProblemEvent(userID, localAudioLevelsString, remoteAudioLevels));\n                    logger.warn(`A potential problem is detected with the audio output for participant ${\n                        userID}, local audio levels: ${localAudioLevelsString}, remote audio levels: ${\n                        remoteAudioLevels}`);\n                    this._reportedParticipants.push(userID);\n                    this._clearUserData(userID);\n                }\n\n                delete this._audioProblemCandidates[userID];\n            }\n        });\n    }\n\n    /**\n     * Clears the data stored for a participant.\n     *\n     * @param {string} userID - The id of the participant.\n     * @returns {void}\n     */\n    _clearUserData(userID) {\n        delete this._localAudioLevelCache[userID];\n    }\n\n    /**\n     * Disposes the allocated resources.\n     *\n     * @returns {void}\n     */\n    dispose() {\n        this._conference.off(ConnectionQualityEvents.REMOTE_STATS_UPDATED, this._onRemoteAudioLevelReceived);\n        this._conference.off(ConferenceEvents.USER_LEFT, this._clearUserData);\n        this._conference.statistics.removeConnectionStatsListener(this._onLocalAudioLevelsReport);\n        this._localAudioLevelCache = undefined;\n        this._audioProblemCandidates = undefined;\n        this._reportedParticipants = undefined;\n        this._numberOfRemoteAudioLevelsReceived = undefined;\n        this._conference = undefined;\n    }\n}\n","import * as JitsiConferenceEvents from '../../JitsiConferenceEvents';\nimport SpeakerStats from './SpeakerStats';\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\n\n/**\n * A collection for tracking speaker stats. Attaches listeners\n * to the conference to automatically update on tracked events.\n */\nexport default class SpeakerStatsCollector {\n    /**\n     * Initializes a new SpeakerStatsCollector instance.\n     *\n     * @constructor\n     * @param {JitsiConference} conference - The conference to track.\n     * @returns {void}\n     */\n    constructor(conference) {\n        this.stats = {\n            users: {\n\n                // userId: SpeakerStats\n            },\n            dominantSpeakerId: null\n        };\n\n        const userId = conference.myUserId();\n\n        this.stats.users[userId] = new SpeakerStats(userId, null, true);\n\n        conference.addEventListener(\n            JitsiConferenceEvents.DOMINANT_SPEAKER_CHANGED,\n            this._onDominantSpeaker.bind(this));\n        conference.addEventListener(\n            JitsiConferenceEvents.USER_JOINED,\n            this._onUserJoin.bind(this));\n        conference.addEventListener(\n            JitsiConferenceEvents.USER_LEFT,\n            this._onUserLeave.bind(this));\n        conference.addEventListener(\n            JitsiConferenceEvents.DISPLAY_NAME_CHANGED,\n            this._onDisplayNameChange.bind(this));\n        if (conference.xmpp) {\n            conference.xmpp.addListener(\n                XMPPEvents.SPEAKER_STATS_RECEIVED,\n                this._updateStats.bind(this));\n        }\n    }\n\n    /**\n     * Reacts to dominant speaker change events by changing its speaker stats\n     * models to reflect the current dominant speaker.\n     *\n     * @param {string} dominantSpeakerId - The user id of the new\n     * dominant speaker.\n     * @returns {void}\n     * @private\n     */\n    _onDominantSpeaker(dominantSpeakerId) {\n        const oldDominantSpeaker\n            = this.stats.users[this.stats.dominantSpeakerId];\n        const newDominantSpeaker = this.stats.users[dominantSpeakerId];\n\n        oldDominantSpeaker && oldDominantSpeaker.setDominantSpeaker(false);\n        newDominantSpeaker && newDominantSpeaker.setDominantSpeaker(true);\n        this.stats.dominantSpeakerId = dominantSpeakerId;\n    }\n\n    /**\n     * Reacts to user join events by creating a new SpeakerStats model.\n     *\n     * @param {string} userId - The user id of the new user.\n     * @param {JitsiParticipant} - The JitsiParticipant model for the new user.\n     * @returns {void}\n     * @private\n     */\n    _onUserJoin(userId, participant) {\n        let savedUser = this.stats.users[userId];\n\n        if (!savedUser) {\n            savedUser = this.stats.users[userId]\n                = new SpeakerStats(userId, participant.getDisplayName());\n        }\n    }\n\n    /**\n     * Reacts to user leave events by updating the associated user's\n     * SpeakerStats model.\n     *\n     * @param {string} userId - The user id of the user that left.\n     * @returns {void}\n     * @private\n     */\n    _onUserLeave(userId) {\n        const savedUser = this.stats.users[userId];\n\n        if (savedUser) {\n            savedUser.markAsHasLeft();\n        }\n    }\n\n    /**\n     * Reacts to user name change events by updating the last known name\n     * tracked in the associated SpeakerStats model.\n     *\n     * @param {string} userId - The user id of the user that left.\n     * @returns {void}\n     * @private\n     */\n    _onDisplayNameChange(userId, newName) {\n        const savedUser = this.stats.users[userId];\n\n        if (savedUser) {\n            savedUser.setDisplayName(newName);\n        }\n    }\n\n    /**\n     * Return a copy of the tracked SpeakerStats models.\n     *\n     * @returns {Object} The keys are the user ids and the values are the\n     * associated user's SpeakerStats model.\n     * @private\n     */\n    getStats() {\n        return this.stats.users;\n    }\n\n    /**\n     * Updates of the current stats is requested, passing the new values.\n     *\n     * @param {Object} newStats - The new values used to update current one.\n     * @private\n     */\n    _updateStats(newStats) {\n        for (const userId in newStats) { // eslint-disable-line guard-for-in\n            let speakerStatsToUpdate;\n\n            if (this.stats.users[userId]) {\n                speakerStatsToUpdate = this.stats.users[userId];\n\n                if (!speakerStatsToUpdate.getDisplayName()) {\n                    speakerStatsToUpdate\n                        .setDisplayName(newStats[userId].displayName);\n                }\n            } else {\n                speakerStatsToUpdate = new SpeakerStats(\n                    userId, newStats[userId].displayName);\n                this.stats.users[userId] = speakerStatsToUpdate;\n                speakerStatsToUpdate.markAsHasLeft();\n            }\n\n            speakerStatsToUpdate.totalDominantSpeakerTime\n                = newStats[userId].totalDominantSpeakerTime;\n        }\n    }\n}\n","const AudioRecorder = require('./audioRecorder');\nconst SphinxService = require(\n    './transcriptionServices/SphinxTranscriptionService');\n\nconst BEFORE_STATE = 'before';\nconst RECORDING_STATE = 'recording';\nconst TRANSCRIBING_STATE = 'transcribing';\nconst FINISHED_STATE = 'finished';\n\n// the amount of characters each line in the transcription will have\nconst MAXIMUM_SENTENCE_LENGTH = 80;\n\n/**\n * This is the main object for handing the Transcription. It interacts with\n * the audioRecorder to record every person in a conference and sends the\n * recorder audio to a transcriptionService. The returned speech-to-text result\n * will be merged to create a transcript\n * @param {AudioRecorder} audioRecorder An audioRecorder recording a conference\n */\nfunction Transcriber() {\n    // the object which can record all audio in the conference\n    this.audioRecorder = new AudioRecorder();\n\n    // this object can send the recorder audio to a speech-to-text service\n    this.transcriptionService = new SphinxService();\n\n    // holds a counter to keep track if merging can start\n    this.counter = null;\n\n    // holds the date when transcription started which makes it possible\n    // to calculate the offset between recordings\n    this.startTime = null;\n\n    // will hold the transcription once it is completed\n    this.transcription = null;\n\n    // this will be a method which will be called once the transcription is done\n    // with the transcription as parameter\n    this.callback = null;\n\n    // stores all the retrieved speech-to-text results to merge together\n    // this value will store an Array<Word> object\n    this.results = [];\n\n    // Stores the current state of the transcription process\n    this.state = BEFORE_STATE;\n\n    // Used in the updateTranscription method to add a new line when the\n    // sentence becomes to long\n    this.lineLength = 0;\n}\n\n/**\n * Method to start the transcription process. It will tell the audioRecorder\n * to start storing all audio streams and record the start time for merging\n * purposes\n */\nTranscriber.prototype.start = function start() {\n    if (this.state !== BEFORE_STATE) {\n        throw new Error(\n            `The transcription can only start when it's in the \"${\n                BEFORE_STATE}\" state. It's currently in the \"${\n                this.state}\" state`);\n    }\n    this.state = RECORDING_STATE;\n    this.audioRecorder.start();\n    this.startTime = new Date();\n};\n\n/**\n * Method to stop the transcription process. It will tell the audioRecorder to\n * stop, and get all the recorded audio to send it to the transcription service\n\n * @param callback a callback which will receive the transcription\n */\nTranscriber.prototype.stop = function stop(callback) {\n    if (this.state !== RECORDING_STATE) {\n        throw new Error(\n            `The transcription can only stop when it's in the \"${\n                RECORDING_STATE}\" state. It's currently in the \"${\n                this.state}\" state`);\n    }\n\n    // stop the recording\n    console.log('stopping recording and sending audio files');\n    this.audioRecorder.stop();\n\n    // and send all recorded audio the the transcription service\n    const callBack = blobCallBack.bind(null, this);\n\n    this.audioRecorder.getRecordingResults().forEach(recordingResult => {\n        this.transcriptionService.send(recordingResult, callBack);\n        this.counter++;\n    });\n\n    // set the state to \"transcribing\" so that maybeMerge() functions correctly\n    this.state = TRANSCRIBING_STATE;\n\n    // and store the callback for later\n    this.callback = callback;\n};\n\n/**\n * This method gets the answer from the transcription service, calculates the\n * offset and adds is to every Word object. It will also start the merging\n * when every send request has been received\n *\n * note: Make sure to bind this as a Transcription object\n * @param {Transcriber} transcriber the transcriber instance\n * @param {RecordingResult} answer a RecordingResult object with a defined\n * WordArray\n */\nfunction blobCallBack(transcriber, answer) {\n    console.log(\n        'retrieved an answer from the transcription service. The answer has an'\n            + ` array of length: ${answer.wordArray.length}`);\n\n    // first add the offset between the start of the transcription and\n    // the start of the recording to all start and end times\n    if (answer.wordArray.length > 0) {\n        let offset = answer.startTime.getUTCMilliseconds()\n            - transcriber.startTime.getUTCMilliseconds();\n\n        // transcriber time will always be earlier\n\n        if (offset < 0) {\n            offset = 0; // presume 0 if it somehow not earlier\n        }\n\n        let array = '[';\n\n        answer.wordArray.forEach(wordObject => {\n            wordObject.begin += offset;\n            wordObject.end += offset;\n            array += `${wordObject.word},`;\n        });\n        array += ']';\n        console.log(array);\n\n        // give a name value to the Array object so that the merging can access\n        // the name value without having to use the whole recordingResult object\n        // in the algorithm\n        answer.wordArray.name = answer.name;\n    }\n\n    // then store the array and decrease the counter\n    transcriber.results.push(answer.wordArray);\n    transcriber.counter--;\n    console.log(`current counter: ${transcriber.counter}`);\n\n    // and check if all results have been received.\n    transcriber.maybeMerge();\n}\n\n/**\n * this method will check if the counter is zero. If it is, it will call\n * the merging method\n */\nTranscriber.prototype.maybeMerge = function() {\n    if (this.state === TRANSCRIBING_STATE && this.counter === 0) {\n        // make sure to include the events in the result arrays before\n        // merging starts\n        this.merge();\n    }\n};\n\n/**\n * This method will merge all speech-to-text arrays together in one\n * readable transcription string\n */\nTranscriber.prototype.merge = function() {\n    console.log(\n        `starting merge process!\\n The length of the array: ${\n            this.results.length}`);\n    this.transcription = '';\n\n    // the merging algorithm will look over all Word objects who are at pos 0 in\n    // every array. It will then select the one closest in time to the\n    // previously placed word, while removing the selected word from its array\n    // note: words can be skipped the skipped word's begin and end time somehow\n    // end up between the closest word start and end time\n    const arrays = this.results;\n\n    // arrays of Word objects\n    const potentialWords = []; // array of the first Word objects\n    // check if any arrays are already empty and remove them\n\n    hasPopulatedArrays(arrays);\n\n    // populate all the potential Words for a first time\n    arrays.forEach(array => pushWordToSortedArray(potentialWords, array));\n\n    // keep adding words to transcription until all arrays are exhausted\n    while (hasPopulatedArrays(arrays)) {\n        // first select the lowest array;\n        let lowestWordArray = arrays[0];\n\n        arrays.forEach(wordArray => {\n            if (wordArray[0].begin < lowestWordArray[0].begin) {\n                lowestWordArray = wordArray;\n            }\n        });\n\n        // put the word in the transcription\n        let wordToAdd = lowestWordArray.shift();\n\n        this.updateTranscription(wordToAdd, lowestWordArray.name);\n\n        // keep going until a word in another array has a smaller time\n        // or the array is empty\n        while (lowestWordArray.length > 0) {\n            let foundSmaller = false;\n            const wordToCompare = lowestWordArray[0].begin;\n\n            arrays.forEach(wordArray => {\n                if (wordArray[0].begin < wordToCompare) {\n                    foundSmaller = true;\n                }\n            });\n\n            // add next word if no smaller time has been found\n            if (foundSmaller) {\n                break;\n            }\n\n            wordToAdd = lowestWordArray.shift();\n            this.updateTranscription(wordToAdd, null);\n        }\n\n    }\n\n    // set the state to finished and do the necessary left-over tasks\n    this.state = FINISHED_STATE;\n    if (this.callback) {\n        this.callback(this.transcription);\n    }\n};\n\n/**\n * Appends a word object to the transcription. It will make a new line with a\n * name if a name is specified\n * @param {Word} word the Word object holding the word to append\n * @param {String|null} name the name of a new speaker. Null if not applicable\n */\nTranscriber.prototype.updateTranscription = function(word, name) {\n    if (name !== undefined && name !== null) {\n        this.transcription += `\\n${name}:`;\n        this.lineLength = name.length + 1; // +1 for the semi-colon\n    }\n    if (this.lineLength + word.word.length > MAXIMUM_SENTENCE_LENGTH) {\n        this.transcription += '\\n    ';\n        this.lineLength = 4; // because of the 4 spaces after the new line\n    }\n    this.transcription += ` ${word.word}`;\n    this.lineLength += word.word.length + 1; // +1 for the space\n};\n\n/**\n * Check if the given 2 dimensional array has any non-zero Word-arrays in them.\n * All zero-element arrays inside will be removed\n * If any non-zero-element arrays are found, the method will return true.\n * otherwise it will return false\n * @param {Array<Array>} twoDimensionalArray the array to check\n * @returns {boolean} true if any non-zero arrays inside, otherwise false\n */\nfunction hasPopulatedArrays(twoDimensionalArray) {\n    for (let i = 0; i < twoDimensionalArray.length; i++) {\n        if (twoDimensionalArray[i].length === 0) {\n            twoDimensionalArray.splice(i, 1);\n        }\n    }\n\n    return twoDimensionalArray.length > 0;\n}\n\n/**\n * Push a word to the right location in a sorted array. The array is sorted\n * from lowest to highest start time. Every word is stored in an object which\n * includes the name of the person saying the word.\n *\n * @param {Array<Word>} array the sorted array to push to\n * @param {Word} word the word to push into the array\n */\nfunction pushWordToSortedArray(array, word) {\n    if (array.length === 0) {\n        array.push(word);\n    } else {\n        if (array[array.length - 1].begin <= word.begin) {\n            array.push(word);\n\n            return;\n        }\n\n        for (let i = 0; i < array.length; i++) {\n            if (word.begin < array[i].begin) {\n                array.splice(i, 0, word);\n\n                return;\n            }\n        }\n        array.push(word); // fail safe\n    }\n}\n\n/**\n * Gives the transcriber a JitsiTrack holding an audioStream to transcribe.\n * The JitsiTrack is given to the audioRecorder. If it doesn't hold an\n * audiostream, it will not be added by the audioRecorder\n * @param {JitsiTrack} track the track to give to the audioRecorder\n */\nTranscriber.prototype.addTrack = function(track) {\n    this.audioRecorder.addTrack(track);\n};\n\n/**\n * Remove the given track from the auioRecorder\n * @param track\n */\nTranscriber.prototype.removeTrack = function(track) {\n    this.audioRecorder.removeTrack(track);\n};\n\n/**\n * Will return the created transcription if it's avialable or throw an error\n * when it's not done yet\n * @returns {String} the transcription as a String\n */\nTranscriber.prototype.getTranscription = function() {\n    if (this.state !== FINISHED_STATE) {\n        throw new Error(\n            `The transcription can only be retrieved when it's in the \"${\n                FINISHED_STATE}\" state. It's currently in the \"${\n                this.state}\" state`);\n    }\n\n    return this.transcription;\n};\n\n/**\n * Returns the current state of the transcription process\n */\nTranscriber.prototype.getState = function() {\n    return this.state;\n};\n\n/**\n * Resets the state to the \"before\" state, such that it's again possible to\n * call the start method\n */\nTranscriber.prototype.reset = function() {\n    this.state = BEFORE_STATE;\n    this.counter = null;\n    this.transcription = null;\n    this.startTime = null;\n    this.callback = null;\n    this.results = [];\n    this.lineLength = 0;\n};\n\nmodule.exports = Transcriber;\n","import Statistics from '../statistics/statistics';\n\nconst logger = require('jitsi-meet-logger').getLogger(__filename);\n\n/**\n * Creates new instance of <tt>ComponentsVersions</tt> which will be discovering\n * the versions of conferencing system components in given\n * <tt>JitsiConference</tt>.\n * @param conference <tt>JitsiConference</tt> instance which will be used to\n *        listen for focus presence updates.\n * @constructor\n */\nexport default function ComponentsVersions(conference) {\n\n    this.versions = {};\n\n    this.conference = conference;\n    this.conference.addCommandListener(\n        'versions', this.processVersions.bind(this));\n}\n\nComponentsVersions.prototype.processVersions\n    = function(versions, mucResource, mucJid) {\n        if (!this.conference._isFocus(mucJid)) {\n            logger.warn(\n                `Received versions not from the focus user: ${versions}`,\n                mucJid);\n\n            return;\n        }\n\n        const log = [];\n\n        versions.children.forEach(component => {\n\n            const name = component.attributes.name;\n            const version = component.value;\n\n            if (this.versions[name] !== version) {\n                this.versions[name] = version;\n                logger.info(`Got ${name} version: ${version}`);\n\n                log.push({\n                    id: 'component_version',\n                    component: name,\n                    version\n                });\n            }\n        });\n\n        // logs versions to stats\n        if (log.length > 0) {\n            Statistics.sendLog(JSON.stringify(log));\n        }\n    };\n\n/**\n * Obtains the version of conferencing system component.\n * @param componentName the name of the component for which we want to obtain\n *        the version.\n * @returns {String} which describes the version of the component identified by\n *          given <tt>componentName</tt> or <tt>undefined</tt> if not found.\n */\nComponentsVersions.prototype.getComponentVersion = function(componentName) {\n    return this.versions[componentName];\n};\n","import { getLogger } from 'jitsi-meet-logger';\nconst logger = getLogger(__filename);\n\nimport JitsiVideoSIPGWSession from './JitsiVideoSIPGWSession';\nimport * as Constants from './VideoSIPGWConstants';\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\n\n/**\n * Main video SIP GW handler. Stores references of all created sessions.\n */\nexport default class VideoSIPGW {\n\n    /**\n     * Creates new handler.\n     *\n     * @param {ChatRoom} chatRoom - Tha chat room to handle.\n     */\n    constructor(chatRoom) {\n        this.chatRoom = chatRoom;\n        this.eventEmitter = chatRoom.eventEmitter;\n        logger.debug('creating VideoSIPGW');\n        this.sessions = {};\n\n        this.sessionStateChangeListener = this.sessionStateChanged.bind(this);\n\n        // VideoSIPGW, JitsiConference and ChatRoom are not reusable and no\n        // more than one VideoSIPGW can be created per JitsiConference,\n        // so we don't bother to cleanup\n        chatRoom.addPresenceListener('jibri-sip-call-state',\n            this.handleJibriSIPState.bind(this));\n    }\n\n    /**\n     * Handles presence nodes with name: jibri-sip-call-state.\n     *\n     * @param {Object} node the presence node Object to handle.\n     * Object representing part of the presence received over xmpp.\n     */\n    handleJibriSIPState(node) {\n        const attributes = node.attributes;\n\n        if (!attributes) {\n            return;\n        }\n\n        logger.debug('Handle video sip gw state : ', attributes);\n\n        const newState = attributes.state;\n\n        if (newState === this.state) {\n            return;\n        }\n\n        switch (newState) {\n        case Constants.STATE_ON:\n        case Constants.STATE_OFF:\n        case Constants.STATE_PENDING:\n        case Constants.STATE_RETRYING:\n        case Constants.STATE_FAILED: {\n            const address = attributes.sipaddress;\n\n            if (!address) {\n                return;\n            }\n\n            // find the corresponding session and set its state\n            const session = this.sessions[address];\n\n            if (session) {\n                session.setState(newState, attributes.failure_reason);\n            } else {\n                logger.warn('Video SIP GW session not found:', address);\n            }\n        }\n        }\n    }\n\n    /**\n     * Creates new session and stores its reference if it does not exist or\n     * returns an error otherwise.\n     *\n     * @param {string} sipAddress - The sip address to use.\n     * @param {string} displayName - The display name to use.\n     * @returns {JitsiVideoSIPGWSession|Error}\n     */\n    createVideoSIPGWSession(sipAddress, displayName) {\n        if (this.sessions[sipAddress]) {\n            logger.warn('There was already a Video SIP GW session for address',\n                sipAddress);\n\n            return new Error(Constants.ERROR_SESSION_EXISTS);\n        }\n\n        const session = new JitsiVideoSIPGWSession(\n            sipAddress, displayName, this.chatRoom);\n\n        session.addStateListener(this.sessionStateChangeListener);\n\n        this.sessions[sipAddress] = session;\n\n        return session;\n    }\n\n    /**\n     * Listener for session state changed. When a session goes to off or failed\n     * we delete its reference.\n     *\n     * @param {options} event - { address, oldState, newState, displayName }\n     */\n    sessionStateChanged(event) {\n        const address = event.address;\n\n        if (event.newState === Constants.STATE_OFF\n            || event.newState === Constants.STATE_FAILED) {\n            const session = this.sessions[address];\n\n            if (!session) {\n                logger.error('Missing Video SIP GW session with address:',\n                    address);\n\n                return;\n            }\n\n            session.removeStateListener(this.sessionStateChangeListener);\n            delete this.sessions[address];\n        }\n\n        this.eventEmitter.emit(\n            XMPPEvents.VIDEO_SIP_GW_SESSION_STATE_CHANGED,\n            event);\n    }\n}\n","import { getLogger } from 'jitsi-meet-logger';\nimport { $iq } from 'strophe.js';\n\nimport Listenable from '../util/Listenable';\n\nimport * as VideoSIPGWConstants from './VideoSIPGWConstants';\n\nconst logger = getLogger(__filename);\n\n/**\n * The event name for current sip video session state changed.\n * @type {string} event name for sip video session state changed.\n */\nconst STATE_CHANGED = 'STATE_CHANGED';\n\n/**\n * Jitsi video SIP GW session. Holding its state and able to start/stop it.\n * When session is in OFF or FAILED stated it cannot be used anymore.\n */\nexport default class JitsiVideoSIPGWSession extends Listenable {\n\n    /**\n     * Creates new session with the desired sip address and display name.\n     *\n     * @param {string} sipAddress - The sip address to use when\n     * starting the session.\n     * @param {string} displayName - The display name to use for\n     * that participant.\n     * @param {ChatRoom} chatRoom - The chat room this session is bound to.\n     */\n    constructor(sipAddress, displayName, chatRoom) {\n        super();\n\n        this.sipAddress = sipAddress;\n        this.displayName = displayName;\n        this.chatRoom = chatRoom;\n\n        /*\n         * The initial state is undefined. Initial state cannot be STATE_OFF,\n         * the session enters this state when it was in STATE_ON and was stopped\n         * and such session cannot be used anymore.\n         *\n         * @type {VideoSIPGWConstants|undefined}\n         */\n        this.state = undefined;\n    }\n\n    /**\n     * Stops the current session.\n     */\n    stop() {\n        if (this.state === VideoSIPGWConstants.STATE_OFF\n            || this.state === VideoSIPGWConstants.STATE_FAILED) {\n            logger.warn('Video SIP GW session already stopped or failed!');\n\n            return;\n        }\n\n        this._sendJibriIQ('stop');\n    }\n\n    /**\n     * Starts a new session. Sends an iq to the focus.\n     */\n    start() {\n        // if state is off, this session was active for some reason\n        // and we should create new one, rather than reusing it\n        if (this.state === VideoSIPGWConstants.STATE_ON\n            || this.state === VideoSIPGWConstants.STATE_OFF\n            || this.state === VideoSIPGWConstants.STATE_PENDING\n            || this.state === VideoSIPGWConstants.STATE_RETRYING) {\n            logger.warn('Video SIP GW session already started!');\n\n            return;\n        }\n\n        this._sendJibriIQ('start');\n    }\n\n    /**\n     * Changes the state of this session.\n     *\n     * @param {string} newState - The new {VideoSIPGWConstants} state to set.\n     * @param {string} [optional] failureReason - The reason why a failure state\n     * was entered.\n     * @returns {void}\n     */\n    setState(newState, failureReason) {\n        if (newState === this.state) {\n            return;\n        }\n\n        const oldState = this.state;\n\n        this.state = newState;\n        this.eventEmitter.emit(STATE_CHANGED,\n            {\n                address: this.sipAddress,\n                failureReason,\n                oldState,\n                newState: this.state,\n                displayName: this.displayName\n            }\n        );\n    }\n\n    /**\n     * Subscribes the passed listener to the event for state change of this\n     * session.\n     *\n     * @param {Function} listener - The function that will receive the event.\n     */\n    addStateListener(listener) {\n        this.addListener(STATE_CHANGED, listener);\n    }\n\n    /**\n     * Unsubscribes the passed handler.\n     *\n     * @param {Function} listener - The function to be removed.\n     */\n    removeStateListener(listener) {\n        this.removeListener(STATE_CHANGED, listener);\n    }\n\n    /**\n     * Sends a jibri command using an iq.\n     *\n     * @private\n     * @param {string} action - The action to send ('start' or 'stop').\n     */\n    _sendJibriIQ(action) {\n        const attributes = {\n            'xmlns': 'http://jitsi.org/protocol/jibri',\n            'action': action,\n            sipaddress: this.sipAddress\n        };\n\n        attributes.displayname = this.displayName;\n\n        const iq = $iq({\n            to: this.chatRoom.focusMucJid,\n            type: 'set' })\n            .c('jibri', attributes)\n            .up();\n\n        logger.debug(`${action} video SIP GW session`, iq.nodeTree);\n        this.chatRoom.connection.sendIQ(\n            iq,\n            () => {}, // eslint-disable-line no-empty-function\n            error => {\n                logger.error(\n                    `Failed to ${action} video SIP GW session, error: `, error);\n                this.setState(VideoSIPGWConstants.STATE_FAILED);\n            });\n    }\n}\n","export default {\n    error: {\n        BUSY: 'busy',\n        ERROR: 'error',\n        RESOURCE_CONSTRAINT: 'resource-constraint',\n        SERVICE_UNAVAILABLE: 'service-unavailable'\n    },\n    mode: {\n        FILE: 'file',\n        STREAM: 'stream'\n    },\n    status: {\n        OFF: 'off',\n        ON: 'on',\n        PENDING: 'pending'\n    }\n};\n","/* globals $ */\n\nimport { getLogger } from 'jitsi-meet-logger';\nimport { $iq } from 'strophe.js';\n\nimport * as MediaType from '../../service/RTC/MediaType';\nimport VideoType from '../../service/RTC/VideoType';\nimport RTC from '../RTC/RTC';\n\nimport ProxyConnectionPC from './ProxyConnectionPC';\nimport { ACTIONS } from './constants';\n\nconst logger = getLogger(__filename);\n\n/**\n * Instantiates a new ProxyConnectionPC and ensures only one exists at a given\n * time. Currently it assumes ProxyConnectionPC is used only for screensharing\n * and assumes IQs to be used for communication.\n */\nexport default class ProxyConnectionService {\n    /**\n     * Initializes a new {@code ProxyConnectionService} instance.\n     *\n     * @param {Object} options - Values to initialize the instance with.\n     * @param {boolean} [options.convertVideoToDesktop] - Whether or not proxied\n     * video should be returned as a desktop stream. Defaults to false.\n     * @param {Object} [options.iceConfig] - The {@code RTCConfiguration} to use\n     * for the peer connection.\n     * @param {JitsiConnection} [options.jitsiConnection] - The\n     * {@code JitsiConnection} which will be used to fetch TURN credentials for\n     * the P2P connection.\n     * @param {Function} options.onRemoteStream - Callback to invoke when a\n     * remote video stream has been received and converted to a\n     * {@code JitsiLocakTrack}. The {@code JitsiLocakTrack} will be passed in.\n     * @param {Function} options.onSendMessage - Callback to invoke when a\n     * message has to be sent (signaled) out. The arguments passed in are the\n     * jid to send the message to and the message\n     */\n    constructor(options = {}) {\n        const {\n            jitsiConnection,\n            ...otherOptions\n        } = options;\n\n        /**\n         * Holds a reference to the collection of all callbacks.\n         *\n         * @type {Object}\n         */\n        this._options = {\n            iceConfig: jitsiConnection\n                && jitsiConnection.xmpp.connection.jingle.p2pIceConfig,\n            ...otherOptions\n        };\n\n        /**\n         * The active instance of {@code ProxyConnectionService}.\n         *\n         * @type {ProxyConnectionPC|null}\n         */\n        this._peerConnection = null;\n\n        // Bind event handlers so they are only bound once for every instance.\n        this._onFatalError = this._onFatalError.bind(this);\n        this._onSendMessage = this._onSendMessage.bind(this);\n        this._onRemoteStream = this._onRemoteStream.bind(this);\n    }\n\n    /**\n     * Parses a message object regarding a proxy connection to create a new\n     * proxy connection or update and existing connection.\n     *\n     * @param {Object} message - A message object regarding establishing or\n     * updating a proxy connection.\n     * @param {Object} message.data - An object containing additional message\n     * details.\n     * @param {string} message.data.iq - The stringified iq which explains how\n     * and what to update regarding the proxy connection.\n     * @param {string} message.from - The message sender's full jid. Used for\n     * sending replies.\n     * @returns {void}\n     */\n    processMessage(message) {\n        const peerJid = message.from;\n\n        if (!peerJid) {\n            return;\n        }\n\n        // If a proxy connection has already been established and messages come\n        // from another peer jid then those messages should be replied to with\n        // a rejection.\n        if (this._peerConnection\n            && this._peerConnection.getPeerJid() !== peerJid) {\n            this._onFatalError(\n                peerJid,\n                ACTIONS.CONNECTION_ERROR,\n                'rejected'\n            );\n\n            return;\n        }\n\n        const iq = this._convertStringToXML(message.data.iq);\n        const $jingle = iq && iq.find('jingle');\n        const action = $jingle && $jingle.attr('action');\n\n        if (action === ACTIONS.INITIATE) {\n            this._peerConnection = this._createPeerConnection(peerJid, {\n                isInitiator: false,\n                receiveVideo: true\n            });\n        }\n\n        // Truthy check for peer connection added to protect against possibly\n        // receiving actions before an ACTIONS.INITIATE.\n        if (this._peerConnection) {\n            this._peerConnection.processMessage($jingle);\n        }\n\n        // Take additional steps to ensure the peer connection is cleaned up\n        // if it is to be closed.\n        if (action === ACTIONS.CONNECTION_ERROR\n            || action === ACTIONS.UNAVAILABLE\n            || action === ACTIONS.TERMINATE) {\n            this._selfCloseConnection();\n        }\n\n        return;\n    }\n\n    /**\n     * Instantiates and initiates a proxy peer connection.\n     *\n     * @param {string} peerJid - The jid of the remote client that should\n     * receive messages.\n     * @param {Array<JitsiLocalTrack>} localTracks - Initial media tracks to\n     * send through to the peer.\n     * @returns {void}\n     */\n    start(peerJid, localTracks = []) {\n        this._peerConnection = this._createPeerConnection(peerJid, {\n            isInitiator: true,\n            receiveVideo: false\n        });\n\n        this._peerConnection.start(localTracks);\n    }\n\n    /**\n     * Terminates any active proxy peer connection.\n     *\n     * @returns {void}\n     */\n    stop() {\n        if (this._peerConnection) {\n            this._peerConnection.stop();\n        }\n\n        this._peerConnection = null;\n    }\n\n    /**\n     * Transforms a stringified xML into a XML wrapped in jQuery.\n     *\n     * @param {string} xml - The XML in string form.\n     * @private\n     * @returns {Object|null} A jQuery version of the xml. Null will be returned\n     * if an error is encountered during transformation.\n     */\n    _convertStringToXML(xml) {\n        try {\n            const xmlDom = new DOMParser().parseFromString(xml, 'text/xml');\n\n            return $(xmlDom);\n        } catch (e) {\n            logger.error('Attempted to convert incorrectly formatted xml');\n\n            return null;\n        }\n    }\n\n    /**\n     * Helper for creating an instance of {@code ProxyConnectionPC}.\n     *\n     * @param {string} peerJid - The jid of the remote peer with which the\n     * {@code ProxyConnectionPC} will be established with.\n     * @param {Object} options - Additional defaults to instantiate the\n     * {@code ProxyConnectionPC} with. See the constructor of ProxyConnectionPC\n     * for more details.\n     * @private\n     * @returns {ProxyConnectionPC}\n     */\n    _createPeerConnection(peerJid, options = {}) {\n        if (!peerJid) {\n            throw new Error('Cannot create ProxyConnectionPC without a peer.');\n        }\n\n        const pcOptions = {\n            iceConfig: this._options.iceConfig,\n            onError: this._onFatalError,\n            onRemoteStream: this._onRemoteStream,\n            onSendMessage: this._onSendMessage,\n            peerJid,\n            ...options\n        };\n\n        return new ProxyConnectionPC(pcOptions);\n    }\n\n    /**\n     * Callback invoked when an error occurs that should cause\n     * {@code ProxyConnectionPC} to be closed if the peer is currently\n     * connected. Sends an error message/reply back to the peer.\n     *\n     * @param {string} peerJid - The peer jid with which the connection was\n     * attempted or started, and to which an iq with error details should be\n     * sent.\n     * @param {string} errorType - The constant indicating the type of the error\n     * that occured.\n     * @param {string} details - Optional additional data about the error.\n     * @private\n     * @returns {void}\n     */\n    _onFatalError(peerJid, errorType, details = '') {\n        logger.error(\n            'Received a proxy connection error', peerJid, errorType, details);\n\n        const iq = $iq({\n            to: peerJid,\n            type: 'set'\n        })\n            .c('jingle', {\n                xmlns: 'urn:xmpp:jingle:1',\n                action: errorType\n            })\n            .c('details')\n            .t(details)\n            .up();\n\n        this._onSendMessage(peerJid, iq);\n\n        if (this._peerConnection\n            && this._peerConnection.getPeerJid() === peerJid) {\n            this._selfCloseConnection();\n        }\n    }\n\n    /**\n     * Callback invoked when the remote peer of the {@code ProxyConnectionPC}\n     * has offered a media stream. The stream is converted into a\n     * {@code JitsiLocalTrack} for local usage if the {@code onRemoteStream}\n     * callback is defined.\n     *\n     * @param {JitsiRemoteTrack} jitsiRemoteTrack - The {@code JitsiRemoteTrack}\n     * for the peer's media stream.\n     * @private\n     * @returns {void}\n     */\n    _onRemoteStream(jitsiRemoteTrack) {\n        if (!this._options.onRemoteStream) {\n            logger.error('Remote track received without callback.');\n            jitsiRemoteTrack.dispose();\n\n            return;\n        }\n\n        const isVideo = jitsiRemoteTrack.isVideoTrack();\n        let videoType;\n\n        if (isVideo) {\n            videoType = this._options.convertVideoToDesktop\n                ? VideoType.DESKTOP : VideoType.CAMERA;\n        }\n\n        // Grab the webrtc media stream and pipe it through the same processing\n        // that would occur for a locally obtained media stream.\n        const mediaStream = jitsiRemoteTrack.getOriginalStream();\n        const jitsiLocalTracks = RTC.newCreateLocalTracks(\n            [\n                {\n                    deviceId:\n                        `proxy:${this._peerConnection.getPeerJid()}`,\n                    mediaType: isVideo ? MediaType.VIDEO : MediaType.AUDIO,\n                    sourceType: 'proxy',\n                    stream: mediaStream,\n                    track: mediaStream.getVideoTracks()[0],\n                    videoType\n                }\n            ]);\n\n        this._options.onRemoteStream(jitsiLocalTracks[0]);\n    }\n\n    /**\n     * Formats and forwards a message an iq to be sent to a peer jid.\n     *\n     * @param {string} peerJid - The jid the iq should be sent to.\n     * @param {Object} iq - The iq which would be sent to the peer jid.\n     * @private\n     * @returns {void}\n     */\n    _onSendMessage(peerJid, iq) {\n        if (!this._options.onSendMessage) {\n            return;\n        }\n\n        try {\n            const stringifiedIq\n                = new XMLSerializer().serializeToString(iq.nodeTree || iq);\n\n            this._options.onSendMessage(peerJid, { iq: stringifiedIq });\n        } catch (e) {\n            logger.error('Attempted to send an incorrectly formatted iq.');\n        }\n    }\n\n    /**\n     * Invoked when preemptively closing the {@code ProxyConnectionPC}.\n     *\n     * @private\n     * @returns {void}\n     */\n    _selfCloseConnection() {\n        this.stop();\n\n        this._options.onConnectionClosed\n            && this._options.onConnectionClosed();\n    }\n}\n","import { getLogger } from 'jitsi-meet-logger';\n\nimport RTC from '../RTC/RTC';\nimport RTCEvents from '../../service/RTC/RTCEvents';\nimport XMPPEvents from '../../service/xmpp/XMPPEvents';\n\nimport JingleSessionPC from '../xmpp/JingleSessionPC';\nimport { DEFAULT_STUN_SERVERS } from '../xmpp/xmpp';\n\nimport { ACTIONS } from './constants';\n\nconst logger = getLogger(__filename);\n\n/**\n * An adapter around {@code JingleSessionPC} so its logic can be re-used without\n * an XMPP connection. It is being re-used for consistency with the rest of the\n * codebase and to leverage existing peer connection event handling. Also\n * this class provides a facade to hide most of the API for\n * {@code JingleSessionPC}.\n */\nexport default class ProxyConnectionPC {\n    /**\n     * Initializes a new {@code ProxyConnectionPC} instance.\n     *\n     * @param {Object} options - Values to initialize the instance with.\n     * @param {Object} [options.iceConfig] - The {@code RTCConfiguration} to use\n     * for the peer connection.\n     * @param {boolean} [options.isInitiator] - If true, the local client should\n     * send offers. If false, the local client should send answers. Defaults to\n     * false.\n     * @param {Function} options.onRemoteStream - Callback to invoke when a\n     * remote media stream has been received through the peer connection.\n     * @param {string} options.peerJid - The jid of the remote client with which\n     * the peer connection is being establish and which should receive direct\n     * messages regarding peer connection updates.\n     * @param {boolean} [options.receiveVideo] - Whether or not the peer\n     * connection should accept incoming video streams. Defaults to false.\n     * @param {Function} options.onSendMessage - Callback to invoke when a\n     * message has to be sent (signaled) out.\n     */\n    constructor(options = {}) {\n        this._options = {\n            iceConfig: {},\n            isInitiator: false,\n            receiveAudio: false,\n            receiveVideo: false,\n            ...options\n        };\n\n        /**\n         * Instances of {@code JitsiTrack} associated with this instance of\n         * {@code ProxyConnectionPC}.\n         *\n         * @type {Array<JitsiTrack>}\n         */\n        this._tracks = [];\n\n        /**\n         * The active instance of {@code JingleSessionPC}.\n         *\n         * @type {JingleSessionPC|null}\n         */\n        this._peerConnection = null;\n\n        // Bind event handlers so they are only bound once for every instance.\n        this._onError = this._onError.bind(this);\n        this._onRemoteStream = this._onRemoteStream.bind(this);\n        this._onSendMessage = this._onSendMessage.bind(this);\n    }\n\n    /**\n     * Returns the jid of the remote peer with which this peer connection should\n     * be established with.\n     *\n     * @returns {string}\n     */\n    getPeerJid() {\n        return this._options.peerJid;\n    }\n\n    /**\n     * Updates the peer connection based on the passed in jingle.\n     *\n     * @param {Object} $jingle - An XML jingle element, wrapped in query,\n     * describing how the peer connection should be updated.\n     * @returns {void}\n     */\n    processMessage($jingle) {\n        switch ($jingle.attr('action')) {\n        case ACTIONS.ACCEPT:\n            this._onSessionAccept($jingle);\n            break;\n\n        case ACTIONS.INITIATE:\n            this._onSessionInitiate($jingle);\n            break;\n\n        case ACTIONS.TERMINATE:\n            this._onSessionTerminate($jingle);\n            break;\n\n        case ACTIONS.TRANSPORT_INFO:\n            this._onTransportInfo($jingle);\n            break;\n        }\n    }\n\n    /**\n     * Instantiates a peer connection and starts the offer/answer cycle to\n     * establish a connection with a remote peer.\n     *\n     * @param {Array<JitsiLocalTrack>} localTracks - Initial local tracks to add\n     * to add to the peer connection.\n     * @returns {void}\n     */\n    start(localTracks = []) {\n        if (this._peerConnection) {\n            return;\n        }\n\n        this._tracks = this._tracks.concat(localTracks);\n\n        this._peerConnection = this._createPeerConnection();\n\n        this._peerConnection.invite(localTracks);\n    }\n\n    /**\n     * Begins the process of disconnecting from a remote peer and cleaning up\n     * the peer connection.\n     *\n     * @returns {void}\n     */\n    stop() {\n        if (this._peerConnection) {\n            this._peerConnection.terminate();\n        }\n\n        this._onSessionTerminate();\n    }\n\n    /**\n     * Instantiates a new {@code JingleSessionPC} by stubbing out the various\n     * dependencies of {@code JingleSessionPC}.\n     *\n     * @private\n     * @returns {JingleSessionPC}\n     */\n    _createPeerConnection() {\n        /**\n         * {@code JingleSessionPC} takes in the entire jitsi-meet config.js\n         * object, which may not be accessible from the caller.\n         *\n         * @type {Object}\n         */\n        const configStub = {};\n\n        /**\n         * {@code JingleSessionPC} assumes an XMPP/Strophe connection object is\n         * passed through, which also has the jingle plugin initialized on it.\n         * This connection object is used to signal out peer connection updates\n         * via iqs, and those updates need to be piped back out to the remote\n         * peer.\n         *\n         * @type {Object}\n         */\n        const connectionStub = {\n            jingle: {\n                terminate: () => { /** no-op */ }\n            },\n            sendIQ: this._onSendMessage\n        };\n\n        /**\n         * {@code JingleSessionPC} can take in a custom ice configuration,\n         * depending on the peer connection type, peer-to-peer or other.\n         * However, {@code ProxyConnectionPC} always assume a peer-to-peer\n         * connection so the ice configuration is hard-coded with defaults.\n         *\n         * @type {Object}\n         */\n        const iceConfigStub = {\n            iceServers: DEFAULT_STUN_SERVERS,\n            ...this._options.iceConfig\n        };\n\n        /**\n         * {@code JingleSessionPC} expects an instance of\n         * {@code JitsiConference}, which has an event emitter that is used\n         * to signal various connection updates that the local client should\n         * act upon. The conference instance is not a dependency of a proxy\n         * connection, but the emitted events can be relevant to the proxy\n         * connection so the event emitter is stubbed.\n         *\n         * @param {string} event - The constant for the event type.\n         * @type {Function}\n         * @returns {void}\n         */\n        const emitter = event => {\n            switch (event) {\n            case XMPPEvents.CONNECTION_ICE_FAILED:\n            case XMPPEvents.CONNECTION_FAILED:\n                this._onError(ACTIONS.CONNECTION_ERROR, event);\n                break;\n            }\n        };\n\n        /**\n         * {@code JingleSessionPC} expects an instance of\n         * {@code JitsiConference} to be passed in. {@code ProxyConnectionPC}\n         * is instantiated outside of the {@code JitsiConference}, so it must be\n         * stubbed to prevent errors.\n         *\n         * @type {Object}\n         */\n        const roomStub = {\n            addPresenceListener: () => { /** no-op */ },\n            connectionTimes: [],\n            eventEmitter: { emit: emitter },\n            getMediaPresenceInfo: () => {\n                // Errors occur if this function does not return an object\n\n                return {};\n            },\n            removePresenceListener: () => { /** no-op */ }\n        };\n\n        /**\n         * Create an instance of {@code RTC} as it is required for peer\n         * connection creation by {@code JingleSessionPC}. An existing instance\n         * of {@code RTC} from elsewhere should not be re-used because it is\n         * a stateful grouping of utilities.\n         */\n        this._rtc = new RTC(this, {});\n\n        /**\n         * Add the remote track listener here as {@code JingleSessionPC} has\n         * {@code TraceablePeerConnection} which uses {@code RTC}'s event\n         * emitter.\n         */\n        this._rtc.addListener(\n            RTCEvents.REMOTE_TRACK_ADDED,\n            this._onRemoteStream\n        );\n\n        const peerConnection = new JingleSessionPC(\n            undefined, // sid\n            undefined, // localJid\n            this._options.peerJid, // remoteJid\n            connectionStub, // connection\n            {\n                offerToReceiveAudio: this._options.receiveAudio,\n                offerToReceiveVideo: this._options.receiveVideo\n            }, // mediaConstraints\n            iceConfigStub, // iceConfig\n            true, // isP2P\n            this._options.isInitiator // isInitiator\n        );\n\n        /**\n         * An additional initialize call is necessary to properly set instance\n         * variable for calling.\n         */\n        peerConnection.initialize(roomStub, this._rtc, configStub);\n\n        return peerConnection;\n    }\n\n    /**\n     * Invoked when a connection related issue has been encountered.\n     *\n     * @param {string} errorType - The constant indicating the type of the error\n     * that occured.\n     * @param {string} details - Optional additional data about the error.\n     * @private\n     * @returns {void}\n     */\n    _onError(errorType, details = '') {\n        this._options.onError(this._options.peerJid, errorType, details);\n    }\n\n    /**\n     * Callback invoked when the peer connection has received a remote media\n     * stream.\n     *\n     * @param {JitsiRemoteTrack} jitsiRemoteTrack - The remote media stream\n     * wrapped in {@code JitsiRemoteTrack}.\n     * @private\n     * @returns {void}\n     */\n    _onRemoteStream(jitsiRemoteTrack) {\n        this._tracks.push(jitsiRemoteTrack);\n\n        this._options.onRemoteStream(jitsiRemoteTrack);\n    }\n\n    /**\n     * Callback invoked when {@code JingleSessionPC} needs to signal a message\n     * out to the remote peer.\n     *\n     * @param {XML} iq - The message to signal out.\n     * @private\n     * @returns {void}\n     */\n    _onSendMessage(iq) {\n        this._options.onSendMessage(this._options.peerJid, iq);\n    }\n\n    /**\n     * Callback invoked in response to an agreement to start a proxy connection.\n     * The passed in jingle element should contain an SDP answer to a previously\n     * sent SDP offer.\n     *\n     * @param {Object} $jingle - The jingle element wrapped in jQuery.\n     * @private\n     * @returns {void}\n     */\n    _onSessionAccept($jingle) {\n        if (!this._peerConnection) {\n            logger.error('Received an answer when no peer connection exists.');\n\n            return;\n        }\n\n        this._peerConnection.setAnswer($jingle);\n    }\n\n    /**\n     * Callback invoked in response to a request to start a proxy connection.\n     * The passed in jingle element should contain an SDP offer.\n     *\n     * @param {Object} $jingle - The jingle element wrapped in jQuery.\n     * @private\n     * @returns {void}\n     */\n    _onSessionInitiate($jingle) {\n        if (this._peerConnection) {\n            logger.error('Received an offer when an offer was already sent.');\n\n            return;\n        }\n\n        this._peerConnection = this._createPeerConnection();\n\n        this._peerConnection.acceptOffer(\n            $jingle,\n            () => { /** no-op */ },\n            () => this._onError(\n                this._options.peerJid,\n                ACTIONS.CONNECTION_ERROR,\n                'session initiate error'\n            )\n        );\n    }\n\n    /**\n     * Callback invoked in response to a request to disconnect an active proxy\n     * connection. Cleans up tracks and the peer connection.\n     *\n     * @private\n     * @returns {void}\n     */\n    _onSessionTerminate() {\n        this._tracks.forEach(track => track.dispose());\n        this._tracks = [];\n\n        if (this._peerConnection) {\n            this._peerConnection.onTerminated();\n        }\n\n        if (this._rtc) {\n            this._rtc.removeListener(\n                RTCEvents.REMOTE_TRACK_ADDED,\n                this._onRemoteStream\n            );\n\n            this._rtc.destroy();\n        }\n    }\n\n    /**\n     * Callback invoked in response to ICE candidates from the remote peer.\n     * The passed in jingle element should contain an ICE candidate.\n     *\n     * @param {Object} $jingle - The jingle element wrapped in jQuery.\n     * @private\n     * @returns {void}\n     */\n    _onTransportInfo($jingle) {\n        this._peerConnection.addIceCandidates($jingle);\n    }\n}\n","// For legacy purposes, preserve the UMD of the public API of the Jitsi Meet\n// library (a.k.a. JitsiMeetJS).\nmodule.exports = require('./JitsiMeetJS').default;\n","/* global __filename */\n\nimport { createGetUserMediaEvent } from './service/statistics/AnalyticsEvents';\nimport AuthUtil from './modules/util/AuthUtil';\nimport * as ConnectionQualityEvents\n    from './service/connectivity/ConnectionQualityEvents';\nimport * as E2ePingEvents from './service/e2eping/E2ePingEvents';\nimport GlobalOnErrorHandler from './modules/util/GlobalOnErrorHandler';\nimport * as JitsiConferenceErrors from './JitsiConferenceErrors';\nimport * as JitsiConferenceEvents from './JitsiConferenceEvents';\nimport JitsiConnection from './JitsiConnection';\nimport * as JitsiConnectionErrors from './JitsiConnectionErrors';\nimport * as JitsiConnectionEvents from './JitsiConnectionEvents';\nimport JitsiMediaDevices from './JitsiMediaDevices';\nimport * as JitsiMediaDevicesEvents from './JitsiMediaDevicesEvents';\nimport JitsiTrackError from './JitsiTrackError';\nimport * as JitsiTrackErrors from './JitsiTrackErrors';\nimport * as JitsiTrackEvents from './JitsiTrackEvents';\nimport * as JitsiTranscriptionStatus from './JitsiTranscriptionStatus';\nimport LocalStatsCollector from './modules/statistics/LocalStatsCollector';\nimport Logger from 'jitsi-meet-logger';\nimport * as MediaType from './service/RTC/MediaType';\nimport Resolutions from './service/RTC/Resolutions';\nimport { ParticipantConnectionStatus }\n    from './modules/connectivity/ParticipantConnectionStatus';\nimport RTC from './modules/RTC/RTC';\nimport browser from './modules/browser';\nimport ScriptUtil from './modules/util/ScriptUtil';\nimport recordingConstants from './modules/recording/recordingConstants';\nimport ProxyConnectionService\n    from './modules/proxyconnection/ProxyConnectionService';\nimport Statistics from './modules/statistics/statistics';\nimport * as VideoSIPGWConstants from './modules/videosipgw/VideoSIPGWConstants';\n\nconst logger = Logger.getLogger(__filename);\n\n/**\n * The amount of time to wait until firing\n * {@link JitsiMediaDevicesEvents.PERMISSION_PROMPT_IS_SHOWN} event.\n */\nconst USER_MEDIA_PERMISSION_PROMPT_TIMEOUT = 1000;\n\n/**\n * Gets the next lowest desirable resolution to try for a camera. If the given\n * resolution is already the lowest acceptable resolution, returns {@code null}.\n *\n * @param resolution the current resolution\n * @return the next lowest resolution from the given one, or {@code null} if it\n * is already the lowest acceptable resolution.\n */\nfunction getLowerResolution(resolution) {\n    if (!Resolutions[resolution]) {\n        return null;\n    }\n    const order = Resolutions[resolution].order;\n    let res = null;\n    let resName = null;\n\n    Object.keys(Resolutions).forEach(r => {\n        const value = Resolutions[r];\n\n        if (!res || (res.order < value.order && value.order < order)) {\n            resName = r;\n            res = value;\n        }\n    });\n\n    if (resName === resolution) {\n        resName = null;\n    }\n\n    return resName;\n}\n\n/**\n * Extracts from an 'options' objects with a specific format (TODO what IS the\n * format?) the attributes which are to be logged in analytics events.\n *\n * @param options gum options (???)\n * @returns {*} the attributes to attach to analytics events.\n */\nfunction getAnalyticsAttributesFromOptions(options) {\n    const attributes = {\n        'audio_requested':\n            options.devices.includes('audio'),\n        'video_requested':\n            options.devices.includes('video'),\n        'screen_sharing_requested':\n            options.devices.includes('desktop')\n    };\n\n    if (attributes.video_requested) {\n        attributes.resolution = options.resolution;\n    }\n\n    return attributes;\n}\n\n/**\n * Tries to deal with the following problem: {@code JitsiMeetJS} is not only\n * this module, it's also a global (i.e. attached to {@code window}) namespace\n * for all globals of the projects in the Jitsi Meet family. If lib-jitsi-meet\n * is loaded through an HTML {@code script} tag, {@code JitsiMeetJS} will\n * automatically be attached to {@code window} by webpack. Unfortunately,\n * webpack's source code does not check whether the global variable has already\n * been assigned and overwrites it. Which is OK for the module\n * {@code JitsiMeetJS} but is not OK for the namespace {@code JitsiMeetJS}\n * because it may already contain the values of other projects in the Jitsi Meet\n * family. The solution offered here works around webpack by merging all\n * existing values of the namespace {@code JitsiMeetJS} into the module\n * {@code JitsiMeetJS}.\n *\n * @param {Object} module - The module {@code JitsiMeetJS} (which will be\n * exported and may be attached to {@code window} by webpack later on).\n * @private\n * @returns {Object} - A {@code JitsiMeetJS} module which contains all existing\n * value of the namespace {@code JitsiMeetJS} (if any).\n */\nfunction _mergeNamespaceAndModule(module) {\n    return (\n        typeof window.JitsiMeetJS === 'object'\n            ? Object.assign({}, window.JitsiMeetJS, module)\n            : module);\n}\n\n/**\n * The public API of the Jitsi Meet library (a.k.a. {@code JitsiMeetJS}).\n */\nexport default _mergeNamespaceAndModule({\n\n    version: '{#COMMIT_HASH#}',\n\n    JitsiConnection,\n\n    /**\n     * {@code ProxyConnectionService} is used to connect a remote peer to a\n     * local Jitsi participant without going through a Jitsi conference. It is\n     * currently used for room integration development, specifically wireless\n     * screensharing. Its API is experimental and will likely change; usage of\n     * it is advised against.\n     */\n    ProxyConnectionService,\n\n    constants: {\n        participantConnectionStatus: ParticipantConnectionStatus,\n        recording: recordingConstants,\n        sipVideoGW: VideoSIPGWConstants,\n        transcriptionStatus: JitsiTranscriptionStatus\n    },\n    events: {\n        conference: JitsiConferenceEvents,\n        connection: JitsiConnectionEvents,\n        track: JitsiTrackEvents,\n        mediaDevices: JitsiMediaDevicesEvents,\n        connectionQuality: ConnectionQualityEvents,\n        e2eping: E2ePingEvents\n    },\n    errors: {\n        conference: JitsiConferenceErrors,\n        connection: JitsiConnectionErrors,\n        track: JitsiTrackErrors\n    },\n    errorTypes: {\n        JitsiTrackError\n    },\n    logLevels: Logger.levels,\n    mediaDevices: JitsiMediaDevices,\n    analytics: Statistics.analytics,\n    init(options = {}) {\n        Statistics.init(options);\n\n        // Initialize global window.connectionTimes\n        // FIXME do not use 'window'\n        if (!window.connectionTimes) {\n            window.connectionTimes = {};\n        }\n\n        if (options.enableAnalyticsLogging !== true) {\n            logger.warn('Analytics disabled, disposing.');\n            this.analytics.dispose();\n        }\n\n        if (options.enableWindowOnErrorHandler) {\n            GlobalOnErrorHandler.addHandler(\n                this.getGlobalOnErrorHandler.bind(this));\n        }\n\n        // Log deployment-specific information, if available. Defined outside\n        // the application by individual deployments\n        const aprops = options.deploymentInfo;\n\n        if (aprops && Object.keys(aprops).length > 0) {\n            const logObject = {};\n\n            for (const attr in aprops) {\n                if (aprops.hasOwnProperty(attr)) {\n                    logObject[attr] = aprops[attr];\n                }\n            }\n\n            logObject.id = 'deployment_info';\n            Statistics.sendLog(JSON.stringify(logObject));\n        }\n\n        if (this.version) {\n            const logObject = {\n                id: 'component_version',\n                component: 'lib-jitsi-meet',\n                version: this.version\n            };\n\n            Statistics.sendLog(JSON.stringify(logObject));\n        }\n\n        return RTC.init(options);\n    },\n\n    /**\n     * Returns whether the desktop sharing is enabled or not.\n     *\n     * @returns {boolean}\n     */\n    isDesktopSharingEnabled() {\n        return RTC.isDesktopSharingEnabled();\n    },\n\n    /**\n     * Returns whether the current execution environment supports WebRTC (for\n     * use within this library).\n     *\n     * @returns {boolean} {@code true} if WebRTC is supported in the current\n     * execution environment (for use within this library); {@code false},\n     * otherwise.\n     */\n    isWebRtcSupported() {\n        return RTC.isWebRtcSupported();\n    },\n\n    setLogLevel(level) {\n        Logger.setLogLevel(level);\n    },\n\n    /**\n     * Sets the log level to the <tt>Logger</tt> instance with given id.\n     *\n     * @param {Logger.levels} level the logging level to be set\n     * @param {string} id the logger id to which new logging level will be set.\n     * Usually it's the name of the JavaScript source file including the path\n     * ex. \"modules/xmpp/ChatRoom.js\"\n     */\n    setLogLevelById(level, id) {\n        Logger.setLogLevelById(level, id);\n    },\n\n    /**\n     * Registers new global logger transport to the library logging framework.\n     *\n     * @param globalTransport\n     * @see Logger.addGlobalTransport\n     */\n    addGlobalLogTransport(globalTransport) {\n        Logger.addGlobalTransport(globalTransport);\n    },\n\n    /**\n     * Removes global logging transport from the library logging framework.\n     *\n     * @param globalTransport\n     * @see Logger.removeGlobalTransport\n     */\n    removeGlobalLogTransport(globalTransport) {\n        Logger.removeGlobalTransport(globalTransport);\n    },\n\n    /**\n    * Sets global options which will be used by all loggers. Changing these\n    * works even after other loggers are created.\n    *\n    * @param options\n    * @see Logger.setGlobalOptions\n    */\n    setGlobalLogOptions(options) {\n        Logger.setGlobalOptions(options);\n    },\n\n    /**\n     * Creates the media tracks and returns them trough the callback.\n     *\n     * @param options Object with properties / settings specifying the tracks\n     * which should be created. should be created or some additional\n     * configurations about resolution for example.\n     * @param {Array} options.effects optional effects array for the track\n     * @param {Array} options.devices the devices that will be requested\n     * @param {string} options.resolution resolution constraints\n     * @param {string} options.cameraDeviceId\n     * @param {string} options.micDeviceId\n     * @param {object} options.desktopSharingExtensionExternalInstallation -\n     * enables external installation process for desktop sharing extension if\n     * the inline installation is not posible. The following properties should\n     * be provided:\n     * @param {intiger} interval - the interval (in ms) for\n     * checking whether the desktop sharing extension is installed or not\n     * @param {Function} checkAgain - returns boolean. While checkAgain()==true\n     * createLocalTracks will wait and check on every \"interval\" ms for the\n     * extension. If the desktop extension is not install and checkAgain()==true\n     * createLocalTracks will finish with rejected Promise.\n     * @param {Function} listener - The listener will be called to notify the\n     * user of lib-jitsi-meet that createLocalTracks is starting external\n     * extension installation process.\n     * NOTE: If the inline installation process is not possible and external\n     * installation is enabled the listener property will be called to notify\n     * the start of external installation process. After that createLocalTracks\n     * will start to check for the extension on every interval ms until the\n     * plugin is installed or until checkAgain return false. If the extension\n     * is found createLocalTracks will try to get the desktop sharing track and\n     * will finish the execution. If checkAgain returns false, createLocalTracks\n     * will finish the execution with rejected Promise.\n     *\n     * @param {boolean} (firePermissionPromptIsShownEvent) - if event\n     * JitsiMediaDevicesEvents.PERMISSION_PROMPT_IS_SHOWN should be fired\n     * @param originalOptions - internal use only, to be able to store the\n     * originally requested options.\n     * @returns {Promise.<{Array.<JitsiTrack>}, JitsiConferenceError>} A promise\n     * that returns an array of created JitsiTracks if resolved, or a\n     * JitsiConferenceError if rejected.\n     */\n    createLocalTracks(\n            options = {}, firePermissionPromptIsShownEvent, originalOptions) {\n        let promiseFulfilled = false;\n\n        if (firePermissionPromptIsShownEvent === true) {\n            window.setTimeout(() => {\n                if (!promiseFulfilled) {\n                    JitsiMediaDevices.emitEvent(\n                        JitsiMediaDevicesEvents.PERMISSION_PROMPT_IS_SHOWN,\n                        browser.getName());\n                }\n            }, USER_MEDIA_PERMISSION_PROMPT_TIMEOUT);\n        }\n\n        if (!window.connectionTimes) {\n            window.connectionTimes = {};\n        }\n        window.connectionTimes['obtainPermissions.start']\n            = window.performance.now();\n\n        return RTC.obtainAudioAndVideoPermissions(options)\n            .then(tracks => {\n                promiseFulfilled = true;\n\n                window.connectionTimes['obtainPermissions.end']\n                    = window.performance.now();\n\n                Statistics.sendAnalytics(\n                    createGetUserMediaEvent(\n                        'success',\n                        getAnalyticsAttributesFromOptions(options)));\n\n                if (!RTC.options.disableAudioLevels) {\n                    for (let i = 0; i < tracks.length; i++) {\n                        const track = tracks[i];\n                        const mStream = track.getOriginalStream();\n\n                        if (track.getType() === MediaType.AUDIO) {\n                            Statistics.startLocalStats(mStream,\n                                track.setAudioLevel.bind(track));\n                            track.addEventListener(\n                                JitsiTrackEvents.LOCAL_TRACK_STOPPED,\n                                () => {\n                                    Statistics.stopLocalStats(mStream);\n                                });\n                        }\n                    }\n                }\n\n                // set real device ids\n                const currentlyAvailableMediaDevices\n                    = RTC.getCurrentlyAvailableMediaDevices();\n\n                if (currentlyAvailableMediaDevices) {\n                    for (let i = 0; i < tracks.length; i++) {\n                        const track = tracks[i];\n\n                        track._setRealDeviceIdFromDeviceList(\n                            currentlyAvailableMediaDevices);\n                    }\n                }\n\n                return tracks;\n            })\n            .catch(error => {\n                promiseFulfilled = true;\n\n                if (error.name === JitsiTrackErrors.UNSUPPORTED_RESOLUTION\n                    && !browser.usesNewGumFlow()) {\n                    const oldResolution = options.resolution || '720';\n                    const newResolution = getLowerResolution(oldResolution);\n\n                    if (newResolution !== null) {\n                        options.resolution = newResolution;\n\n                        logger.debug(\n                            'Retry createLocalTracks with resolution',\n                            newResolution);\n\n                        Statistics.sendAnalytics(createGetUserMediaEvent(\n                            'warning',\n                            {\n                                'old_resolution': oldResolution,\n                                'new_resolution': newResolution,\n                                reason: 'unsupported resolution'\n                            }));\n\n                        return this.createLocalTracks(\n                            options,\n                            undefined,\n                            originalOptions || Object.assign({}, options));\n                    }\n\n                    // We tried everything. If there is a mandatory device id,\n                    // remove it and let gum find a device to use.\n                    if (originalOptions\n                        && error.gum.constraints\n                        && error.gum.constraints.video\n                        && error.gum.constraints.video.mandatory\n                        && error.gum.constraints.video.mandatory.sourceId) {\n                        originalOptions.cameraDeviceId = undefined;\n\n                        return this.createLocalTracks(originalOptions);\n                    }\n                }\n\n                if (error.name\n                        === JitsiTrackErrors.CHROME_EXTENSION_USER_CANCELED) {\n                    // User cancelled action is not really an error, so only\n                    // log it as an event to avoid having conference classified\n                    // as partially failed\n                    const logObject = {\n                        id: 'chrome_extension_user_canceled',\n                        message: error.message\n                    };\n\n                    Statistics.sendLog(JSON.stringify(logObject));\n\n                    Statistics.sendAnalytics(\n                        createGetUserMediaEvent(\n                            'warning',\n                            {\n                                reason: 'extension install user canceled'\n                            }));\n                } else if (error.name === JitsiTrackErrors.NOT_FOUND) {\n                    // logs not found devices with just application log to cs\n                    const logObject = {\n                        id: 'usermedia_missing_device',\n                        status: error.gum.devices\n                    };\n\n                    Statistics.sendLog(JSON.stringify(logObject));\n\n                    const attributes\n                        = getAnalyticsAttributesFromOptions(options);\n\n                    attributes.reason = 'device not found';\n                    attributes.devices = error.gum.devices.join('.');\n                    Statistics.sendAnalytics(\n                        createGetUserMediaEvent('error', attributes));\n                } else {\n                    // Report gUM failed to the stats\n                    Statistics.sendGetUserMediaFailed(error);\n\n                    const attributes\n                        = getAnalyticsAttributesFromOptions(options);\n\n                    attributes.reason = error.name;\n                    Statistics.sendAnalytics(\n                        createGetUserMediaEvent('error', attributes));\n                }\n\n                window.connectionTimes['obtainPermissions.end']\n                    = window.performance.now();\n\n                return Promise.reject(error);\n            });\n    },\n\n    /**\n     * Checks if its possible to enumerate available cameras/microphones.\n     *\n     * @returns {Promise<boolean>} a Promise which will be resolved only once\n     * the WebRTC stack is ready, either with true if the device listing is\n     * available available or with false otherwise.\n     * @deprecated use JitsiMeetJS.mediaDevices.isDeviceListAvailable instead\n     */\n    isDeviceListAvailable() {\n        logger.warn('This method is deprecated, use '\n            + 'JitsiMeetJS.mediaDevices.isDeviceListAvailable instead');\n\n        return this.mediaDevices.isDeviceListAvailable();\n    },\n\n    /**\n     * Returns true if changing the input (camera / microphone) or output\n     * (audio) device is supported and false if not.\n     *\n     * @param {string} [deviceType] - type of device to change. Default is\n     * {@code undefined} or 'input', 'output' - for audio output device change.\n     * @returns {boolean} {@code true} if available; {@code false}, otherwise.\n     * @deprecated use JitsiMeetJS.mediaDevices.isDeviceChangeAvailable instead\n     */\n    isDeviceChangeAvailable(deviceType) {\n        logger.warn('This method is deprecated, use '\n            + 'JitsiMeetJS.mediaDevices.isDeviceChangeAvailable instead');\n\n        return this.mediaDevices.isDeviceChangeAvailable(deviceType);\n    },\n\n\n    /**\n     * Checks if the current environment supports having multiple audio\n     * input devices in use simultaneously.\n     *\n     * @returns {boolean} True if multiple audio input devices can be used.\n     */\n    isMultipleAudioInputSupported() {\n        return this.mediaDevices.isMultipleAudioInputSupported();\n    },\n\n    /**\n     * Checks if local tracks can collect stats and collection is enabled.\n     *\n     * @param {boolean} True if stats are being collected for local tracks.\n     */\n    isCollectingLocalStats() {\n        return Statistics.audioLevelsEnabled\n            && LocalStatsCollector.isLocalStatsSupported();\n    },\n\n    /**\n     * Executes callback with list of media devices connected.\n     *\n     * @param {function} callback\n     * @deprecated use JitsiMeetJS.mediaDevices.enumerateDevices instead\n     */\n    enumerateDevices(callback) {\n        logger.warn('This method is deprecated, use '\n            + 'JitsiMeetJS.mediaDevices.enumerateDevices instead');\n        this.mediaDevices.enumerateDevices(callback);\n    },\n\n    /* eslint-disable max-params */\n\n    /**\n     * @returns function that can be used to be attached to window.onerror and\n     * if options.enableWindowOnErrorHandler is enabled returns\n     * the function used by the lib.\n     * (function(message, source, lineno, colno, error)).\n     */\n    getGlobalOnErrorHandler(message, source, lineno, colno, error) {\n        logger.error(\n            `UnhandledError: ${message}`,\n            `Script: ${source}`,\n            `Line: ${lineno}`,\n            `Column: ${colno}`,\n            'StackTrace: ', error);\n        Statistics.reportGlobalError(error);\n    },\n\n    /* eslint-enable max-params */\n\n    /**\n     * Represents a hub/namespace for utility functionality which may be of\n     * interest to lib-jitsi-meet clients.\n     */\n    util: {\n        AuthUtil,\n        ScriptUtil,\n        browser\n    }\n});\n","/* Copyright @ 2016-present 8x8, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar Logger = require('./Logger.js');\n\n/**\n * Creates new <tt>LogCollector</tt>. Class implements <tt>LoggerTransport</tt>\n * and thus can be added as global transport in order to capture all the logs.\n *\n * It captures subsequent log lines created whenever <tt>Logger</tt> logs\n * a message and stores them in a queue in order to batch log entries. There are\n * time and size limit constraints which determine how often batch entries are\n * stored. Whenever one of these limits is exceeded the <tt>LogCollector</tt>\n * will use the <tt>logStorage</tt> object given as an argument to save\n * the batch log entry.\n *\n * @param {Object} logStorage an object which allows to store the logs collected\n * @param {function(string|object[])} logStorage.storeLogs a method called when\n * this <tt>LogCollector</tt> requests log entry storage. The method's argument\n * is an array which can contain <tt>string</tt>s and <tt>object</tt>s. If given\n * item is an object it means that it's an aggregated message. That is a message\n * which is the same as the previous one and it's representation has\n * the following format:\n * {\n *   {string} text: 'the text of some duplicated message'\n *   {number} count: 3 // how many times the message appeared in a row\n * }\n * If a message \"B\" after an aggregated message \"A\" is different, then it breaks\n * the sequence of \"A\". Which means that even if the next message \"C\" is\n * the same as \"A\" it will start a new aggregated message \"C\".\n * @param {function()} logStorage.isReady a method which should return\n * a <tt>boolean</tt> to tell the collector that it's ready to store. During the\n * time storage is not ready log batches will be cached and stored on the next\n * occasion (flush or interval timeout).\n *\n * @param {Object} options the <tt>LogCollector</tt> configuration options.\n * @param {number} options.maxEntryLength the size limit for a single log entry\n * to be stored. The <tt>LogCollector</tt> will push the entry as soon as it\n * reaches or exceeds this limit given that <tt>logStorage.isReady</tt>\n * returns <tt>true</tt>. Otherwise the log entry will be cached until the log\n * storage becomes ready. Note that the \"is ready\" condition is checked every\n * <tt>options.storeInterval</tt> milliseconds.\n * @param {number} options.storeInterval how often the logs should be stored in\n * case <tt>maxEntryLength</tt> was not exceeded.\n * @param {boolean} options.stringifyObjects indicates whether or not object\n * arguments should be \"stringified\" with <tt>JSON.stringify</tt> when a log\n * message is composed. Note that objects logged on the error log level are\n * always stringified.\n *\n * @constructor\n */\nfunction LogCollector(logStorage, options) {\n    this.logStorage = logStorage;\n    this.stringifyObjects\n        = options && options.stringifyObjects\n            ? options.stringifyObjects : false;\n    this.storeInterval\n        = options && options.storeInterval\n            ? options.storeInterval: 30000;\n    this.maxEntryLength\n        = options && options.maxEntryLength\n            ? options.maxEntryLength : 10000;\n    // Bind the log method for each level to the corresponding method name\n    // in order to implement \"global log transport\" object.\n    Object.keys(Logger.levels).forEach(\n    function (logLevel) {\n        var methodName = Logger.levels[logLevel];\n        this[methodName] = function (logLevel) {\n            this._log.apply(this, arguments);\n        }.bind(this, logLevel);\n    }.bind(this));\n    /**\n     * The ID of store logs interval if one is currently scheduled or\n     * <tt>null</tt> otherwise.\n     * @type {number|null}\n     */\n    this.storeLogsIntervalID = null;\n    /**\n     * The log messages that are to be batched into log entry when\n     * {@link LogCollector._flush} method is called.\n     * @type {string[]}\n     */\n    this.queue = [];\n    /**\n     * The total length of all messages currently stored in the {@link queue}.\n     * @type {number}\n     */\n    this.totalLen = 0;\n    /**\n     * An array used to temporarily store log batches, before the storage gets\n     * ready.\n     * @type {string[]}\n     */\n    this.outputCache = [];\n}\n\n/**\n * Method called inside of {@link formatLogMessage} in order to covert an\n * <tt>Object</tt> argument to string. The conversion will happen when either\n * 'stringifyObjects' option is enabled or on the {@link Logger.levels.ERROR}\n * log level. The default implementation uses <tt>JSON.stringify</tt> and\n * returns \"[object with circular refs?]\" instead of an object if it fails.\n *\n * @param {object} someObject the <tt>object</tt> to be stringified.\n *\n * @return {string} the result of <tt>JSON.stringify</tt> or\n * \"[object with circular refs?]\" if any error occurs during \"stringification\".\n *\n * @protected\n */\nLogCollector.prototype.stringify = function (someObject) {\n    try {\n        return JSON.stringify(someObject);\n    } catch (error) {\n        return \"[object with circular refs?]\";\n    }\n};\n\n/**\n * Formats log entry for the given logging level and arguments passed to the\n * <tt>Logger</tt>'s log method. The first argument is log level and the next\n * arguments have to be captured using JS built-in 'arguments' variable.\n *\n * @param {Logger.levels} logLevel provides the logging level of the message to\n * be logged.\n *\n * @return {string|null} a non-empty string representation of the log entry\n * crafted from the log arguments. If the return value is <tt>null</tt> then\n * the message wil be discarded by this <tt>LogCollector</tt>.\n *\n * @protected\n */\nLogCollector.prototype.formatLogMessage\n= function (logLevel/*, arg1, arg2, arg3... */) {\n    var msg = '';\n    for (var i = 1, len = arguments.length; i < len; i++) {\n        var arg = arguments[i];\n        // objects logged on error level are always converted to JSON\n        if ((this.stringifyObjects || logLevel === Logger.levels.ERROR)\n            && typeof arg === 'object') {\n            arg = this.stringify(arg);\n        }\n        msg += arg;\n        if (i != len - 1) {\n            msg += ' ';\n        }\n    }\n    return msg.length ? msg : null;\n};\n\n/**\n * The log method bound to each of the logging levels in order to implement\n * \"global log transport\" object.\n *\n * @private\n */\nLogCollector.prototype._log = function() {\n\n    // var logLevel = arguments[0]; first argument is the log level\n    var msg = this.formatLogMessage.apply(this, arguments);\n    if (msg) {\n        // The same as the previous message aggregation logic\n        var prevMessage\n            = this.queue.length ? this.queue[this.queue.length -1] : undefined;\n        // NOTE that typeof undefined is 'undefined'\n        var prevMessageText\n            = typeof prevMessage === 'object' ? prevMessage.text : prevMessage;\n        // Is it the same as the previous one ?\n        if (prevMessageText == msg) {\n            if (typeof prevMessage === 'object') {\n                prevMessage.count += 1;\n            } else {\n                this.queue[this.queue.length-1] = {\n                    text: msg,\n                    count: 2\n                }\n            }\n        } else {\n            this.queue.push(msg);\n            this.totalLen += msg.length;\n        }\n    }\n\n    if (this.totalLen >= this.maxEntryLength) {\n        this._flush(true /* force */, true /* reschedule */);\n    }\n};\n\n/**\n * Starts periodical \"store logs\" task which will be triggered at the interval\n * specified in the constructor options.\n */\nLogCollector.prototype.start = function () {\n    this._reschedulePublishInterval();\n};\n\n/**\n * Reschedules the periodical \"store logs\" task which will store the next batch\n * log entry in the storage.\n * @private\n */\nLogCollector.prototype._reschedulePublishInterval = function () {\n    if (this.storeLogsIntervalID) {\n        window.clearTimeout(this.storeLogsIntervalID);\n        this.storeLogsIntervalID = null;\n    }\n    // It's actually a timeout, because it is rescheduled on every flush\n    this.storeLogsIntervalID\n        = window.setTimeout(\n            this._flush.bind(\n                this, false /* do not force */, true /* reschedule */),\n            this.storeInterval);\n};\n\n/**\n * Call this method to flush the log entry buffer and store it in the log\n * storage immediately (given that the storage is ready).\n */\nLogCollector.prototype.flush = function() {\n    this._flush(\n        false /* do not force, as it will not be stored anyway */,\n        true /* reschedule next update */ )\n};\n\n/**\n * Stores the next batch log entry in the log storage.\n * @param {boolean} force enforce current logs batch to be stored or cached if\n * there is anything to be logged, but the storage is not ready yet. One of\n * legitimate reasons to force is when the logs length exceeds size limit which\n * could result in truncation.\n * @param {boolean} reschedule <tt>true</tt> if the next periodic task should be\n * scheduled after the log entry is stored. <tt>false</tt> will end the periodic\n * task cycle.\n * @private\n */\nLogCollector.prototype._flush = function(force, reschedule) {\n    // Publish only if there's anything to be logged\n    if (this.totalLen > 0 && (this.logStorage.isReady() || force)) {\n        //FIXME avoid truncating\n        // right now we don't care if the message size is \"slightly\" exceeded\n        if (this.logStorage.isReady()) {\n            // Sends all cached logs\n            if (this.outputCache.length) {\n                this.outputCache.forEach(\n                    function (cachedQueue) {\n                        this.logStorage.storeLogs(cachedQueue);\n                    }.bind(this)\n                );\n                // Clear the cache\n                this.outputCache = [];\n            }\n            // Send current batch\n            this.logStorage.storeLogs(this.queue);\n        } else {\n            this.outputCache.push(this.queue);\n        }\n\n        this.queue = [];\n        this.totalLen = 0;\n    }\n\n    if (reschedule) {\n        this._reschedulePublishInterval();\n    }\n};\n\n/**\n * Stops the periodical \"store logs\" task and immediately stores any pending\n * log entries as a batch.\n */\nLogCollector.prototype.stop = function() {\n    // Flush and stop publishing logs\n    this._flush(false /* do not force */, false /* do not reschedule */);\n};\n\nmodule.exports = LogCollector;\n","module.exports = function(module) {\r\n\tif (!module.webpackPolyfill) {\r\n\t\tmodule.deprecate = function() {};\r\n\t\tmodule.paths = [];\r\n\t\t// module.parent = undefined by default\r\n\t\tif (!module.children) module.children = [];\r\n\t\tObject.defineProperty(module, \"loaded\", {\r\n\t\t\tenumerable: true,\r\n\t\t\tget: function() {\r\n\t\t\t\treturn module.l;\r\n\t\t\t}\r\n\t\t});\r\n\t\tObject.defineProperty(module, \"id\", {\r\n\t\t\tenumerable: true,\r\n\t\t\tget: function() {\r\n\t\t\t\treturn module.i;\r\n\t\t\t}\r\n\t\t});\r\n\t\tmodule.webpackPolyfill = 1;\r\n\t}\r\n\treturn module;\r\n};\r\n","module.exports = function() {\r\n\tthrow new Error(\"define cannot be used indirect\");\r\n};\r\n","/* globals __webpack_amd_options__ */\r\nmodule.exports = __webpack_amd_options__;\r\n","/*!\n * currentExecutingScript\n * Get the currently executing script, regardless of its source/trigger/synchronicity. Similar to HTML5's `document.currentScript` but arguably much more useful!\n * Copyright (c) 2015 James M. Greene\n * Licensed MIT\n * https://github.com/JamesMGreene/currentExecutingScript\n * v0.1.3\n */\n(function(root, factory) {\n  if (typeof define === \"function\" && define.amd) {\n    // AMD. Register as an anonymous module.\n    define([], factory);\n  } else if (typeof exports === \"object\") {\n    // CommonJS-like environments that support `module.exports`,\n    // like Node.js. Does not work with strict CommonJS!\n    module.exports = factory();\n  } else {\n    // Browser globals (`root` is `window`)\n    root.currentExecutingScript = factory();\n  }\n}(\n  // Current context/scope\n  this || window,\n\n  // Factory function to return the export\n  function() {\n\nvar scriptReadyRegex = /^(interactive|loaded|complete)$/;\n\n// This page's URL (minus query string and fragment identifer hash, if any)\nvar fullPageUrl = !!window.location ? window.location.href : null;\nvar pageUrl = fullPageUrl ? fullPageUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\") || null : null;\n\n// Live NodeList collection\nvar scripts = document.getElementsByTagName(\"script\");\n\n// Check if the browser supports the `readyState` property on `script` elements\nvar supportsScriptReadyState = \"readyState\" in (scripts[0] || document.createElement(\"script\"));\n\n// Lousy browser detection for [not] Opera\nvar isNotOpera = !window.opera || window.opera.toString() !== \"[object Opera]\";\n\n// Detect if `document.currentScript` is supported\nvar hasNativeCurrentScriptAccessor = \"currentScript\" in document;\n\nvar originalStackDepthConfig;\n// Detect if the V8 Error Stack Trace API is supported\nif (\"stackTraceLimit\" in Error && Error.stackTraceLimit !== Infinity) {\n  originalStackDepthConfig = Error.stackTraceLimit;\n  Error.stackTraceLimit = Infinity;\n}\n\n\n// In some browsers (e.g. Chrome), you can get the current stack from an Error\n// object instance without needing to throw it. Avoiding an unnecessary\n// use of `throw` saves time and performance.\nvar hasStackBeforeThrowing = false,\n    hasStackAfterThrowing = false;\n(function() {\n  try {\n    var err = new Error();\n    hasStackBeforeThrowing = typeof err.stack === \"string\" && !!err.stack;\n    throw err;\n  }\n  catch (thrownErr) {\n    hasStackAfterThrowing = typeof thrownErr.stack === \"string\" && !!thrownErr.stack;\n  }\n})();\n\n\n// Normalize whitespace within a string\nfunction normalizeWhitespace(str) {\n  return str ? str.replace(/^\\s+$|\\s+$/g, \"\").replace(/\\s\\s+/g, \" \") : \"\";\n}\n\n// Get script object based on the `src` URL\nfunction getScriptFromUrl(url, eligibleScripts) {\n  var i,\n      script = null;\n\n  eligibleScripts = eligibleScripts || scripts;\n\n  if (typeof url === \"string\" && url) {\n    for (i = eligibleScripts.length; i--; ) {\n      if (eligibleScripts[i].src === url) {\n        // NOTE: Could check if the same script URL is used by more than one `script` element\n        // here... but let's not. That would yield less useful results in \"loose\" detection. ;)\n        script = eligibleScripts[i];\n        break;\n      }\n    }\n  }\n  return script;\n}\n\n// Get script object based on the caller function's source code body (text)\nfunction getInlineScriptFromCallerSource(callerFnSource, eligibleScripts) {\n  var i, inlineScriptText,\n      script = null,\n      callerSourceText = normalizeWhitespace(callerFnSource);\n\n  eligibleScripts = eligibleScripts || scripts;\n\n  if (callerFnSource && callerSourceText) {\n    for (i = eligibleScripts.length; i--; ) {\n      // Only look at inline scripts\n      if (!eligibleScripts[i].hasAttribute(\"src\")) {\n        inlineScriptText = normalizeWhitespace(eligibleScripts[i].text);\n        if (inlineScriptText.indexOf(callerSourceText) !== -1) {\n          // If more than one match is found, don't return any\n          if (script) {\n            script = null;\n            break;\n          }\n          script = eligibleScripts[i];\n        }\n      }\n    }\n  }\n\n  return script;\n}\n\n// If there is only a single inline script on the page, return it; otherwise `null`\nfunction getSoleInlineScript(eligibleScripts) {\n  var i, len,\n      script = null;\n  eligibleScripts = eligibleScripts || scripts;\n  for (i = 0, len = eligibleScripts.length; i < len; i++) {\n    if (!eligibleScripts[i].hasAttribute(\"src\")) {\n      if (script) {\n        script = null;\n        break;\n      }\n      script = eligibleScripts[i];\n    }\n  }\n  return script;\n}\n\n// Get the currently executing script URL from an Error stack trace\nfunction getScriptUrlFromStack(stack, skipStackDepth) {\n  var matches, remainingStack,\n      url = null,\n      ignoreMessage = typeof skipStackDepth === \"number\";\n  skipStackDepth = ignoreMessage ? Math.round(skipStackDepth) : 0;\n  if (typeof stack === \"string\" && stack) {\n    if (ignoreMessage) {\n      matches = stack.match(/(data:text\\/javascript(?:;[^,]+)?,.+?|(?:|blob:)(?:http[s]?|file):\\/\\/[\\/]?.+?\\/[^:\\)]*?)(?::\\d+)(?::\\d+)?/);\n    }\n    else {\n      matches = stack.match(/^(?:|[^:@]*@|.+\\)@(?=data:text\\/javascript|blob|http[s]?|file)|.+?\\s+(?: at |@)(?:[^:\\(]+ )*[\\(]?)(data:text\\/javascript(?:;[^,]+)?,.+?|(?:|blob:)(?:http[s]?|file):\\/\\/[\\/]?.+?\\/[^:\\)]*?)(?::\\d+)(?::\\d+)?/);\n\n      if (!(matches && matches[1])) {\n        matches = stack.match(/\\)@(data:text\\/javascript(?:;[^,]+)?,.+?|(?:|blob:)(?:http[s]?|file):\\/\\/[\\/]?.+?\\/[^:\\)]*?)(?::\\d+)(?::\\d+)?/);\n      }\n    }\n\n    if (matches && matches[1]) {\n      if (skipStackDepth > 0) {\n        remainingStack = stack.slice(stack.indexOf(matches[0]) + matches[0].length);\n        url = getScriptUrlFromStack(remainingStack, (skipStackDepth - 1));\n      }\n      else {\n        url = matches[1];\n      }\n    }\n\n    // TODO: Handle more edge cases!\n    // Fixes #1\n    // See https://github.com/JamesMGreene/currentExecutingScript/issues/1\n\n    // ???\n\n  }\n  return url;\n}\n\n\n// Get the farthest currently executing (i.e. yes, EXECUTING) `script` DOM\n// element for the caller function, regardless of whether it is that `script`\n// DOM element is currently being evaluated for the first time. The farthest\n// currently executing `script` DOM element would typically be considered the\n// originator of the current execution stack.\nfunction _farthestExecutingScript() {\n  /*jshint noarg:false */\n\n  // TODO: Implement!\n  // Fixes #3\n  // See https://github.com/JamesMGreene/currentExecutingScript/issues/3\n  return null;\n\n/*\n  // Yes, this IS possible, i.e. if a script removes other scripts (or itself)\n  if (scripts.length === 0) {\n    return null;\n  }\n\n  // Guaranteed accurate in IE 6-10.\n  // Not accurate/supported in any other browsers.\n  if (isNotOpera && supportsScriptReadyState) {\n    for (var i = scripts.length; i--; ) {\n      if (scripts[i].readyState === \"interactive\") {\n        return scripts[i];\n      }\n    }\n  }\n\n  var stack,\n      e = new Error();\n  if (hasStackBeforeThrowing) {\n    stack = e.stack;\n  }\n  if (!stack && hasStackAfterThrowing) {\n    try {\n      throw e;\n    }\n    catch (err) {\n      // NOTE: Cannot use `err.sourceURL` or `err.fileName` as they will always be THIS script\n      stack = err.stack;\n    }\n  }\n  if (stack) {\n    var url = getScriptUrlFromStack(stack, skipStackDepth);\n    var script = getScriptFromUrl(url, scripts );\n    if (!script && pageUrl && url === pageUrl) {\n      // Try to find the correct inline script by searching through\n      // inline scripts' text content for the caller function's source\n      // code to be present. If the caller function's source code is\n      // not available, see if there is only one inline script element\n      // in the DOM and return that (even though it may be wrong)\n\n      // TODO: Implement!\n      // Fixes #4 in part\n      // See https://github.com/JamesMGreene/currentExecutingScript/issues/4\n\n      var callerFn = _farthestExecutingScript.caller || null,\n          callerFnStack = [],\n          callerFnSource = null;\n\n      while (callerFn) {\n        callerFnStack.push(callerFn);\n        callerFn = callerFn.caller || null;\n      }\n      callerFn = callerFnStack.slice(-1)[0];\n      callerFnSource = callerFn ? (\"\" + callerFn) : null;\n\n\n      if (callerFnSource) {\n        script = getInlineScriptFromCallerSource(callerFnSource);\n      }\n      else {\n        // NOTE: This is a loose assumption that could be inaccurate!\n        //\n        // Inaccuracies:\n        //  - If the inline script that initiated the call was also removed from the DOM.\n        //  - If the call was initiated by an element's inline event handler,\n        //    e.g. `<a onclick=\"(function() { alert(currentExecutingScript()); }()\">click</a>`\n        script = getSoleInlineScript();\n      }\n    }\n    return script;\n  }\n\n  // NOTE: This is a loose assumption that could be inaccurate!\n  //\n  // Inaccuracies:\n  //  - If a script is created dynamically and appended to some position\n  //    other than the very end of the document.\n  //  - If multiple scripts are created dynamically and all appended to the\n  //    same position within the document (and do not have their `async` attributes\n  //    set to `false`, at least in browsers that support async script evaluation.\n  //    other than the very end of the document.\n  //  - If any scripts are added with the `async` attribute set to `true` in a browser\n  //    that supports it.\n  //  - May get confused by `script` elements within `svg` elements\n  return scripts[scripts.length - 1] || null;\n*/\n}\n\n\n// Get the originating currently executing (i.e. yes, EXECUTING) `script` DOM\n// element or attribute node (e.g. `onclick`) for the caller function,\n// regardless of whether it is that `script` DOM element is currently being\n// evaluated for the first time. The originating currently executing `script`\n// DOM element [or attribute node] is the originator of the current execution stack.\nfunction _originatingExecutingScript() {\n  // TODO: Implement!\n  // Fixes #2\n  // See https://github.com/JamesMGreene/currentExecutingScript/issues/2\n  return null;\n}\n\n// Get the nearest currently executing (i.e. yes, EXECUTING) `script` DOM\n// element for the caller function, regardless of whether it is that `script`\n// DOM element is currently being evaluated for the first time.\nfunction _nearestExecutingScript() {\n  /*jshint noarg:false */\n\n  // Yes, this IS possible, i.e. if a script removes other scripts (or itself)\n  if (scripts.length === 0) {\n    return null;\n  }\n\n  var i, e, stack, url, script,\n      eligibleScripts = [],\n      skipStackDepth = _nearestExecutingScript.skipStackDepth || 1,\n\n      // TODO: Implement!\n      // Fixes #4 in part\n      // See https://github.com/JamesMGreene/currentExecutingScript/issues/4\n      callerFnSource = null;  //(\"\" + (_nearestExecutingScript.caller || \"\")) || null;\n\n  // This part will only help in IE 6-10.\n  for (i = 0; i < scripts.length; i++) {\n    if (isNotOpera && supportsScriptReadyState) {\n      if (scriptReadyRegex.test(scripts[i].readyState)) {\n        eligibleScripts.push(scripts[i]);\n      }\n    }\n    else {\n      eligibleScripts.push(scripts[i]);\n    }\n  }\n\n  e = new Error();\n  if (hasStackBeforeThrowing) {\n    stack = e.stack;\n  }\n  if (!stack && hasStackAfterThrowing) {\n    try {\n      throw e;\n    }\n    catch (err) {\n      // NOTE: Cannot use `err.sourceURL` or `err.fileName` as they will always be THIS script\n      stack = err.stack;\n    }\n  }\n\n  if (stack) {\n    url = getScriptUrlFromStack(stack, skipStackDepth);\n    script = getScriptFromUrl(url, eligibleScripts);\n\n    if (!script && pageUrl && url === pageUrl) {\n      // Try to find the correct inline script by searching through\n      // inline scripts' text content for the caller function's source\n      // code to be present.\n      if (callerFnSource) {\n        script = getInlineScriptFromCallerSource(callerFnSource, eligibleScripts);\n      }\n      // If the caller function's source code is not available, see if\n      // there is only one inline script element in the DOM and return\n      // that (even though it may be wrong)...\n      else {\n        // NOTE: This is a loose assumption that could be inaccurate!\n        //\n        // Inaccuracies:\n        //  - If the inline script that initiated the call was also removed from the DOM.\n        //  - If the call was initiated by an element's inline event handler,\n        //    e.g. `<a onclick=\"(function() { alert(currentExecutingScript()); }()\">click</a>`\n        script = getSoleInlineScript(eligibleScripts);\n      }\n    }\n  }\n\n  //\n  // Welcome to the Island of Inaccurate Assumptions!\n  // NOTE: ALL of the following are loose assumptions that could be inaccurate!\n  //\n\n  if (!script) {\n    // Inaccuracies:\n    //  - If the inline script that initiated the call was also removed from the DOM.\n    //  - If the call was initiated by an element's inline event handler,\n    //    e.g. `<a onclick=\"(function() { alert(currentExecutingScript()); }()\">click</a>`\n    if (eligibleScripts.length === 1) {\n      script = eligibleScripts[0];\n    }\n  }\n\n  if (!script) {\n    // Inaccuracies:\n    //  - If script currently being synchronously evaluated by the parser is the\n    //    originator of this call stack but NOT the source script of the caller/invocation\n    //    e.g.\n    //    ```html\n    //    <script id=\"a\">\n    //    function getCurrentScriptCallerFn() {\n    //      return currentExecutingScript.near();\n    //    }\n    //    </script>\n    //    <script id=\"b\">\n    //    // Should get `script[id=\"a\"]` but will get `script[id=\"b\"]` instead\n    //    getCurrentScriptCallerFn();\n    //    </script>\n    if (hasNativeCurrentScriptAccessor) {\n      script = document.currentScript;\n    }\n  }\n\n  if (!script) {\n    // Inaccuracies:\n    //  - If script currently being synchronously evaluated by the parser is the\n    //    originator of this call stack but NOT the source script of the caller/invocation\n    //    e.g.\n    //    ```html\n    //    <script id=\"a\">\n    //    function getCurrentScriptCallerFn() {\n    //      return currentExecutingScript.near();\n    //    }\n    //    </script>\n    //    <script id=\"b\">\n    //    // Should get `script[id=\"a\"]` but will get `script[id=\"b\"]` instead\n    //    getCurrentScriptCallerFn();\n    //    </script>\n    if (isNotOpera && supportsScriptReadyState) {\n      for (i = eligibleScripts.length; i--; ) {\n        if (eligibleScripts[i].readyState === \"interactive\") {\n          script = eligibleScripts[i];\n          break;\n        }\n      }\n    }\n  }\n\n  if (!script) {\n    // Inaccuracies:\n    //  - If a script is created dynamically and appended to some position\n    //    other than the very end of the document.\n    //  - If multiple scripts are created dynamically and all appended to the\n    //    same position within the document (and do not have their `async` attributes\n    //    set to `false`, at least in browsers that support async script evaluation.\n    //    other than the very end of the document.\n    //  - If any scripts are added with the `async` attribute set to `true` in a browser\n    //    that supports it.\n    //  - May get confused by `script` elements within `svg` elements\n    //  - If script currently being synchronously evaluated by the parser is the\n    //    originator of this call stack but NOT the source script of the caller/invocation\n    //    e.g.\n    //    ```html\n    //    <script id=\"a\">\n    //    function getCurrentScriptCallerFn() {\n    //      return currentExecutingScript.near();\n    //    }\n    //    </script>\n    //    <script id=\"b\">\n    //    // Should get `script[id=\"a\"]` but will get `script[id=\"b\"]` instead\n    //    getCurrentScriptCallerFn();\n    //    </script>\n    //    ```\n    script = eligibleScripts[eligibleScripts.length - 1] || null;\n  }\n\n  return script;\n}\n\n// Default stack depth to skip over when analyzing call stack frames\n_nearestExecutingScript.skipStackDepth = 1;\n\n\n\n    //\n    // Export the API\n    //\n    var currentExecutingScript    = _nearestExecutingScript;      // default\n    currentExecutingScript.near   = _nearestExecutingScript;\n    currentExecutingScript.far    = _farthestExecutingScript;\n    currentExecutingScript.origin = _originatingExecutingScript;\n\n\n    // Just return a value to define the module export.\n    // This example returns an object, but the module\n    // can return a function as the exported value.\n    return currentExecutingScript;\n  })\n);\n","const Constants = {\n    LOCAL_JID: 'local'\n};\n\nmodule.exports = Constants;\n","(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? factory(require('strophe.js')) :\n\ttypeof define === 'function' && define.amd ? define(['strophe.js'], factory) :\n\t(factory(global.window));\n}(this, (function (strophe_js) { 'use strict';\n\nstrophe_js.Strophe.addConnectionPlugin('disco',\n{\n    _connection: null,\n    _identities : [],\n    _features : [],\n    _items : [],\n    /** Function: init\n     * Plugin init\n     *\n     * Parameters:\n     *   (Strophe.Connection) conn - Strophe connection\n     */\n    init: function(conn)\n    {\n    this._connection = conn;\n        this._identities = [];\n        this._features   = [];\n        this._items      = [];\n        // disco info\n        conn.addHandler(this._onDiscoInfo.bind(this), strophe_js.Strophe.NS.DISCO_INFO, 'iq', 'get', null, null);\n        // disco items\n        conn.addHandler(this._onDiscoItems.bind(this), strophe_js.Strophe.NS.DISCO_ITEMS, 'iq', 'get', null, null);\n    },\n    /** Function: addIdentity\n     * See http://xmpp.org/registrar/disco-categories.html\n     * Parameters:\n     *   (String) category - category of identity (like client, automation, etc ...)\n     *   (String) type - type of identity (like pc, web, bot , etc ...)\n     *   (String) name - name of identity in natural language\n     *   (String) lang - lang of name parameter\n     *\n     * Returns:\n     *   Boolean\n     */\n    addIdentity: function(category, type, name, lang)\n    {\n        for (var i=0; i<this._identities.length; i++)\n        {\n            if (this._identities[i].category == category &&\n                this._identities[i].type == type &&\n                this._identities[i].name == name &&\n                this._identities[i].lang == lang)\n            {\n                return false;\n            }\n        }\n        this._identities.push({category: category, type: type, name: name, lang: lang});\n        return true;\n    },\n    /** Function: addFeature\n     *\n     * Parameters:\n     *   (String) var_name - feature name (like jabber:iq:version)\n     *\n     * Returns:\n     *   boolean\n     */\n    addFeature: function(var_name)\n    {\n        for (var i=0; i<this._features.length; i++)\n        {\n             if (this._features[i] == var_name)\n                 return false;\n        }\n        this._features.push(var_name);\n        return true;\n    },\n    /** Function: removeFeature\n     *\n     * Parameters:\n     *   (String) var_name - feature name (like jabber:iq:version)\n     *\n     * Returns:\n     *   boolean\n     */\n    removeFeature: function(var_name)\n    {\n        for (var i=0; i<this._features.length; i++)\n        {\n             if (this._features[i] === var_name){\n                 this._features.splice(i,1);\n                 return true;\n             }\n        }\n        return false;\n    },\n    /** Function: addItem\n     *\n     * Parameters:\n     *   (String) jid\n     *   (String) name\n     *   (String) node\n     *   (Function) call_back\n     *\n     * Returns:\n     *   boolean\n     */\n    addItem: function(jid, name, node, call_back)\n    {\n        if (node && !call_back)\n            return false;\n        this._items.push({jid: jid, name: name, node: node, call_back: call_back});\n        return true;\n    },\n    /** Function: info\n     * Info query\n     *\n     * Parameters:\n     *   (Function) call_back\n     *   (String) jid\n     *   (String) node\n     */\n    info: function(jid, node, success, error, timeout)\n    {\n        var attrs = {xmlns: strophe_js.Strophe.NS.DISCO_INFO};\n        if (node)\n            attrs.node = node;\n\n        var info = strophe_js.$iq({from:this._connection.jid,\n                         to:jid, type:'get'}).c('query', attrs);\n        this._connection.sendIQ(info, success, error, timeout);\n    },\n    /** Function: items\n     * Items query\n     *\n     * Parameters:\n     *   (Function) call_back\n     *   (String) jid\n     *   (String) node\n     */\n    items: function(jid, node, success, error, timeout)\n    {\n        var attrs = {xmlns: strophe_js.Strophe.NS.DISCO_ITEMS};\n        if (node)\n            attrs.node = node;\n\n        var items = strophe_js.$iq({from:this._connection.jid,\n                         to:jid, type:'get'}).c('query', attrs);\n        this._connection.sendIQ(items, success, error, timeout);\n    },\n\n    /** PrivateFunction: _buildIQResult\n     */\n    _buildIQResult: function(stanza, query_attrs)\n    {\n        var id   =  stanza.getAttribute('id');\n        var from = stanza.getAttribute('from');\n        var iqresult = strophe_js.$iq({type: 'result', id: id});\n\n        if (from !== null) {\n            iqresult.attrs({to: from});\n        }\n\n        return iqresult.c('query', query_attrs);\n    },\n\n    /** PrivateFunction: _onDiscoInfo\n     * Called when receive info request\n     */\n    _onDiscoInfo: function(stanza)\n    {\n        var node = stanza.getElementsByTagName('query')[0].getAttribute('node');\n        var attrs = {xmlns: strophe_js.Strophe.NS.DISCO_INFO};\n        var i;\n        if (node)\n        {\n            attrs.node = node;\n        }\n        var iqresult = this._buildIQResult(stanza, attrs);\n        for (i=0; i<this._identities.length; i++)\n        {\n            attrs = {category: this._identities[i].category,\n                         type    : this._identities[i].type};\n            if (this._identities[i].name)\n                attrs.name = this._identities[i].name;\n            if (this._identities[i].lang)\n                attrs['xml:lang'] = this._identities[i].lang;\n            iqresult.c('identity', attrs).up();\n        }\n        for (i=0; i<this._features.length; i++)\n        {\n            iqresult.c('feature', {'var':this._features[i]}).up();\n        }\n        this._connection.send(iqresult.tree());\n        return true;\n    },\n    /** PrivateFunction: _onDiscoItems\n     * Called when receive items request\n     */\n    _onDiscoItems: function(stanza)\n    {\n        var query_attrs = {xmlns: strophe_js.Strophe.NS.DISCO_ITEMS};\n        var node = stanza.getElementsByTagName('query')[0].getAttribute('node');\n        var items, i;\n        if (node)\n        {\n            query_attrs.node = node;\n            items = [];\n            for (i = 0; i < this._items.length; i++)\n            {\n                if (this._items[i].node == node)\n                {\n                    items = this._items[i].call_back(stanza);\n                    break;\n                }\n            }\n        }\n        else\n        {\n            items = this._items;\n        }\n        var iqresult = this._buildIQResult(stanza, query_attrs);\n        for (i = 0; i < items.length; i++)\n        {\n            var attrs = {jid:  items[i].jid};\n            if (items[i].name)\n                attrs.name = items[i].name;\n            if (items[i].node)\n                attrs.node = items[i].node;\n            iqresult.c('item', attrs).up();\n        }\n        this._connection.send(iqresult.tree());\n        return true;\n    }\n});\n\n})));\n//# sourceMappingURL=strophe.disco.js.map\n","var scope = (typeof global !== \"undefined\" && global) ||\n            (typeof self !== \"undefined\" && self) ||\n            window;\nvar apply = Function.prototype.apply;\n\n// DOM APIs, for completeness\n\nexports.setTimeout = function() {\n  return new Timeout(apply.call(setTimeout, scope, arguments), clearTimeout);\n};\nexports.setInterval = function() {\n  return new Timeout(apply.call(setInterval, scope, arguments), clearInterval);\n};\nexports.clearTimeout =\nexports.clearInterval = function(timeout) {\n  if (timeout) {\n    timeout.close();\n  }\n};\n\nfunction Timeout(id, clearFn) {\n  this._id = id;\n  this._clearFn = clearFn;\n}\nTimeout.prototype.unref = Timeout.prototype.ref = function() {};\nTimeout.prototype.close = function() {\n  this._clearFn.call(scope, this._id);\n};\n\n// Does not start the time, just sets up the members needed.\nexports.enroll = function(item, msecs) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = msecs;\n};\n\nexports.unenroll = function(item) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = -1;\n};\n\nexports._unrefActive = exports.active = function(item) {\n  clearTimeout(item._idleTimeoutId);\n\n  var msecs = item._idleTimeout;\n  if (msecs >= 0) {\n    item._idleTimeoutId = setTimeout(function onTimeout() {\n      if (item._onTimeout)\n        item._onTimeout();\n    }, msecs);\n  }\n};\n\n// setimmediate attaches itself to the global object\nrequire(\"setimmediate\");\n// On some exotic environments, it's not clear which object `setimmediate` was\n// able to install onto.  Search each possibility in the same order as the\n// `setimmediate` library.\nexports.setImmediate = (typeof self !== \"undefined\" && self.setImmediate) ||\n                       (typeof global !== \"undefined\" && global.setImmediate) ||\n                       (this && this.setImmediate);\nexports.clearImmediate = (typeof self !== \"undefined\" && self.clearImmediate) ||\n                         (typeof global !== \"undefined\" && global.clearImmediate) ||\n                         (this && this.clearImmediate);\n","(function (global, undefined) {\n    \"use strict\";\n\n    if (global.setImmediate) {\n        return;\n    }\n\n    var nextHandle = 1; // Spec says greater than zero\n    var tasksByHandle = {};\n    var currentlyRunningATask = false;\n    var doc = global.document;\n    var registerImmediate;\n\n    function setImmediate(callback) {\n      // Callback can either be a function or a string\n      if (typeof callback !== \"function\") {\n        callback = new Function(\"\" + callback);\n      }\n      // Copy function arguments\n      var args = new Array(arguments.length - 1);\n      for (var i = 0; i < args.length; i++) {\n          args[i] = arguments[i + 1];\n      }\n      // Store and register the task\n      var task = { callback: callback, args: args };\n      tasksByHandle[nextHandle] = task;\n      registerImmediate(nextHandle);\n      return nextHandle++;\n    }\n\n    function clearImmediate(handle) {\n        delete tasksByHandle[handle];\n    }\n\n    function run(task) {\n        var callback = task.callback;\n        var args = task.args;\n        switch (args.length) {\n        case 0:\n            callback();\n            break;\n        case 1:\n            callback(args[0]);\n            break;\n        case 2:\n            callback(args[0], args[1]);\n            break;\n        case 3:\n            callback(args[0], args[1], args[2]);\n            break;\n        default:\n            callback.apply(undefined, args);\n            break;\n        }\n    }\n\n    function runIfPresent(handle) {\n        // From the spec: \"Wait until any invocations of this algorithm started before this one have completed.\"\n        // So if we're currently running a task, we'll need to delay this invocation.\n        if (currentlyRunningATask) {\n            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a\n            // \"too much recursion\" error.\n            setTimeout(runIfPresent, 0, handle);\n        } else {\n            var task = tasksByHandle[handle];\n            if (task) {\n                currentlyRunningATask = true;\n                try {\n                    run(task);\n                } finally {\n                    clearImmediate(handle);\n                    currentlyRunningATask = false;\n                }\n            }\n        }\n    }\n\n    function installNextTickImplementation() {\n        registerImmediate = function(handle) {\n            process.nextTick(function () { runIfPresent(handle); });\n        };\n    }\n\n    function canUsePostMessage() {\n        // The test against `importScripts` prevents this implementation from being installed inside a web worker,\n        // where `global.postMessage` means something completely different and can't be used for this purpose.\n        if (global.postMessage && !global.importScripts) {\n            var postMessageIsAsynchronous = true;\n            var oldOnMessage = global.onmessage;\n            global.onmessage = function() {\n                postMessageIsAsynchronous = false;\n            };\n            global.postMessage(\"\", \"*\");\n            global.onmessage = oldOnMessage;\n            return postMessageIsAsynchronous;\n        }\n    }\n\n    function installPostMessageImplementation() {\n        // Installs an event handler on `global` for the `message` event: see\n        // * https://developer.mozilla.org/en/DOM/window.postMessage\n        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages\n\n        var messagePrefix = \"setImmediate$\" + Math.random() + \"$\";\n        var onGlobalMessage = function(event) {\n            if (event.source === global &&\n                typeof event.data === \"string\" &&\n                event.data.indexOf(messagePrefix) === 0) {\n                runIfPresent(+event.data.slice(messagePrefix.length));\n            }\n        };\n\n        if (global.addEventListener) {\n            global.addEventListener(\"message\", onGlobalMessage, false);\n        } else {\n            global.attachEvent(\"onmessage\", onGlobalMessage);\n        }\n\n        registerImmediate = function(handle) {\n            global.postMessage(messagePrefix + handle, \"*\");\n        };\n    }\n\n    function installMessageChannelImplementation() {\n        var channel = new MessageChannel();\n        channel.port1.onmessage = function(event) {\n            var handle = event.data;\n            runIfPresent(handle);\n        };\n\n        registerImmediate = function(handle) {\n            channel.port2.postMessage(handle);\n        };\n    }\n\n    function installReadyStateChangeImplementation() {\n        var html = doc.documentElement;\n        registerImmediate = function(handle) {\n            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\n            var script = doc.createElement(\"script\");\n            script.onreadystatechange = function () {\n                runIfPresent(handle);\n                script.onreadystatechange = null;\n                html.removeChild(script);\n                script = null;\n            };\n            html.appendChild(script);\n        };\n    }\n\n    function installSetTimeoutImplementation() {\n        registerImmediate = function(handle) {\n            setTimeout(runIfPresent, 0, handle);\n        };\n    }\n\n    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.\n    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);\n    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;\n\n    // Don't get fooled by e.g. browserify environments.\n    if ({}.toString.call(global.process) === \"[object process]\") {\n        // For Node.js before 0.9\n        installNextTickImplementation();\n\n    } else if (canUsePostMessage()) {\n        // For non-IE10 modern browsers\n        installPostMessageImplementation();\n\n    } else if (global.MessageChannel) {\n        // For web workers, where supported\n        installMessageChannelImplementation();\n\n    } else if (doc && \"onreadystatechange\" in doc.createElement(\"script\")) {\n        // For IE 6–8\n        installReadyStateChangeImplementation();\n\n    } else {\n        // For older browsers\n        installSetTimeoutImplementation();\n    }\n\n    attachTo.setImmediate = setImmediate;\n    attachTo.clearImmediate = clearImmediate;\n}(typeof self === \"undefined\" ? typeof global === \"undefined\" ? this : global : self));\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n /* eslint-env node */\n\n'use strict';\n\nvar adapterFactory = require('./adapter_factory.js');\nmodule.exports = adapterFactory({window: global.window});\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n /* eslint-env node */\n\n'use strict';\n\nvar utils = require('./utils');\n// Shimming starts here.\nmodule.exports = function(dependencies, opts) {\n  var window = dependencies && dependencies.window;\n\n  var options = {\n    shimChrome: true,\n    shimFirefox: true,\n    shimEdge: true,\n    shimSafari: true,\n  };\n\n  for (var key in opts) {\n    if (hasOwnProperty.call(opts, key)) {\n      options[key] = opts[key];\n    }\n  }\n\n  // Utils.\n  var logging = utils.log;\n  var browserDetails = utils.detectBrowser(window);\n\n  // Export to the adapter global object visible in the browser.\n  var adapter = {\n    browserDetails: browserDetails,\n    extractVersion: utils.extractVersion,\n    disableLog: utils.disableLog,\n    disableWarnings: utils.disableWarnings\n  };\n\n  // Uncomment the line below if you want logging to occur, including logging\n  // for the switch statement below. Can also be turned on in the browser via\n  // adapter.disableLog(false), but then logging from the switch statement below\n  // will not appear.\n  // require('./utils').disableLog(false);\n\n  // Browser shims.\n  var chromeShim = require('./chrome/chrome_shim') || null;\n  var edgeShim = require('./edge/edge_shim') || null;\n  var firefoxShim = require('./firefox/firefox_shim') || null;\n  var safariShim = require('./safari/safari_shim') || null;\n  var commonShim = require('./common_shim') || null;\n\n  // Shim browser if found.\n  switch (browserDetails.browser) {\n    case 'chrome':\n      if (!chromeShim || !chromeShim.shimPeerConnection ||\n          !options.shimChrome) {\n        logging('Chrome shim is not included in this adapter release.');\n        return adapter;\n      }\n      logging('adapter.js shimming chrome.');\n      // Export to the adapter global object visible in the browser.\n      adapter.browserShim = chromeShim;\n      commonShim.shimCreateObjectURL(window);\n\n      chromeShim.shimGetUserMedia(window);\n      chromeShim.shimMediaStream(window);\n      chromeShim.shimSourceObject(window);\n      chromeShim.shimPeerConnection(window);\n      chromeShim.shimOnTrack(window);\n      chromeShim.shimAddTrackRemoveTrack(window);\n      chromeShim.shimGetSendersWithDtmf(window);\n\n      commonShim.shimRTCIceCandidate(window);\n      break;\n    case 'firefox':\n      if (!firefoxShim || !firefoxShim.shimPeerConnection ||\n          !options.shimFirefox) {\n        logging('Firefox shim is not included in this adapter release.');\n        return adapter;\n      }\n      logging('adapter.js shimming firefox.');\n      // Export to the adapter global object visible in the browser.\n      adapter.browserShim = firefoxShim;\n      commonShim.shimCreateObjectURL(window);\n\n      firefoxShim.shimGetUserMedia(window);\n      firefoxShim.shimSourceObject(window);\n      firefoxShim.shimPeerConnection(window);\n      firefoxShim.shimOnTrack(window);\n\n      commonShim.shimRTCIceCandidate(window);\n      break;\n    case 'edge':\n      if (!edgeShim || !edgeShim.shimPeerConnection || !options.shimEdge) {\n        logging('MS edge shim is not included in this adapter release.');\n        return adapter;\n      }\n      logging('adapter.js shimming edge.');\n      // Export to the adapter global object visible in the browser.\n      adapter.browserShim = edgeShim;\n      commonShim.shimCreateObjectURL(window);\n\n      edgeShim.shimGetUserMedia(window);\n      edgeShim.shimPeerConnection(window);\n      edgeShim.shimReplaceTrack(window);\n\n      // the edge shim implements the full RTCIceCandidate object.\n      break;\n    case 'safari':\n      if (!safariShim || !options.shimSafari) {\n        logging('Safari shim is not included in this adapter release.');\n        return adapter;\n      }\n      logging('adapter.js shimming safari.');\n      // Export to the adapter global object visible in the browser.\n      adapter.browserShim = safariShim;\n      commonShim.shimCreateObjectURL(window);\n\n      safariShim.shimRTCIceServerUrls(window);\n      safariShim.shimCallbacksAPI(window);\n      safariShim.shimLocalStreamsAPI(window);\n      safariShim.shimRemoteStreamsAPI(window);\n      safariShim.shimTrackEventTransceiver(window);\n      safariShim.shimGetUserMedia(window);\n      safariShim.shimCreateOfferLegacy(window);\n\n      commonShim.shimRTCIceCandidate(window);\n      break;\n    default:\n      logging('Unsupported browser!');\n      break;\n  }\n\n  return adapter;\n};\n","\n/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n /* eslint-env node */\n'use strict';\nvar utils = require('../utils.js');\nvar logging = utils.log;\n\nvar chromeShim = {\n  shimMediaStream: function(window) {\n    window.MediaStream = window.MediaStream || window.webkitMediaStream;\n  },\n\n  shimOnTrack: function(window) {\n    if (typeof window === 'object' && window.RTCPeerConnection && !('ontrack' in\n        window.RTCPeerConnection.prototype)) {\n      Object.defineProperty(window.RTCPeerConnection.prototype, 'ontrack', {\n        get: function() {\n          return this._ontrack;\n        },\n        set: function(f) {\n          if (this._ontrack) {\n            this.removeEventListener('track', this._ontrack);\n          }\n          this.addEventListener('track', this._ontrack = f);\n        }\n      });\n      var origSetRemoteDescription =\n          window.RTCPeerConnection.prototype.setRemoteDescription;\n      window.RTCPeerConnection.prototype.setRemoteDescription = function() {\n        var pc = this;\n        if (!pc._ontrackpoly) {\n          pc._ontrackpoly = function(e) {\n            // onaddstream does not fire when a track is added to an existing\n            // stream. But stream.onaddtrack is implemented so we use that.\n            e.stream.addEventListener('addtrack', function(te) {\n              var receiver;\n              if (window.RTCPeerConnection.prototype.getReceivers) {\n                receiver = pc.getReceivers().find(function(r) {\n                  return r.track && r.track.id === te.track.id;\n                });\n              } else {\n                receiver = {track: te.track};\n              }\n\n              var event = new Event('track');\n              event.track = te.track;\n              event.receiver = receiver;\n              event.transceiver = {receiver: receiver};\n              event.streams = [e.stream];\n              pc.dispatchEvent(event);\n            });\n            e.stream.getTracks().forEach(function(track) {\n              var receiver;\n              if (window.RTCPeerConnection.prototype.getReceivers) {\n                receiver = pc.getReceivers().find(function(r) {\n                  return r.track && r.track.id === track.id;\n                });\n              } else {\n                receiver = {track: track};\n              }\n              var event = new Event('track');\n              event.track = track;\n              event.receiver = receiver;\n              event.transceiver = {receiver: receiver};\n              event.streams = [e.stream];\n              pc.dispatchEvent(event);\n            });\n          };\n          pc.addEventListener('addstream', pc._ontrackpoly);\n        }\n        return origSetRemoteDescription.apply(pc, arguments);\n      };\n    }\n  },\n\n  shimGetSendersWithDtmf: function(window) {\n    // Overrides addTrack/removeTrack, depends on shimAddTrackRemoveTrack.\n    if (typeof window === 'object' && window.RTCPeerConnection &&\n        !('getSenders' in window.RTCPeerConnection.prototype) &&\n        'createDTMFSender' in window.RTCPeerConnection.prototype) {\n      var shimSenderWithDtmf = function(pc, track) {\n        return {\n          track: track,\n          get dtmf() {\n            if (this._dtmf === undefined) {\n              if (track.kind === 'audio') {\n                this._dtmf = pc.createDTMFSender(track);\n              } else {\n                this._dtmf = null;\n              }\n            }\n            return this._dtmf;\n          },\n          _pc: pc\n        };\n      };\n\n      // augment addTrack when getSenders is not available.\n      if (!window.RTCPeerConnection.prototype.getSenders) {\n        window.RTCPeerConnection.prototype.getSenders = function() {\n          this._senders = this._senders || [];\n          return this._senders.slice(); // return a copy of the internal state.\n        };\n        var origAddTrack = window.RTCPeerConnection.prototype.addTrack;\n        window.RTCPeerConnection.prototype.addTrack = function(track, stream) {\n          var pc = this;\n          var sender = origAddTrack.apply(pc, arguments);\n          if (!sender) {\n            sender = shimSenderWithDtmf(pc, track);\n            pc._senders.push(sender);\n          }\n          return sender;\n        };\n\n        var origRemoveTrack = window.RTCPeerConnection.prototype.removeTrack;\n        window.RTCPeerConnection.prototype.removeTrack = function(sender) {\n          var pc = this;\n          origRemoveTrack.apply(pc, arguments);\n          var idx = pc._senders.indexOf(sender);\n          if (idx !== -1) {\n            pc._senders.splice(idx, 1);\n          }\n        };\n      }\n      var origAddStream = window.RTCPeerConnection.prototype.addStream;\n      window.RTCPeerConnection.prototype.addStream = function(stream) {\n        var pc = this;\n        pc._senders = pc._senders || [];\n        origAddStream.apply(pc, [stream]);\n        stream.getTracks().forEach(function(track) {\n          pc._senders.push(shimSenderWithDtmf(pc, track));\n        });\n      };\n\n      var origRemoveStream = window.RTCPeerConnection.prototype.removeStream;\n      window.RTCPeerConnection.prototype.removeStream = function(stream) {\n        var pc = this;\n        pc._senders = pc._senders || [];\n        origRemoveStream.apply(pc, [stream]);\n\n        stream.getTracks().forEach(function(track) {\n          var sender = pc._senders.find(function(s) {\n            return s.track === track;\n          });\n          if (sender) {\n            pc._senders.splice(pc._senders.indexOf(sender), 1); // remove sender\n          }\n        });\n      };\n    } else if (typeof window === 'object' && window.RTCPeerConnection &&\n               'getSenders' in window.RTCPeerConnection.prototype &&\n               'createDTMFSender' in window.RTCPeerConnection.prototype &&\n               window.RTCRtpSender &&\n               !('dtmf' in window.RTCRtpSender.prototype)) {\n      var origGetSenders = window.RTCPeerConnection.prototype.getSenders;\n      window.RTCPeerConnection.prototype.getSenders = function() {\n        var pc = this;\n        var senders = origGetSenders.apply(pc, []);\n        senders.forEach(function(sender) {\n          sender._pc = pc;\n        });\n        return senders;\n      };\n\n      Object.defineProperty(window.RTCRtpSender.prototype, 'dtmf', {\n        get: function() {\n          if (this._dtmf === undefined) {\n            if (this.track.kind === 'audio') {\n              this._dtmf = this._pc.createDTMFSender(this.track);\n            } else {\n              this._dtmf = null;\n            }\n          }\n          return this._dtmf;\n        }\n      });\n    }\n  },\n\n  shimSourceObject: function(window) {\n    var URL = window && window.URL;\n\n    if (typeof window === 'object') {\n      if (window.HTMLMediaElement &&\n        !('srcObject' in window.HTMLMediaElement.prototype)) {\n        // Shim the srcObject property, once, when HTMLMediaElement is found.\n        Object.defineProperty(window.HTMLMediaElement.prototype, 'srcObject', {\n          get: function() {\n            return this._srcObject;\n          },\n          set: function(stream) {\n            var self = this;\n            // Use _srcObject as a private property for this shim\n            this._srcObject = stream;\n            if (this.src) {\n              URL.revokeObjectURL(this.src);\n            }\n\n            if (!stream) {\n              this.src = '';\n              return undefined;\n            }\n            this.src = URL.createObjectURL(stream);\n            // We need to recreate the blob url when a track is added or\n            // removed. Doing it manually since we want to avoid a recursion.\n            stream.addEventListener('addtrack', function() {\n              if (self.src) {\n                URL.revokeObjectURL(self.src);\n              }\n              self.src = URL.createObjectURL(stream);\n            });\n            stream.addEventListener('removetrack', function() {\n              if (self.src) {\n                URL.revokeObjectURL(self.src);\n              }\n              self.src = URL.createObjectURL(stream);\n            });\n          }\n        });\n      }\n    }\n  },\n\n  shimAddTrackRemoveTrack: function(window) {\n    var browserDetails = utils.detectBrowser(window);\n    // shim addTrack and removeTrack.\n    if (window.RTCPeerConnection.prototype.addTrack &&\n        browserDetails.version >= 63) {\n      return;\n    }\n\n    // also shim pc.getLocalStreams when addTrack is shimmed\n    // to return the original streams.\n    var origGetLocalStreams = window.RTCPeerConnection.prototype\n        .getLocalStreams;\n    window.RTCPeerConnection.prototype.getLocalStreams = function() {\n      var self = this;\n      var nativeStreams = origGetLocalStreams.apply(this);\n      self._reverseStreams = self._reverseStreams || {};\n      return nativeStreams.map(function(stream) {\n        return self._reverseStreams[stream.id];\n      });\n    };\n\n    var origAddStream = window.RTCPeerConnection.prototype.addStream;\n    window.RTCPeerConnection.prototype.addStream = function(stream) {\n      var pc = this;\n      pc._streams = pc._streams || {};\n      pc._reverseStreams = pc._reverseStreams || {};\n\n      stream.getTracks().forEach(function(track) {\n        var alreadyExists = pc.getSenders().find(function(s) {\n          return s.track === track;\n        });\n        if (alreadyExists) {\n          throw new DOMException('Track already exists.',\n              'InvalidAccessError');\n        }\n      });\n      // Add identity mapping for consistency with addTrack.\n      // Unless this is being used with a stream from addTrack.\n      if (!pc._reverseStreams[stream.id]) {\n        var newStream = new window.MediaStream(stream.getTracks());\n        pc._streams[stream.id] = newStream;\n        pc._reverseStreams[newStream.id] = stream;\n        stream = newStream;\n      }\n      origAddStream.apply(pc, [stream]);\n    };\n\n    var origRemoveStream = window.RTCPeerConnection.prototype.removeStream;\n    window.RTCPeerConnection.prototype.removeStream = function(stream) {\n      var pc = this;\n      pc._streams = pc._streams || {};\n      pc._reverseStreams = pc._reverseStreams || {};\n\n      origRemoveStream.apply(pc, [(pc._streams[stream.id] || stream)]);\n      delete pc._reverseStreams[(pc._streams[stream.id] ?\n          pc._streams[stream.id].id : stream.id)];\n      delete pc._streams[stream.id];\n    };\n\n    window.RTCPeerConnection.prototype.addTrack = function(track, stream) {\n      var pc = this;\n      if (pc.signalingState === 'closed') {\n        throw new DOMException(\n          'The RTCPeerConnection\\'s signalingState is \\'closed\\'.',\n          'InvalidStateError');\n      }\n      var streams = [].slice.call(arguments, 1);\n      if (streams.length !== 1 ||\n          !streams[0].getTracks().find(function(t) {\n            return t === track;\n          })) {\n        // this is not fully correct but all we can manage without\n        // [[associated MediaStreams]] internal slot.\n        throw new DOMException(\n          'The adapter.js addTrack polyfill only supports a single ' +\n          ' stream which is associated with the specified track.',\n          'NotSupportedError');\n      }\n\n      var alreadyExists = pc.getSenders().find(function(s) {\n        return s.track === track;\n      });\n      if (alreadyExists) {\n        throw new DOMException('Track already exists.',\n            'InvalidAccessError');\n      }\n\n      pc._streams = pc._streams || {};\n      pc._reverseStreams = pc._reverseStreams || {};\n      var oldStream = pc._streams[stream.id];\n      if (oldStream) {\n        // this is using odd Chrome behaviour, use with caution:\n        // https://bugs.chromium.org/p/webrtc/issues/detail?id=7815\n        // Note: we rely on the high-level addTrack/dtmf shim to\n        // create the sender with a dtmf sender.\n        oldStream.addTrack(track);\n\n        // Trigger ONN async.\n        Promise.resolve().then(function() {\n          pc.dispatchEvent(new Event('negotiationneeded'));\n        });\n      } else {\n        var newStream = new window.MediaStream([track]);\n        pc._streams[stream.id] = newStream;\n        pc._reverseStreams[newStream.id] = stream;\n        pc.addStream(newStream);\n      }\n      return pc.getSenders().find(function(s) {\n        return s.track === track;\n      });\n    };\n\n    // replace the internal stream id with the external one and\n    // vice versa.\n    function replaceInternalStreamId(pc, description) {\n      var sdp = description.sdp;\n      Object.keys(pc._reverseStreams || []).forEach(function(internalId) {\n        var externalStream = pc._reverseStreams[internalId];\n        var internalStream = pc._streams[externalStream.id];\n        sdp = sdp.replace(new RegExp(internalStream.id, 'g'),\n            externalStream.id);\n      });\n      return new RTCSessionDescription({\n        type: description.type,\n        sdp: sdp\n      });\n    }\n    function replaceExternalStreamId(pc, description) {\n      var sdp = description.sdp;\n      Object.keys(pc._reverseStreams || []).forEach(function(internalId) {\n        var externalStream = pc._reverseStreams[internalId];\n        var internalStream = pc._streams[externalStream.id];\n        sdp = sdp.replace(new RegExp(externalStream.id, 'g'),\n            internalStream.id);\n      });\n      return new RTCSessionDescription({\n        type: description.type,\n        sdp: sdp\n      });\n    }\n    ['createOffer', 'createAnswer'].forEach(function(method) {\n      var nativeMethod = window.RTCPeerConnection.prototype[method];\n      window.RTCPeerConnection.prototype[method] = function() {\n        var pc = this;\n        var args = arguments;\n        var isLegacyCall = arguments.length &&\n            typeof arguments[0] === 'function';\n        if (isLegacyCall) {\n          return nativeMethod.apply(pc, [\n            function(description) {\n              var desc = replaceInternalStreamId(pc, description);\n              args[0].apply(null, [desc]);\n            },\n            function(err) {\n              if (args[1]) {\n                args[1].apply(null, err);\n              }\n            }, arguments[2]\n          ]);\n        }\n        return nativeMethod.apply(pc, arguments)\n        .then(function(description) {\n          return replaceInternalStreamId(pc, description);\n        });\n      };\n    });\n\n    var origSetLocalDescription =\n        window.RTCPeerConnection.prototype.setLocalDescription;\n    window.RTCPeerConnection.prototype.setLocalDescription = function() {\n      var pc = this;\n      if (!arguments.length || !arguments[0].type) {\n        return origSetLocalDescription.apply(pc, arguments);\n      }\n      arguments[0] = replaceExternalStreamId(pc, arguments[0]);\n      return origSetLocalDescription.apply(pc, arguments);\n    };\n\n    // TODO: mangle getStats: https://w3c.github.io/webrtc-stats/#dom-rtcmediastreamstats-streamidentifier\n\n    var origLocalDescription = Object.getOwnPropertyDescriptor(\n        window.RTCPeerConnection.prototype, 'localDescription');\n    Object.defineProperty(window.RTCPeerConnection.prototype,\n        'localDescription', {\n          get: function() {\n            var pc = this;\n            var description = origLocalDescription.get.apply(this);\n            if (description.type === '') {\n              return description;\n            }\n            return replaceInternalStreamId(pc, description);\n          }\n        });\n\n    window.RTCPeerConnection.prototype.removeTrack = function(sender) {\n      var pc = this;\n      if (pc.signalingState === 'closed') {\n        throw new DOMException(\n          'The RTCPeerConnection\\'s signalingState is \\'closed\\'.',\n          'InvalidStateError');\n      }\n      // We can not yet check for sender instanceof RTCRtpSender\n      // since we shim RTPSender. So we check if sender._pc is set.\n      if (!sender._pc) {\n        throw new DOMException('Argument 1 of RTCPeerConnection.removeTrack ' +\n            'does not implement interface RTCRtpSender.', 'TypeError');\n      }\n      var isLocal = sender._pc === pc;\n      if (!isLocal) {\n        throw new DOMException('Sender was not created by this connection.',\n            'InvalidAccessError');\n      }\n\n      // Search for the native stream the senders track belongs to.\n      pc._streams = pc._streams || {};\n      var stream;\n      Object.keys(pc._streams).forEach(function(streamid) {\n        var hasTrack = pc._streams[streamid].getTracks().find(function(track) {\n          return sender.track === track;\n        });\n        if (hasTrack) {\n          stream = pc._streams[streamid];\n        }\n      });\n\n      if (stream) {\n        if (stream.getTracks().length === 1) {\n          // if this is the last track of the stream, remove the stream. This\n          // takes care of any shimmed _senders.\n          pc.removeStream(pc._reverseStreams[stream.id]);\n        } else {\n          // relying on the same odd chrome behaviour as above.\n          stream.removeTrack(sender.track);\n        }\n        pc.dispatchEvent(new Event('negotiationneeded'));\n      }\n    };\n  },\n\n  shimPeerConnection: function(window) {\n    var browserDetails = utils.detectBrowser(window);\n\n    // The RTCPeerConnection object.\n    if (!window.RTCPeerConnection) {\n      window.RTCPeerConnection = function(pcConfig, pcConstraints) {\n        // Translate iceTransportPolicy to iceTransports,\n        // see https://code.google.com/p/webrtc/issues/detail?id=4869\n        // this was fixed in M56 along with unprefixing RTCPeerConnection.\n        logging('PeerConnection');\n        if (pcConfig && pcConfig.iceTransportPolicy) {\n          pcConfig.iceTransports = pcConfig.iceTransportPolicy;\n        }\n\n        return new window.webkitRTCPeerConnection(pcConfig, pcConstraints);\n      };\n      window.RTCPeerConnection.prototype =\n          window.webkitRTCPeerConnection.prototype;\n      // wrap static methods. Currently just generateCertificate.\n      if (window.webkitRTCPeerConnection.generateCertificate) {\n        Object.defineProperty(window.RTCPeerConnection, 'generateCertificate', {\n          get: function() {\n            return window.webkitRTCPeerConnection.generateCertificate;\n          }\n        });\n      }\n    } else {\n      // migrate from non-spec RTCIceServer.url to RTCIceServer.urls\n      var OrigPeerConnection = window.RTCPeerConnection;\n      window.RTCPeerConnection = function(pcConfig, pcConstraints) {\n        if (pcConfig && pcConfig.iceServers) {\n          var newIceServers = [];\n          for (var i = 0; i < pcConfig.iceServers.length; i++) {\n            var server = pcConfig.iceServers[i];\n            if (!server.hasOwnProperty('urls') &&\n                server.hasOwnProperty('url')) {\n              utils.deprecated('RTCIceServer.url', 'RTCIceServer.urls');\n              server = JSON.parse(JSON.stringify(server));\n              server.urls = server.url;\n              newIceServers.push(server);\n            } else {\n              newIceServers.push(pcConfig.iceServers[i]);\n            }\n          }\n          pcConfig.iceServers = newIceServers;\n        }\n        return new OrigPeerConnection(pcConfig, pcConstraints);\n      };\n      window.RTCPeerConnection.prototype = OrigPeerConnection.prototype;\n      // wrap static methods. Currently just generateCertificate.\n      Object.defineProperty(window.RTCPeerConnection, 'generateCertificate', {\n        get: function() {\n          return OrigPeerConnection.generateCertificate;\n        }\n      });\n    }\n\n    var origGetStats = window.RTCPeerConnection.prototype.getStats;\n    window.RTCPeerConnection.prototype.getStats = function(selector,\n        successCallback, errorCallback) {\n      var self = this;\n      var args = arguments;\n\n      // If selector is a function then we are in the old style stats so just\n      // pass back the original getStats format to avoid breaking old users.\n      if (arguments.length > 0 && typeof selector === 'function') {\n        return origGetStats.apply(this, arguments);\n      }\n\n      // When spec-style getStats is supported, return those when called with\n      // either no arguments or the selector argument is null.\n      if (origGetStats.length === 0 && (arguments.length === 0 ||\n          typeof arguments[0] !== 'function')) {\n        return origGetStats.apply(this, []);\n      }\n\n      var fixChromeStats_ = function(response) {\n        var standardReport = {};\n        var reports = response.result();\n        reports.forEach(function(report) {\n          var standardStats = {\n            id: report.id,\n            timestamp: report.timestamp,\n            type: {\n              localcandidate: 'local-candidate',\n              remotecandidate: 'remote-candidate'\n            }[report.type] || report.type\n          };\n          report.names().forEach(function(name) {\n            standardStats[name] = report.stat(name);\n          });\n          standardReport[standardStats.id] = standardStats;\n        });\n\n        return standardReport;\n      };\n\n      // shim getStats with maplike support\n      var makeMapStats = function(stats) {\n        return new Map(Object.keys(stats).map(function(key) {\n          return [key, stats[key]];\n        }));\n      };\n\n      if (arguments.length >= 2) {\n        var successCallbackWrapper_ = function(response) {\n          args[1](makeMapStats(fixChromeStats_(response)));\n        };\n\n        return origGetStats.apply(this, [successCallbackWrapper_,\n          arguments[0]]);\n      }\n\n      // promise-support\n      return new Promise(function(resolve, reject) {\n        origGetStats.apply(self, [\n          function(response) {\n            resolve(makeMapStats(fixChromeStats_(response)));\n          }, reject]);\n      }).then(successCallback, errorCallback);\n    };\n\n    // add promise support -- natively available in Chrome 51\n    if (browserDetails.version < 51) {\n      ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate']\n          .forEach(function(method) {\n            var nativeMethod = window.RTCPeerConnection.prototype[method];\n            window.RTCPeerConnection.prototype[method] = function() {\n              var args = arguments;\n              var self = this;\n              var promise = new Promise(function(resolve, reject) {\n                nativeMethod.apply(self, [args[0], resolve, reject]);\n              });\n              if (args.length < 2) {\n                return promise;\n              }\n              return promise.then(function() {\n                args[1].apply(null, []);\n              },\n              function(err) {\n                if (args.length >= 3) {\n                  args[2].apply(null, [err]);\n                }\n              });\n            };\n          });\n    }\n\n    // promise support for createOffer and createAnswer. Available (without\n    // bugs) since M52: crbug/619289\n    if (browserDetails.version < 52) {\n      ['createOffer', 'createAnswer'].forEach(function(method) {\n        var nativeMethod = window.RTCPeerConnection.prototype[method];\n        window.RTCPeerConnection.prototype[method] = function() {\n          var self = this;\n          if (arguments.length < 1 || (arguments.length === 1 &&\n              typeof arguments[0] === 'object')) {\n            var opts = arguments.length === 1 ? arguments[0] : undefined;\n            return new Promise(function(resolve, reject) {\n              nativeMethod.apply(self, [resolve, reject, opts]);\n            });\n          }\n          return nativeMethod.apply(this, arguments);\n        };\n      });\n    }\n\n    // shim implicit creation of RTCSessionDescription/RTCIceCandidate\n    ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate']\n        .forEach(function(method) {\n          var nativeMethod = window.RTCPeerConnection.prototype[method];\n          window.RTCPeerConnection.prototype[method] = function() {\n            arguments[0] = new ((method === 'addIceCandidate') ?\n                window.RTCIceCandidate :\n                window.RTCSessionDescription)(arguments[0]);\n            return nativeMethod.apply(this, arguments);\n          };\n        });\n\n    // support for addIceCandidate(null or undefined)\n    var nativeAddIceCandidate =\n        window.RTCPeerConnection.prototype.addIceCandidate;\n    window.RTCPeerConnection.prototype.addIceCandidate = function() {\n      if (!arguments[0]) {\n        if (arguments[1]) {\n          arguments[1].apply(null);\n        }\n        return Promise.resolve();\n      }\n      return nativeAddIceCandidate.apply(this, arguments);\n    };\n  }\n};\n\n\n// Expose public methods.\nmodule.exports = {\n  shimMediaStream: chromeShim.shimMediaStream,\n  shimOnTrack: chromeShim.shimOnTrack,\n  shimAddTrackRemoveTrack: chromeShim.shimAddTrackRemoveTrack,\n  shimGetSendersWithDtmf: chromeShim.shimGetSendersWithDtmf,\n  shimSourceObject: chromeShim.shimSourceObject,\n  shimPeerConnection: chromeShim.shimPeerConnection,\n  shimGetUserMedia: require('./getusermedia')\n};\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n /* eslint-env node */\n'use strict';\nvar utils = require('../utils.js');\nvar logging = utils.log;\n\n// Expose public methods.\nmodule.exports = function(window) {\n  var browserDetails = utils.detectBrowser(window);\n  var navigator = window && window.navigator;\n\n  var constraintsToChrome_ = function(c) {\n    if (typeof c !== 'object' || c.mandatory || c.optional) {\n      return c;\n    }\n    var cc = {};\n    Object.keys(c).forEach(function(key) {\n      if (key === 'require' || key === 'advanced' || key === 'mediaSource') {\n        return;\n      }\n      var r = (typeof c[key] === 'object') ? c[key] : {ideal: c[key]};\n      if (r.exact !== undefined && typeof r.exact === 'number') {\n        r.min = r.max = r.exact;\n      }\n      var oldname_ = function(prefix, name) {\n        if (prefix) {\n          return prefix + name.charAt(0).toUpperCase() + name.slice(1);\n        }\n        return (name === 'deviceId') ? 'sourceId' : name;\n      };\n      if (r.ideal !== undefined) {\n        cc.optional = cc.optional || [];\n        var oc = {};\n        if (typeof r.ideal === 'number') {\n          oc[oldname_('min', key)] = r.ideal;\n          cc.optional.push(oc);\n          oc = {};\n          oc[oldname_('max', key)] = r.ideal;\n          cc.optional.push(oc);\n        } else {\n          oc[oldname_('', key)] = r.ideal;\n          cc.optional.push(oc);\n        }\n      }\n      if (r.exact !== undefined && typeof r.exact !== 'number') {\n        cc.mandatory = cc.mandatory || {};\n        cc.mandatory[oldname_('', key)] = r.exact;\n      } else {\n        ['min', 'max'].forEach(function(mix) {\n          if (r[mix] !== undefined) {\n            cc.mandatory = cc.mandatory || {};\n            cc.mandatory[oldname_(mix, key)] = r[mix];\n          }\n        });\n      }\n    });\n    if (c.advanced) {\n      cc.optional = (cc.optional || []).concat(c.advanced);\n    }\n    return cc;\n  };\n\n  var shimConstraints_ = function(constraints, func) {\n    if (browserDetails.version >= 61) {\n      return func(constraints);\n    }\n    constraints = JSON.parse(JSON.stringify(constraints));\n    if (constraints && typeof constraints.audio === 'object') {\n      var remap = function(obj, a, b) {\n        if (a in obj && !(b in obj)) {\n          obj[b] = obj[a];\n          delete obj[a];\n        }\n      };\n      constraints = JSON.parse(JSON.stringify(constraints));\n      remap(constraints.audio, 'autoGainControl', 'googAutoGainControl');\n      remap(constraints.audio, 'noiseSuppression', 'googNoiseSuppression');\n      constraints.audio = constraintsToChrome_(constraints.audio);\n    }\n    if (constraints && typeof constraints.video === 'object') {\n      // Shim facingMode for mobile & surface pro.\n      var face = constraints.video.facingMode;\n      face = face && ((typeof face === 'object') ? face : {ideal: face});\n      var getSupportedFacingModeLies = browserDetails.version < 66;\n\n      if ((face && (face.exact === 'user' || face.exact === 'environment' ||\n                    face.ideal === 'user' || face.ideal === 'environment')) &&\n          !(navigator.mediaDevices.getSupportedConstraints &&\n            navigator.mediaDevices.getSupportedConstraints().facingMode &&\n            !getSupportedFacingModeLies)) {\n        delete constraints.video.facingMode;\n        var matches;\n        if (face.exact === 'environment' || face.ideal === 'environment') {\n          matches = ['back', 'rear'];\n        } else if (face.exact === 'user' || face.ideal === 'user') {\n          matches = ['front'];\n        }\n        if (matches) {\n          // Look for matches in label, or use last cam for back (typical).\n          return navigator.mediaDevices.enumerateDevices()\n          .then(function(devices) {\n            devices = devices.filter(function(d) {\n              return d.kind === 'videoinput';\n            });\n            var dev = devices.find(function(d) {\n              return matches.some(function(match) {\n                return d.label.toLowerCase().indexOf(match) !== -1;\n              });\n            });\n            if (!dev && devices.length && matches.indexOf('back') !== -1) {\n              dev = devices[devices.length - 1]; // more likely the back cam\n            }\n            if (dev) {\n              constraints.video.deviceId = face.exact ? {exact: dev.deviceId} :\n                                                        {ideal: dev.deviceId};\n            }\n            constraints.video = constraintsToChrome_(constraints.video);\n            logging('chrome: ' + JSON.stringify(constraints));\n            return func(constraints);\n          });\n        }\n      }\n      constraints.video = constraintsToChrome_(constraints.video);\n    }\n    logging('chrome: ' + JSON.stringify(constraints));\n    return func(constraints);\n  };\n\n  var shimError_ = function(e) {\n    return {\n      name: {\n        PermissionDeniedError: 'NotAllowedError',\n        InvalidStateError: 'NotReadableError',\n        DevicesNotFoundError: 'NotFoundError',\n        ConstraintNotSatisfiedError: 'OverconstrainedError',\n        TrackStartError: 'NotReadableError',\n        MediaDeviceFailedDueToShutdown: 'NotReadableError',\n        MediaDeviceKillSwitchOn: 'NotReadableError'\n      }[e.name] || e.name,\n      message: e.message,\n      constraint: e.constraintName,\n      toString: function() {\n        return this.name + (this.message && ': ') + this.message;\n      }\n    };\n  };\n\n  var getUserMedia_ = function(constraints, onSuccess, onError) {\n    shimConstraints_(constraints, function(c) {\n      navigator.webkitGetUserMedia(c, onSuccess, function(e) {\n        if (onError) {\n          onError(shimError_(e));\n        }\n      });\n    });\n  };\n\n  navigator.getUserMedia = getUserMedia_;\n\n  // Returns the result of getUserMedia as a Promise.\n  var getUserMediaPromise_ = function(constraints) {\n    return new Promise(function(resolve, reject) {\n      navigator.getUserMedia(constraints, resolve, reject);\n    });\n  };\n\n  if (!navigator.mediaDevices) {\n    navigator.mediaDevices = {\n      getUserMedia: getUserMediaPromise_,\n      enumerateDevices: function() {\n        return new Promise(function(resolve) {\n          var kinds = {audio: 'audioinput', video: 'videoinput'};\n          return window.MediaStreamTrack.getSources(function(devices) {\n            resolve(devices.map(function(device) {\n              return {label: device.label,\n                kind: kinds[device.kind],\n                deviceId: device.id,\n                groupId: ''};\n            }));\n          });\n        });\n      },\n      getSupportedConstraints: function() {\n        return {\n          deviceId: true, echoCancellation: true, facingMode: true,\n          frameRate: true, height: true, width: true\n        };\n      }\n    };\n  }\n\n  // A shim for getUserMedia method on the mediaDevices object.\n  // TODO(KaptenJansson) remove once implemented in Chrome stable.\n  if (!navigator.mediaDevices.getUserMedia) {\n    navigator.mediaDevices.getUserMedia = function(constraints) {\n      return getUserMediaPromise_(constraints);\n    };\n  } else {\n    // Even though Chrome 45 has navigator.mediaDevices and a getUserMedia\n    // function which returns a Promise, it does not accept spec-style\n    // constraints.\n    var origGetUserMedia = navigator.mediaDevices.getUserMedia.\n        bind(navigator.mediaDevices);\n    navigator.mediaDevices.getUserMedia = function(cs) {\n      return shimConstraints_(cs, function(c) {\n        return origGetUserMedia(c).then(function(stream) {\n          if (c.audio && !stream.getAudioTracks().length ||\n              c.video && !stream.getVideoTracks().length) {\n            stream.getTracks().forEach(function(track) {\n              track.stop();\n            });\n            throw new DOMException('', 'NotFoundError');\n          }\n          return stream;\n        }, function(e) {\n          return Promise.reject(shimError_(e));\n        });\n      });\n    };\n  }\n\n  // Dummy devicechange event methods.\n  // TODO(KaptenJansson) remove once implemented in Chrome stable.\n  if (typeof navigator.mediaDevices.addEventListener === 'undefined') {\n    navigator.mediaDevices.addEventListener = function() {\n      logging('Dummy mediaDevices.addEventListener called.');\n    };\n  }\n  if (typeof navigator.mediaDevices.removeEventListener === 'undefined') {\n    navigator.mediaDevices.removeEventListener = function() {\n      logging('Dummy mediaDevices.removeEventListener called.');\n    };\n  }\n};\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n /* eslint-env node */\n'use strict';\n\nvar utils = require('../utils');\nvar shimRTCPeerConnection = require('rtcpeerconnection-shim');\n\nmodule.exports = {\n  shimGetUserMedia: require('./getusermedia'),\n  shimPeerConnection: function(window) {\n    var browserDetails = utils.detectBrowser(window);\n\n    if (window.RTCIceGatherer) {\n      // ORTC defines an RTCIceCandidate object but no constructor.\n      // Not implemented in Edge.\n      if (!window.RTCIceCandidate) {\n        window.RTCIceCandidate = function(args) {\n          return args;\n        };\n      }\n      // ORTC does not have a session description object but\n      // other browsers (i.e. Chrome) that will support both PC and ORTC\n      // in the future might have this defined already.\n      if (!window.RTCSessionDescription) {\n        window.RTCSessionDescription = function(args) {\n          return args;\n        };\n      }\n      // this adds an additional event listener to MediaStrackTrack that signals\n      // when a tracks enabled property was changed. Workaround for a bug in\n      // addStream, see below. No longer required in 15025+\n      if (browserDetails.version < 15025) {\n        var origMSTEnabled = Object.getOwnPropertyDescriptor(\n            window.MediaStreamTrack.prototype, 'enabled');\n        Object.defineProperty(window.MediaStreamTrack.prototype, 'enabled', {\n          set: function(value) {\n            origMSTEnabled.set.call(this, value);\n            var ev = new Event('enabled');\n            ev.enabled = value;\n            this.dispatchEvent(ev);\n          }\n        });\n      }\n    }\n\n    // ORTC defines the DTMF sender a bit different.\n    // https://github.com/w3c/ortc/issues/714\n    if (window.RTCRtpSender && !('dtmf' in window.RTCRtpSender.prototype)) {\n      Object.defineProperty(window.RTCRtpSender.prototype, 'dtmf', {\n        get: function() {\n          if (this._dtmf === undefined) {\n            if (this.track.kind === 'audio') {\n              this._dtmf = new window.RTCDtmfSender(this);\n            } else if (this.track.kind === 'video') {\n              this._dtmf = null;\n            }\n          }\n          return this._dtmf;\n        }\n      });\n    }\n\n    window.RTCPeerConnection =\n        shimRTCPeerConnection(window, browserDetails.version);\n  },\n  shimReplaceTrack: function(window) {\n    // ORTC has replaceTrack -- https://github.com/w3c/ortc/issues/614\n    if (window.RTCRtpSender &&\n        !('replaceTrack' in window.RTCRtpSender.prototype)) {\n      window.RTCRtpSender.prototype.replaceTrack =\n          window.RTCRtpSender.prototype.setTrack;\n    }\n  }\n};\n","/*\n *  Copyright (c) 2017 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n /* eslint-env node */\n'use strict';\n\nvar SDPUtils = require('sdp');\n\nfunction writeMediaSection(transceiver, caps, type, stream, dtlsRole) {\n  var sdp = SDPUtils.writeRtpDescription(transceiver.kind, caps);\n\n  // Map ICE parameters (ufrag, pwd) to SDP.\n  sdp += SDPUtils.writeIceParameters(\n      transceiver.iceGatherer.getLocalParameters());\n\n  // Map DTLS parameters to SDP.\n  sdp += SDPUtils.writeDtlsParameters(\n      transceiver.dtlsTransport.getLocalParameters(),\n      type === 'offer' ? 'actpass' : dtlsRole || 'active');\n\n  sdp += 'a=mid:' + transceiver.mid + '\\r\\n';\n\n  if (transceiver.rtpSender && transceiver.rtpReceiver) {\n    sdp += 'a=sendrecv\\r\\n';\n  } else if (transceiver.rtpSender) {\n    sdp += 'a=sendonly\\r\\n';\n  } else if (transceiver.rtpReceiver) {\n    sdp += 'a=recvonly\\r\\n';\n  } else {\n    sdp += 'a=inactive\\r\\n';\n  }\n\n  if (transceiver.rtpSender) {\n    // spec.\n    var msid = 'msid:' + (stream ? stream.id : '-') + ' ' +\n        transceiver.rtpSender.track.id + '\\r\\n';\n    sdp += 'a=' + msid;\n\n    // for Chrome.\n    sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].ssrc +\n        ' ' + msid;\n    if (transceiver.sendEncodingParameters[0].rtx) {\n      sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].rtx.ssrc +\n          ' ' + msid;\n      sdp += 'a=ssrc-group:FID ' +\n          transceiver.sendEncodingParameters[0].ssrc + ' ' +\n          transceiver.sendEncodingParameters[0].rtx.ssrc +\n          '\\r\\n';\n    }\n  }\n  // FIXME: this should be written by writeRtpDescription.\n  sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].ssrc +\n      ' cname:' + SDPUtils.localCName + '\\r\\n';\n  if (transceiver.rtpSender && transceiver.sendEncodingParameters[0].rtx) {\n    sdp += 'a=ssrc:' + transceiver.sendEncodingParameters[0].rtx.ssrc +\n        ' cname:' + SDPUtils.localCName + '\\r\\n';\n  }\n  return sdp;\n}\n\n// Edge does not like\n// 1) stun: filtered after 14393 unless ?transport=udp is present\n// 2) turn: that does not have all of turn:host:port?transport=udp\n// 3) turn: with ipv6 addresses\n// 4) turn: occurring muliple times\nfunction filterIceServers(iceServers, edgeVersion) {\n  var hasTurn = false;\n  iceServers = JSON.parse(JSON.stringify(iceServers));\n  return iceServers.filter(function(server) {\n    if (server && (server.urls || server.url)) {\n      var urls = server.urls || server.url;\n      if (server.url && !server.urls) {\n        console.warn('RTCIceServer.url is deprecated! Use urls instead.');\n      }\n      var isString = typeof urls === 'string';\n      if (isString) {\n        urls = [urls];\n      }\n      urls = urls.filter(function(url) {\n        var validTurn = url.indexOf('turn:') === 0 &&\n            url.indexOf('transport=udp') !== -1 &&\n            url.indexOf('turn:[') === -1 &&\n            !hasTurn;\n\n        if (validTurn) {\n          hasTurn = true;\n          return true;\n        }\n        return url.indexOf('stun:') === 0 && edgeVersion >= 14393 &&\n            url.indexOf('?transport=udp') === -1;\n      });\n\n      delete server.url;\n      server.urls = isString ? urls[0] : urls;\n      return !!urls.length;\n    }\n  });\n}\n\n// Determines the intersection of local and remote capabilities.\nfunction getCommonCapabilities(localCapabilities, remoteCapabilities) {\n  var commonCapabilities = {\n    codecs: [],\n    headerExtensions: [],\n    fecMechanisms: []\n  };\n\n  var findCodecByPayloadType = function(pt, codecs) {\n    pt = parseInt(pt, 10);\n    for (var i = 0; i < codecs.length; i++) {\n      if (codecs[i].payloadType === pt ||\n          codecs[i].preferredPayloadType === pt) {\n        return codecs[i];\n      }\n    }\n  };\n\n  var rtxCapabilityMatches = function(lRtx, rRtx, lCodecs, rCodecs) {\n    var lCodec = findCodecByPayloadType(lRtx.parameters.apt, lCodecs);\n    var rCodec = findCodecByPayloadType(rRtx.parameters.apt, rCodecs);\n    return lCodec && rCodec &&\n        lCodec.name.toLowerCase() === rCodec.name.toLowerCase();\n  };\n\n  localCapabilities.codecs.forEach(function(lCodec) {\n    for (var i = 0; i < remoteCapabilities.codecs.length; i++) {\n      var rCodec = remoteCapabilities.codecs[i];\n      if (lCodec.name.toLowerCase() === rCodec.name.toLowerCase() &&\n          lCodec.clockRate === rCodec.clockRate) {\n        if (lCodec.name.toLowerCase() === 'rtx' &&\n            lCodec.parameters && rCodec.parameters.apt) {\n          // for RTX we need to find the local rtx that has a apt\n          // which points to the same local codec as the remote one.\n          if (!rtxCapabilityMatches(lCodec, rCodec,\n              localCapabilities.codecs, remoteCapabilities.codecs)) {\n            continue;\n          }\n        }\n        rCodec = JSON.parse(JSON.stringify(rCodec)); // deepcopy\n        // number of channels is the highest common number of channels\n        rCodec.numChannels = Math.min(lCodec.numChannels,\n            rCodec.numChannels);\n        // push rCodec so we reply with offerer payload type\n        commonCapabilities.codecs.push(rCodec);\n\n        // determine common feedback mechanisms\n        rCodec.rtcpFeedback = rCodec.rtcpFeedback.filter(function(fb) {\n          for (var j = 0; j < lCodec.rtcpFeedback.length; j++) {\n            if (lCodec.rtcpFeedback[j].type === fb.type &&\n                lCodec.rtcpFeedback[j].parameter === fb.parameter) {\n              return true;\n            }\n          }\n          return false;\n        });\n        // FIXME: also need to determine .parameters\n        //  see https://github.com/openpeer/ortc/issues/569\n        break;\n      }\n    }\n  });\n\n  localCapabilities.headerExtensions.forEach(function(lHeaderExtension) {\n    for (var i = 0; i < remoteCapabilities.headerExtensions.length;\n         i++) {\n      var rHeaderExtension = remoteCapabilities.headerExtensions[i];\n      if (lHeaderExtension.uri === rHeaderExtension.uri) {\n        commonCapabilities.headerExtensions.push(rHeaderExtension);\n        break;\n      }\n    }\n  });\n\n  // FIXME: fecMechanisms\n  return commonCapabilities;\n}\n\n// is action=setLocalDescription with type allowed in signalingState\nfunction isActionAllowedInSignalingState(action, type, signalingState) {\n  return {\n    offer: {\n      setLocalDescription: ['stable', 'have-local-offer'],\n      setRemoteDescription: ['stable', 'have-remote-offer']\n    },\n    answer: {\n      setLocalDescription: ['have-remote-offer', 'have-local-pranswer'],\n      setRemoteDescription: ['have-local-offer', 'have-remote-pranswer']\n    }\n  }[type][action].indexOf(signalingState) !== -1;\n}\n\nfunction maybeAddCandidate(iceTransport, candidate) {\n  // Edge's internal representation adds some fields therefore\n  // not all fieldѕ are taken into account.\n  var alreadyAdded = iceTransport.getRemoteCandidates()\n      .find(function(remoteCandidate) {\n        return candidate.foundation === remoteCandidate.foundation &&\n            candidate.ip === remoteCandidate.ip &&\n            candidate.port === remoteCandidate.port &&\n            candidate.priority === remoteCandidate.priority &&\n            candidate.protocol === remoteCandidate.protocol &&\n            candidate.type === remoteCandidate.type;\n      });\n  if (!alreadyAdded) {\n    iceTransport.addRemoteCandidate(candidate);\n  }\n  return !alreadyAdded;\n}\n\n\nfunction makeError(name, description) {\n  var e = new Error(description);\n  e.name = name;\n  return e;\n}\n\nmodule.exports = function(window, edgeVersion) {\n  // https://w3c.github.io/mediacapture-main/#mediastream\n  // Helper function to add the track to the stream and\n  // dispatch the event ourselves.\n  function addTrackToStreamAndFireEvent(track, stream) {\n    stream.addTrack(track);\n    stream.dispatchEvent(new window.MediaStreamTrackEvent('addtrack',\n        {track: track}));\n  }\n\n  function removeTrackFromStreamAndFireEvent(track, stream) {\n    stream.removeTrack(track);\n    stream.dispatchEvent(new window.MediaStreamTrackEvent('removetrack',\n        {track: track}));\n  }\n\n  function fireAddTrack(pc, track, receiver, streams) {\n    var trackEvent = new Event('track');\n    trackEvent.track = track;\n    trackEvent.receiver = receiver;\n    trackEvent.transceiver = {receiver: receiver};\n    trackEvent.streams = streams;\n    window.setTimeout(function() {\n      pc._dispatchEvent('track', trackEvent);\n    });\n  }\n\n  var RTCPeerConnection = function(config) {\n    var pc = this;\n\n    var _eventTarget = document.createDocumentFragment();\n    ['addEventListener', 'removeEventListener', 'dispatchEvent']\n        .forEach(function(method) {\n          pc[method] = _eventTarget[method].bind(_eventTarget);\n        });\n\n    this.canTrickleIceCandidates = null;\n\n    this.needNegotiation = false;\n\n    this.localStreams = [];\n    this.remoteStreams = [];\n\n    this.localDescription = null;\n    this.remoteDescription = null;\n\n    this.signalingState = 'stable';\n    this.iceConnectionState = 'new';\n    this.iceGatheringState = 'new';\n\n    config = JSON.parse(JSON.stringify(config || {}));\n\n    this.usingBundle = config.bundlePolicy === 'max-bundle';\n    if (config.rtcpMuxPolicy === 'negotiate') {\n      throw(makeError('NotSupportedError',\n          'rtcpMuxPolicy \\'negotiate\\' is not supported'));\n    } else if (!config.rtcpMuxPolicy) {\n      config.rtcpMuxPolicy = 'require';\n    }\n\n    switch (config.iceTransportPolicy) {\n      case 'all':\n      case 'relay':\n        break;\n      default:\n        config.iceTransportPolicy = 'all';\n        break;\n    }\n\n    switch (config.bundlePolicy) {\n      case 'balanced':\n      case 'max-compat':\n      case 'max-bundle':\n        break;\n      default:\n        config.bundlePolicy = 'balanced';\n        break;\n    }\n\n    config.iceServers = filterIceServers(config.iceServers || [], edgeVersion);\n\n    this._iceGatherers = [];\n    if (config.iceCandidatePoolSize) {\n      for (var i = config.iceCandidatePoolSize; i > 0; i--) {\n        this._iceGatherers.push(new window.RTCIceGatherer({\n          iceServers: config.iceServers,\n          gatherPolicy: config.iceTransportPolicy\n        }));\n      }\n    } else {\n      config.iceCandidatePoolSize = 0;\n    }\n\n    this._config = config;\n\n    // per-track iceGathers, iceTransports, dtlsTransports, rtpSenders, ...\n    // everything that is needed to describe a SDP m-line.\n    this.transceivers = [];\n\n    this._sdpSessionId = SDPUtils.generateSessionId();\n    this._sdpSessionVersion = 0;\n\n    this._dtlsRole = undefined; // role for a=setup to use in answers.\n\n    this._isClosed = false;\n  };\n\n  // set up event handlers on prototype\n  RTCPeerConnection.prototype.onicecandidate = null;\n  RTCPeerConnection.prototype.onaddstream = null;\n  RTCPeerConnection.prototype.ontrack = null;\n  RTCPeerConnection.prototype.onremovestream = null;\n  RTCPeerConnection.prototype.onsignalingstatechange = null;\n  RTCPeerConnection.prototype.oniceconnectionstatechange = null;\n  RTCPeerConnection.prototype.onicegatheringstatechange = null;\n  RTCPeerConnection.prototype.onnegotiationneeded = null;\n  RTCPeerConnection.prototype.ondatachannel = null;\n\n  RTCPeerConnection.prototype._dispatchEvent = function(name, event) {\n    if (this._isClosed) {\n      return;\n    }\n    this.dispatchEvent(event);\n    if (typeof this['on' + name] === 'function') {\n      this['on' + name](event);\n    }\n  };\n\n  RTCPeerConnection.prototype._emitGatheringStateChange = function() {\n    var event = new Event('icegatheringstatechange');\n    this._dispatchEvent('icegatheringstatechange', event);\n  };\n\n  RTCPeerConnection.prototype.getConfiguration = function() {\n    return this._config;\n  };\n\n  RTCPeerConnection.prototype.getLocalStreams = function() {\n    return this.localStreams;\n  };\n\n  RTCPeerConnection.prototype.getRemoteStreams = function() {\n    return this.remoteStreams;\n  };\n\n  // internal helper to create a transceiver object.\n  // (whih is not yet the same as the WebRTC 1.0 transceiver)\n  RTCPeerConnection.prototype._createTransceiver = function(kind) {\n    var hasBundleTransport = this.transceivers.length > 0;\n    var transceiver = {\n      track: null,\n      iceGatherer: null,\n      iceTransport: null,\n      dtlsTransport: null,\n      localCapabilities: null,\n      remoteCapabilities: null,\n      rtpSender: null,\n      rtpReceiver: null,\n      kind: kind,\n      mid: null,\n      sendEncodingParameters: null,\n      recvEncodingParameters: null,\n      stream: null,\n      associatedRemoteMediaStreams: [],\n      wantReceive: true\n    };\n    if (this.usingBundle && hasBundleTransport) {\n      transceiver.iceTransport = this.transceivers[0].iceTransport;\n      transceiver.dtlsTransport = this.transceivers[0].dtlsTransport;\n    } else {\n      var transports = this._createIceAndDtlsTransports();\n      transceiver.iceTransport = transports.iceTransport;\n      transceiver.dtlsTransport = transports.dtlsTransport;\n    }\n    this.transceivers.push(transceiver);\n    return transceiver;\n  };\n\n  RTCPeerConnection.prototype.addTrack = function(track, stream) {\n    if (this._isClosed) {\n      throw makeError('InvalidStateError',\n          'Attempted to call addTrack on a closed peerconnection.');\n    }\n\n    var alreadyExists = this.transceivers.find(function(s) {\n      return s.track === track;\n    });\n\n    if (alreadyExists) {\n      throw makeError('InvalidAccessError', 'Track already exists.');\n    }\n\n    var transceiver;\n    for (var i = 0; i < this.transceivers.length; i++) {\n      if (!this.transceivers[i].track &&\n          this.transceivers[i].kind === track.kind) {\n        transceiver = this.transceivers[i];\n      }\n    }\n    if (!transceiver) {\n      transceiver = this._createTransceiver(track.kind);\n    }\n\n    this._maybeFireNegotiationNeeded();\n\n    if (this.localStreams.indexOf(stream) === -1) {\n      this.localStreams.push(stream);\n    }\n\n    transceiver.track = track;\n    transceiver.stream = stream;\n    transceiver.rtpSender = new window.RTCRtpSender(track,\n        transceiver.dtlsTransport);\n    return transceiver.rtpSender;\n  };\n\n  RTCPeerConnection.prototype.addStream = function(stream) {\n    var pc = this;\n    if (edgeVersion >= 15025) {\n      stream.getTracks().forEach(function(track) {\n        pc.addTrack(track, stream);\n      });\n    } else {\n      // Clone is necessary for local demos mostly, attaching directly\n      // to two different senders does not work (build 10547).\n      // Fixed in 15025 (or earlier)\n      var clonedStream = stream.clone();\n      stream.getTracks().forEach(function(track, idx) {\n        var clonedTrack = clonedStream.getTracks()[idx];\n        track.addEventListener('enabled', function(event) {\n          clonedTrack.enabled = event.enabled;\n        });\n      });\n      clonedStream.getTracks().forEach(function(track) {\n        pc.addTrack(track, clonedStream);\n      });\n    }\n  };\n\n  RTCPeerConnection.prototype.removeTrack = function(sender) {\n    if (this._isClosed) {\n      throw makeError('InvalidStateError',\n          'Attempted to call removeTrack on a closed peerconnection.');\n    }\n\n    if (!(sender instanceof window.RTCRtpSender)) {\n      throw new TypeError('Argument 1 of RTCPeerConnection.removeTrack ' +\n          'does not implement interface RTCRtpSender.');\n    }\n\n    var transceiver = this.transceivers.find(function(t) {\n      return t.rtpSender === sender;\n    });\n\n    if (!transceiver) {\n      throw makeError('InvalidAccessError',\n          'Sender was not created by this connection.');\n    }\n    var stream = transceiver.stream;\n\n    transceiver.rtpSender.stop();\n    transceiver.rtpSender = null;\n    transceiver.track = null;\n    transceiver.stream = null;\n\n    // remove the stream from the set of local streams\n    var localStreams = this.transceivers.map(function(t) {\n      return t.stream;\n    });\n    if (localStreams.indexOf(stream) === -1 &&\n        this.localStreams.indexOf(stream) > -1) {\n      this.localStreams.splice(this.localStreams.indexOf(stream), 1);\n    }\n\n    this._maybeFireNegotiationNeeded();\n  };\n\n  RTCPeerConnection.prototype.removeStream = function(stream) {\n    var pc = this;\n    stream.getTracks().forEach(function(track) {\n      var sender = pc.getSenders().find(function(s) {\n        return s.track === track;\n      });\n      if (sender) {\n        pc.removeTrack(sender);\n      }\n    });\n  };\n\n  RTCPeerConnection.prototype.getSenders = function() {\n    return this.transceivers.filter(function(transceiver) {\n      return !!transceiver.rtpSender;\n    })\n    .map(function(transceiver) {\n      return transceiver.rtpSender;\n    });\n  };\n\n  RTCPeerConnection.prototype.getReceivers = function() {\n    return this.transceivers.filter(function(transceiver) {\n      return !!transceiver.rtpReceiver;\n    })\n    .map(function(transceiver) {\n      return transceiver.rtpReceiver;\n    });\n  };\n\n\n  RTCPeerConnection.prototype._createIceGatherer = function(sdpMLineIndex,\n      usingBundle) {\n    var pc = this;\n    if (usingBundle && sdpMLineIndex > 0) {\n      return this.transceivers[0].iceGatherer;\n    } else if (this._iceGatherers.length) {\n      return this._iceGatherers.shift();\n    }\n    var iceGatherer = new window.RTCIceGatherer({\n      iceServers: this._config.iceServers,\n      gatherPolicy: this._config.iceTransportPolicy\n    });\n    Object.defineProperty(iceGatherer, 'state',\n        {value: 'new', writable: true}\n    );\n\n    this.transceivers[sdpMLineIndex].bufferedCandidateEvents = [];\n    this.transceivers[sdpMLineIndex].bufferCandidates = function(event) {\n      var end = !event.candidate || Object.keys(event.candidate).length === 0;\n      // polyfill since RTCIceGatherer.state is not implemented in\n      // Edge 10547 yet.\n      iceGatherer.state = end ? 'completed' : 'gathering';\n      if (pc.transceivers[sdpMLineIndex].bufferedCandidateEvents !== null) {\n        pc.transceivers[sdpMLineIndex].bufferedCandidateEvents.push(event);\n      }\n    };\n    iceGatherer.addEventListener('localcandidate',\n      this.transceivers[sdpMLineIndex].bufferCandidates);\n    return iceGatherer;\n  };\n\n  // start gathering from an RTCIceGatherer.\n  RTCPeerConnection.prototype._gather = function(mid, sdpMLineIndex) {\n    var pc = this;\n    var iceGatherer = this.transceivers[sdpMLineIndex].iceGatherer;\n    if (iceGatherer.onlocalcandidate) {\n      return;\n    }\n    var bufferedCandidateEvents =\n      this.transceivers[sdpMLineIndex].bufferedCandidateEvents;\n    this.transceivers[sdpMLineIndex].bufferedCandidateEvents = null;\n    iceGatherer.removeEventListener('localcandidate',\n      this.transceivers[sdpMLineIndex].bufferCandidates);\n    iceGatherer.onlocalcandidate = function(evt) {\n      if (pc.usingBundle && sdpMLineIndex > 0) {\n        // if we know that we use bundle we can drop candidates with\n        // ѕdpMLineIndex > 0. If we don't do this then our state gets\n        // confused since we dispose the extra ice gatherer.\n        return;\n      }\n      var event = new Event('icecandidate');\n      event.candidate = {sdpMid: mid, sdpMLineIndex: sdpMLineIndex};\n\n      var cand = evt.candidate;\n      // Edge emits an empty object for RTCIceCandidateComplete‥\n      var end = !cand || Object.keys(cand).length === 0;\n      if (end) {\n        // polyfill since RTCIceGatherer.state is not implemented in\n        // Edge 10547 yet.\n        if (iceGatherer.state === 'new' || iceGatherer.state === 'gathering') {\n          iceGatherer.state = 'completed';\n        }\n      } else {\n        if (iceGatherer.state === 'new') {\n          iceGatherer.state = 'gathering';\n        }\n        // RTCIceCandidate doesn't have a component, needs to be added\n        cand.component = 1;\n        var serializedCandidate = SDPUtils.writeCandidate(cand);\n        event.candidate = Object.assign(event.candidate,\n            SDPUtils.parseCandidate(serializedCandidate));\n        event.candidate.candidate = serializedCandidate;\n      }\n\n      // update local description.\n      var sections = SDPUtils.splitSections(pc.localDescription.sdp);\n      if (!end) {\n        sections[event.candidate.sdpMLineIndex + 1] +=\n            'a=' + event.candidate.candidate + '\\r\\n';\n      } else {\n        sections[event.candidate.sdpMLineIndex + 1] +=\n            'a=end-of-candidates\\r\\n';\n      }\n      pc.localDescription.sdp = sections.join('');\n      var complete = pc.transceivers.every(function(transceiver) {\n        return transceiver.iceGatherer &&\n            transceiver.iceGatherer.state === 'completed';\n      });\n\n      if (pc.iceGatheringState !== 'gathering') {\n        pc.iceGatheringState = 'gathering';\n        pc._emitGatheringStateChange();\n      }\n\n      // Emit candidate. Also emit null candidate when all gatherers are\n      // complete.\n      if (!end) {\n        pc._dispatchEvent('icecandidate', event);\n      }\n      if (complete) {\n        pc._dispatchEvent('icecandidate', new Event('icecandidate'));\n        pc.iceGatheringState = 'complete';\n        pc._emitGatheringStateChange();\n      }\n    };\n\n    // emit already gathered candidates.\n    window.setTimeout(function() {\n      bufferedCandidateEvents.forEach(function(e) {\n        iceGatherer.onlocalcandidate(e);\n      });\n    }, 0);\n  };\n\n  // Create ICE transport and DTLS transport.\n  RTCPeerConnection.prototype._createIceAndDtlsTransports = function() {\n    var pc = this;\n    var iceTransport = new window.RTCIceTransport(null);\n    iceTransport.onicestatechange = function() {\n      pc._updateConnectionState();\n    };\n\n    var dtlsTransport = new window.RTCDtlsTransport(iceTransport);\n    dtlsTransport.ondtlsstatechange = function() {\n      pc._updateConnectionState();\n    };\n    dtlsTransport.onerror = function() {\n      // onerror does not set state to failed by itself.\n      Object.defineProperty(dtlsTransport, 'state',\n          {value: 'failed', writable: true});\n      pc._updateConnectionState();\n    };\n\n    return {\n      iceTransport: iceTransport,\n      dtlsTransport: dtlsTransport\n    };\n  };\n\n  // Destroy ICE gatherer, ICE transport and DTLS transport.\n  // Without triggering the callbacks.\n  RTCPeerConnection.prototype._disposeIceAndDtlsTransports = function(\n      sdpMLineIndex) {\n    var iceGatherer = this.transceivers[sdpMLineIndex].iceGatherer;\n    if (iceGatherer) {\n      delete iceGatherer.onlocalcandidate;\n      delete this.transceivers[sdpMLineIndex].iceGatherer;\n    }\n    var iceTransport = this.transceivers[sdpMLineIndex].iceTransport;\n    if (iceTransport) {\n      delete iceTransport.onicestatechange;\n      delete this.transceivers[sdpMLineIndex].iceTransport;\n    }\n    var dtlsTransport = this.transceivers[sdpMLineIndex].dtlsTransport;\n    if (dtlsTransport) {\n      delete dtlsTransport.ondtlsstatechange;\n      delete dtlsTransport.onerror;\n      delete this.transceivers[sdpMLineIndex].dtlsTransport;\n    }\n  };\n\n  // Start the RTP Sender and Receiver for a transceiver.\n  RTCPeerConnection.prototype._transceive = function(transceiver,\n      send, recv) {\n    var params = getCommonCapabilities(transceiver.localCapabilities,\n        transceiver.remoteCapabilities);\n    if (send && transceiver.rtpSender) {\n      params.encodings = transceiver.sendEncodingParameters;\n      params.rtcp = {\n        cname: SDPUtils.localCName,\n        compound: transceiver.rtcpParameters.compound\n      };\n      if (transceiver.recvEncodingParameters.length) {\n        params.rtcp.ssrc = transceiver.recvEncodingParameters[0].ssrc;\n      }\n      transceiver.rtpSender.send(params);\n    }\n    if (recv && transceiver.rtpReceiver && params.codecs.length > 0) {\n      // remove RTX field in Edge 14942\n      if (transceiver.kind === 'video'\n          && transceiver.recvEncodingParameters\n          && edgeVersion < 15019) {\n        transceiver.recvEncodingParameters.forEach(function(p) {\n          delete p.rtx;\n        });\n      }\n      if (transceiver.recvEncodingParameters.length) {\n        params.encodings = transceiver.recvEncodingParameters;\n      }\n      params.rtcp = {\n        compound: transceiver.rtcpParameters.compound\n      };\n      if (transceiver.rtcpParameters.cname) {\n        params.rtcp.cname = transceiver.rtcpParameters.cname;\n      }\n      if (transceiver.sendEncodingParameters.length) {\n        params.rtcp.ssrc = transceiver.sendEncodingParameters[0].ssrc;\n      }\n      transceiver.rtpReceiver.receive(params);\n    }\n  };\n\n  RTCPeerConnection.prototype.setLocalDescription = function(description) {\n    var pc = this;\n\n    // Note: pranswer is not supported.\n    if (['offer', 'answer'].indexOf(description.type) === -1) {\n      return Promise.reject(makeError('TypeError',\n          'Unsupported type \"' + description.type + '\"'));\n    }\n\n    if (!isActionAllowedInSignalingState('setLocalDescription',\n        description.type, pc.signalingState) || pc._isClosed) {\n      return Promise.reject(makeError('InvalidStateError',\n          'Can not set local ' + description.type +\n          ' in state ' + pc.signalingState));\n    }\n\n    var sections;\n    var sessionpart;\n    if (description.type === 'offer') {\n      // VERY limited support for SDP munging. Limited to:\n      // * changing the order of codecs\n      sections = SDPUtils.splitSections(description.sdp);\n      sessionpart = sections.shift();\n      sections.forEach(function(mediaSection, sdpMLineIndex) {\n        var caps = SDPUtils.parseRtpParameters(mediaSection);\n        pc.transceivers[sdpMLineIndex].localCapabilities = caps;\n      });\n\n      pc.transceivers.forEach(function(transceiver, sdpMLineIndex) {\n        pc._gather(transceiver.mid, sdpMLineIndex);\n      });\n    } else if (description.type === 'answer') {\n      sections = SDPUtils.splitSections(pc.remoteDescription.sdp);\n      sessionpart = sections.shift();\n      var isIceLite = SDPUtils.matchPrefix(sessionpart,\n          'a=ice-lite').length > 0;\n      sections.forEach(function(mediaSection, sdpMLineIndex) {\n        var transceiver = pc.transceivers[sdpMLineIndex];\n        var iceGatherer = transceiver.iceGatherer;\n        var iceTransport = transceiver.iceTransport;\n        var dtlsTransport = transceiver.dtlsTransport;\n        var localCapabilities = transceiver.localCapabilities;\n        var remoteCapabilities = transceiver.remoteCapabilities;\n\n        // treat bundle-only as not-rejected.\n        var rejected = SDPUtils.isRejected(mediaSection) &&\n            SDPUtils.matchPrefix(mediaSection, 'a=bundle-only').length === 0;\n\n        if (!rejected && !transceiver.isDatachannel) {\n          var remoteIceParameters = SDPUtils.getIceParameters(\n              mediaSection, sessionpart);\n          var remoteDtlsParameters = SDPUtils.getDtlsParameters(\n              mediaSection, sessionpart);\n          if (isIceLite) {\n            remoteDtlsParameters.role = 'server';\n          }\n\n          if (!pc.usingBundle || sdpMLineIndex === 0) {\n            pc._gather(transceiver.mid, sdpMLineIndex);\n            if (iceTransport.state === 'new') {\n              iceTransport.start(iceGatherer, remoteIceParameters,\n                  isIceLite ? 'controlling' : 'controlled');\n            }\n            if (dtlsTransport.state === 'new') {\n              dtlsTransport.start(remoteDtlsParameters);\n            }\n          }\n\n          // Calculate intersection of capabilities.\n          var params = getCommonCapabilities(localCapabilities,\n              remoteCapabilities);\n\n          // Start the RTCRtpSender. The RTCRtpReceiver for this\n          // transceiver has already been started in setRemoteDescription.\n          pc._transceive(transceiver,\n              params.codecs.length > 0,\n              false);\n        }\n      });\n    }\n\n    pc.localDescription = {\n      type: description.type,\n      sdp: description.sdp\n    };\n    if (description.type === 'offer') {\n      pc._updateSignalingState('have-local-offer');\n    } else {\n      pc._updateSignalingState('stable');\n    }\n\n    return Promise.resolve();\n  };\n\n  RTCPeerConnection.prototype.setRemoteDescription = function(description) {\n    var pc = this;\n\n    // Note: pranswer is not supported.\n    if (['offer', 'answer'].indexOf(description.type) === -1) {\n      return Promise.reject(makeError('TypeError',\n          'Unsupported type \"' + description.type + '\"'));\n    }\n\n    if (!isActionAllowedInSignalingState('setRemoteDescription',\n        description.type, pc.signalingState) || pc._isClosed) {\n      return Promise.reject(makeError('InvalidStateError',\n          'Can not set remote ' + description.type +\n          ' in state ' + pc.signalingState));\n    }\n\n    var streams = {};\n    pc.remoteStreams.forEach(function(stream) {\n      streams[stream.id] = stream;\n    });\n    var receiverList = [];\n    var sections = SDPUtils.splitSections(description.sdp);\n    var sessionpart = sections.shift();\n    var isIceLite = SDPUtils.matchPrefix(sessionpart,\n        'a=ice-lite').length > 0;\n    var usingBundle = SDPUtils.matchPrefix(sessionpart,\n        'a=group:BUNDLE ').length > 0;\n    pc.usingBundle = usingBundle;\n    var iceOptions = SDPUtils.matchPrefix(sessionpart,\n        'a=ice-options:')[0];\n    if (iceOptions) {\n      pc.canTrickleIceCandidates = iceOptions.substr(14).split(' ')\n          .indexOf('trickle') >= 0;\n    } else {\n      pc.canTrickleIceCandidates = false;\n    }\n\n    sections.forEach(function(mediaSection, sdpMLineIndex) {\n      var lines = SDPUtils.splitLines(mediaSection);\n      var kind = SDPUtils.getKind(mediaSection);\n      // treat bundle-only as not-rejected.\n      var rejected = SDPUtils.isRejected(mediaSection) &&\n          SDPUtils.matchPrefix(mediaSection, 'a=bundle-only').length === 0;\n      var protocol = lines[0].substr(2).split(' ')[2];\n\n      var direction = SDPUtils.getDirection(mediaSection, sessionpart);\n      var remoteMsid = SDPUtils.parseMsid(mediaSection);\n\n      var mid = SDPUtils.getMid(mediaSection) || SDPUtils.generateIdentifier();\n\n      // Reject datachannels which are not implemented yet.\n      if (kind === 'application' && protocol === 'DTLS/SCTP') {\n        pc.transceivers[sdpMLineIndex] = {\n          mid: mid,\n          isDatachannel: true\n        };\n        return;\n      }\n\n      var transceiver;\n      var iceGatherer;\n      var iceTransport;\n      var dtlsTransport;\n      var rtpReceiver;\n      var sendEncodingParameters;\n      var recvEncodingParameters;\n      var localCapabilities;\n\n      var track;\n      // FIXME: ensure the mediaSection has rtcp-mux set.\n      var remoteCapabilities = SDPUtils.parseRtpParameters(mediaSection);\n      var remoteIceParameters;\n      var remoteDtlsParameters;\n      if (!rejected) {\n        remoteIceParameters = SDPUtils.getIceParameters(mediaSection,\n            sessionpart);\n        remoteDtlsParameters = SDPUtils.getDtlsParameters(mediaSection,\n            sessionpart);\n        remoteDtlsParameters.role = 'client';\n      }\n      recvEncodingParameters =\n          SDPUtils.parseRtpEncodingParameters(mediaSection);\n\n      var rtcpParameters = SDPUtils.parseRtcpParameters(mediaSection);\n\n      var isComplete = SDPUtils.matchPrefix(mediaSection,\n          'a=end-of-candidates', sessionpart).length > 0;\n      var cands = SDPUtils.matchPrefix(mediaSection, 'a=candidate:')\n          .map(function(cand) {\n            return SDPUtils.parseCandidate(cand);\n          })\n          .filter(function(cand) {\n            return cand.component === 1;\n          });\n\n      // Check if we can use BUNDLE and dispose transports.\n      if ((description.type === 'offer' || description.type === 'answer') &&\n          !rejected && usingBundle && sdpMLineIndex > 0 &&\n          pc.transceivers[sdpMLineIndex]) {\n        pc._disposeIceAndDtlsTransports(sdpMLineIndex);\n        pc.transceivers[sdpMLineIndex].iceGatherer =\n            pc.transceivers[0].iceGatherer;\n        pc.transceivers[sdpMLineIndex].iceTransport =\n            pc.transceivers[0].iceTransport;\n        pc.transceivers[sdpMLineIndex].dtlsTransport =\n            pc.transceivers[0].dtlsTransport;\n        if (pc.transceivers[sdpMLineIndex].rtpSender) {\n          pc.transceivers[sdpMLineIndex].rtpSender.setTransport(\n              pc.transceivers[0].dtlsTransport);\n        }\n        if (pc.transceivers[sdpMLineIndex].rtpReceiver) {\n          pc.transceivers[sdpMLineIndex].rtpReceiver.setTransport(\n              pc.transceivers[0].dtlsTransport);\n        }\n      }\n      if (description.type === 'offer' && !rejected) {\n        transceiver = pc.transceivers[sdpMLineIndex] ||\n            pc._createTransceiver(kind);\n        transceiver.mid = mid;\n\n        if (!transceiver.iceGatherer) {\n          transceiver.iceGatherer = pc._createIceGatherer(sdpMLineIndex,\n              usingBundle);\n        }\n\n        if (cands.length && transceiver.iceTransport.state === 'new') {\n          if (isComplete && (!usingBundle || sdpMLineIndex === 0)) {\n            transceiver.iceTransport.setRemoteCandidates(cands);\n          } else {\n            cands.forEach(function(candidate) {\n              maybeAddCandidate(transceiver.iceTransport, candidate);\n            });\n          }\n        }\n\n        localCapabilities = window.RTCRtpReceiver.getCapabilities(kind);\n\n        // filter RTX until additional stuff needed for RTX is implemented\n        // in adapter.js\n        if (edgeVersion < 15019) {\n          localCapabilities.codecs = localCapabilities.codecs.filter(\n              function(codec) {\n                return codec.name !== 'rtx';\n              });\n        }\n\n        sendEncodingParameters = transceiver.sendEncodingParameters || [{\n          ssrc: (2 * sdpMLineIndex + 2) * 1001\n        }];\n\n        // TODO: rewrite to use http://w3c.github.io/webrtc-pc/#set-associated-remote-streams\n        var isNewTrack = false;\n        if (direction === 'sendrecv' || direction === 'sendonly') {\n          isNewTrack = !transceiver.rtpReceiver;\n          rtpReceiver = transceiver.rtpReceiver ||\n              new window.RTCRtpReceiver(transceiver.dtlsTransport, kind);\n\n          if (isNewTrack) {\n            var stream;\n            track = rtpReceiver.track;\n            // FIXME: does not work with Plan B.\n            if (remoteMsid && remoteMsid.stream === '-') {\n              // no-op. a stream id of '-' means: no associated stream.\n            } else if (remoteMsid) {\n              if (!streams[remoteMsid.stream]) {\n                streams[remoteMsid.stream] = new window.MediaStream();\n                Object.defineProperty(streams[remoteMsid.stream], 'id', {\n                  get: function() {\n                    return remoteMsid.stream;\n                  }\n                });\n              }\n              Object.defineProperty(track, 'id', {\n                get: function() {\n                  return remoteMsid.track;\n                }\n              });\n              stream = streams[remoteMsid.stream];\n            } else {\n              if (!streams.default) {\n                streams.default = new window.MediaStream();\n              }\n              stream = streams.default;\n            }\n            if (stream) {\n              addTrackToStreamAndFireEvent(track, stream);\n              transceiver.associatedRemoteMediaStreams.push(stream);\n            }\n            receiverList.push([track, rtpReceiver, stream]);\n          }\n        } else if (transceiver.rtpReceiver && transceiver.rtpReceiver.track) {\n          transceiver.associatedRemoteMediaStreams.forEach(function(s) {\n            var nativeTrack = s.getTracks().find(function(t) {\n              return t.id === transceiver.rtpReceiver.track.id;\n            });\n            if (nativeTrack) {\n              removeTrackFromStreamAndFireEvent(nativeTrack, s);\n            }\n          });\n          transceiver.associatedRemoteMediaStreams = [];\n        }\n\n        transceiver.localCapabilities = localCapabilities;\n        transceiver.remoteCapabilities = remoteCapabilities;\n        transceiver.rtpReceiver = rtpReceiver;\n        transceiver.rtcpParameters = rtcpParameters;\n        transceiver.sendEncodingParameters = sendEncodingParameters;\n        transceiver.recvEncodingParameters = recvEncodingParameters;\n\n        // Start the RTCRtpReceiver now. The RTPSender is started in\n        // setLocalDescription.\n        pc._transceive(pc.transceivers[sdpMLineIndex],\n            false,\n            isNewTrack);\n      } else if (description.type === 'answer' && !rejected) {\n        transceiver = pc.transceivers[sdpMLineIndex];\n        iceGatherer = transceiver.iceGatherer;\n        iceTransport = transceiver.iceTransport;\n        dtlsTransport = transceiver.dtlsTransport;\n        rtpReceiver = transceiver.rtpReceiver;\n        sendEncodingParameters = transceiver.sendEncodingParameters;\n        localCapabilities = transceiver.localCapabilities;\n\n        pc.transceivers[sdpMLineIndex].recvEncodingParameters =\n            recvEncodingParameters;\n        pc.transceivers[sdpMLineIndex].remoteCapabilities =\n            remoteCapabilities;\n        pc.transceivers[sdpMLineIndex].rtcpParameters = rtcpParameters;\n\n        if (cands.length && iceTransport.state === 'new') {\n          if ((isIceLite || isComplete) &&\n              (!usingBundle || sdpMLineIndex === 0)) {\n            iceTransport.setRemoteCandidates(cands);\n          } else {\n            cands.forEach(function(candidate) {\n              maybeAddCandidate(transceiver.iceTransport, candidate);\n            });\n          }\n        }\n\n        if (!usingBundle || sdpMLineIndex === 0) {\n          if (iceTransport.state === 'new') {\n            iceTransport.start(iceGatherer, remoteIceParameters,\n                'controlling');\n          }\n          if (dtlsTransport.state === 'new') {\n            dtlsTransport.start(remoteDtlsParameters);\n          }\n        }\n\n        pc._transceive(transceiver,\n            direction === 'sendrecv' || direction === 'recvonly',\n            direction === 'sendrecv' || direction === 'sendonly');\n\n        // TODO: rewrite to use http://w3c.github.io/webrtc-pc/#set-associated-remote-streams\n        if (rtpReceiver &&\n            (direction === 'sendrecv' || direction === 'sendonly')) {\n          track = rtpReceiver.track;\n          if (remoteMsid) {\n            if (!streams[remoteMsid.stream]) {\n              streams[remoteMsid.stream] = new window.MediaStream();\n            }\n            addTrackToStreamAndFireEvent(track, streams[remoteMsid.stream]);\n            receiverList.push([track, rtpReceiver, streams[remoteMsid.stream]]);\n          } else {\n            if (!streams.default) {\n              streams.default = new window.MediaStream();\n            }\n            addTrackToStreamAndFireEvent(track, streams.default);\n            receiverList.push([track, rtpReceiver, streams.default]);\n          }\n        } else {\n          // FIXME: actually the receiver should be created later.\n          delete transceiver.rtpReceiver;\n        }\n      }\n    });\n\n    if (pc._dtlsRole === undefined) {\n      pc._dtlsRole = description.type === 'offer' ? 'active' : 'passive';\n    }\n\n    pc.remoteDescription = {\n      type: description.type,\n      sdp: description.sdp\n    };\n    if (description.type === 'offer') {\n      pc._updateSignalingState('have-remote-offer');\n    } else {\n      pc._updateSignalingState('stable');\n    }\n    Object.keys(streams).forEach(function(sid) {\n      var stream = streams[sid];\n      if (stream.getTracks().length) {\n        if (pc.remoteStreams.indexOf(stream) === -1) {\n          pc.remoteStreams.push(stream);\n          var event = new Event('addstream');\n          event.stream = stream;\n          window.setTimeout(function() {\n            pc._dispatchEvent('addstream', event);\n          });\n        }\n\n        receiverList.forEach(function(item) {\n          var track = item[0];\n          var receiver = item[1];\n          if (stream.id !== item[2].id) {\n            return;\n          }\n          fireAddTrack(pc, track, receiver, [stream]);\n        });\n      }\n    });\n    receiverList.forEach(function(item) {\n      if (item[2]) {\n        return;\n      }\n      fireAddTrack(pc, item[0], item[1], []);\n    });\n\n    // check whether addIceCandidate({}) was called within four seconds after\n    // setRemoteDescription.\n    window.setTimeout(function() {\n      if (!(pc && pc.transceivers)) {\n        return;\n      }\n      pc.transceivers.forEach(function(transceiver) {\n        if (transceiver.iceTransport &&\n            transceiver.iceTransport.state === 'new' &&\n            transceiver.iceTransport.getRemoteCandidates().length > 0) {\n          console.warn('Timeout for addRemoteCandidate. Consider sending ' +\n              'an end-of-candidates notification');\n          transceiver.iceTransport.addRemoteCandidate({});\n        }\n      });\n    }, 4000);\n\n    return Promise.resolve();\n  };\n\n  RTCPeerConnection.prototype.close = function() {\n    this.transceivers.forEach(function(transceiver) {\n      /* not yet\n      if (transceiver.iceGatherer) {\n        transceiver.iceGatherer.close();\n      }\n      */\n      if (transceiver.iceTransport) {\n        transceiver.iceTransport.stop();\n      }\n      if (transceiver.dtlsTransport) {\n        transceiver.dtlsTransport.stop();\n      }\n      if (transceiver.rtpSender) {\n        transceiver.rtpSender.stop();\n      }\n      if (transceiver.rtpReceiver) {\n        transceiver.rtpReceiver.stop();\n      }\n    });\n    // FIXME: clean up tracks, local streams, remote streams, etc\n    this._isClosed = true;\n    this._updateSignalingState('closed');\n  };\n\n  // Update the signaling state.\n  RTCPeerConnection.prototype._updateSignalingState = function(newState) {\n    this.signalingState = newState;\n    var event = new Event('signalingstatechange');\n    this._dispatchEvent('signalingstatechange', event);\n  };\n\n  // Determine whether to fire the negotiationneeded event.\n  RTCPeerConnection.prototype._maybeFireNegotiationNeeded = function() {\n    var pc = this;\n    if (this.signalingState !== 'stable' || this.needNegotiation === true) {\n      return;\n    }\n    this.needNegotiation = true;\n    window.setTimeout(function() {\n      if (pc.needNegotiation) {\n        pc.needNegotiation = false;\n        var event = new Event('negotiationneeded');\n        pc._dispatchEvent('negotiationneeded', event);\n      }\n    }, 0);\n  };\n\n  // Update the connection state.\n  RTCPeerConnection.prototype._updateConnectionState = function() {\n    var newState;\n    var states = {\n      'new': 0,\n      closed: 0,\n      connecting: 0,\n      checking: 0,\n      connected: 0,\n      completed: 0,\n      disconnected: 0,\n      failed: 0\n    };\n    this.transceivers.forEach(function(transceiver) {\n      states[transceiver.iceTransport.state]++;\n      states[transceiver.dtlsTransport.state]++;\n    });\n    // ICETransport.completed and connected are the same for this purpose.\n    states.connected += states.completed;\n\n    newState = 'new';\n    if (states.failed > 0) {\n      newState = 'failed';\n    } else if (states.connecting > 0 || states.checking > 0) {\n      newState = 'connecting';\n    } else if (states.disconnected > 0) {\n      newState = 'disconnected';\n    } else if (states.new > 0) {\n      newState = 'new';\n    } else if (states.connected > 0 || states.completed > 0) {\n      newState = 'connected';\n    }\n\n    if (newState !== this.iceConnectionState) {\n      this.iceConnectionState = newState;\n      var event = new Event('iceconnectionstatechange');\n      this._dispatchEvent('iceconnectionstatechange', event);\n    }\n  };\n\n  RTCPeerConnection.prototype.createOffer = function() {\n    var pc = this;\n\n    if (pc._isClosed) {\n      return Promise.reject(makeError('InvalidStateError',\n          'Can not call createOffer after close'));\n    }\n\n    var numAudioTracks = pc.transceivers.filter(function(t) {\n      return t.kind === 'audio';\n    }).length;\n    var numVideoTracks = pc.transceivers.filter(function(t) {\n      return t.kind === 'video';\n    }).length;\n\n    // Determine number of audio and video tracks we need to send/recv.\n    var offerOptions = arguments[0];\n    if (offerOptions) {\n      // Reject Chrome legacy constraints.\n      if (offerOptions.mandatory || offerOptions.optional) {\n        throw new TypeError(\n            'Legacy mandatory/optional constraints not supported.');\n      }\n      if (offerOptions.offerToReceiveAudio !== undefined) {\n        if (offerOptions.offerToReceiveAudio === true) {\n          numAudioTracks = 1;\n        } else if (offerOptions.offerToReceiveAudio === false) {\n          numAudioTracks = 0;\n        } else {\n          numAudioTracks = offerOptions.offerToReceiveAudio;\n        }\n      }\n      if (offerOptions.offerToReceiveVideo !== undefined) {\n        if (offerOptions.offerToReceiveVideo === true) {\n          numVideoTracks = 1;\n        } else if (offerOptions.offerToReceiveVideo === false) {\n          numVideoTracks = 0;\n        } else {\n          numVideoTracks = offerOptions.offerToReceiveVideo;\n        }\n      }\n    }\n\n    pc.transceivers.forEach(function(transceiver) {\n      if (transceiver.kind === 'audio') {\n        numAudioTracks--;\n        if (numAudioTracks < 0) {\n          transceiver.wantReceive = false;\n        }\n      } else if (transceiver.kind === 'video') {\n        numVideoTracks--;\n        if (numVideoTracks < 0) {\n          transceiver.wantReceive = false;\n        }\n      }\n    });\n\n    // Create M-lines for recvonly streams.\n    while (numAudioTracks > 0 || numVideoTracks > 0) {\n      if (numAudioTracks > 0) {\n        pc._createTransceiver('audio');\n        numAudioTracks--;\n      }\n      if (numVideoTracks > 0) {\n        pc._createTransceiver('video');\n        numVideoTracks--;\n      }\n    }\n\n    var sdp = SDPUtils.writeSessionBoilerplate(pc._sdpSessionId,\n        pc._sdpSessionVersion++);\n    pc.transceivers.forEach(function(transceiver, sdpMLineIndex) {\n      // For each track, create an ice gatherer, ice transport,\n      // dtls transport, potentially rtpsender and rtpreceiver.\n      var track = transceiver.track;\n      var kind = transceiver.kind;\n      var mid = transceiver.mid || SDPUtils.generateIdentifier();\n      transceiver.mid = mid;\n\n      if (!transceiver.iceGatherer) {\n        transceiver.iceGatherer = pc._createIceGatherer(sdpMLineIndex,\n            pc.usingBundle);\n      }\n\n      var localCapabilities = window.RTCRtpSender.getCapabilities(kind);\n      // filter RTX until additional stuff needed for RTX is implemented\n      // in adapter.js\n      if (edgeVersion < 15019) {\n        localCapabilities.codecs = localCapabilities.codecs.filter(\n            function(codec) {\n              return codec.name !== 'rtx';\n            });\n      }\n      localCapabilities.codecs.forEach(function(codec) {\n        // work around https://bugs.chromium.org/p/webrtc/issues/detail?id=6552\n        // by adding level-asymmetry-allowed=1\n        if (codec.name === 'H264' &&\n            codec.parameters['level-asymmetry-allowed'] === undefined) {\n          codec.parameters['level-asymmetry-allowed'] = '1';\n        }\n      });\n\n      // generate an ssrc now, to be used later in rtpSender.send\n      var sendEncodingParameters = transceiver.sendEncodingParameters || [{\n        ssrc: (2 * sdpMLineIndex + 1) * 1001\n      }];\n      if (track) {\n        // add RTX\n        if (edgeVersion >= 15019 && kind === 'video' &&\n            !sendEncodingParameters[0].rtx) {\n          sendEncodingParameters[0].rtx = {\n            ssrc: sendEncodingParameters[0].ssrc + 1\n          };\n        }\n      }\n\n      if (transceiver.wantReceive) {\n        transceiver.rtpReceiver = new window.RTCRtpReceiver(\n            transceiver.dtlsTransport, kind);\n      }\n\n      transceiver.localCapabilities = localCapabilities;\n      transceiver.sendEncodingParameters = sendEncodingParameters;\n    });\n\n    // always offer BUNDLE and dispose on return if not supported.\n    if (pc._config.bundlePolicy !== 'max-compat') {\n      sdp += 'a=group:BUNDLE ' + pc.transceivers.map(function(t) {\n        return t.mid;\n      }).join(' ') + '\\r\\n';\n    }\n    sdp += 'a=ice-options:trickle\\r\\n';\n\n    pc.transceivers.forEach(function(transceiver, sdpMLineIndex) {\n      sdp += writeMediaSection(transceiver, transceiver.localCapabilities,\n          'offer', transceiver.stream, pc._dtlsRole);\n      sdp += 'a=rtcp-rsize\\r\\n';\n\n      if (transceiver.iceGatherer && pc.iceGatheringState !== 'new' &&\n          (sdpMLineIndex === 0 || !pc.usingBundle)) {\n        transceiver.iceGatherer.getLocalCandidates().forEach(function(cand) {\n          cand.component = 1;\n          sdp += 'a=' + SDPUtils.writeCandidate(cand) + '\\r\\n';\n        });\n\n        if (transceiver.iceGatherer.state === 'completed') {\n          sdp += 'a=end-of-candidates\\r\\n';\n        }\n      }\n    });\n\n    var desc = new window.RTCSessionDescription({\n      type: 'offer',\n      sdp: sdp\n    });\n    return Promise.resolve(desc);\n  };\n\n  RTCPeerConnection.prototype.createAnswer = function() {\n    var pc = this;\n\n    if (pc._isClosed) {\n      return Promise.reject(makeError('InvalidStateError',\n          'Can not call createAnswer after close'));\n    }\n\n    var sdp = SDPUtils.writeSessionBoilerplate(pc._sdpSessionId,\n        pc._sdpSessionVersion++);\n    if (pc.usingBundle) {\n      sdp += 'a=group:BUNDLE ' + pc.transceivers.map(function(t) {\n        return t.mid;\n      }).join(' ') + '\\r\\n';\n    }\n    var mediaSectionsInOffer = SDPUtils.splitSections(\n        pc.remoteDescription.sdp).length - 1;\n    pc.transceivers.forEach(function(transceiver, sdpMLineIndex) {\n      if (sdpMLineIndex + 1 > mediaSectionsInOffer) {\n        return;\n      }\n      if (transceiver.isDatachannel) {\n        sdp += 'm=application 0 DTLS/SCTP 5000\\r\\n' +\n            'c=IN IP4 0.0.0.0\\r\\n' +\n            'a=mid:' + transceiver.mid + '\\r\\n';\n        return;\n      }\n\n      // FIXME: look at direction.\n      if (transceiver.stream) {\n        var localTrack;\n        if (transceiver.kind === 'audio') {\n          localTrack = transceiver.stream.getAudioTracks()[0];\n        } else if (transceiver.kind === 'video') {\n          localTrack = transceiver.stream.getVideoTracks()[0];\n        }\n        if (localTrack) {\n          // add RTX\n          if (edgeVersion >= 15019 && transceiver.kind === 'video' &&\n              !transceiver.sendEncodingParameters[0].rtx) {\n            transceiver.sendEncodingParameters[0].rtx = {\n              ssrc: transceiver.sendEncodingParameters[0].ssrc + 1\n            };\n          }\n        }\n      }\n\n      // Calculate intersection of capabilities.\n      var commonCapabilities = getCommonCapabilities(\n          transceiver.localCapabilities,\n          transceiver.remoteCapabilities);\n\n      var hasRtx = commonCapabilities.codecs.filter(function(c) {\n        return c.name.toLowerCase() === 'rtx';\n      }).length;\n      if (!hasRtx && transceiver.sendEncodingParameters[0].rtx) {\n        delete transceiver.sendEncodingParameters[0].rtx;\n      }\n\n      sdp += writeMediaSection(transceiver, commonCapabilities,\n          'answer', transceiver.stream, pc._dtlsRole);\n      if (transceiver.rtcpParameters &&\n          transceiver.rtcpParameters.reducedSize) {\n        sdp += 'a=rtcp-rsize\\r\\n';\n      }\n    });\n\n    var desc = new window.RTCSessionDescription({\n      type: 'answer',\n      sdp: sdp\n    });\n    return Promise.resolve(desc);\n  };\n\n  RTCPeerConnection.prototype.addIceCandidate = function(candidate) {\n    var pc = this;\n    var sections;\n    if (candidate && !(candidate.sdpMLineIndex !== undefined ||\n        candidate.sdpMid)) {\n      return Promise.reject(new TypeError('sdpMLineIndex or sdpMid required'));\n    }\n\n    // TODO: needs to go into ops queue.\n    return new Promise(function(resolve, reject) {\n      if (!pc.remoteDescription) {\n        return reject(makeError('InvalidStateError',\n            'Can not add ICE candidate without a remote description'));\n      } else if (!candidate || candidate.candidate === '') {\n        for (var j = 0; j < pc.transceivers.length; j++) {\n          if (pc.transceivers[j].isDatachannel) {\n            continue;\n          }\n          pc.transceivers[j].iceTransport.addRemoteCandidate({});\n          sections = SDPUtils.splitSections(pc.remoteDescription.sdp);\n          sections[j + 1] += 'a=end-of-candidates\\r\\n';\n          pc.remoteDescription.sdp = sections.join('');\n          if (pc.usingBundle) {\n            break;\n          }\n        }\n      } else {\n        var sdpMLineIndex = candidate.sdpMLineIndex;\n        if (candidate.sdpMid) {\n          for (var i = 0; i < pc.transceivers.length; i++) {\n            if (pc.transceivers[i].mid === candidate.sdpMid) {\n              sdpMLineIndex = i;\n              break;\n            }\n          }\n        }\n        var transceiver = pc.transceivers[sdpMLineIndex];\n        if (transceiver) {\n          if (transceiver.isDatachannel) {\n            return resolve();\n          }\n          var cand = Object.keys(candidate.candidate).length > 0 ?\n              SDPUtils.parseCandidate(candidate.candidate) : {};\n          // Ignore Chrome's invalid candidates since Edge does not like them.\n          if (cand.protocol === 'tcp' && (cand.port === 0 || cand.port === 9)) {\n            return resolve();\n          }\n          // Ignore RTCP candidates, we assume RTCP-MUX.\n          if (cand.component && cand.component !== 1) {\n            return resolve();\n          }\n          // when using bundle, avoid adding candidates to the wrong\n          // ice transport. And avoid adding candidates added in the SDP.\n          if (sdpMLineIndex === 0 || (sdpMLineIndex > 0 &&\n              transceiver.iceTransport !== pc.transceivers[0].iceTransport)) {\n            if (!maybeAddCandidate(transceiver.iceTransport, cand)) {\n              return reject(makeError('OperationError',\n                  'Can not add ICE candidate'));\n            }\n          }\n\n          // update the remoteDescription.\n          var candidateString = candidate.candidate.trim();\n          if (candidateString.indexOf('a=') === 0) {\n            candidateString = candidateString.substr(2);\n          }\n          sections = SDPUtils.splitSections(pc.remoteDescription.sdp);\n          sections[sdpMLineIndex + 1] += 'a=' +\n              (cand.type ? candidateString : 'end-of-candidates')\n              + '\\r\\n';\n          pc.remoteDescription.sdp = sections.join('');\n        } else {\n          return reject(makeError('OperationError',\n              'Can not add ICE candidate'));\n        }\n      }\n      resolve();\n    });\n  };\n\n  RTCPeerConnection.prototype.getStats = function() {\n    var promises = [];\n    this.transceivers.forEach(function(transceiver) {\n      ['rtpSender', 'rtpReceiver', 'iceGatherer', 'iceTransport',\n          'dtlsTransport'].forEach(function(method) {\n            if (transceiver[method]) {\n              promises.push(transceiver[method].getStats());\n            }\n          });\n    });\n    var fixStatsType = function(stat) {\n      return {\n        inboundrtp: 'inbound-rtp',\n        outboundrtp: 'outbound-rtp',\n        candidatepair: 'candidate-pair',\n        localcandidate: 'local-candidate',\n        remotecandidate: 'remote-candidate'\n      }[stat.type] || stat.type;\n    };\n    return new Promise(function(resolve) {\n      // shim getStats with maplike support\n      var results = new Map();\n      Promise.all(promises).then(function(res) {\n        res.forEach(function(result) {\n          Object.keys(result).forEach(function(id) {\n            result[id].type = fixStatsType(result[id]);\n            results.set(id, result[id]);\n          });\n        });\n        resolve(results);\n      });\n    });\n  };\n\n  // legacy callback shims. Should be moved to adapter.js some days.\n  var methods = ['createOffer', 'createAnswer'];\n  methods.forEach(function(method) {\n    var nativeMethod = RTCPeerConnection.prototype[method];\n    RTCPeerConnection.prototype[method] = function() {\n      var args = arguments;\n      if (typeof args[0] === 'function' ||\n          typeof args[1] === 'function') { // legacy\n        return nativeMethod.apply(this, [arguments[2]])\n        .then(function(description) {\n          if (typeof args[0] === 'function') {\n            args[0].apply(null, [description]);\n          }\n        }, function(error) {\n          if (typeof args[1] === 'function') {\n            args[1].apply(null, [error]);\n          }\n        });\n      }\n      return nativeMethod.apply(this, arguments);\n    };\n  });\n\n  methods = ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate'];\n  methods.forEach(function(method) {\n    var nativeMethod = RTCPeerConnection.prototype[method];\n    RTCPeerConnection.prototype[method] = function() {\n      var args = arguments;\n      if (typeof args[1] === 'function' ||\n          typeof args[2] === 'function') { // legacy\n        return nativeMethod.apply(this, arguments)\n        .then(function() {\n          if (typeof args[1] === 'function') {\n            args[1].apply(null);\n          }\n        }, function(error) {\n          if (typeof args[2] === 'function') {\n            args[2].apply(null, [error]);\n          }\n        });\n      }\n      return nativeMethod.apply(this, arguments);\n    };\n  });\n\n  // getStats is special. It doesn't have a spec legacy method yet we support\n  // getStats(something, cb) without error callbacks.\n  ['getStats'].forEach(function(method) {\n    var nativeMethod = RTCPeerConnection.prototype[method];\n    RTCPeerConnection.prototype[method] = function() {\n      var args = arguments;\n      if (typeof args[1] === 'function') {\n        return nativeMethod.apply(this, arguments)\n        .then(function() {\n          if (typeof args[1] === 'function') {\n            args[1].apply(null);\n          }\n        });\n      }\n      return nativeMethod.apply(this, arguments);\n    };\n  });\n\n  return RTCPeerConnection;\n};\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n /* eslint-env node */\n'use strict';\n\n// Expose public methods.\nmodule.exports = function(window) {\n  var navigator = window && window.navigator;\n\n  var shimError_ = function(e) {\n    return {\n      name: {PermissionDeniedError: 'NotAllowedError'}[e.name] || e.name,\n      message: e.message,\n      constraint: e.constraint,\n      toString: function() {\n        return this.name;\n      }\n    };\n  };\n\n  // getUserMedia error shim.\n  var origGetUserMedia = navigator.mediaDevices.getUserMedia.\n      bind(navigator.mediaDevices);\n  navigator.mediaDevices.getUserMedia = function(c) {\n    return origGetUserMedia(c).catch(function(e) {\n      return Promise.reject(shimError_(e));\n    });\n  };\n};\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n /* eslint-env node */\n'use strict';\n\nvar utils = require('../utils');\n\nvar firefoxShim = {\n  shimOnTrack: function(window) {\n    if (typeof window === 'object' && window.RTCPeerConnection && !('ontrack' in\n        window.RTCPeerConnection.prototype)) {\n      Object.defineProperty(window.RTCPeerConnection.prototype, 'ontrack', {\n        get: function() {\n          return this._ontrack;\n        },\n        set: function(f) {\n          if (this._ontrack) {\n            this.removeEventListener('track', this._ontrack);\n            this.removeEventListener('addstream', this._ontrackpoly);\n          }\n          this.addEventListener('track', this._ontrack = f);\n          this.addEventListener('addstream', this._ontrackpoly = function(e) {\n            e.stream.getTracks().forEach(function(track) {\n              var event = new Event('track');\n              event.track = track;\n              event.receiver = {track: track};\n              event.transceiver = {receiver: event.receiver};\n              event.streams = [e.stream];\n              this.dispatchEvent(event);\n            }.bind(this));\n          }.bind(this));\n        }\n      });\n    }\n    if (typeof window === 'object' && window.RTCTrackEvent &&\n        ('receiver' in window.RTCTrackEvent.prototype) &&\n        !('transceiver' in window.RTCTrackEvent.prototype)) {\n      Object.defineProperty(window.RTCTrackEvent.prototype, 'transceiver', {\n        get: function() {\n          return {receiver: this.receiver};\n        }\n      });\n    }\n  },\n\n  shimSourceObject: function(window) {\n    // Firefox has supported mozSrcObject since FF22, unprefixed in 42.\n    if (typeof window === 'object') {\n      if (window.HTMLMediaElement &&\n        !('srcObject' in window.HTMLMediaElement.prototype)) {\n        // Shim the srcObject property, once, when HTMLMediaElement is found.\n        Object.defineProperty(window.HTMLMediaElement.prototype, 'srcObject', {\n          get: function() {\n            return this.mozSrcObject;\n          },\n          set: function(stream) {\n            this.mozSrcObject = stream;\n          }\n        });\n      }\n    }\n  },\n\n  shimPeerConnection: function(window) {\n    var browserDetails = utils.detectBrowser(window);\n\n    if (typeof window !== 'object' || !(window.RTCPeerConnection ||\n        window.mozRTCPeerConnection)) {\n      return; // probably media.peerconnection.enabled=false in about:config\n    }\n    // The RTCPeerConnection object.\n    if (!window.RTCPeerConnection) {\n      window.RTCPeerConnection = function(pcConfig, pcConstraints) {\n        if (browserDetails.version < 38) {\n          // .urls is not supported in FF < 38.\n          // create RTCIceServers with a single url.\n          if (pcConfig && pcConfig.iceServers) {\n            var newIceServers = [];\n            for (var i = 0; i < pcConfig.iceServers.length; i++) {\n              var server = pcConfig.iceServers[i];\n              if (server.hasOwnProperty('urls')) {\n                for (var j = 0; j < server.urls.length; j++) {\n                  var newServer = {\n                    url: server.urls[j]\n                  };\n                  if (server.urls[j].indexOf('turn') === 0) {\n                    newServer.username = server.username;\n                    newServer.credential = server.credential;\n                  }\n                  newIceServers.push(newServer);\n                }\n              } else {\n                newIceServers.push(pcConfig.iceServers[i]);\n              }\n            }\n            pcConfig.iceServers = newIceServers;\n          }\n        }\n        return new window.mozRTCPeerConnection(pcConfig, pcConstraints);\n      };\n      window.RTCPeerConnection.prototype =\n          window.mozRTCPeerConnection.prototype;\n\n      // wrap static methods. Currently just generateCertificate.\n      if (window.mozRTCPeerConnection.generateCertificate) {\n        Object.defineProperty(window.RTCPeerConnection, 'generateCertificate', {\n          get: function() {\n            return window.mozRTCPeerConnection.generateCertificate;\n          }\n        });\n      }\n\n      window.RTCSessionDescription = window.mozRTCSessionDescription;\n      window.RTCIceCandidate = window.mozRTCIceCandidate;\n    }\n\n    // shim away need for obsolete RTCIceCandidate/RTCSessionDescription.\n    ['setLocalDescription', 'setRemoteDescription', 'addIceCandidate']\n        .forEach(function(method) {\n          var nativeMethod = window.RTCPeerConnection.prototype[method];\n          window.RTCPeerConnection.prototype[method] = function() {\n            arguments[0] = new ((method === 'addIceCandidate') ?\n                window.RTCIceCandidate :\n                window.RTCSessionDescription)(arguments[0]);\n            return nativeMethod.apply(this, arguments);\n          };\n        });\n\n    // support for addIceCandidate(null or undefined)\n    var nativeAddIceCandidate =\n        window.RTCPeerConnection.prototype.addIceCandidate;\n    window.RTCPeerConnection.prototype.addIceCandidate = function() {\n      if (!arguments[0]) {\n        if (arguments[1]) {\n          arguments[1].apply(null);\n        }\n        return Promise.resolve();\n      }\n      return nativeAddIceCandidate.apply(this, arguments);\n    };\n\n    // shim getStats with maplike support\n    var makeMapStats = function(stats) {\n      var map = new Map();\n      Object.keys(stats).forEach(function(key) {\n        map.set(key, stats[key]);\n        map[key] = stats[key];\n      });\n      return map;\n    };\n\n    var modernStatsTypes = {\n      inboundrtp: 'inbound-rtp',\n      outboundrtp: 'outbound-rtp',\n      candidatepair: 'candidate-pair',\n      localcandidate: 'local-candidate',\n      remotecandidate: 'remote-candidate'\n    };\n\n    var nativeGetStats = window.RTCPeerConnection.prototype.getStats;\n    window.RTCPeerConnection.prototype.getStats = function(\n      selector,\n      onSucc,\n      onErr\n    ) {\n      return nativeGetStats.apply(this, [selector || null])\n        .then(function(stats) {\n          if (browserDetails.version < 48) {\n            stats = makeMapStats(stats);\n          }\n          if (browserDetails.version < 53 && !onSucc) {\n            // Shim only promise getStats with spec-hyphens in type names\n            // Leave callback version alone; misc old uses of forEach before Map\n            try {\n              stats.forEach(function(stat) {\n                stat.type = modernStatsTypes[stat.type] || stat.type;\n              });\n            } catch (e) {\n              if (e.name !== 'TypeError') {\n                throw e;\n              }\n              // Avoid TypeError: \"type\" is read-only, in old versions. 34-43ish\n              stats.forEach(function(stat, i) {\n                stats.set(i, Object.assign({}, stat, {\n                  type: modernStatsTypes[stat.type] || stat.type\n                }));\n              });\n            }\n          }\n          return stats;\n        })\n        .then(onSucc, onErr);\n    };\n  }\n};\n\n// Expose public methods.\nmodule.exports = {\n  shimOnTrack: firefoxShim.shimOnTrack,\n  shimSourceObject: firefoxShim.shimSourceObject,\n  shimPeerConnection: firefoxShim.shimPeerConnection,\n  shimGetUserMedia: require('./getusermedia')\n};\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n /* eslint-env node */\n'use strict';\n\nvar utils = require('../utils');\nvar logging = utils.log;\n\n// Expose public methods.\nmodule.exports = function(window) {\n  var browserDetails = utils.detectBrowser(window);\n  var navigator = window && window.navigator;\n  var MediaStreamTrack = window && window.MediaStreamTrack;\n\n  var shimError_ = function(e) {\n    return {\n      name: {\n        InternalError: 'NotReadableError',\n        NotSupportedError: 'TypeError',\n        PermissionDeniedError: 'NotAllowedError',\n        SecurityError: 'NotAllowedError'\n      }[e.name] || e.name,\n      message: {\n        'The operation is insecure.': 'The request is not allowed by the ' +\n        'user agent or the platform in the current context.'\n      }[e.message] || e.message,\n      constraint: e.constraint,\n      toString: function() {\n        return this.name + (this.message && ': ') + this.message;\n      }\n    };\n  };\n\n  // getUserMedia constraints shim.\n  var getUserMedia_ = function(constraints, onSuccess, onError) {\n    var constraintsToFF37_ = function(c) {\n      if (typeof c !== 'object' || c.require) {\n        return c;\n      }\n      var require = [];\n      Object.keys(c).forEach(function(key) {\n        if (key === 'require' || key === 'advanced' || key === 'mediaSource') {\n          return;\n        }\n        var r = c[key] = (typeof c[key] === 'object') ?\n            c[key] : {ideal: c[key]};\n        if (r.min !== undefined ||\n            r.max !== undefined || r.exact !== undefined) {\n          require.push(key);\n        }\n        if (r.exact !== undefined) {\n          if (typeof r.exact === 'number') {\n            r. min = r.max = r.exact;\n          } else {\n            c[key] = r.exact;\n          }\n          delete r.exact;\n        }\n        if (r.ideal !== undefined) {\n          c.advanced = c.advanced || [];\n          var oc = {};\n          if (typeof r.ideal === 'number') {\n            oc[key] = {min: r.ideal, max: r.ideal};\n          } else {\n            oc[key] = r.ideal;\n          }\n          c.advanced.push(oc);\n          delete r.ideal;\n          if (!Object.keys(r).length) {\n            delete c[key];\n          }\n        }\n      });\n      if (require.length) {\n        c.require = require;\n      }\n      return c;\n    };\n    constraints = JSON.parse(JSON.stringify(constraints));\n    if (browserDetails.version < 38) {\n      logging('spec: ' + JSON.stringify(constraints));\n      if (constraints.audio) {\n        constraints.audio = constraintsToFF37_(constraints.audio);\n      }\n      if (constraints.video) {\n        constraints.video = constraintsToFF37_(constraints.video);\n      }\n      logging('ff37: ' + JSON.stringify(constraints));\n    }\n    return navigator.mozGetUserMedia(constraints, onSuccess, function(e) {\n      onError(shimError_(e));\n    });\n  };\n\n  // Returns the result of getUserMedia as a Promise.\n  var getUserMediaPromise_ = function(constraints) {\n    return new Promise(function(resolve, reject) {\n      getUserMedia_(constraints, resolve, reject);\n    });\n  };\n\n  // Shim for mediaDevices on older versions.\n  if (!navigator.mediaDevices) {\n    navigator.mediaDevices = {getUserMedia: getUserMediaPromise_,\n      addEventListener: function() { },\n      removeEventListener: function() { }\n    };\n  }\n  navigator.mediaDevices.enumerateDevices =\n      navigator.mediaDevices.enumerateDevices || function() {\n        return new Promise(function(resolve) {\n          var infos = [\n            {kind: 'audioinput', deviceId: 'default', label: '', groupId: ''},\n            {kind: 'videoinput', deviceId: 'default', label: '', groupId: ''}\n          ];\n          resolve(infos);\n        });\n      };\n\n  if (browserDetails.version < 41) {\n    // Work around http://bugzil.la/1169665\n    var orgEnumerateDevices =\n        navigator.mediaDevices.enumerateDevices.bind(navigator.mediaDevices);\n    navigator.mediaDevices.enumerateDevices = function() {\n      return orgEnumerateDevices().then(undefined, function(e) {\n        if (e.name === 'NotFoundError') {\n          return [];\n        }\n        throw e;\n      });\n    };\n  }\n  if (browserDetails.version < 49) {\n    var origGetUserMedia = navigator.mediaDevices.getUserMedia.\n        bind(navigator.mediaDevices);\n    navigator.mediaDevices.getUserMedia = function(c) {\n      return origGetUserMedia(c).then(function(stream) {\n        // Work around https://bugzil.la/802326\n        if (c.audio && !stream.getAudioTracks().length ||\n            c.video && !stream.getVideoTracks().length) {\n          stream.getTracks().forEach(function(track) {\n            track.stop();\n          });\n          throw new DOMException('The object can not be found here.',\n                                 'NotFoundError');\n        }\n        return stream;\n      }, function(e) {\n        return Promise.reject(shimError_(e));\n      });\n    };\n  }\n  if (!(browserDetails.version > 55 &&\n      'autoGainControl' in navigator.mediaDevices.getSupportedConstraints())) {\n    var remap = function(obj, a, b) {\n      if (a in obj && !(b in obj)) {\n        obj[b] = obj[a];\n        delete obj[a];\n      }\n    };\n\n    var nativeGetUserMedia = navigator.mediaDevices.getUserMedia.\n        bind(navigator.mediaDevices);\n    navigator.mediaDevices.getUserMedia = function(c) {\n      if (typeof c === 'object' && typeof c.audio === 'object') {\n        c = JSON.parse(JSON.stringify(c));\n        remap(c.audio, 'autoGainControl', 'mozAutoGainControl');\n        remap(c.audio, 'noiseSuppression', 'mozNoiseSuppression');\n      }\n      return nativeGetUserMedia(c);\n    };\n\n    if (MediaStreamTrack && MediaStreamTrack.prototype.getSettings) {\n      var nativeGetSettings = MediaStreamTrack.prototype.getSettings;\n      MediaStreamTrack.prototype.getSettings = function() {\n        var obj = nativeGetSettings.apply(this, arguments);\n        remap(obj, 'mozAutoGainControl', 'autoGainControl');\n        remap(obj, 'mozNoiseSuppression', 'noiseSuppression');\n        return obj;\n      };\n    }\n\n    if (MediaStreamTrack && MediaStreamTrack.prototype.applyConstraints) {\n      var nativeApplyConstraints = MediaStreamTrack.prototype.applyConstraints;\n      MediaStreamTrack.prototype.applyConstraints = function(c) {\n        if (this.kind === 'audio' && typeof c === 'object') {\n          c = JSON.parse(JSON.stringify(c));\n          remap(c, 'autoGainControl', 'mozAutoGainControl');\n          remap(c, 'noiseSuppression', 'mozNoiseSuppression');\n        }\n        return nativeApplyConstraints.apply(this, [c]);\n      };\n    }\n  }\n  navigator.getUserMedia = function(constraints, onSuccess, onError) {\n    if (browserDetails.version < 44) {\n      return getUserMedia_(constraints, onSuccess, onError);\n    }\n    // Replace Firefox 44+'s deprecation warning with unprefixed version.\n    utils.deprecated('navigator.getUserMedia',\n        'navigator.mediaDevices.getUserMedia');\n    navigator.mediaDevices.getUserMedia(constraints).then(onSuccess, onError);\n  };\n};\n","/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n'use strict';\nvar utils = require('../utils');\n\nvar safariShim = {\n  // TODO: DrAlex, should be here, double check against LayoutTests\n\n  // TODO: once the back-end for the mac port is done, add.\n  // TODO: check for webkitGTK+\n  // shimPeerConnection: function() { },\n\n  shimLocalStreamsAPI: function(window) {\n    if (typeof window !== 'object' || !window.RTCPeerConnection) {\n      return;\n    }\n    if (!('getLocalStreams' in window.RTCPeerConnection.prototype)) {\n      window.RTCPeerConnection.prototype.getLocalStreams = function() {\n        if (!this._localStreams) {\n          this._localStreams = [];\n        }\n        return this._localStreams;\n      };\n    }\n    if (!('getStreamById' in window.RTCPeerConnection.prototype)) {\n      window.RTCPeerConnection.prototype.getStreamById = function(id) {\n        var result = null;\n        if (this._localStreams) {\n          this._localStreams.forEach(function(stream) {\n            if (stream.id === id) {\n              result = stream;\n            }\n          });\n        }\n        if (this._remoteStreams) {\n          this._remoteStreams.forEach(function(stream) {\n            if (stream.id === id) {\n              result = stream;\n            }\n          });\n        }\n        return result;\n      };\n    }\n    if (!('addStream' in window.RTCPeerConnection.prototype)) {\n      var _addTrack = window.RTCPeerConnection.prototype.addTrack;\n      window.RTCPeerConnection.prototype.addStream = function(stream) {\n        if (!this._localStreams) {\n          this._localStreams = [];\n        }\n        if (this._localStreams.indexOf(stream) === -1) {\n          this._localStreams.push(stream);\n        }\n        var self = this;\n        stream.getTracks().forEach(function(track) {\n          _addTrack.call(self, track, stream);\n        });\n      };\n\n      window.RTCPeerConnection.prototype.addTrack = function(track, stream) {\n        if (stream) {\n          if (!this._localStreams) {\n            this._localStreams = [stream];\n          } else if (this._localStreams.indexOf(stream) === -1) {\n            this._localStreams.push(stream);\n          }\n        }\n        _addTrack.call(this, track, stream);\n      };\n    }\n    if (!('removeStream' in window.RTCPeerConnection.prototype)) {\n      window.RTCPeerConnection.prototype.removeStream = function(stream) {\n        if (!this._localStreams) {\n          this._localStreams = [];\n        }\n        var index = this._localStreams.indexOf(stream);\n        if (index === -1) {\n          return;\n        }\n        this._localStreams.splice(index, 1);\n        var self = this;\n        var tracks = stream.getTracks();\n        this.getSenders().forEach(function(sender) {\n          if (tracks.indexOf(sender.track) !== -1) {\n            self.removeTrack(sender);\n          }\n        });\n      };\n    }\n  },\n  shimRemoteStreamsAPI: function(window) {\n    if (typeof window !== 'object' || !window.RTCPeerConnection) {\n      return;\n    }\n    if (!('getRemoteStreams' in window.RTCPeerConnection.prototype)) {\n      window.RTCPeerConnection.prototype.getRemoteStreams = function() {\n        return this._remoteStreams ? this._remoteStreams : [];\n      };\n    }\n    if (!('onaddstream' in window.RTCPeerConnection.prototype)) {\n      Object.defineProperty(window.RTCPeerConnection.prototype, 'onaddstream', {\n        get: function() {\n          return this._onaddstream;\n        },\n        set: function(f) {\n          if (this._onaddstream) {\n            this.removeEventListener('addstream', this._onaddstream);\n            this.removeEventListener('track', this._onaddstreampoly);\n          }\n          this.addEventListener('addstream', this._onaddstream = f);\n          this.addEventListener('track', this._onaddstreampoly = function(e) {\n            var stream = e.streams[0];\n            if (!this._remoteStreams) {\n              this._remoteStreams = [];\n            }\n            if (this._remoteStreams.indexOf(stream) >= 0) {\n              return;\n            }\n            this._remoteStreams.push(stream);\n            var event = new Event('addstream');\n            event.stream = e.streams[0];\n            this.dispatchEvent(event);\n          }.bind(this));\n        }\n      });\n    }\n  },\n  shimCallbacksAPI: function(window) {\n    if (typeof window !== 'object' || !window.RTCPeerConnection) {\n      return;\n    }\n    var prototype = window.RTCPeerConnection.prototype;\n    var createOffer = prototype.createOffer;\n    var createAnswer = prototype.createAnswer;\n    var setLocalDescription = prototype.setLocalDescription;\n    var setRemoteDescription = prototype.setRemoteDescription;\n    var addIceCandidate = prototype.addIceCandidate;\n\n    prototype.createOffer = function(successCallback, failureCallback) {\n      var options = (arguments.length >= 2) ? arguments[2] : arguments[0];\n      var promise = createOffer.apply(this, [options]);\n      if (!failureCallback) {\n        return promise;\n      }\n      promise.then(successCallback, failureCallback);\n      return Promise.resolve();\n    };\n\n    prototype.createAnswer = function(successCallback, failureCallback) {\n      var options = (arguments.length >= 2) ? arguments[2] : arguments[0];\n      var promise = createAnswer.apply(this, [options]);\n      if (!failureCallback) {\n        return promise;\n      }\n      promise.then(successCallback, failureCallback);\n      return Promise.resolve();\n    };\n\n    var withCallback = function(description, successCallback, failureCallback) {\n      var promise = setLocalDescription.apply(this, [description]);\n      if (!failureCallback) {\n        return promise;\n      }\n      promise.then(successCallback, failureCallback);\n      return Promise.resolve();\n    };\n    prototype.setLocalDescription = withCallback;\n\n    withCallback = function(description, successCallback, failureCallback) {\n      var promise = setRemoteDescription.apply(this, [description]);\n      if (!failureCallback) {\n        return promise;\n      }\n      promise.then(successCallback, failureCallback);\n      return Promise.resolve();\n    };\n    prototype.setRemoteDescription = withCallback;\n\n    withCallback = function(candidate, successCallback, failureCallback) {\n      var promise = addIceCandidate.apply(this, [candidate]);\n      if (!failureCallback) {\n        return promise;\n      }\n      promise.then(successCallback, failureCallback);\n      return Promise.resolve();\n    };\n    prototype.addIceCandidate = withCallback;\n  },\n  shimGetUserMedia: function(window) {\n    var navigator = window && window.navigator;\n\n    if (!navigator.getUserMedia) {\n      if (navigator.webkitGetUserMedia) {\n        navigator.getUserMedia = navigator.webkitGetUserMedia.bind(navigator);\n      } else if (navigator.mediaDevices &&\n          navigator.mediaDevices.getUserMedia) {\n        navigator.getUserMedia = function(constraints, cb, errcb) {\n          navigator.mediaDevices.getUserMedia(constraints)\n          .then(cb, errcb);\n        }.bind(navigator);\n      }\n    }\n  },\n  shimRTCIceServerUrls: function(window) {\n    // migrate from non-spec RTCIceServer.url to RTCIceServer.urls\n    var OrigPeerConnection = window.RTCPeerConnection;\n    window.RTCPeerConnection = function(pcConfig, pcConstraints) {\n      if (pcConfig && pcConfig.iceServers) {\n        var newIceServers = [];\n        for (var i = 0; i < pcConfig.iceServers.length; i++) {\n          var server = pcConfig.iceServers[i];\n          if (!server.hasOwnProperty('urls') &&\n              server.hasOwnProperty('url')) {\n            utils.deprecated('RTCIceServer.url', 'RTCIceServer.urls');\n            server = JSON.parse(JSON.stringify(server));\n            server.urls = server.url;\n            delete server.url;\n            newIceServers.push(server);\n          } else {\n            newIceServers.push(pcConfig.iceServers[i]);\n          }\n        }\n        pcConfig.iceServers = newIceServers;\n      }\n      return new OrigPeerConnection(pcConfig, pcConstraints);\n    };\n    window.RTCPeerConnection.prototype = OrigPeerConnection.prototype;\n    // wrap static methods. Currently just generateCertificate.\n    if ('generateCertificate' in window.RTCPeerConnection) {\n      Object.defineProperty(window.RTCPeerConnection, 'generateCertificate', {\n        get: function() {\n          return OrigPeerConnection.generateCertificate;\n        }\n      });\n    }\n  },\n  shimTrackEventTransceiver: function(window) {\n    // Add event.transceiver member over deprecated event.receiver\n    if (typeof window === 'object' && window.RTCPeerConnection &&\n        ('receiver' in window.RTCTrackEvent.prototype) &&\n        // can't check 'transceiver' in window.RTCTrackEvent.prototype, as it is\n        // defined for some reason even when window.RTCTransceiver is not.\n        !window.RTCTransceiver) {\n      Object.defineProperty(window.RTCTrackEvent.prototype, 'transceiver', {\n        get: function() {\n          return {receiver: this.receiver};\n        }\n      });\n    }\n  },\n\n  shimCreateOfferLegacy: function(window) {\n    var origCreateOffer = window.RTCPeerConnection.prototype.createOffer;\n    window.RTCPeerConnection.prototype.createOffer = function(offerOptions) {\n      var pc = this;\n      if (offerOptions) {\n        var audioTransceiver = pc.getTransceivers().find(function(transceiver) {\n          return transceiver.sender.track &&\n              transceiver.sender.track.kind === 'audio';\n        });\n        if (offerOptions.offerToReceiveAudio === false && audioTransceiver) {\n          if (audioTransceiver.direction === 'sendrecv') {\n            audioTransceiver.setDirection('sendonly');\n          } else if (audioTransceiver.direction === 'recvonly') {\n            audioTransceiver.setDirection('inactive');\n          }\n        } else if (offerOptions.offerToReceiveAudio === true &&\n            !audioTransceiver) {\n          pc.addTransceiver('audio');\n        }\n\n        var videoTransceiver = pc.getTransceivers().find(function(transceiver) {\n          return transceiver.sender.track &&\n              transceiver.sender.track.kind === 'video';\n        });\n        if (offerOptions.offerToReceiveVideo === false && videoTransceiver) {\n          if (videoTransceiver.direction === 'sendrecv') {\n            videoTransceiver.setDirection('sendonly');\n          } else if (videoTransceiver.direction === 'recvonly') {\n            videoTransceiver.setDirection('inactive');\n          }\n        } else if (offerOptions.offerToReceiveVideo === true &&\n            !videoTransceiver) {\n          pc.addTransceiver('video');\n        }\n      }\n      return origCreateOffer.apply(pc, arguments);\n    };\n  }\n};\n\n// Expose public methods.\nmodule.exports = {\n  shimCallbacksAPI: safariShim.shimCallbacksAPI,\n  shimLocalStreamsAPI: safariShim.shimLocalStreamsAPI,\n  shimRemoteStreamsAPI: safariShim.shimRemoteStreamsAPI,\n  shimGetUserMedia: safariShim.shimGetUserMedia,\n  shimRTCIceServerUrls: safariShim.shimRTCIceServerUrls,\n  shimTrackEventTransceiver: safariShim.shimTrackEventTransceiver,\n  shimCreateOfferLegacy: safariShim.shimCreateOfferLegacy\n  // TODO\n  // shimPeerConnection: safariShim.shimPeerConnection\n};\n","/*\n *  Copyright (c) 2017 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */\n /* eslint-env node */\n'use strict';\n\nvar SDPUtils = require('sdp');\nvar utils = require('./utils');\n\n// Wraps the peerconnection event eventNameToWrap in a function\n// which returns the modified event object.\nfunction wrapPeerConnectionEvent(window, eventNameToWrap, wrapper) {\n  if (!window.RTCPeerConnection) {\n    return;\n  }\n  var proto = window.RTCPeerConnection.prototype;\n  var nativeAddEventListener = proto.addEventListener;\n  proto.addEventListener = function(nativeEventName, cb) {\n    if (nativeEventName !== eventNameToWrap) {\n      return nativeAddEventListener.apply(this, arguments);\n    }\n    var wrappedCallback = function(e) {\n      cb(wrapper(e));\n    };\n    this._eventMap = this._eventMap || {};\n    this._eventMap[cb] = wrappedCallback;\n    return nativeAddEventListener.apply(this, [nativeEventName,\n      wrappedCallback]);\n  };\n\n  var nativeRemoveEventListener = proto.removeEventListener;\n  proto.removeEventListener = function(nativeEventName, cb) {\n    if (nativeEventName !== eventNameToWrap || !this._eventMap\n        || !this._eventMap[cb]) {\n      return nativeRemoveEventListener.apply(this, arguments);\n    }\n    var unwrappedCb = this._eventMap[cb];\n    delete this._eventMap[cb];\n    return nativeRemoveEventListener.apply(this, [nativeEventName,\n      unwrappedCb]);\n  };\n\n  Object.defineProperty(proto, 'on' + eventNameToWrap, {\n    get: function() {\n      return this['_on' + eventNameToWrap];\n    },\n    set: function(cb) {\n      if (this['_on' + eventNameToWrap]) {\n        this.removeEventListener(eventNameToWrap,\n            this['_on' + eventNameToWrap]);\n        delete this['_on' + eventNameToWrap];\n      }\n      if (cb) {\n        this.addEventListener(eventNameToWrap,\n            this['_on' + eventNameToWrap] = cb);\n      }\n    }\n  });\n}\n\nmodule.exports = {\n  shimRTCIceCandidate: function(window) {\n    // foundation is arbitrarily chosen as an indicator for full support for\n    // https://w3c.github.io/webrtc-pc/#rtcicecandidate-interface\n    if (window.RTCIceCandidate && 'foundation' in\n        window.RTCIceCandidate.prototype) {\n      return;\n    }\n\n    var NativeRTCIceCandidate = window.RTCIceCandidate;\n    window.RTCIceCandidate = function(args) {\n      // Remove the a= which shouldn't be part of the candidate string.\n      if (typeof args === 'object' && args.candidate &&\n          args.candidate.indexOf('a=') === 0) {\n        args = JSON.parse(JSON.stringify(args));\n        args.candidate = args.candidate.substr(2);\n      }\n\n      // Augment the native candidate with the parsed fields.\n      var nativeCandidate = new NativeRTCIceCandidate(args);\n      var parsedCandidate = SDPUtils.parseCandidate(args.candidate);\n      var augmentedCandidate = Object.assign(nativeCandidate,\n          parsedCandidate);\n\n      // Add a serializer that does not serialize the extra attributes.\n      augmentedCandidate.toJSON = function() {\n        return {\n          candidate: augmentedCandidate.candidate,\n          sdpMid: augmentedCandidate.sdpMid,\n          sdpMLineIndex: augmentedCandidate.sdpMLineIndex,\n          usernameFragment: augmentedCandidate.usernameFragment,\n        };\n      };\n      return augmentedCandidate;\n    };\n\n    // Hook up the augmented candidate in onicecandidate and\n    // addEventListener('icecandidate', ...)\n    wrapPeerConnectionEvent(window, 'icecandidate', function(e) {\n      if (e.candidate) {\n        Object.defineProperty(e, 'candidate', {\n          value: new window.RTCIceCandidate(e.candidate),\n          writable: 'false'\n        });\n      }\n      return e;\n    });\n  },\n\n  // shimCreateObjectURL must be called before shimSourceObject to avoid loop.\n\n  shimCreateObjectURL: function(window) {\n    var URL = window && window.URL;\n\n    if (!(typeof window === 'object' && window.HTMLMediaElement &&\n          'srcObject' in window.HTMLMediaElement.prototype &&\n        URL.createObjectURL && URL.revokeObjectURL)) {\n      // Only shim CreateObjectURL using srcObject if srcObject exists.\n      return undefined;\n    }\n\n    var nativeCreateObjectURL = URL.createObjectURL.bind(URL);\n    var nativeRevokeObjectURL = URL.revokeObjectURL.bind(URL);\n    var streams = new Map(), newId = 0;\n\n    URL.createObjectURL = function(stream) {\n      if ('getTracks' in stream) {\n        var url = 'polyblob:' + (++newId);\n        streams.set(url, stream);\n        utils.deprecated('URL.createObjectURL(stream)',\n            'elem.srcObject = stream');\n        return url;\n      }\n      return nativeCreateObjectURL(stream);\n    };\n    URL.revokeObjectURL = function(url) {\n      nativeRevokeObjectURL(url);\n      streams.delete(url);\n    };\n\n    var dsc = Object.getOwnPropertyDescriptor(window.HTMLMediaElement.prototype,\n                                              'src');\n    Object.defineProperty(window.HTMLMediaElement.prototype, 'src', {\n      get: function() {\n        return dsc.get.apply(this);\n      },\n      set: function(url) {\n        this.srcObject = streams.get(url) || null;\n        return dsc.set.apply(this, [url]);\n      }\n    });\n\n    var nativeSetAttribute = window.HTMLMediaElement.prototype.setAttribute;\n    window.HTMLMediaElement.prototype.setAttribute = function() {\n      if (arguments.length === 2 &&\n          ('' + arguments[0]).toLowerCase() === 'src') {\n        this.srcObject = streams.get(arguments[1]) || null;\n      }\n      return nativeSetAttribute.apply(this, arguments);\n    };\n  }\n};\n","var toIntIfInt = function (v) {\n  return String(Number(v)) === v ? Number(v) : v;\n};\n\nvar attachProperties = function (match, location, names, rawName) {\n  if (rawName && !names) {\n    location[rawName] = toIntIfInt(match[1]);\n  }\n  else {\n    for (var i = 0; i < names.length; i += 1) {\n      if (match[i+1] != null) {\n        location[names[i]] = toIntIfInt(match[i+1]);\n      }\n    }\n  }\n};\n\nvar parseReg = function (obj, location, content) {\n  var needsBlank = obj.name && obj.names;\n  if (obj.push && !location[obj.push]) {\n    location[obj.push] = [];\n  }\n  else if (needsBlank && !location[obj.name]) {\n    location[obj.name] = {};\n  }\n  var keyLocation = obj.push ?\n    {} :  // blank object that will be pushed\n    needsBlank ? location[obj.name] : location; // otherwise, named location or root\n\n  attachProperties(content.match(obj.reg), keyLocation, obj.names, obj.name);\n\n  if (obj.push) {\n    location[obj.push].push(keyLocation);\n  }\n};\n\nvar grammar = require('./grammar');\nvar validLine = RegExp.prototype.test.bind(/^([a-z])=(.*)/);\n\nexports.parse = function (sdp) {\n  var session = {}\n    , media = []\n    , location = session; // points at where properties go under (one of the above)\n\n  // parse lines we understand\n  sdp.split(/(\\r\\n|\\r|\\n)/).filter(validLine).forEach(function (l) {\n    var type = l[0];\n    var content = l.slice(2);\n    if (type === 'm') {\n      media.push({rtp: [], fmtp: []});\n      location = media[media.length-1]; // point at latest media line\n    }\n\n    for (var j = 0; j < (grammar[type] || []).length; j += 1) {\n      var obj = grammar[type][j];\n      if (obj.reg.test(content)) {\n        return parseReg(obj, location, content);\n      }\n    }\n  });\n\n  session.media = media; // link it up\n  return session;\n};\n\nvar paramReducer = function (acc, expr) {\n  var s = expr.split(/=(.+)/, 2);\n  if (s.length === 2) {\n    acc[s[0]] = toIntIfInt(s[1]);\n  }\n  return acc;\n};\n\nexports.parseParams = function (str) {\n  return str.split(/\\;\\s?/).reduce(paramReducer, {});\n};\n\n// For backward compatibility - alias will be removed in 3.0.0\nexports.parseFmtpConfig = exports.parseParams;\n\nexports.parsePayloads = function (str) {\n  return str.split(' ').map(Number);\n};\n\nexports.parseRemoteCandidates = function (str) {\n  var candidates = [];\n  var parts = str.split(' ').map(toIntIfInt);\n  for (var i = 0; i < parts.length; i += 3) {\n    candidates.push({\n      component: parts[i],\n      ip: parts[i + 1],\n      port: parts[i + 2]\n    });\n  }\n  return candidates;\n};\n\nexports.parseImageAttributes = function (str) {\n  return str.split(' ').map(function (item) {\n    return item.substring(1, item.length-1).split(',').reduce(paramReducer, {});\n  });\n};\n\nexports.parseSimulcastStreamList = function (str) {\n  return str.split(';').map(function (stream) {\n    return stream.split(',').map(function (format) {\n      var scid, paused = false;\n\n      if (format[0] !== '~') {\n        scid = toIntIfInt(format);\n      } else {\n        scid = toIntIfInt(format.substring(1, format.length));\n        paused = true;\n      }\n\n      return {\n        scid: scid,\n        paused: paused\n      };\n    });\n  });\n};\n","var grammar = require('./grammar');\n\n// customized util.format - discards excess arguments and can void middle ones\nvar formatRegExp = /%[sdv%]/g;\nvar format = function (formatStr) {\n  var i = 1;\n  var args = arguments;\n  var len = args.length;\n  return formatStr.replace(formatRegExp, function (x) {\n    if (i >= len) {\n      return x; // missing argument\n    }\n    var arg = args[i];\n    i += 1;\n    switch (x) {\n    case '%%':\n      return '%';\n    case '%s':\n      return String(arg);\n    case '%d':\n      return Number(arg);\n    case '%v':\n      return '';\n    }\n  });\n  // NB: we discard excess arguments - they are typically undefined from makeLine\n};\n\nvar makeLine = function (type, obj, location) {\n  var str = obj.format instanceof Function ?\n    (obj.format(obj.push ? location : location[obj.name])) :\n    obj.format;\n\n  var args = [type + '=' + str];\n  if (obj.names) {\n    for (var i = 0; i < obj.names.length; i += 1) {\n      var n = obj.names[i];\n      if (obj.name) {\n        args.push(location[obj.name][n]);\n      }\n      else { // for mLine and push attributes\n        args.push(location[obj.names[i]]);\n      }\n    }\n  }\n  else {\n    args.push(location[obj.name]);\n  }\n  return format.apply(null, args);\n};\n\n// RFC specified order\n// TODO: extend this with all the rest\nvar defaultOuterOrder = [\n  'v', 'o', 's', 'i',\n  'u', 'e', 'p', 'c',\n  'b', 't', 'r', 'z', 'a'\n];\nvar defaultInnerOrder = ['i', 'c', 'b', 'a'];\n\n\nmodule.exports = function (session, opts) {\n  opts = opts || {};\n  // ensure certain properties exist\n  if (session.version == null) {\n    session.version = 0; // 'v=0' must be there (only defined version atm)\n  }\n  if (session.name == null) {\n    session.name = ' '; // 's= ' must be there if no meaningful name set\n  }\n  session.media.forEach(function (mLine) {\n    if (mLine.payloads == null) {\n      mLine.payloads = '';\n    }\n  });\n\n  var outerOrder = opts.outerOrder || defaultOuterOrder;\n  var innerOrder = opts.innerOrder || defaultInnerOrder;\n  var sdp = [];\n\n  // loop through outerOrder for matching properties on session\n  outerOrder.forEach(function (type) {\n    grammar[type].forEach(function (obj) {\n      if (obj.name in session && session[obj.name] != null) {\n        sdp.push(makeLine(type, obj, session));\n      }\n      else if (obj.push in session && session[obj.push] != null) {\n        session[obj.push].forEach(function (el) {\n          sdp.push(makeLine(type, obj, el));\n        });\n      }\n    });\n  });\n\n  // then for each media line, follow the innerOrder\n  session.media.forEach(function (mLine) {\n    sdp.push(makeLine('m', grammar.m[0], mLine));\n\n    innerOrder.forEach(function (type) {\n      grammar[type].forEach(function (obj) {\n        if (obj.name in mLine && mLine[obj.name] != null) {\n          sdp.push(makeLine(type, obj, mLine));\n        }\n        else if (obj.push in mLine && mLine[obj.push] != null) {\n          mLine[obj.push].forEach(function (el) {\n            sdp.push(makeLine(type, obj, el));\n          });\n        }\n      });\n    });\n  });\n\n  return sdp.join('\\r\\n') + '\\r\\n';\n};\n","/* Copyright @ 2015 Atlassian Pty Ltd\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexports.Interop = require('./interop');\n","/* Copyright @ 2015 Atlassian Pty Ltd\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* global RTCSessionDescription */\n/* global RTCIceCandidate */\n/* jshint -W097 */\n\"use strict\";\n\nvar transform = require('./transform');\nvar arrayEquals = require('./array-equals');\n\n/**\n * Unified Plan mids may be parsed as integers\n */\nfunction midToString(line) {\n    if (typeof line.mid === 'number') {\n        line.mid = line.mid.toString();\n    }\n}\n\n\nfunction Interop() {\n\n    /**\n     * This map holds the most recent Unified Plan offer/answer SDP that was\n     * converted to Plan B, with the SDP type ('offer' or 'answer') as keys and\n     * the SDP string as values.\n     *\n     * @type {{}}\n     */\n    this.cache = {\n        mlB2UMap : {},\n        mlU2BMap : {}\n    };\n}\n\nmodule.exports = Interop;\n\n/**\n * Changes the candidate args to match with the related Unified Plan\n */\nInterop.prototype.candidateToUnifiedPlan = function(candidate) {\n    var cand = new RTCIceCandidate(candidate);\n\n    cand.sdpMLineIndex = this.cache.mlB2UMap[cand.sdpMLineIndex];\n    /* TODO: change sdpMid to (audio|video)-SSRC */\n\n    return cand;\n};\n\n/**\n * Changes the candidate args to match with the related Plan B\n */\nInterop.prototype.candidateToPlanB = function(candidate) {\n    var cand = new RTCIceCandidate(candidate);\n\n    if (cand.sdpMid.indexOf('audio') === 0) {\n      cand.sdpMid = 'audio';\n    } else if (cand.sdpMid.indexOf('video') === 0) {\n      cand.sdpMid = 'video';\n    } else {\n      throw new Error('candidate with ' + cand.sdpMid + ' not allowed');\n    }\n\n    cand.sdpMLineIndex = this.cache.mlU2BMap[cand.sdpMLineIndex];\n\n    return cand;\n};\n\n/**\n * Returns the index of the first m-line with the given media type and with a\n * direction which allows sending, in the last Unified Plan description with\n * type \"answer\" converted to Plan B. Returns {null} if there is no saved\n * answer, or if none of its m-lines with the given type allow sending.\n * @param type the media type (\"audio\" or \"video\").\n * @returns {*}\n */\nInterop.prototype.getFirstSendingIndexFromAnswer = function(type) {\n    if (!this.cache.answer) {\n        return null;\n    }\n\n    var session = transform.parse(this.cache.answer);\n    if (session && session.media && Array.isArray(session.media)){\n        for (var i = 0; i < session.media.length; i++) {\n            if (session.media[i].type == type &&\n                (!session.media[i].direction /* default to sendrecv */ ||\n                    session.media[i].direction === 'sendrecv' ||\n                    session.media[i].direction === 'sendonly')){\n                return i;\n            }\n        }\n    }\n\n    return null;\n};\n\n/**\n * This method transforms a Unified Plan SDP to an equivalent Plan B SDP. A\n * PeerConnection wrapper transforms the SDP to Plan B before passing it to the\n * application.\n *\n * @param desc\n * @returns {*}\n */\nInterop.prototype.toPlanB = function(desc) {\n    var self = this;\n    //#region Preliminary input validation.\n\n    if (typeof desc !== 'object' || desc === null ||\n        typeof desc.sdp !== 'string') {\n        console.warn('An empty description was passed as an argument.');\n        return desc;\n    }\n\n    // Objectify the SDP for easier manipulation.\n    var session = transform.parse(desc.sdp);\n\n    // If the SDP contains no media, there's nothing to transform.\n    if (typeof session.media === 'undefined' ||\n        !Array.isArray(session.media) || session.media.length === 0) {\n        console.warn('The description has no media.');\n        return desc;\n    }\n\n    // Try some heuristics to \"make sure\" this is a Unified Plan SDP. Plan B\n    // SDP has a video, an audio and a data \"channel\" at most.\n    if (session.media.length <= 3 && session.media.every(function(m) {\n            return ['video', 'audio', 'data'].indexOf(m.mid) !== -1;\n        })) {\n        console.warn('This description does not look like Unified Plan.');\n        return desc;\n    }\n\n    //#endregion\n\n    // HACK https://bugzilla.mozilla.org/show_bug.cgi?id=1113443\n    var sdp = desc.sdp;\n    var rewrite = false;\n    for (var i = 0; i < session.media.length; i++) {\n        var uLine = session.media[i];\n        uLine.rtp.forEach(function(rtp) {\n            if (rtp.codec === 'NULL')\n            {\n                rewrite = true;\n                var offer = transform.parse(self.cache.offer);\n                rtp.codec = offer.media[i].rtp[0].codec;\n            }\n        });\n    }\n    if (rewrite) {\n        sdp = transform.write(session);\n    }\n\n    // Unified Plan SDP is our \"precious\". Cache it for later use in the Plan B\n    // -> Unified Plan transformation.\n    this.cache[desc.type] = sdp;\n\n    //#region Convert from Unified Plan to Plan B.\n\n    // We rebuild the session.media array.\n    var media = session.media;\n    session.media = [];\n\n    // Associative array that maps channel types to channel objects for fast\n    // access to channel objects by their type, e.g. type2bl['audio']->channel\n    // obj.\n    var type2bl = {};\n\n    // Used to build the group:BUNDLE value after the channels construction\n    // loop.\n    var types = [];\n\n    // Used to aggregate the directions of the m-lines.\n    var directionResult = {};\n\n    media.forEach(function(uLine) {\n        midToString(uLine);\n        // rtcp-mux is required in the Plan B SDP.\n        if ((typeof uLine.rtcpMux !== 'string' ||\n            uLine.rtcpMux !== 'rtcp-mux') &&\n            uLine.direction !== 'inactive' && uLine.type !== 'application') {\n            throw new Error('Cannot convert to Plan B because m-lines ' +\n                'without the rtcp-mux attribute were found.');\n        }\n\n        // If we don't have a channel for this uLine.type OR the selected is\n        // inactive, then select this uLine as the channel basis.\n        if (typeof type2bl[uLine.type] === 'undefined' ||\n            type2bl[uLine.type].direction === 'inactive') {\n            type2bl[uLine.type] = uLine;\n        }\n    });\n\n    // Implode the Unified Plan m-lines/tracks into Plan B channels.\n    media.forEach(function(uLine) {\n        var type = uLine.type;\n\n        if (type === 'application') {\n            uLine.mid = \"data\";\n            session.media.push(uLine);\n            types.push(uLine.mid);\n            return;\n        }\n\n        // Add sources to the channel and handle a=msid.\n        if (typeof uLine.sources === 'object') {\n            Object.keys(uLine.sources).forEach(function(ssrc) {\n                if (typeof type2bl[type].sources !== 'object')\n                    type2bl[type].sources = {};\n\n                // Assign the sources to the channel.\n                type2bl[type].sources[ssrc] = uLine.sources[ssrc];\n\n                if (typeof uLine.msid !== 'undefined') {\n                    // In Plan B the msid is an SSRC attribute. Also, we don't\n                    // care about the obsolete label and mslabel attributes.\n                    //\n                    // Note that it is not guaranteed that the uLine will\n                    // have an msid. recvonly channels in particular don't have\n                    // one.\n                    type2bl[type].sources[ssrc].msid = uLine.msid;\n                }\n                // NOTE ssrcs in ssrc groups will share msids, as\n                // draft-uberti-rtcweb-plan-00 mandates.\n            });\n        }\n\n        // Add ssrc groups to the channel.\n        if (typeof uLine.ssrcGroups !== 'undefined' &&\n                Array.isArray(uLine.ssrcGroups)) {\n\n            // Create the ssrcGroups array, if it's not defined.\n            if (typeof type2bl[type].ssrcGroups === 'undefined' ||\n                    !Array.isArray(type2bl[type].ssrcGroups)) {\n                type2bl[type].ssrcGroups = [];\n            }\n\n            // Different ssrc may belong to the same group\n            if (!arrayEquals.apply(type2bl[type].ssrcGroups,\n                                   [uLine.ssrcGroups])) {\n                type2bl[type].ssrcGroups\n                    = type2bl[type].ssrcGroups.concat(uLine.ssrcGroups);\n            }\n        }\n\n        var direction = uLine.direction;\n\n        directionResult[type]\n            = (directionResult[type] || 0 /* inactive */)\n                | directionMasks[direction || 'inactive'];\n\n        if (type2bl[type] === uLine) {\n            // Plan B mids are in ['audio', 'video', 'data']\n            uLine.mid = type;\n\n            // Plan B doesn't support/need the bundle-only attribute.\n            delete uLine.bundleOnly;\n\n            // In Plan B the msid is an SSRC attribute.\n            delete uLine.msid;\n\n            if (direction !== 'inactive') {\n              // Used to build the group:BUNDLE value after this loop.\n              types.push(type);\n            }\n\n            // Add the channel to the new media array.\n            session.media.push(uLine);\n        }\n    });\n\n    // We regenerate the BUNDLE group with the new mids.\n    session.groups.some(function(group) {\n        if (group.type === 'BUNDLE') {\n            group.mids = types.join(' ');\n            return true;\n        }\n    });\n\n    // msid semantic\n    session.msidSemantic = {\n        semantic: 'WMS',\n        token: '*'\n    };\n\n    var resStr = transform.write(session);\n\n    return new RTCSessionDescription({\n        type: desc.type,\n        sdp: resStr\n    });\n\n    //#endregion\n};\n\n/**\n * This method transforms a Plan B SDP to an equivalent Unified Plan SDP. A\n * PeerConnection wrapper transforms the SDP to Unified Plan before passing it\n * to FF.\n *\n * @param desc\n * @returns {*}\n */\nInterop.prototype.toUnifiedPlan = function(desc) {\n    var self = this;\n    //#region Preliminary input validation.\n\n    if (typeof desc !== 'object' || desc === null ||\n        typeof desc.sdp !== 'string') {\n        console.warn('An empty description was passed as an argument.');\n        return desc;\n    }\n\n    var session = transform.parse(desc.sdp);\n\n    // If the SDP contains no media, there's nothing to transform.\n    if (typeof session.media === 'undefined' ||\n        !Array.isArray(session.media) || session.media.length === 0) {\n        console.warn('The description has no media.');\n        return desc;\n    }\n\n    // Try some heuristics to \"make sure\" this is a Plan B SDP. Plan B SDP has\n    // a video, an audio and a data \"channel\" at most.\n    if (session.media.length > 3 || !session.media.every(function(m) {\n            return ['video', 'audio', 'data'].indexOf(m.mid) !== -1;\n        })) {\n        console.warn('This description does not look like Plan B.');\n        return desc;\n    }\n\n    // Make sure this Plan B SDP can be converted to a Unified Plan SDP.\n    var mids = [];\n    session.media.forEach(function(m) {\n        mids.push(m.mid);\n    });\n\n    var hasBundle = false;\n    if (typeof session.groups !== 'undefined' &&\n        Array.isArray(session.groups)) {\n        hasBundle = session.groups.every(function(g) {\n            return g.type !== 'BUNDLE' ||\n                arrayEquals.apply(g.mids.sort(), [mids.sort()]);\n        });\n    }\n\n    if (!hasBundle) {\n        throw new Error(\"Cannot convert to Unified Plan because m-lines that\" +\n            \" are not bundled were found.\");\n    }\n\n    //#endregion\n\n\n    //#region Convert from Plan B to Unified Plan.\n\n    // Unfortunately, a Plan B offer/answer doesn't have enough information to\n    // rebuild an equivalent Unified Plan offer/answer.\n    //\n    // For example, if this is a local answer (in Unified Plan style) that we\n    // convert to Plan B prior to handing it over to the application (the\n    // PeerConnection wrapper called us, for instance, after a successful\n    // createAnswer), we want to remember the m-line at which we've seen the\n    // (local) SSRC. That's because when the application wants to do call the\n    // SLD method, forcing us to do the inverse transformation (from Plan B to\n    // Unified Plan), we need to know to which m-line to assign the (local)\n    // SSRC. We also need to know all the other m-lines that the original\n    // answer had and include them in the transformed answer as well.\n    //\n    // Another example is if this is a remote offer that we convert to Plan B\n    // prior to giving it to the application, we want to remember the mid at\n    // which we've seen the (remote) SSRC.\n    //\n    // In the iteration that follows, we use the cached Unified Plan (if it\n    // exists) to assign mids to ssrcs.\n\n    var cached;\n    if (typeof this.cache[desc.type] !== 'undefined') {\n        cached = transform.parse(this.cache[desc.type]);\n    }\n\n    var recvonlySsrcs = {\n        audio: {},\n        video: {}\n    };\n\n    // A helper map that sends mids to m-line objects. We use it later to\n    // rebuild the Unified Plan style session.media array.\n    var mid2ul = {};\n    var bIdx = 0;\n    var uIdx = 0;\n\n    session.media.forEach(function(bLine) {\n\n        if ((typeof bLine.rtcpMux !== 'string' ||\n            bLine.rtcpMux !== 'rtcp-mux') &&\n            bLine.direction !== 'inactive' && bLine.type !== 'application') {\n            throw new Error(\"Cannot convert to Unified Plan because m-lines \" +\n                \"without the rtcp-mux attribute were found.\");\n        }\n\n        if (bLine.type === 'application') {\n            var uLineData = null;\n            if (cached && cached.media) {\n                uLineData = cached.media.find(function(uLine) {\n                    return uLine.type === 'application';\n                });\n            }\n            if (uLineData) {\n                mid2ul[uLineData.mid] = uLineData;\n            } else {\n                mid2ul[bLine.mid] = bLine;\n            }\n            return;\n        }\n\n        // With rtcp-mux and bundle all the channels should have the same ICE\n        // stuff.\n        var sources = bLine.sources;\n        var ssrcGroups = bLine.ssrcGroups;\n        var candidates = bLine.candidates;\n        var iceUfrag = bLine.iceUfrag;\n        var icePwd = bLine.icePwd;\n        var fingerprint = bLine.fingerprint;\n        var port = bLine.port;\n\n        // We'll use the \"bLine\" object as a prototype for each new \"mLine\"\n        // that we create, but first we need to clean it up a bit.\n        delete bLine.sources;\n        delete bLine.ssrcGroups;\n        delete bLine.candidates;\n        delete bLine.iceUfrag;\n        delete bLine.icePwd;\n        delete bLine.fingerprint;\n        delete bLine.port;\n        delete bLine.mid;\n\n        // inverted ssrc group map\n        var ssrc2group = {};\n        if (typeof ssrcGroups !== 'undefined' && Array.isArray(ssrcGroups)) {\n            ssrcGroups.forEach(function (ssrcGroup) {\n\n                // TODO(gp) find out how to receive simulcast with FF. For the\n                // time being, hide it.\n                if (ssrcGroup.semantics === 'SIM') {\n                    return;\n                }\n\n                // XXX This might brake if an SSRC is in more than one group\n                // for some reason.\n                if (typeof ssrcGroup.ssrcs !== 'undefined' &&\n                    Array.isArray(ssrcGroup.ssrcs)) {\n                    ssrcGroup.ssrcs.forEach(function (ssrc) {\n                        if (typeof ssrc2group[ssrc] === 'undefined') {\n                            ssrc2group[ssrc] = [];\n                        }\n\n                        ssrc2group[ssrc].push(ssrcGroup);\n                    });\n                }\n            });\n        }\n\n        // ssrc to m-line index.\n        var ssrc2ml = {};\n\n        if (typeof sources === 'object') {\n\n            // Explode the Plan B channel sources with one m-line per source.\n            Object.keys(sources).forEach(function(ssrc) {\n\n                // The (unified) m-line for this SSRC. We either create it from\n                // scratch or, if it's a grouped SSRC, we re-use a related\n                // mline. In other words, if the source is grouped with another\n                // source, put the two together in the same m-line.\n                var uLine;\n\n                // We assume here that we are the answerer in the O/A, so any\n                // offers which we translate come from the remote side, while\n                // answers are local. So the check below is to make that we\n                // handle receive-only SSRCs in a special way only if they come\n                // from the remote side.\n                if (desc.type==='offer') {\n                    // We want to detect SSRCs which are used by a remote peer\n                    // in an m-line with direction=recvonly (i.e. they are\n                    // being used for RTCP only).\n                    // This information would have gotten lost if the remote\n                    // peer used Unified Plan and their local description was\n                    // translated to Plan B. So we use the lack of an MSID\n                    // attribute to deduce a \"receive only\" SSRC.\n                    if (!sources[ssrc].msid) {\n                        recvonlySsrcs[bLine.type][ssrc] = sources[ssrc];\n                        // Receive-only SSRCs must not create new m-lines. We\n                        // will assign them to an existing m-line later.\n                        return;\n                    }\n                }\n\n                if (typeof ssrc2group[ssrc] !== 'undefined' &&\n                    Array.isArray(ssrc2group[ssrc])) {\n                    ssrc2group[ssrc].some(function (ssrcGroup) {\n                        // ssrcGroup.ssrcs *is* an Array, no need to check\n                        // again here.\n                        return ssrcGroup.ssrcs.some(function (related) {\n                            if (typeof ssrc2ml[related] === 'object') {\n                                uLine = ssrc2ml[related];\n                                return true;\n                            }\n                        });\n                    });\n                }\n\n                if (typeof uLine === 'object') {\n                    // the m-line already exists. Just add the source.\n                    uLine.sources[ssrc] = sources[ssrc];\n                    delete sources[ssrc].msid;\n                } else {\n                    // Use the \"bLine\" as a prototype for the \"uLine\".\n                    uLine = Object.create(bLine);\n                    ssrc2ml[ssrc] = uLine;\n\n                    if (typeof sources[ssrc].msid !== 'undefined') {\n                        // Assign the msid of the source to the m-line. Note\n                        // that it is not guaranteed that the source will have\n                        // msid. In particular \"recvonly\" sources don't have an\n                        // msid. Note that \"recvonly\" is a term only defined\n                        // for m-lines.\n                        uLine.msid = sources[ssrc].msid;\n                        delete sources[ssrc].msid;\n                    }\n\n                    // We assign one SSRC per media line.\n                    uLine.sources = {};\n                    uLine.sources[ssrc] = sources[ssrc];\n                    uLine.ssrcGroups = ssrc2group[ssrc];\n\n                    // Use the cached Unified Plan SDP (if it exists) to assign\n                    // SSRCs to mids.\n                    if (typeof cached !== 'undefined' &&\n                        typeof cached.media !== 'undefined' &&\n                        Array.isArray(cached.media)) {\n\n                        cached.media.forEach(function (m) {\n                            if (typeof m.sources === 'object') {\n                                Object.keys(m.sources).forEach(function (s) {\n                                    if (s === ssrc) {\n                                        uLine.mid = m.mid;\n                                    }\n                                });\n                            }\n                        });\n                    }\n\n                    midToString(uLine);\n\n                    if (typeof uLine.mid === 'undefined') {\n\n                        // If this is an SSRC that we see for the first time\n                        // assign it a new mid. This is typically the case when\n                        // this method is called to transform a remote\n                        // description for the first time or when there is a\n                        // new SSRC in the remote description because a new\n                        // peer has joined the conference. Local SSRCs should\n                        // have already been added to the map in the toPlanB\n                        // method.\n                        //\n                        // Because FF generates answers in Unified Plan style,\n                        // we MUST already have a cached answer with all the\n                        // local SSRCs mapped to some m-line/mid.\n\n                        if (desc.type === 'answer') {\n                            throw new Error(\"An unmapped SSRC was found.\");\n                        }\n\n                        uLine.mid = [bLine.type, '-', ssrc].join('');\n                    }\n\n                    // Include the candidates in the 1st media line.\n                    uLine.candidates = candidates;\n                    uLine.iceUfrag = iceUfrag;\n                    uLine.icePwd = icePwd;\n                    uLine.fingerprint = fingerprint;\n                    uLine.port = port;\n\n                    mid2ul[uLine.mid] = uLine;\n\n                    self.cache.mlU2BMap[uIdx] = bIdx;\n                    if (typeof self.cache.mlB2UMap[bIdx] === 'undefined') {\n                      self.cache.mlB2UMap[bIdx] = uIdx;\n                    }\n                    uIdx++;\n                }\n            });\n        }\n\n        bIdx++;\n    });\n\n    // Rebuild the media array in the right order and add the missing mLines\n    // (missing from the Plan B SDP).\n    session.media = [];\n    mids = []; // reuse\n\n    if (desc.type === 'answer') {\n\n        // The media lines in the answer must match the media lines in the\n        // offer. The order is important too. Here we assume that Firefox is\n        // the answerer, so we merely have to use the reconstructed (unified)\n        // answer to update the cached (unified) answer accordingly.\n        //\n        // In the general case, one would have to use the cached (unified)\n        // offer to find the m-lines that are missing from the reconstructed\n        // answer, potentially grabbing them from the cached (unified) answer.\n        // One has to be careful with this approach because inactive m-lines do\n        // not always have an mid, making it tricky (impossible?) to find where\n        // exactly and which m-lines are missing from the reconstructed answer.\n\n        for (var i = 0; i < cached.media.length; i++) {\n            var uLine = cached.media[i];\n            midToString(uLine);\n\n            if (typeof mid2ul[uLine.mid] === 'undefined') {\n\n                // The mid isn't in the reconstructed (unified) answer.\n                // This is either a (unified) m-line containing a remote\n                // track only, or a (unified) m-line containing a remote\n                // track and a local track that has been removed.\n                // In either case, it MUST exist in the cached\n                // (unified) answer.\n                //\n                // In case this is a removed local track, clean-up\n                // the (unified) m-line and make sure it's 'recvonly' or\n                // 'inactive'.\n\n                delete uLine.msid;\n                delete uLine.sources;\n                delete uLine.ssrcGroups;\n                if (!uLine.direction\n                    || uLine.direction === 'sendrecv')\n                    uLine.direction = 'recvonly';\n                else if (uLine.direction === 'sendonly')\n                    uLine.direction = 'inactive';\n            } else {\n                // This is an (unified) m-line/channel that contains a local\n                // track (sendrecv or sendonly channel) or it's a unified\n                // recvonly m-line/channel. In either case, since we're\n                // going from PlanB -> Unified Plan this m-line MUST\n                // exist in the cached answer.\n            }\n\n            session.media.push(uLine);\n            if (typeof uLine.mid === 'string') {\n                // inactive lines don't/may not have an mid.\n                mids.push(uLine.mid);\n            }\n        }\n    } else {\n\n        // SDP offer/answer (and the JSEP spec) forbids removing an m-section\n        // under any circumstances. If we are no longer interested in sending a\n        // track, we just remove the msid and ssrc attributes and set it to\n        // either a=recvonly (as the reofferer, we must use recvonly if the\n        // other side was previously sending on the m-section, but we can also\n        // leave the possibility open if it wasn't previously in use), or\n        // a=inactive.\n\n        if (typeof cached !== 'undefined' &&\n            typeof cached.media !== 'undefined' &&\n            Array.isArray(cached.media)) {\n            cached.media.forEach(function(uLine) {\n                midToString(uLine);\n                mids.push(uLine.mid);\n                if (typeof mid2ul[uLine.mid] !== 'undefined') {\n                    session.media.push(mid2ul[uLine.mid]);\n                } else {\n                    delete uLine.msid;\n                    delete uLine.sources;\n                    delete uLine.ssrcGroups;\n                    if (!uLine.direction\n                        || uLine.direction === 'sendrecv')\n                        uLine.direction = 'recvonly';\n                    if (!uLine.direction\n                        || uLine.direction === 'sendonly')\n                        uLine.direction = 'inactive';\n                    session.media.push(uLine);\n                }\n            });\n        }\n\n        // Add all the remaining (new) m-lines of the transformed SDP.\n        Object.keys(mid2ul).forEach(function(mid) {\n            if (mids.indexOf(mid) === -1) {\n                mids.push(mid);\n                if (mid2ul[mid].direction === 'recvonly') {\n                    // This is a remote recvonly channel. Add its SSRC to the\n                    // appropriate sendrecv or sendonly channel.\n                    // TODO(gp) what if we don't have sendrecv/sendonly\n                    // channel?\n\n                    session.media.some(function (uLine) {\n                        if ((uLine.direction === 'sendrecv' ||\n                            uLine.direction === 'sendonly') &&\n                            uLine.type === mid2ul[mid].type) {\n\n                            // mid2ul[mid] shouldn't have any ssrc-groups\n                            Object.keys(mid2ul[mid].sources).forEach(\n                                function (ssrc) {\n                                uLine.sources[ssrc] =\n                                    mid2ul[mid].sources[ssrc];\n                            });\n\n                            return true;\n                        }\n                    });\n                } else {\n                    session.media.push(mid2ul[mid]);\n                }\n            }\n        });\n    }\n\n    // After we have constructed the Plan Unified m-lines we can figure out\n    // where (in which m-line) to place the 'recvonly SSRCs'.\n    // Note: we assume here that we are the answerer in the O/A, so any offers\n    // which we translate come from the remote side, while answers are local\n    // (and so our last local description is cached as an 'answer').\n    [\"audio\", \"video\"].forEach(function (type) {\n        if (!session || !session.media || !Array.isArray(session.media))\n            return;\n\n        var idx = null;\n        if (Object.keys(recvonlySsrcs[type]).length > 0) {\n            idx = self.getFirstSendingIndexFromAnswer(type);\n            if (idx === null){\n                // If this is the first offer we receive, we don't have a\n                // cached answer. Assume that we will be sending media using\n                // the first m-line for each media type.\n\n                for (var i = 0; i < session.media.length; i++) {\n                    if (session.media[i].type === type) {\n                        idx = i;\n                        break;\n                    }\n                }\n            }\n        }\n\n        if (idx && session.media.length > idx) {\n            var mLine = session.media[idx];\n            Object.keys(recvonlySsrcs[type]).forEach(function(ssrc) {\n                if (mLine.sources && mLine.sources[ssrc]) {\n                    console.warn(\"Replacing an existing SSRC.\");\n                }\n                if (!mLine.sources) {\n                    mLine.sources = {};\n                }\n\n                mLine.sources[ssrc] = recvonlySsrcs[type][ssrc];\n            });\n        }\n    });\n\n    // We regenerate the BUNDLE group (since we regenerated the mids)\n    session.groups.some(function(group) {\n        if (group.type === 'BUNDLE') {\n            group.mids = mids.join(' ');\n            return true;\n        }\n    });\n\n    // msid semantic\n    session.msidSemantic = {\n        semantic: 'WMS',\n        token: '*'\n    };\n\n    var resStr = transform.write(session);\n\n    // Cache the transformed SDP (Unified Plan) for later re-use in this\n    // function.\n    this.cache[desc.type] = resStr;\n\n    return new RTCSessionDescription({\n        type: desc.type,\n        sdp: resStr\n    });\n\n    //#endregion\n};\n\n/**\n * Maps the direction strings to their binary representation. The binary\n * representation of the directions will contain only 2 bits. The least\n * significant bit will indicate the receiving direction and the other bit will\n * indicate the sending direction.\n *\n * @type {Map<string, number>}\n */\nvar directionMasks = {\n    'inactive': 0, // 00\n    'recvonly': 1, // 01\n    'sendonly': 2, // 10\n    'sendrecv': 3  // 11\n};\n\n/**\n * Parses a number into direction string.\n *\n * @param {number} direction - The number to be parsed.\n * @returns {string} - The parsed direction string.\n */\nfunction parseDirection(direction) { // eslint-disable-line no-unused-vars\n    // Filter all other bits except the 2 less significant.\n    var directionMask = direction & 3;\n\n    switch (directionMask) {\n    case 0:\n        return 'inactive';\n    case 1:\n        return 'recvonly';\n    case 2:\n        return 'sendonly';\n    case 3:\n        return 'sendrecv';\n    }\n}\n","/* Copyright @ 2015 Atlassian Pty Ltd\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar transform = require('sdp-transform');\n\nexports.write = function(session, opts) {\n\n  if (typeof session !== 'undefined' &&\n      typeof session.media !== 'undefined' &&\n      Array.isArray(session.media)) {\n\n    session.media.forEach(function (mLine) {\n      // expand sources to ssrcs\n      if (typeof mLine.sources !== 'undefined' &&\n        Object.keys(mLine.sources).length !== 0) {\n          mLine.ssrcs = [];\n          Object.keys(mLine.sources).forEach(function (ssrc) {\n            var source = mLine.sources[ssrc];\n            Object.keys(source).forEach(function (attribute) {\n              mLine.ssrcs.push({\n                id: ssrc,\n                attribute: attribute,\n                value: source[attribute]\n              });\n            });\n          });\n          delete mLine.sources;\n        }\n\n      // join ssrcs in ssrc groups\n      if (typeof mLine.ssrcGroups !== 'undefined' &&\n        Array.isArray(mLine.ssrcGroups)) {\n          mLine.ssrcGroups.forEach(function (ssrcGroup) {\n            if (typeof ssrcGroup.ssrcs !== 'undefined' &&\n                Array.isArray(ssrcGroup.ssrcs)) {\n              ssrcGroup.ssrcs = ssrcGroup.ssrcs.join(' ');\n            }\n          });\n        }\n    });\n  }\n\n  // join group mids\n  if (typeof session !== 'undefined' &&\n      typeof session.groups !== 'undefined' && Array.isArray(session.groups)) {\n\n    session.groups.forEach(function (g) {\n      if (typeof g.mids !== 'undefined' && Array.isArray(g.mids)) {\n        g.mids = g.mids.join(' ');\n      }\n    });\n  }\n\n  return transform.write(session, opts);\n};\n\nexports.parse = function(sdp) {\n  var session = transform.parse(sdp);\n\n  if (typeof session !== 'undefined' && typeof session.media !== 'undefined' &&\n      Array.isArray(session.media)) {\n\n    session.media.forEach(function (mLine) {\n      // group sources attributes by ssrc\n      if (typeof mLine.ssrcs !== 'undefined' && Array.isArray(mLine.ssrcs)) {\n        mLine.sources = {};\n        mLine.ssrcs.forEach(function (ssrc) {\n          if (!mLine.sources[ssrc.id])\n          mLine.sources[ssrc.id] = {};\n        mLine.sources[ssrc.id][ssrc.attribute] = ssrc.value;\n        });\n\n        delete mLine.ssrcs;\n      }\n\n      // split ssrcs in ssrc groups\n      if (typeof mLine.ssrcGroups !== 'undefined' &&\n        Array.isArray(mLine.ssrcGroups)) {\n          mLine.ssrcGroups.forEach(function (ssrcGroup) {\n            if (typeof ssrcGroup.ssrcs === 'string') {\n              ssrcGroup.ssrcs = ssrcGroup.ssrcs.split(' ');\n            }\n          });\n        }\n    });\n  }\n  // split group mids\n  if (typeof session !== 'undefined' &&\n      typeof session.groups !== 'undefined' && Array.isArray(session.groups)) {\n\n    session.groups.forEach(function (g) {\n      if (typeof g.mids === 'string') {\n        g.mids = g.mids.split(' ');\n      }\n    });\n  }\n\n  return session;\n};\n\n","/* Copyright @ 2015 Atlassian Pty Ltd\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nmodule.exports = function arrayEquals(array) {\n    // if the other array is a falsy value, return\n    if (!array)\n        return false;\n\n    // compare lengths - can save a lot of time\n    if (this.length != array.length)\n        return false;\n\n    for (var i = 0, l = this.length; i < l; i++) {\n        // Check if we have nested arrays\n        if (this[i] instanceof Array && array[i] instanceof Array) {\n            // recurse into the nested arrays\n            if (!arrayEquals.apply(this[i], [array[i]]))\n                return false;\n        } else if (this[i] != array[i]) {\n            // Warning - two different object instances will never be equal:\n            // {x:20} != {x:20}\n            return false;\n        }\n    }\n    return true;\n};\n\n","/* Copyright @ 2016 Atlassian Pty Ltd\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar transform = require('sdp-transform');\nvar transformUtils = require('./transform-utils');\nvar parseSsrcs = transformUtils.parseSsrcs;\nvar writeSsrcs = transformUtils.writeSsrcs;\n\n//region Constants\n\nvar DEFAULT_NUM_OF_LAYERS = 3;\n\n//endregion\n\nfunction getSsrcAttribute (mLine, ssrc, attributeName) {\n    return mLine\n        .ssrcs\n        .filter(function(ssrcInfo) { return ssrcInfo.id === ssrc; })\n        .filter(function(ssrcInfo) { return ssrcInfo.attribute === attributeName; })\n        .map(function(ssrcInfo) { return ssrcInfo.value; })[0];\n}\n\n//region Ctor\n\nfunction Simulcast(options) {\n\n    this.options = options ? options : {};\n\n    if (!this.options.numOfLayers) {\n        this.options.numOfLayers = DEFAULT_NUM_OF_LAYERS;\n    }\n    console.log(\"SdpSimulcast: using \" + this.options.numOfLayers + \" layers\");\n\n    /**\n     * An IN-ORDER list of the simulcast ssrcs\n     * @type {list<number>}\n     */\n    this.ssrcCache = [];\n}\n\n//endregion\n\n//region Stateless private utility functions\n\n/**\n * Returns a random integer between min (included) and max (excluded)\n * Using Math.round() gives a non-uniform distribution!\n * @returns {number}\n */\nfunction generateSSRC() {\n    var min = 0, max = 0xffffffff;\n    return Math.floor(Math.random() * (max - min)) + min;\n};\n\nfunction processVideo(session, action) {\n    if (session == null || !Array.isArray(session.media)) {\n        return;\n    }\n\n    session.media.forEach(function (mLine) {\n        if (mLine.type === 'video') {\n            action(mLine);\n        }\n    });\n};\n\nfunction validateDescription(desc)\n{\n    return desc && desc != null\n        && desc.type && desc.type != ''\n        && desc.sdp && desc.sdp != '';\n}\n\nfunction explodeRemoteSimulcast(mLine) {\n\n    if (!mLine || !Array.isArray(mLine.ssrcGroups)) {\n        return;\n    }\n\n    var sources = parseSsrcs(mLine);\n    var order = [];\n\n    // Find the SIM group and explode its sources.\n    var j = mLine.ssrcGroups.length;\n    while (j--) {\n\n        if (mLine.ssrcGroups[j].semantics !== 'SIM') {\n            continue;\n        }\n\n        var simulcastSsrcs = mLine.ssrcGroups[j].ssrcs.split(' ');\n\n        for (var i = 0; i < simulcastSsrcs.length; i++) {\n\n            var ssrc = simulcastSsrcs[i];\n            order.push(ssrc);\n\n            var parts = sources[ssrc].msid.split(' ');\n            sources[ssrc].msid = [parts[0], '/', i, ' ', parts[1], '/', i].join('');\n            sources[ssrc].cname = [sources[ssrc].cname, '/', i].join('');\n\n            // Remove all the groups that this SSRC participates in.\n            mLine.ssrcGroups.forEach(function (relatedGroup) {\n                if (relatedGroup.semantics === 'SIM') {\n                    return;\n                }\n\n                var relatedSsrcs = relatedGroup.ssrcs.split(' ');\n                if (relatedSsrcs.indexOf(ssrc) === -1) {\n                    return;\n                }\n\n                // Nuke all the related SSRCs.\n                relatedSsrcs.forEach(function (relatedSSRC) {\n                    sources[relatedSSRC].msid = sources[ssrc].msid;\n                    sources[relatedSSRC].cname = sources[ssrc].cname;\n                    if (relatedSSRC !== ssrc) {\n                        order.push(relatedSSRC);\n                    }\n                });\n\n                // Schedule the related group for nuking.\n            })\n        }\n\n        mLine.ssrcs = writeSsrcs(sources, order);\n        mLine.ssrcGroups.splice(j, 1);\n    };\n}\n\nfunction implodeRemoteSimulcast(mLine) {\n\n    if (!mLine || !Array.isArray(mLine.ssrcGroups)) {\n        console.info('Halt: There are no SSRC groups in the remote ' +\n                'description.');\n        return;\n    }\n\n    var sources = parseSsrcs(mLine);\n\n    // Find the SIM group and nuke it.\n    mLine.ssrcGroups.forEach(function (simulcastGroup) {\n        if (simulcastGroup.semantics !== 'SIM') {\n            return;\n        }\n\n        console.info(\"Imploding SIM group: \" + simulcastGroup.ssrcs);\n        // Schedule the SIM group for nuking.\n        simulcastGroup.nuke = true;\n\n        var simulcastSsrcs = simulcastGroup.ssrcs.split(' ');\n\n        // Nuke all the higher layer SSRCs.\n        for (var i = 1; i < simulcastSsrcs.length; i++) {\n\n            var ssrc = simulcastSsrcs[i];\n            delete sources[ssrc];\n\n            // Remove all the groups that this SSRC participates in.\n            mLine.ssrcGroups.forEach(function (relatedGroup) {\n                if (relatedGroup.semantics === 'SIM') {\n                    return;\n                }\n\n                var relatedSsrcs = relatedGroup.ssrcs.split(' ');\n                if (relatedSsrcs.indexOf(ssrc) === -1) {\n                    return;\n                }\n\n                // Nuke all the related SSRCs.\n                relatedSsrcs.forEach(function (relatedSSRC) {\n                    delete sources[relatedSSRC];\n                });\n\n                // Schedule the related group for nuking.\n                relatedGroup.nuke = true;\n            })\n        }\n\n        return;\n    });\n\n    mLine.ssrcs = writeSsrcs(sources);\n\n    // Nuke all the scheduled groups.\n    var i = mLine.ssrcGroups.length;\n    while (i--) {\n        if (mLine.ssrcGroups[i].nuke) {\n            mLine.ssrcGroups.splice(i, 1);\n        }\n    }\n}\n\nfunction removeGoogConference(mLine) {\n    if (!mLine || !Array.isArray(mLine.invalid)) {\n        return;\n    }\n\n    var i = mLine.invalid.length;\n    while (i--) {\n        if (mLine.invalid[i].value == 'x-google-flag:conference') {\n            mLine.invalid.splice(i, 1);\n        }\n    }\n}\n\nfunction assertGoogConference(mLine) {\n    if (!mLine) {\n        return;\n    }\n\n    if (!Array.isArray(mLine.invalid)) {\n        mLine.invalid = [];\n    }\n\n    if (!mLine.invalid.some(\n            function (i) { return i.value === 'x-google-flag:conference' })) {\n        mLine.invalid.push({'value': 'x-google-flag:conference'});\n    }\n}\n\nSimulcast.prototype.clearSsrcCache = function() {\n    this.ssrcCache = [];\n}\n\n/**\n * When we start as video muted, all of the video\n *  ssrcs get generated so we can include them as part\n *  of the original session-accept.  That means we\n *  need this library to restore to those same ssrcs\n *  the first time we unmute, so we need the ability to\n *  force its cache\n */\nSimulcast.prototype.setSsrcCache = function(ssrcs) {\n    this.ssrcCache = ssrcs;\n}\n\n//endregion\n\n//region \"Private\" functions\n\n/**\n * Given a video mLine, return a list of the video ssrcs\n *  in simulcast layer order (returns a list of just\n *  the primary ssrc if there are no simulcast layers)\n */\nSimulcast.prototype._parseSimLayers = function (mLine) {\n    var simGroup = mLine.ssrcGroups &&\n        mLine.ssrcGroups.find(function(group) { return group.semantics === \"SIM\"; });\n    if (simGroup) {\n        return simGroup.ssrcs\n            .split(\" \")\n            .map(function(ssrcStr) { return parseInt(ssrcStr) });\n    } else {\n        return [mLine.ssrcs[0].id];\n    }\n}\n\nSimulcast.prototype._buildNewToOldSsrcMap = function (newSsrcList, oldSsrcList) {\n    var ssrcMap = {};\n    for (var i = 0; i < newSsrcList.length; ++i) {\n        var newSsrc = newSsrcList[i];\n        var oldSsrc = oldSsrcList[i] || null;\n        ssrcMap[newSsrc] = oldSsrc;\n    }\n    return ssrcMap;\n}\n\nSimulcast.prototype._fillInSourceDataFromCache = function(mLine) {\n    console.log(\"SdpSimulcast restoring from cache: \", this.ssrcCache);\n    var newSimSsrcs = this._parseSimLayers(mLine);\n    console.log(\"SdpSimulcast Parsed new sim ssrcs: \", newSimSsrcs);\n    var newMsid = getSsrcAttribute(mLine, newSimSsrcs[0], \"msid\");\n    var newCname = getSsrcAttribute(mLine, newSimSsrcs[0], \"cname\");\n    var ssrcsToReplace = this._buildNewToOldSsrcMap(newSimSsrcs, this.ssrcCache);\n    console.log(\"SdpSimulcast built replacement map: \", ssrcsToReplace);\n    // New sdp might only have 1 layer, so not every cached ssrc will have a new one\n    //  to replace directly\n    var ssrcsToAdd = this.ssrcCache\n        .filter(function(ssrc) { return Object.values(ssrcsToReplace).indexOf(ssrc) === -1; });\n    console.log(\"SdpSimulcast built ssrcs to add: \", ssrcsToAdd);\n\n    // First do the replacements\n    mLine.ssrcs.forEach(function(ssrc) {\n        if (ssrcsToReplace[ssrc.id]) {\n            ssrc.id = ssrcsToReplace[ssrc.id];\n        }\n    });\n    // Now the adds\n    ssrcsToAdd.forEach(function(ssrc) {\n        mLine.ssrcs.push({\n            id: ssrc,\n            attribute: \"msid\",\n            value: newMsid\n        });\n        mLine.ssrcs.push({\n            id: ssrc,\n            attribute: \"cname\",\n            value: newCname\n        });\n    });\n    mLine.ssrcGroups = mLine.ssrcGroups || [];\n    mLine.ssrcGroups.push({\n        semantics: \"SIM\",\n        ssrcs: this.ssrcCache.join(\" \")\n    });\n    return mLine;\n}\n\nSimulcast.prototype._generateSourceData = function(mLine, primarySsrc) {\n    var addAssociatedStream = function(mLine, ssrc) {\n        mLine.ssrcs.push({\n            id: ssrc,\n            attribute: \"cname\",\n            value: primarySsrcCname\n        });\n        mLine.ssrcs.push({\n            id: ssrc,\n            attribute: \"msid\",\n            value: primarySsrcMsid\n        });\n    }\n    var primarySsrcMsid = getSsrcAttribute(mLine, primarySsrc, \"msid\");\n    var primarySsrcCname = getSsrcAttribute(mLine, primarySsrc, \"cname\");\n\n    // Generate sim layers\n    var simSsrcs = [];\n    for (var i = 0; i < this.options.numOfLayers - 1; ++i) {\n        var simSsrc = generateSSRC();\n        addAssociatedStream(mLine, simSsrc);\n        simSsrcs.push(simSsrc);\n    }\n    mLine.ssrcGroups = mLine.ssrcGroups || [];\n    mLine.ssrcGroups.push({\n        semantics: \"SIM\",\n        ssrcs: primarySsrc + \" \" + simSsrcs.join(\" \")\n    });\n    return mLine;\n}\n\n\n\n// Assumptions:\n//  1) 'mLine' contains only a single primary video source\n//   (i.e. it will not already have simulcast streams inserted)\n//  2) 'mLine' MAY already contain an RTX stream for its video source\n//  3) 'mLine' is in sendrecv or sendonly state\n// Guarantees:\n//  1) return mLine will contain 2 additional simulcast layers\n//   generated\n//  2) if the base video ssrc in mLine has been seen before,\n//   then the same generated simulcast streams from before will\n//   be used again\n//  3) if rtx is enabled for the mLine, all generated simulcast\n//   streams will have rtx streams generated as well\n//  4) if rtx has been generated for a src before, we will generate\n//   the same rtx stream again\nSimulcast.prototype._restoreSimulcast = function(mLine) {\n    // First, find the primary video source in the given\n    // mLine and see if we've seen it before.\n    var primarySsrc;\n    var numSsrcs = mLine.ssrcs && mLine.ssrcs\n        .map(function(ssrcInfo) { return ssrcInfo.id; })\n        .filter(function(ssrc, index, array) {\n            return array.indexOf(ssrc) === index;\n        })\n        .length || 0;\n    var numGroups = (mLine.ssrcGroups && mLine.ssrcGroups.length) || 0;\n\n    if (numSsrcs === 0 || numSsrcs > 2) {\n        // Unsupported scenario\n        return mLine;\n    }\n    if (numSsrcs == 2 && numGroups === 0) {\n        // Unsupported scenario\n        return mLine;\n    }\n\n    if (numSsrcs === 1) {\n        primarySsrc = mLine.ssrcs[0].id;\n    } else {\n        // There must be an FID group, so parse\n        //  that and pull the primary ssrc from there\n        var fidGroup = mLine.ssrcGroups.filter(function(group) { return group.semantics === \"FID\"; })[0];\n        if (fidGroup) {\n            primarySsrc = parseInt(fidGroup.ssrcs.split(\" \")[0]);\n        } else {\n            // Unsupported scenario\n            return mLine;\n        }\n    }\n    console.log(\"SdpSimulcast: current ssrc cache: \", this.ssrcCache);\n    console.log(\"SdpSimulcast: parsed primary ssrc \" + primarySsrc);\n\n    var seenPrimarySsrc = this.ssrcCache.indexOf(primarySsrc) !== -1;\n\n    if (seenPrimarySsrc) {\n        console.log(\"SdpSimulcast: Have seen primary ssrc before, \" +\n            \"filling in data from cache\");\n        mLine = this._fillInSourceDataFromCache(mLine);\n    } else {\n        console.log(\"SdpSimulcast: Have not seen primary ssrc before, \" +\n            \"generating source data\");\n        mLine = this._generateSourceData(mLine, primarySsrc);\n    }\n    // Now update the cache to match whatever we've just put into this sdp\n    this.ssrcCache = this._parseSimLayers(mLine);\n    return mLine;\n}\n\n//endregion\n\n//region \"Public\" functions\n\n/**\n *\n * @param desc\n * @returns {RTCSessionDescription}\n */\nSimulcast.prototype.mungeRemoteDescription = function (desc) {\n\n    if (!validateDescription(desc)) {\n        return desc;\n    }\n\n    var session = transform.parse(desc.sdp);\n\n    var self = this;\n    processVideo(session, function (mLine) {\n\n        // Handle simulcast reception.\n        if (self.options.explodeRemoteSimulcast) {\n            explodeRemoteSimulcast(mLine);\n        } else {\n            implodeRemoteSimulcast(mLine);\n        }\n\n        // Make sure that we ALWAYS add the conference flag to the remote\n        // description: That flag is deprecated but, as of this writing\n        // (09/2019), it's still used in jitsi-meet to enable legacy simulcast\n        // when screen-sharing (https://cs.chromium.org/chromium/src/third_party/webrtc/media/base/media_channel.h?rcl=f2773b54647633d5725fa25dea883f99dd1b400c&l=838).\n        //\n        // We've observed the following chain of events that almost always\n        // results in connectivity issues at the receiver:\n        //\n        // 1. The user joins a call with startVideoMuted=true, so there's no\n        //    jitsi track created.\n        // 2. The user enables screen-sharing. At this point we do a\n        //    renegotiation (which starts with an sRD); the ssrcCache is empty,\n        //    so the conference flag is not added to the remote description SDP.\n        // 3. The next step of the re-negotiation is to set the answer, so\n        //    mungeLocalDescription is called, and because now we have a track\n        //    due to the user enabling screen-sharing, it enables simulcast.\n        // 4. sLD is called with simulcast ssrcs, but the sRD call of step 2\n        //    didn't add the conference flag in the SDP, so the screen-sharing\n        //    is without simulcast.\n        // 5. Any subsequent re-negotiation (for example, due to a participant\n        //    joining/leaving the call) will enable simulcast and this switch\n        //    almost always results in a broken stream at the receiver.\n\n        assertGoogConference(mLine);\n    });\n\n    return new RTCSessionDescription({\n        type: desc.type,\n        sdp: transform.write(session)\n    });\n};\n\n/**\n *\n * NOTE this method should be called only if simulcast is supported by\n * the current browser, otherwise local SDP should not be munged.\n * @param desc\n * @returns {RTCSessionDescription}\n */\nSimulcast.prototype.mungeLocalDescription = function (desc) {\n\n    if (!validateDescription(desc)) {\n        return desc;\n    }\n\n    var session = transform.parse(desc.sdp);\n\n    var self = this;\n    processVideo(session, function (mLine) {\n        if (mLine.direction == 'recvonly' || mLine.direction == 'inactive')\n        {\n            return;\n        }\n        self._restoreSimulcast(mLine);\n    });\n\n    return new RTCSessionDescription({\n        type: desc.type,\n        sdp: transform.write(session)\n    });\n};\n\n//endregion\n\nmodule.exports = Simulcast;\n","/* Copyright @ 2015 Atlassian Pty Ltd\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * FIXME\n * @param sources FIXME\n * @param order An array of SSRCs which will be used to order the entries in\n * the returned array. Sources whose SSRC appears in 'order' will be added first,\n * in the specified order, and all other sources will be added afterwards (in\n * no specific order).\n * @returns {Array} FIXME\n */\nexports.writeSsrcs = function(sources, order) {\n  var ssrcs = [];\n\n  // expand sources to ssrcs\n  if (typeof sources !== 'undefined' &&\n      Object.keys(sources).length !== 0) {\n\n    if (!Array.isArray(order)) {\n      order = []\n    }\n\n    // Add the sources that appear in 'order' first.\n    for (var i = 0; i < order.length; i++) {\n      var ssrc = order[i];\n      var source = sources[ssrc];\n      Object.keys(source).forEach(function (attribute) {\n        ssrcs.push({\n          id: ssrc,\n          attribute: attribute,\n          value: source[attribute]\n        });\n      });\n    }\n\n    // Now add the rest of the sources.\n    Object.keys(sources).forEach(function (ssrc) {\n      ssrc = parseInt(ssrc); // Object.keys() returns string\n      if (order.indexOf(ssrc) >= 0) {\n        // Already added.\n        return;\n      }\n\n      var source = sources[ssrc];\n      Object.keys(source).forEach(function (attribute) {\n        ssrcs.push({\n          id: ssrc,\n          attribute: attribute,\n          value: source[attribute]\n        });\n      });\n    });\n  }\n\n  return ssrcs;\n};\n\nexports.parseSsrcs = function (mLine) {\n  var sources = {};\n  // group sources attributes by ssrc.\n  if (typeof mLine.ssrcs !== 'undefined' && Array.isArray(mLine.ssrcs)) {\n    mLine.ssrcs.forEach(function (ssrc) {\n      if (!sources[ssrc.id])\n        sources[ssrc.id] = {};\n      sources[ssrc.id][ssrc.attribute] = ssrc.value;\n    });\n  }\n  return sources;\n};\n\n","/* eslint-disable max-params */\n\n/**\n * This object stores variables needed around the recording of an audio stream\n * and passing this recording along with additional information along to\n * different processes\n * @param blob the recording audio stream as a single blob\n * @param name the name of the person of the audio stream\n * @param startTime the time in UTC when recording of the audiostream started\n * @param wordArray the recorder audio stream transcribed as an array of Word\n *                  objects\n */\nconst RecordingResult = function(blob, name, startTime, wordArray) {\n    this.blob = blob;\n    this.name = name;\n    this.startTime = startTime;\n    this.wordArray = wordArray;\n};\n\n/* eslint-enable max-params */\n\nmodule.exports = RecordingResult;\n","/* global config */\n\nconst TranscriptionService = require('./AbstractTranscriptionService');\nconst Word = require('../word');\nconst audioRecorder = require('./../audioRecorder');\n\n/**\n * Implements a TranscriptionService for a Sphinx4 http server\n */\nconst SphinxService = function() {\n    // set the correct url\n    this.url = getURL();\n};\n\n/**\n * Subclass of AbstractTranscriptionService\n */\nSphinxService.prototype = Object.create(TranscriptionService.prototype);\n\n/**\n * Set the right constructor\n */\nSphinxService.constructor = SphinxService;\n\n/**\n * Overrides the sendRequest method from AbstractTranscriptionService\n * it will send the audio stream the a Sphinx4 server to get the transcription\n *\n * @param audioFileBlob the recorder audio stream an a single Blob\n * @param callback the callback function retrieving the server response\n */\nSphinxService.prototype.sendRequest = function(audioFileBlob, callback) {\n    console.log(`sending an audio file  to ${this.url}`);\n    console.log(`the audio file being sent: ${audioFileBlob}`);\n    const request = new XMLHttpRequest();\n\n    request.onreadystatechange = function() {\n        if (request.readyState === XMLHttpRequest.DONE\n            && request.status === 200) {\n            callback(request.responseText);\n        } else if (request.readyState === XMLHttpRequest.DONE) {\n            throw new Error(\n                `unable to accept response from sphinx server. status: ${\n                    request.status}`);\n        }\n\n        // if not ready no point to throw an error\n    };\n    request.open('POST', this.url);\n    request.setRequestHeader('Content-Type',\n        audioRecorder.determineCorrectFileType());\n    request.send(audioFileBlob);\n    console.log(`send ${audioFileBlob}`);\n};\n\n/**\n * Overrides the formatResponse method from AbstractTranscriptionService\n * It will parse the answer from the server in the expected format\n *\n * @param response the JSON body retrieved from the Sphinx4 server\n */\nSphinxService.prototype.formatResponse = function(response) {\n    const result = JSON.parse(response).objects;\n\n    // make sure to delete the session id object, which is always\n    // the first value in the JSON array\n\n    result.shift();\n    const array = [];\n\n    result.forEach(\n        word =>\n            word.filler\n                || array.push(new Word(word.word, word.start, word.end)));\n\n    return array;\n};\n\n/**\n * checks wether the reply is empty, or doesn't contain a correct JSON object\n * @param response the server response\n * @return {boolean} whether the response is valid\n */\nSphinxService.prototype.verify = function(response) {\n    console.log(`response from server:${response.toString()}`);\n\n    // test if server responded with a string object\n    if (typeof response !== 'string') {\n        return false;\n    }\n\n    // test if the string can be parsed into valid JSON\n    let json;\n\n    try {\n        json = JSON.parse(response);\n    } catch (error) {\n        console.log(error);\n\n        return false;\n    }\n\n    // check if the JSON has a \"objects\" value\n    if (json.objects === undefined) {\n        return false;\n    }\n\n    // get the \"objects\" value and check for a session ID\n    const array = json.objects;\n\n    if (!(array[0] && array[0]['session-id'])) {\n        return false;\n    }\n\n    // everything seems to be in order\n    return true;\n};\n\n/**\n * Gets the URL to the Sphinx4 server from the config file. If it's not there,\n * it will throw an error\n *\n * @returns {string} the URL to the sphinx4 server\n */\nfunction getURL() {\n    const message = 'config does not contain an url to a Sphinx4 https server';\n\n    if (config.sphinxURL === undefined) {\n        console.log(message);\n    } else {\n        const toReturn = config.sphinxURL;\n\n        if (toReturn.includes !== undefined && toReturn.includes('https://')) {\n            return toReturn;\n        }\n        console.log(message);\n\n    }\n}\n\nmodule.exports = SphinxService;\n","/**\n * Abstract class representing an interface to implement a speech-to-text\n * service on.\n */\nconst TranscriptionService = function() {\n    throw new Error('TranscriptionService is abstract and cannot be'\n        + 'created');\n};\n\n/**\n * This method can be used to send the recorder audio stream and\n * retrieve the answer from the transcription service from the callback\n *\n * @param {RecordingResult} recordingResult a recordingResult object which\n * includes the recorded audio stream as a blob\n * @param {Function} callback  which will retrieve the a RecordingResult with\n *        the answer as a WordArray\n */\nTranscriptionService.prototype.send = function send(recordingResult, callback) {\n    this.sendRequest(recordingResult.blob, response => {\n        if (this.verify(response)) {\n            recordingResult.wordArray = this.formatResponse(response);\n        } else {\n            console.log('the retrieved response from the server is not valid!');\n            recordingResult.wordArray = [];\n        }\n        callback(recordingResult);\n    });\n};\n\n/**\n * Abstract method which will rend the recorder audio stream to the implemented\n * transcription service and will retrieve an answer, which will be\n * called on the given callback method\n *\n * @param {Blob} audioBlob the recorded audio stream as a single Blob\n * @param {function} callback function which will retrieve the answer\n *                            from the service\n */\n// eslint-disable-next-line no-unused-vars\nTranscriptionService.prototype.sendRequest = function(audioBlob, callback) {\n    throw new Error('TranscriptionService.sendRequest is abstract');\n};\n\n/**\n * Abstract method which will parse the output from the implemented\n * transcription service to the expected format\n *\n * The transcriber class expect an array of word objects, where each word\n * object is one transcribed word by the service.\n *\n * The expected output of this method is an array of word objects, in\n * the correct order. That is, the first object in the array is the first word\n * being said, and the last word in the array is the last word being said\n *\n * @param response the answer from the speech-to-text server which needs to be\n *                 formatted\n * @return {Array<Word>} an array of Word objects\n */\n// eslint-disable-next-line no-unused-vars\nTranscriptionService.prototype.formatResponse = function(response) {\n    throw new Error('TranscriptionService.format is abstract');\n};\n\n/**\n * Abstract method which will verify that the response from the server is valid\n *\n * @param response the response from the server\n * @return {boolean} true if response is valid, false otherwise\n */\n// eslint-disable-next-line no-unused-vars\nTranscriptionService.prototype.verify = function(response) {\n    throw new Error('TranscriptionService.verify is abstract');\n};\n\nmodule.exports = TranscriptionService;\n","/**\n * An object representing a transcribed word, with some additional information\n * @param word the word\n * @param begin the time the word was started being uttered\n * @param end the time the word stopped being uttered\n */\nconst Word = function(word, begin, end) {\n    this.word = word;\n    this.begin = begin;\n    this.end = end;\n};\n\n/**\n * Get the string representation of the word\n * @returns {*} the word as a string\n */\nWord.prototype.getWord = function() {\n    return this.word;\n};\n\n/**\n * Get the time the word started being uttered\n * @returns {*} the start time as an integer\n */\nWord.prototype.getBeginTime = function() {\n    return this.begin;\n};\n\n/**\n * Get the time the word stopped being uttered\n * @returns {*} the end time as an integer\n */\nWord.prototype.getEndTime = function() {\n    return this.end;\n};\n\nmodule.exports = Word;\n"],"sourceRoot":""}